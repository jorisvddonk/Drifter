!(function(t) {
  var e = {};
  function i(n) {
    if (e[n]) return e[n].exports;
    var r = (e[n] = { i: n, l: !1, exports: {} });
    return t[n].call(r.exports, r, r.exports, i), (r.l = !0), r.exports;
  }
  (i.m = t),
    (i.c = e),
    (i.d = function(t, e, n) {
      i.o(t, e) ||
        Object.defineProperty(t, e, {
          configurable: !1,
          enumerable: !0,
          get: n
        });
    }),
    (i.n = function(t) {
      var e =
        t && t.__esModule
          ? function() {
              return t.default;
            }
          : function() {
              return t;
            };
      return i.d(e, 'a', e), e;
    }),
    (i.o = function(t, e) {
      return Object.prototype.hasOwnProperty.call(t, e);
    }),
    (i.p = ''),
    i((i.s = 41));
})([
  function(t, e, i) {
    t.exports = r;
    var n = i(4);
    function r(t, e, i) {
      (this.x = t || 0), (this.y = e || 0), (this.z = i || 0);
    }
    (r.ZERO = new r(0, 0, 0)),
      (r.UNIT_X = new r(1, 0, 0)),
      (r.UNIT_Y = new r(0, 1, 0)),
      (r.UNIT_Z = new r(0, 0, 1)),
      (r.prototype.cross = function(t, e) {
        var i = t.x,
          n = t.y,
          o = t.z,
          s = this.x,
          a = this.y,
          c = this.z;
        return (
          ((e = e || new r()).x = a * o - c * n),
          (e.y = c * i - s * o),
          (e.z = s * n - a * i),
          e
        );
      }),
      (r.prototype.set = function(t, e, i) {
        return (this.x = t), (this.y = e), (this.z = i), this;
      }),
      (r.prototype.setZero = function() {
        this.x = this.y = this.z = 0;
      }),
      (r.prototype.vadd = function(t, e) {
        if (!e) return new r(this.x + t.x, this.y + t.y, this.z + t.z);
        (e.x = t.x + this.x), (e.y = t.y + this.y), (e.z = t.z + this.z);
      }),
      (r.prototype.vsub = function(t, e) {
        if (!e) return new r(this.x - t.x, this.y - t.y, this.z - t.z);
        (e.x = this.x - t.x), (e.y = this.y - t.y), (e.z = this.z - t.z);
      }),
      (r.prototype.crossmat = function() {
        return new n([
          0,
          -this.z,
          this.y,
          this.z,
          0,
          -this.x,
          -this.y,
          this.x,
          0
        ]);
      }),
      (r.prototype.normalize = function() {
        var t = this.x,
          e = this.y,
          i = this.z,
          n = Math.sqrt(t * t + e * e + i * i);
        if (n > 0) {
          var r = 1 / n;
          (this.x *= r), (this.y *= r), (this.z *= r);
        } else (this.x = 0), (this.y = 0), (this.z = 0);
        return n;
      }),
      (r.prototype.unit = function(t) {
        t = t || new r();
        var e = this.x,
          i = this.y,
          n = this.z,
          o = Math.sqrt(e * e + i * i + n * n);
        return (
          o > 0
            ? ((o = 1 / o), (t.x = e * o), (t.y = i * o), (t.z = n * o))
            : ((t.x = 1), (t.y = 0), (t.z = 0)),
          t
        );
      }),
      (r.prototype.norm = function() {
        var t = this.x,
          e = this.y,
          i = this.z;
        return Math.sqrt(t * t + e * e + i * i);
      }),
      (r.prototype.length = r.prototype.norm),
      (r.prototype.norm2 = function() {
        return this.dot(this);
      }),
      (r.prototype.lengthSquared = r.prototype.norm2),
      (r.prototype.distanceTo = function(t) {
        var e = this.x,
          i = this.y,
          n = this.z,
          r = t.x,
          o = t.y,
          s = t.z;
        return Math.sqrt(
          (r - e) * (r - e) + (o - i) * (o - i) + (s - n) * (s - n)
        );
      }),
      (r.prototype.distanceSquared = function(t) {
        var e = this.x,
          i = this.y,
          n = this.z,
          r = t.x,
          o = t.y,
          s = t.z;
        return (r - e) * (r - e) + (o - i) * (o - i) + (s - n) * (s - n);
      }),
      (r.prototype.mult = function(t, e) {
        e = e || new r();
        var i = this.x,
          n = this.y,
          o = this.z;
        return (e.x = t * i), (e.y = t * n), (e.z = t * o), e;
      }),
      (r.prototype.vmul = function(t, e) {
        return (
          ((e = e || new r()).x = t.x * this.x),
          (e.y = t.y * this.y),
          (e.z = t.z * this.z),
          e
        );
      }),
      (r.prototype.scale = r.prototype.mult),
      (r.prototype.addScaledVector = function(t, e, i) {
        return (
          ((i = i || new r()).x = this.x + t * e.x),
          (i.y = this.y + t * e.y),
          (i.z = this.z + t * e.z),
          i
        );
      }),
      (r.prototype.dot = function(t) {
        return this.x * t.x + this.y * t.y + this.z * t.z;
      }),
      (r.prototype.isZero = function() {
        return 0 === this.x && 0 === this.y && 0 === this.z;
      }),
      (r.prototype.negate = function(t) {
        return (
          ((t = t || new r()).x = -this.x), (t.y = -this.y), (t.z = -this.z), t
        );
      });
    var o = new r(),
      s = new r();
    (r.prototype.tangents = function(t, e) {
      var i = this.norm();
      if (i > 0) {
        var n = o,
          r = 1 / i;
        n.set(this.x * r, this.y * r, this.z * r);
        var a = s;
        Math.abs(n.x) < 0.9
          ? (a.set(1, 0, 0), n.cross(a, t))
          : (a.set(0, 1, 0), n.cross(a, t)),
          n.cross(t, e);
      } else t.set(1, 0, 0), e.set(0, 1, 0);
    }),
      (r.prototype.toString = function() {
        return this.x + ',' + this.y + ',' + this.z;
      }),
      (r.prototype.toArray = function() {
        return [this.x, this.y, this.z];
      }),
      (r.prototype.copy = function(t) {
        return (this.x = t.x), (this.y = t.y), (this.z = t.z), this;
      }),
      (r.prototype.lerp = function(t, e, i) {
        var n = this.x,
          r = this.y,
          o = this.z;
        (i.x = n + (t.x - n) * e),
          (i.y = r + (t.y - r) * e),
          (i.z = o + (t.z - o) * e);
      }),
      (r.prototype.almostEquals = function(t, e) {
        return (
          void 0 === e && (e = 1e-6),
          !(
            Math.abs(this.x - t.x) > e ||
            Math.abs(this.y - t.y) > e ||
            Math.abs(this.z - t.z) > e
          )
        );
      }),
      (r.prototype.almostZero = function(t) {
        return (
          void 0 === t && (t = 1e-6),
          !(
            Math.abs(this.x) > t ||
            Math.abs(this.y) > t ||
            Math.abs(this.z) > t
          )
        );
      });
    var a = new r();
    (r.prototype.isAntiparallelTo = function(t, e) {
      return this.negate(a), a.almostEquals(t, e);
    }),
      (r.prototype.clone = function() {
        return new r(this.x, this.y, this.z);
      });
  },
  function(t, e, i) {
    t.exports = n;
    var n = i(1);
    i(0), i(2), i(13);
    function n() {
      (this.id = n.idCounter++),
        (this.type = 0),
        (this.boundingSphereRadius = 0),
        (this.collisionResponse = !0),
        (this.material = null),
        (this.body = null);
    }
    (n.prototype.constructor = n),
      (n.prototype.updateBoundingSphereRadius = function() {
        throw 'computeBoundingSphereRadius() not implemented for shape type ' +
          this.type;
      }),
      (n.prototype.volume = function() {
        throw 'volume() not implemented for shape type ' + this.type;
      }),
      (n.prototype.calculateLocalInertia = function(t, e) {
        throw 'calculateLocalInertia() not implemented for shape type ' +
          this.type;
      }),
      (n.idCounter = 0),
      (n.types = {
        SPHERE: 1,
        PLANE: 2,
        BOX: 4,
        COMPOUND: 8,
        CONVEXPOLYHEDRON: 16,
        HEIGHTFIELD: 32,
        PARTICLE: 64,
        CYLINDER: 128,
        TRIMESH: 256
      });
  },
  function(t, e, i) {
    t.exports = r;
    var n = i(0);
    function r(t, e, i, n) {
      (this.x = void 0 !== t ? t : 0),
        (this.y = void 0 !== e ? e : 0),
        (this.z = void 0 !== i ? i : 0),
        (this.w = void 0 !== n ? n : 1);
    }
    (r.prototype.set = function(t, e, i, n) {
      return (this.x = t), (this.y = e), (this.z = i), (this.w = n), this;
    }),
      (r.prototype.toString = function() {
        return this.x + ',' + this.y + ',' + this.z + ',' + this.w;
      }),
      (r.prototype.toArray = function() {
        return [this.x, this.y, this.z, this.w];
      }),
      (r.prototype.setFromAxisAngle = function(t, e) {
        var i = Math.sin(0.5 * e);
        return (
          (this.x = t.x * i),
          (this.y = t.y * i),
          (this.z = t.z * i),
          (this.w = Math.cos(0.5 * e)),
          this
        );
      }),
      (r.prototype.toAxisAngle = function(t) {
        (t = t || new n()), this.normalize();
        var e = 2 * Math.acos(this.w),
          i = Math.sqrt(1 - this.w * this.w);
        return (
          i < 0.001
            ? ((t.x = this.x), (t.y = this.y), (t.z = this.z))
            : ((t.x = this.x / i), (t.y = this.y / i), (t.z = this.z / i)),
          [t, e]
        );
      });
    var o = new n(),
      s = new n();
    r.prototype.setFromVectors = function(t, e) {
      if (t.isAntiparallelTo(e)) {
        var i = o,
          n = s;
        t.tangents(i, n), this.setFromAxisAngle(i, Math.PI);
      } else {
        var r = t.cross(e);
        (this.x = r.x),
          (this.y = r.y),
          (this.z = r.z),
          (this.w =
            Math.sqrt(Math.pow(t.norm(), 2) * Math.pow(e.norm(), 2)) +
            t.dot(e)),
          this.normalize();
      }
      return this;
    };
    new n(), new n(), new n();
    (r.prototype.mult = function(t, e) {
      e = e || new r();
      var i = this.x,
        n = this.y,
        o = this.z,
        s = this.w,
        a = t.x,
        c = t.y,
        l = t.z,
        u = t.w;
      return (
        (e.x = i * u + s * a + n * l - o * c),
        (e.y = n * u + s * c + o * a - i * l),
        (e.z = o * u + s * l + i * c - n * a),
        (e.w = s * u - i * a - n * c - o * l),
        e
      );
    }),
      (r.prototype.inverse = function(t) {
        var e = this.x,
          i = this.y,
          n = this.z,
          o = this.w;
        (t = t || new r()), this.conjugate(t);
        var s = 1 / (e * e + i * i + n * n + o * o);
        return (t.x *= s), (t.y *= s), (t.z *= s), (t.w *= s), t;
      }),
      (r.prototype.conjugate = function(t) {
        return (
          ((t = t || new r()).x = -this.x),
          (t.y = -this.y),
          (t.z = -this.z),
          (t.w = this.w),
          t
        );
      }),
      (r.prototype.normalize = function() {
        var t = Math.sqrt(
          this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
        );
        return (
          0 === t
            ? ((this.x = 0), (this.y = 0), (this.z = 0), (this.w = 0))
            : ((t = 1 / t),
              (this.x *= t),
              (this.y *= t),
              (this.z *= t),
              (this.w *= t)),
          this
        );
      }),
      (r.prototype.normalizeFast = function() {
        var t =
          (3 -
            (this.x * this.x +
              this.y * this.y +
              this.z * this.z +
              this.w * this.w)) /
          2;
        return (
          0 === t
            ? ((this.x = 0), (this.y = 0), (this.z = 0), (this.w = 0))
            : ((this.x *= t), (this.y *= t), (this.z *= t), (this.w *= t)),
          this
        );
      }),
      (r.prototype.vmult = function(t, e) {
        e = e || new n();
        var i = t.x,
          r = t.y,
          o = t.z,
          s = this.x,
          a = this.y,
          c = this.z,
          l = this.w,
          u = l * i + a * o - c * r,
          h = l * r + c * i - s * o,
          d = l * o + s * r - a * i,
          p = -s * i - a * r - c * o;
        return (
          (e.x = u * l + p * -s + h * -c - d * -a),
          (e.y = h * l + p * -a + d * -s - u * -c),
          (e.z = d * l + p * -c + u * -a - h * -s),
          e
        );
      }),
      (r.prototype.copy = function(t) {
        return (
          (this.x = t.x), (this.y = t.y), (this.z = t.z), (this.w = t.w), this
        );
      }),
      (r.prototype.toEuler = function(t, e) {
        var i, n, r;
        e = e || 'YZX';
        var o = this.x,
          s = this.y,
          a = this.z,
          c = this.w;
        switch (e) {
          case 'YZX':
            var l = o * s + a * c;
            if (
              (l > 0.499 &&
                ((i = 2 * Math.atan2(o, c)), (n = Math.PI / 2), (r = 0)),
              l < -0.499 &&
                ((i = -2 * Math.atan2(o, c)), (n = -Math.PI / 2), (r = 0)),
              isNaN(i))
            ) {
              var u = o * o,
                h = s * s,
                d = a * a;
              (i = Math.atan2(2 * s * c - 2 * o * a, 1 - 2 * h - 2 * d)),
                (n = Math.asin(2 * l)),
                (r = Math.atan2(2 * o * c - 2 * s * a, 1 - 2 * u - 2 * d));
            }
            break;
          default:
            throw new Error('Euler order ' + e + ' not supported yet.');
        }
        (t.y = i), (t.z = n), (t.x = r);
      }),
      (r.prototype.setFromEuler = function(t, e, i, n) {
        n = n || 'XYZ';
        var r = Math.cos(t / 2),
          o = Math.cos(e / 2),
          s = Math.cos(i / 2),
          a = Math.sin(t / 2),
          c = Math.sin(e / 2),
          l = Math.sin(i / 2);
        return (
          'XYZ' === n
            ? ((this.x = a * o * s + r * c * l),
              (this.y = r * c * s - a * o * l),
              (this.z = r * o * l + a * c * s),
              (this.w = r * o * s - a * c * l))
            : 'YXZ' === n
              ? ((this.x = a * o * s + r * c * l),
                (this.y = r * c * s - a * o * l),
                (this.z = r * o * l - a * c * s),
                (this.w = r * o * s + a * c * l))
              : 'ZXY' === n
                ? ((this.x = a * o * s - r * c * l),
                  (this.y = r * c * s + a * o * l),
                  (this.z = r * o * l + a * c * s),
                  (this.w = r * o * s - a * c * l))
                : 'ZYX' === n
                  ? ((this.x = a * o * s - r * c * l),
                    (this.y = r * c * s + a * o * l),
                    (this.z = r * o * l - a * c * s),
                    (this.w = r * o * s + a * c * l))
                  : 'YZX' === n
                    ? ((this.x = a * o * s + r * c * l),
                      (this.y = r * c * s + a * o * l),
                      (this.z = r * o * l - a * c * s),
                      (this.w = r * o * s - a * c * l))
                    : 'XZY' === n &&
                      ((this.x = a * o * s - r * c * l),
                      (this.y = r * c * s - a * o * l),
                      (this.z = r * o * l + a * c * s),
                      (this.w = r * o * s + a * c * l)),
          this
        );
      }),
      (r.prototype.clone = function() {
        return new r(this.x, this.y, this.z, this.w);
      }),
      (r.prototype.slerp = function(t, e, i) {
        i = i || new r();
        var n,
          o,
          s,
          a,
          c,
          l = this.x,
          u = this.y,
          h = this.z,
          d = this.w,
          p = t.x,
          f = t.y,
          m = t.z,
          g = t.w;
        return (
          (o = l * p + u * f + h * m + d * g) < 0 &&
            ((o = -o), (p = -p), (f = -f), (m = -m), (g = -g)),
          1 - o > 1e-6
            ? ((n = Math.acos(o)),
              (s = Math.sin(n)),
              (a = Math.sin((1 - e) * n) / s),
              (c = Math.sin(e * n) / s))
            : ((a = 1 - e), (c = e)),
          (i.x = a * l + c * p),
          (i.y = a * u + c * f),
          (i.z = a * h + c * m),
          (i.w = a * d + c * g),
          i
        );
      }),
      (r.prototype.integrate = function(t, e, i, n) {
        n = n || new r();
        var o = t.x * i.x,
          s = t.y * i.y,
          a = t.z * i.z,
          c = this.x,
          l = this.y,
          u = this.z,
          h = this.w,
          d = 0.5 * e;
        return (
          (n.x += d * (o * h + s * u - a * l)),
          (n.y += d * (s * h + a * c - o * u)),
          (n.z += d * (a * h + o * l - s * c)),
          (n.w += d * (-o * c - s * l - a * u)),
          n
        );
      });
  },
  function(t, e, i) {
    var n = i(0);
    i(12);
    function r(t) {
      (t = t || {}),
        (this.lowerBound = new n()),
        t.lowerBound && this.lowerBound.copy(t.lowerBound),
        (this.upperBound = new n()),
        t.upperBound && this.upperBound.copy(t.upperBound);
    }
    t.exports = r;
    var o = new n();
    (r.prototype.setFromPoints = function(t, e, i, n) {
      var r = this.lowerBound,
        s = this.upperBound,
        a = i;
      r.copy(t[0]), a && a.vmult(r, r), s.copy(r);
      for (var c = 1; c < t.length; c++) {
        var l = t[c];
        a && (a.vmult(l, o), (l = o)),
          l.x > s.x && (s.x = l.x),
          l.x < r.x && (r.x = l.x),
          l.y > s.y && (s.y = l.y),
          l.y < r.y && (r.y = l.y),
          l.z > s.z && (s.z = l.z),
          l.z < r.z && (r.z = l.z);
      }
      return (
        e && (e.vadd(r, r), e.vadd(s, s)),
        n &&
          ((r.x -= n),
          (r.y -= n),
          (r.z -= n),
          (s.x += n),
          (s.y += n),
          (s.z += n)),
        this
      );
    }),
      (r.prototype.copy = function(t) {
        return (
          this.lowerBound.copy(t.lowerBound),
          this.upperBound.copy(t.upperBound),
          this
        );
      }),
      (r.prototype.clone = function() {
        return new r().copy(this);
      }),
      (r.prototype.extend = function(t) {
        (this.lowerBound.x = Math.min(this.lowerBound.x, t.lowerBound.x)),
          (this.upperBound.x = Math.max(this.upperBound.x, t.upperBound.x)),
          (this.lowerBound.y = Math.min(this.lowerBound.y, t.lowerBound.y)),
          (this.upperBound.y = Math.max(this.upperBound.y, t.upperBound.y)),
          (this.lowerBound.z = Math.min(this.lowerBound.z, t.lowerBound.z)),
          (this.upperBound.z = Math.max(this.upperBound.z, t.upperBound.z));
      }),
      (r.prototype.overlaps = function(t) {
        var e = this.lowerBound,
          i = this.upperBound,
          n = t.lowerBound,
          r = t.upperBound,
          o = (n.x <= i.x && i.x <= r.x) || (e.x <= r.x && r.x <= i.x),
          s = (n.y <= i.y && i.y <= r.y) || (e.y <= r.y && r.y <= i.y),
          a = (n.z <= i.z && i.z <= r.z) || (e.z <= r.z && r.z <= i.z);
        return o && s && a;
      }),
      (r.prototype.volume = function() {
        var t = this.lowerBound,
          e = this.upperBound;
        return (e.x - t.x) * (e.y - t.y) * (e.z - t.z);
      }),
      (r.prototype.contains = function(t) {
        var e = this.lowerBound,
          i = this.upperBound,
          n = t.lowerBound,
          r = t.upperBound;
        return (
          e.x <= n.x &&
          i.x >= r.x &&
          e.y <= n.y &&
          i.y >= r.y &&
          e.z <= n.z &&
          i.z >= r.z
        );
      }),
      (r.prototype.getCorners = function(t, e, i, n, r, o, s, a) {
        var c = this.lowerBound,
          l = this.upperBound;
        t.copy(c),
          e.set(l.x, c.y, c.z),
          i.set(l.x, l.y, c.z),
          n.set(c.x, l.y, l.z),
          r.set(l.x, c.y, c.z),
          o.set(c.x, l.y, c.z),
          s.set(c.x, c.y, l.z),
          a.copy(l);
      });
    var s = [
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n()
    ];
    (r.prototype.toLocalFrame = function(t, e) {
      var i = s,
        n = i[0],
        r = i[1],
        o = i[2],
        a = i[3],
        c = i[4],
        l = i[5],
        u = i[6],
        h = i[7];
      this.getCorners(n, r, o, a, c, l, u, h);
      for (var d = 0; 8 !== d; d++) {
        var p = i[d];
        t.pointToLocal(p, p);
      }
      return e.setFromPoints(i);
    }),
      (r.prototype.toWorldFrame = function(t, e) {
        var i = s,
          n = i[0],
          r = i[1],
          o = i[2],
          a = i[3],
          c = i[4],
          l = i[5],
          u = i[6],
          h = i[7];
        this.getCorners(n, r, o, a, c, l, u, h);
        for (var d = 0; 8 !== d; d++) {
          var p = i[d];
          t.pointToWorld(p, p);
        }
        return e.setFromPoints(i);
      }),
      (r.prototype.overlapsRay = function(t) {
        var e = 1 / t._direction.x,
          i = 1 / t._direction.y,
          n = 1 / t._direction.z,
          r = (this.lowerBound.x - t.from.x) * e,
          o = (this.upperBound.x - t.from.x) * e,
          s = (this.lowerBound.y - t.from.y) * i,
          a = (this.upperBound.y - t.from.y) * i,
          c = (this.lowerBound.z - t.from.z) * n,
          l = (this.upperBound.z - t.from.z) * n,
          u = Math.max(
            Math.max(Math.min(r, o), Math.min(s, a)),
            Math.min(c, l)
          ),
          h = Math.min(
            Math.min(Math.max(r, o), Math.max(s, a)),
            Math.max(c, l)
          );
        return !(h < 0) && !(u > h);
      });
  },
  function(t, e, i) {
    t.exports = r;
    var n = i(0);
    function r(t) {
      this.elements = t || [0, 0, 0, 0, 0, 0, 0, 0, 0];
    }
    (r.prototype.identity = function() {
      var t = this.elements;
      (t[0] = 1),
        (t[1] = 0),
        (t[2] = 0),
        (t[3] = 0),
        (t[4] = 1),
        (t[5] = 0),
        (t[6] = 0),
        (t[7] = 0),
        (t[8] = 1);
    }),
      (r.prototype.setZero = function() {
        var t = this.elements;
        (t[0] = 0),
          (t[1] = 0),
          (t[2] = 0),
          (t[3] = 0),
          (t[4] = 0),
          (t[5] = 0),
          (t[6] = 0),
          (t[7] = 0),
          (t[8] = 0);
      }),
      (r.prototype.setTrace = function(t) {
        var e = this.elements;
        (e[0] = t.x), (e[4] = t.y), (e[8] = t.z);
      }),
      (r.prototype.getTrace = function(t) {
        t = t || new n();
        var e = this.elements;
        (t.x = e[0]), (t.y = e[4]), (t.z = e[8]);
      }),
      (r.prototype.vmult = function(t, e) {
        e = e || new n();
        var i = this.elements,
          r = t.x,
          o = t.y,
          s = t.z;
        return (
          (e.x = i[0] * r + i[1] * o + i[2] * s),
          (e.y = i[3] * r + i[4] * o + i[5] * s),
          (e.z = i[6] * r + i[7] * o + i[8] * s),
          e
        );
      }),
      (r.prototype.smult = function(t) {
        for (var e = 0; e < this.elements.length; e++) this.elements[e] *= t;
      }),
      (r.prototype.mmult = function(t, e) {
        for (var i = e || new r(), n = 0; n < 3; n++)
          for (var o = 0; o < 3; o++) {
            for (var s = 0, a = 0; a < 3; a++)
              s += t.elements[n + 3 * a] * this.elements[a + 3 * o];
            i.elements[n + 3 * o] = s;
          }
        return i;
      }),
      (r.prototype.scale = function(t, e) {
        e = e || new r();
        for (var i = this.elements, n = e.elements, o = 0; 3 !== o; o++)
          (n[3 * o + 0] = t.x * i[3 * o + 0]),
            (n[3 * o + 1] = t.y * i[3 * o + 1]),
            (n[3 * o + 2] = t.z * i[3 * o + 2]);
        return e;
      }),
      (r.prototype.solve = function(t, e) {
        e = e || new n();
        for (var i, r = [], o = 0; o < 12; o++) r.push(0);
        for (o = 0; o < 3; o++)
          for (i = 0; i < 3; i++) r[o + 4 * i] = this.elements[o + 3 * i];
        (r[3] = t.x), (r[7] = t.y), (r[11] = t.z);
        var s,
          a,
          c = 3,
          l = c;
        do {
          if (0 === r[(o = l - c) + 4 * o])
            for (i = o + 1; i < l; i++)
              if (0 !== r[o + 4 * i]) {
                s = 4;
                do {
                  r[(a = 4 - s) + 4 * o] += r[a + 4 * i];
                } while (--s);
                break;
              }
          if (0 !== r[o + 4 * o])
            for (i = o + 1; i < l; i++) {
              var u = r[o + 4 * i] / r[o + 4 * o];
              s = 4;
              do {
                r[(a = 4 - s) + 4 * i] =
                  a <= o ? 0 : r[a + 4 * i] - r[a + 4 * o] * u;
              } while (--s);
            }
        } while (--c);
        if (
          ((e.z = r[11] / r[10]),
          (e.y = (r[7] - r[6] * e.z) / r[5]),
          (e.x = (r[3] - r[2] * e.z - r[1] * e.y) / r[0]),
          isNaN(e.x) ||
            isNaN(e.y) ||
            isNaN(e.z) ||
            e.x === 1 / 0 ||
            e.y === 1 / 0 ||
            e.z === 1 / 0)
        )
          throw 'Could not solve equation! Got x=[' +
            e.toString() +
            '], b=[' +
            t.toString() +
            '], A=[' +
            this.toString() +
            ']';
        return e;
      }),
      (r.prototype.e = function(t, e, i) {
        if (void 0 === i) return this.elements[e + 3 * t];
        this.elements[e + 3 * t] = i;
      }),
      (r.prototype.copy = function(t) {
        for (var e = 0; e < t.elements.length; e++)
          this.elements[e] = t.elements[e];
        return this;
      }),
      (r.prototype.toString = function() {
        for (var t = '', e = 0; e < 9; e++) t += this.elements[e] + ',';
        return t;
      }),
      (r.prototype.reverse = function(t) {
        t = t || new r();
        for (var e, i = [], n = 0; n < 18; n++) i.push(0);
        for (n = 0; n < 3; n++)
          for (e = 0; e < 3; e++) i[n + 6 * e] = this.elements[n + 3 * e];
        (i[3] = 1),
          (i[9] = 0),
          (i[15] = 0),
          (i[4] = 0),
          (i[10] = 1),
          (i[16] = 0),
          (i[5] = 0),
          (i[11] = 0),
          (i[17] = 1);
        var o,
          s,
          a = 3,
          c = a;
        do {
          if (0 === i[(n = c - a) + 6 * n])
            for (e = n + 1; e < c; e++)
              if (0 !== i[n + 6 * e]) {
                o = 6;
                do {
                  i[(s = 6 - o) + 6 * n] += i[s + 6 * e];
                } while (--o);
                break;
              }
          if (0 !== i[n + 6 * n])
            for (e = n + 1; e < c; e++) {
              var l = i[n + 6 * e] / i[n + 6 * n];
              o = 6;
              do {
                i[(s = 6 - o) + 6 * e] =
                  s <= n ? 0 : i[s + 6 * e] - i[s + 6 * n] * l;
              } while (--o);
            }
        } while (--a);
        n = 2;
        do {
          e = n - 1;
          do {
            l = i[n + 6 * e] / i[n + 6 * n];
            o = 6;
            do {
              i[(s = 6 - o) + 6 * e] = i[s + 6 * e] - i[s + 6 * n] * l;
            } while (--o);
          } while (e--);
        } while (--n);
        n = 2;
        do {
          l = 1 / i[n + 6 * n];
          o = 6;
          do {
            i[(s = 6 - o) + 6 * n] = i[s + 6 * n] * l;
          } while (--o);
        } while (n--);
        n = 2;
        do {
          e = 2;
          do {
            if (((s = i[3 + e + 6 * n]), isNaN(s) || s === 1 / 0))
              throw 'Could not reverse! A=[' + this.toString() + ']';
            t.e(n, e, s);
          } while (e--);
        } while (n--);
        return t;
      }),
      (r.prototype.setRotationFromQuaternion = function(t) {
        var e = t.x,
          i = t.y,
          n = t.z,
          r = t.w,
          o = e + e,
          s = i + i,
          a = n + n,
          c = e * o,
          l = e * s,
          u = e * a,
          h = i * s,
          d = i * a,
          p = n * a,
          f = r * o,
          m = r * s,
          g = r * a,
          v = this.elements;
        return (
          (v[0] = 1 - (h + p)),
          (v[1] = l - g),
          (v[2] = u + m),
          (v[3] = l + g),
          (v[4] = 1 - (c + p)),
          (v[5] = d - f),
          (v[6] = u - m),
          (v[7] = d + f),
          (v[8] = 1 - (c + h)),
          this
        );
      }),
      (r.prototype.transpose = function(t) {
        for (
          var e = (t = t || new r()).elements, i = this.elements, n = 0;
          3 !== n;
          n++
        )
          for (var o = 0; 3 !== o; o++) e[3 * n + o] = i[3 * o + n];
        return t;
      });
  },
  function(t, e, i) {
    t.exports = l;
    var n = i(24),
      r = (i(1), i(0)),
      o = i(4),
      s = i(2),
      a = (i(13), i(3)),
      c = i(17);
    function l(t) {
      (t = t || {}),
        n.apply(this),
        (this.id = l.idCounter++),
        (this.world = null),
        (this.preStep = null),
        (this.postStep = null),
        (this.vlambda = new r()),
        (this.collisionFilterGroup =
          'number' == typeof t.collisionFilterGroup
            ? t.collisionFilterGroup
            : 1),
        (this.collisionFilterMask =
          'number' == typeof t.collisionFilterMask ? t.collisionFilterMask : 1),
        (this.collisionResponse = !0),
        (this.position = new r()),
        (this.previousPosition = new r()),
        (this.interpolatedPosition = new r()),
        (this.initPosition = new r()),
        t.position &&
          (this.position.copy(t.position),
          this.previousPosition.copy(t.position),
          this.interpolatedPosition.copy(t.position),
          this.initPosition.copy(t.position)),
        (this.velocity = new r()),
        t.velocity && this.velocity.copy(t.velocity),
        (this.initVelocity = new r()),
        (this.force = new r());
      var e = 'number' == typeof t.mass ? t.mass : 0;
      (this.mass = e),
        (this.invMass = e > 0 ? 1 / e : 0),
        (this.material = t.material || null),
        (this.linearDamping =
          'number' == typeof t.linearDamping ? t.linearDamping : 0.01),
        (this.type = e <= 0 ? l.STATIC : l.DYNAMIC),
        typeof t.type == typeof l.STATIC && (this.type = t.type),
        (this.allowSleep = void 0 === t.allowSleep || t.allowSleep),
        (this.sleepState = 0),
        (this.sleepSpeedLimit =
          void 0 !== t.sleepSpeedLimit ? t.sleepSpeedLimit : 0.1),
        (this.sleepTimeLimit =
          void 0 !== t.sleepTimeLimit ? t.sleepTimeLimit : 1),
        (this.timeLastSleepy = 0),
        (this._wakeUpAfterNarrowphase = !1),
        (this.torque = new r()),
        (this.quaternion = new s()),
        (this.initQuaternion = new s()),
        (this.previousQuaternion = new s()),
        (this.interpolatedQuaternion = new s()),
        t.quaternion &&
          (this.quaternion.copy(t.quaternion),
          this.initQuaternion.copy(t.quaternion),
          this.previousQuaternion.copy(t.quaternion),
          this.interpolatedQuaternion.copy(t.quaternion)),
        (this.angularVelocity = new r()),
        t.angularVelocity && this.angularVelocity.copy(t.angularVelocity),
        (this.initAngularVelocity = new r()),
        (this.shapes = []),
        (this.shapeOffsets = []),
        (this.shapeOrientations = []),
        (this.inertia = new r()),
        (this.invInertia = new r()),
        (this.invInertiaWorld = new o()),
        (this.invMassSolve = 0),
        (this.invInertiaSolve = new r()),
        (this.invInertiaWorldSolve = new o()),
        (this.fixedRotation = void 0 !== t.fixedRotation && t.fixedRotation),
        (this.angularDamping =
          void 0 !== t.angularDamping ? t.angularDamping : 0.01),
        (this.linearFactor = new r(1, 1, 1)),
        t.linearFactor && this.linearFactor.copy(t.linearFactor),
        (this.angularFactor = new r(1, 1, 1)),
        t.angularFactor && this.angularFactor.copy(t.angularFactor),
        (this.aabb = new a()),
        (this.aabbNeedsUpdate = !0),
        (this.wlambda = new r()),
        t.shape && this.addShape(t.shape),
        this.updateMassProperties();
    }
    (l.prototype = new n()),
      (l.prototype.constructor = l),
      (l.COLLIDE_EVENT_NAME = 'collide'),
      (l.DYNAMIC = 1),
      (l.STATIC = 2),
      (l.KINEMATIC = 4),
      (l.AWAKE = 0),
      (l.SLEEPY = 1),
      (l.SLEEPING = 2),
      (l.idCounter = 0),
      (l.wakeupEvent = { type: 'wakeup' }),
      (l.prototype.wakeUp = function() {
        var t = this.sleepState;
        (this.sleepState = 0),
          (this._wakeUpAfterNarrowphase = !1),
          t === l.SLEEPING && this.dispatchEvent(l.wakeupEvent);
      }),
      (l.prototype.sleep = function() {
        (this.sleepState = l.SLEEPING),
          this.velocity.set(0, 0, 0),
          this.angularVelocity.set(0, 0, 0),
          (this._wakeUpAfterNarrowphase = !1);
      }),
      (l.sleepyEvent = { type: 'sleepy' }),
      (l.sleepEvent = { type: 'sleep' }),
      (l.prototype.sleepTick = function(t) {
        if (this.allowSleep) {
          var e = this.sleepState,
            i = this.velocity.norm2() + this.angularVelocity.norm2(),
            n = Math.pow(this.sleepSpeedLimit, 2);
          e === l.AWAKE && i < n
            ? ((this.sleepState = l.SLEEPY),
              (this.timeLastSleepy = t),
              this.dispatchEvent(l.sleepyEvent))
            : e === l.SLEEPY && i > n
              ? this.wakeUp()
              : e === l.SLEEPY &&
                t - this.timeLastSleepy > this.sleepTimeLimit &&
                (this.sleep(), this.dispatchEvent(l.sleepEvent));
        }
      }),
      (l.prototype.updateSolveMassProperties = function() {
        this.sleepState === l.SLEEPING || this.type === l.KINEMATIC
          ? ((this.invMassSolve = 0),
            this.invInertiaSolve.setZero(),
            this.invInertiaWorldSolve.setZero())
          : ((this.invMassSolve = this.invMass),
            this.invInertiaSolve.copy(this.invInertia),
            this.invInertiaWorldSolve.copy(this.invInertiaWorld));
      }),
      (l.prototype.pointToLocalFrame = function(t, e) {
        e = e || new r();
        return (
          t.vsub(this.position, e), this.quaternion.conjugate().vmult(e, e), e
        );
      }),
      (l.prototype.vectorToLocalFrame = function(t, e) {
        e = e || new r();
        return this.quaternion.conjugate().vmult(t, e), e;
      }),
      (l.prototype.pointToWorldFrame = function(t, e) {
        e = e || new r();
        return this.quaternion.vmult(t, e), e.vadd(this.position, e), e;
      }),
      (l.prototype.vectorToWorldFrame = function(t, e) {
        e = e || new r();
        return this.quaternion.vmult(t, e), e;
      });
    var u = new r(),
      h = new s();
    (l.prototype.addShape = function(t, e, i) {
      var n = new r(),
        o = new s();
      return (
        e && n.copy(e),
        i && o.copy(i),
        this.shapes.push(t),
        this.shapeOffsets.push(n),
        this.shapeOrientations.push(o),
        this.updateMassProperties(),
        this.updateBoundingRadius(),
        (this.aabbNeedsUpdate = !0),
        (t.body = this),
        this
      );
    }),
      (l.prototype.updateBoundingRadius = function() {
        for (
          var t = this.shapes,
            e = this.shapeOffsets,
            i = t.length,
            n = 0,
            r = 0;
          r !== i;
          r++
        ) {
          var o = t[r];
          o.updateBoundingSphereRadius();
          var s = e[r].norm(),
            a = o.boundingSphereRadius;
          s + a > n && (n = s + a);
        }
        this.boundingRadius = n;
      });
    var d = new a();
    l.prototype.computeAABB = function() {
      for (
        var t = this.shapes,
          e = this.shapeOffsets,
          i = this.shapeOrientations,
          n = t.length,
          r = u,
          o = h,
          s = this.quaternion,
          a = this.aabb,
          c = d,
          l = 0;
        l !== n;
        l++
      ) {
        var p = t[l];
        s.vmult(e[l], r),
          r.vadd(this.position, r),
          i[l].mult(s, o),
          p.calculateWorldAABB(r, o, c.lowerBound, c.upperBound),
          0 === l ? a.copy(c) : a.extend(c);
      }
      this.aabbNeedsUpdate = !1;
    };
    var p = new o(),
      f = new o();
    new o();
    l.prototype.updateInertiaWorld = function(t) {
      var e = this.invInertia;
      if (e.x !== e.y || e.y !== e.z || t) {
        var i = p,
          n = f;
        i.setRotationFromQuaternion(this.quaternion),
          i.transpose(n),
          i.scale(e, i),
          i.mmult(n, this.invInertiaWorld);
      } else;
    };
    new r();
    var m = new r();
    l.prototype.applyForce = function(t, e) {
      if (this.type === l.DYNAMIC) {
        var i = m;
        e.cross(t, i),
          this.force.vadd(t, this.force),
          this.torque.vadd(i, this.torque);
      }
    };
    var g = new r(),
      v = new r();
    l.prototype.applyLocalForce = function(t, e) {
      if (this.type === l.DYNAMIC) {
        var i = g,
          n = v;
        this.vectorToWorldFrame(t, i),
          this.vectorToWorldFrame(e, n),
          this.applyForce(i, n);
      }
    };
    new r();
    var y = new r(),
      w = new r();
    l.prototype.applyImpulse = function(t, e) {
      if (this.type === l.DYNAMIC) {
        var i = e,
          n = y;
        n.copy(t),
          n.mult(this.invMass, n),
          this.velocity.vadd(n, this.velocity);
        var r = w;
        i.cross(t, r),
          this.invInertiaWorld.vmult(r, r),
          this.angularVelocity.vadd(r, this.angularVelocity);
      }
    };
    var M = new r(),
      E = new r();
    l.prototype.applyLocalImpulse = function(t, e) {
      if (this.type === l.DYNAMIC) {
        var i = M,
          n = E;
        this.vectorToWorldFrame(t, i),
          this.vectorToWorldFrame(e, n),
          this.applyImpulse(i, n);
      }
    };
    var b = new r();
    (l.prototype.updateMassProperties = function() {
      var t = b;
      this.invMass = this.mass > 0 ? 1 / this.mass : 0;
      var e = this.inertia,
        i = this.fixedRotation;
      this.computeAABB(),
        t.set(
          (this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2,
          (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2,
          (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2
        ),
        c.calculateInertia(t, this.mass, e),
        this.invInertia.set(
          e.x > 0 && !i ? 1 / e.x : 0,
          e.y > 0 && !i ? 1 / e.y : 0,
          e.z > 0 && !i ? 1 / e.z : 0
        ),
        this.updateInertiaWorld(!0);
    }),
      (l.prototype.getVelocityAtWorldPoint = function(t, e) {
        var i = new r();
        return (
          t.vsub(this.position, i),
          this.angularVelocity.cross(i, e),
          this.velocity.vadd(e, e),
          e
        );
      });
    new r(), new r(), new s(), new s();
    l.prototype.integrate = function(t, e, i) {
      if (
        (this.previousPosition.copy(this.position),
        this.previousQuaternion.copy(this.quaternion),
        (this.type === l.DYNAMIC || this.type === l.KINEMATIC) &&
          this.sleepState !== l.SLEEPING)
      ) {
        var n = this.velocity,
          r = this.angularVelocity,
          o = this.position,
          s = this.force,
          a = this.torque,
          c = this.quaternion,
          u = this.invMass,
          h = this.invInertiaWorld,
          d = this.linearFactor,
          p = u * t;
        (n.x += s.x * p * d.x), (n.y += s.y * p * d.y), (n.z += s.z * p * d.z);
        var f = h.elements,
          m = this.angularFactor,
          g = a.x * m.x,
          v = a.y * m.y,
          y = a.z * m.z;
        (r.x += t * (f[0] * g + f[1] * v + f[2] * y)),
          (r.y += t * (f[3] * g + f[4] * v + f[5] * y)),
          (r.z += t * (f[6] * g + f[7] * v + f[8] * y)),
          (o.x += n.x * t),
          (o.y += n.y * t),
          (o.z += n.z * t),
          c.integrate(this.angularVelocity, t, this.angularFactor, c),
          e && (i ? c.normalizeFast() : c.normalize()),
          (this.aabbNeedsUpdate = !0),
          this.updateInertiaWorld();
      }
    };
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(11),
      r = i(0);
    i(4);
    function o(t, e, i) {
      (i = void 0 !== i ? i : 1e6),
        n.call(this, t, e, 0, i),
        (this.restitution = 0),
        (this.ri = new r()),
        (this.rj = new r()),
        (this.ni = new r());
    }
    (o.prototype = new n()), (o.prototype.constructor = o);
    var s = new r(),
      a = new r(),
      c = new r();
    o.prototype.computeB = function(t) {
      var e = this.a,
        i = this.b,
        n = this.bi,
        r = this.bj,
        o = this.ri,
        l = this.rj,
        u = s,
        h = a,
        d = n.velocity,
        p = n.angularVelocity,
        f = (n.force, n.torque, r.velocity),
        m = r.angularVelocity,
        g = (r.force, r.torque, c),
        v = this.jacobianElementA,
        y = this.jacobianElementB,
        w = this.ni;
      o.cross(w, u),
        l.cross(w, h),
        w.negate(v.spatial),
        u.negate(v.rotational),
        y.spatial.copy(w),
        y.rotational.copy(h),
        g.copy(r.position),
        g.vadd(l, g),
        g.vsub(n.position, g),
        g.vsub(o, g);
      var M = w.dot(g),
        E = this.restitution + 1;
      return (
        -M * e -
        (E * f.dot(w) - E * d.dot(w) + m.dot(h) - p.dot(u)) * i -
        t * this.computeGiMf()
      );
    };
    var l = new r(),
      u = new r(),
      h = new r(),
      d = new r(),
      p = new r();
    o.prototype.getImpactVelocityAlongNormal = function() {
      var t = l,
        e = u,
        i = h,
        n = d,
        r = p;
      return (
        this.bi.position.vadd(this.ri, i),
        this.bj.position.vadd(this.rj, n),
        this.bi.getVelocityAtWorldPoint(i, t),
        this.bj.getVelocityAtWorldPoint(n, e),
        t.vsub(e, r),
        this.ni.dot(r)
      );
    };
  },
  function(t, e, i) {
    t.exports = {
      version: i(56).version,
      AABB: i(3),
      ArrayCollisionMatrix: i(28),
      Body: i(5),
      Box: i(17),
      Broadphase: i(18),
      Constraint: i(10),
      ContactEquation: i(6),
      Narrowphase: i(30),
      ConeTwistConstraint: i(58),
      ContactMaterial: i(33),
      ConvexPolyhedron: i(8),
      Cylinder: i(60),
      DistanceConstraint: i(61),
      Equation: i(11),
      EventTarget: i(24),
      FrictionEquation: i(25),
      GSSolver: i(34),
      GridBroadphase: i(62),
      Heightfield: i(63),
      HingeConstraint: i(35),
      LockConstraint: i(64),
      Mat3: i(4),
      Material: i(13),
      NaiveBroadphase: i(36),
      ObjectCollisionMatrix: i(65),
      Pool: i(32),
      Particle: i(37),
      Plane: i(29),
      PointToPointConstraint: i(21),
      Quaternion: i(2),
      Ray: i(19),
      RaycastVehicle: i(66),
      RaycastResult: i(14),
      RigidVehicle: i(68),
      RotationalEquation: i(22),
      RotationalMotorEquation: i(26),
      SAPBroadphase: i(69),
      SPHSystem: i(70),
      Shape: i(1),
      Solver: i(20),
      Sphere: i(38),
      SplitSolver: i(71),
      Spring: i(72),
      Transform: i(9),
      Trimesh: i(73),
      Vec3: i(0),
      Vec3Pool: i(31),
      World: i(75)
    };
  },
  function(t, e, i) {
    t.exports = s;
    var n = i(1),
      r = i(0),
      o = (i(2), i(9));
    function s(t, e, i) {
      n.call(this),
        (this.type = n.types.CONVEXPOLYHEDRON),
        (this.vertices = t || []),
        (this.worldVertices = []),
        (this.worldVerticesNeedsUpdate = !0),
        (this.faces = e || []),
        (this.faceNormals = []),
        this.computeNormals(),
        (this.worldFaceNormalsNeedsUpdate = !0),
        (this.worldFaceNormals = []),
        (this.uniqueEdges = []),
        (this.uniqueAxes = i ? i.slice() : null),
        this.computeEdges(),
        this.updateBoundingSphereRadius();
    }
    (s.prototype = new n()), (s.prototype.constructor = s);
    var a = new r();
    (s.prototype.computeEdges = function() {
      var t = this.faces,
        e = this.vertices,
        i = (e.length, this.uniqueEdges);
      i.length = 0;
      for (var n = a, r = 0; r !== t.length; r++)
        for (var o = t[r], s = o.length, c = 0; c !== s; c++) {
          var l = (c + 1) % s;
          e[o[c]].vsub(e[o[l]], n), n.normalize();
          for (var u = !1, h = 0; h !== i.length; h++)
            if (i[h].almostEquals(n) || i[h].almostEquals(n)) {
              u = !0;
              break;
            }
          u || i.push(n.clone());
        }
    }),
      (s.prototype.computeNormals = function() {
        this.faceNormals.length = this.faces.length;
        for (var t = 0; t < this.faces.length; t++) {
          for (var e = 0; e < this.faces[t].length; e++)
            if (!this.vertices[this.faces[t][e]])
              throw new Error('Vertex ' + this.faces[t][e] + ' not found!');
          var i = this.faceNormals[t] || new r();
          this.getFaceNormal(t, i), i.negate(i), (this.faceNormals[t] = i);
          var n = this.vertices[this.faces[t][0]];
          if (i.dot(n) < 0) {
            console.error(
              '.faceNormals[' +
                t +
                '] = Vec3(' +
                i.toString() +
                ') looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.'
            );
            for (e = 0; e < this.faces[t].length; e++)
              console.warn(
                '.vertices[' +
                  this.faces[t][e] +
                  '] = Vec3(' +
                  this.vertices[this.faces[t][e]].toString() +
                  ')'
              );
          }
        }
      });
    var c = new r(),
      l = new r();
    (s.computeNormal = function(t, e, i, n) {
      e.vsub(t, l), i.vsub(e, c), c.cross(l, n), n.isZero() || n.normalize();
    }),
      (s.prototype.getFaceNormal = function(t, e) {
        var i = this.faces[t],
          n = this.vertices[i[0]],
          r = this.vertices[i[1]],
          o = this.vertices[i[2]];
        return s.computeNormal(n, r, o, e);
      });
    var u = new r();
    s.prototype.clipAgainstHull = function(t, e, i, n, o, s, a, c, l) {
      for (
        var h = u, d = -1, p = -Number.MAX_VALUE, f = 0;
        f < i.faces.length;
        f++
      ) {
        h.copy(i.faceNormals[f]), o.vmult(h, h);
        var m = h.dot(s);
        m > p && ((p = m), (d = f));
      }
      for (var g = [], v = i.faces[d], y = v.length, w = 0; w < y; w++) {
        var M = i.vertices[v[w]],
          E = new r();
        E.copy(M), o.vmult(E, E), n.vadd(E, E), g.push(E);
      }
      d >= 0 && this.clipFaceAgainstHull(s, t, e, g, a, c, l);
    };
    var h = new r(),
      d = new r(),
      p = new r(),
      f = new r(),
      m = new r(),
      g = new r();
    s.prototype.findSeparatingAxis = function(t, e, i, n, r, o, s, a) {
      var c = h,
        l = d,
        u = p,
        v = f,
        y = m,
        w = g,
        M = Number.MAX_VALUE;
      if (this.uniqueAxes)
        for (b = 0; b !== this.uniqueAxes.length; b++) {
          if (
            (i.vmult(this.uniqueAxes[b], c),
            !1 === (T = this.testSepAxis(c, t, e, i, n, r)))
          )
            return !1;
          T < M && ((M = T), o.copy(c));
        }
      else
        for (var E = s ? s.length : this.faces.length, b = 0; b < E; b++) {
          var x = s ? s[b] : b;
          if (
            (c.copy(this.faceNormals[x]),
            i.vmult(c, c),
            !1 === (T = this.testSepAxis(c, t, e, i, n, r)))
          )
            return !1;
          T < M && ((M = T), o.copy(c));
        }
      if (t.uniqueAxes)
        for (b = 0; b !== t.uniqueAxes.length; b++) {
          if (
            (r.vmult(t.uniqueAxes[b], l),
            0,
            !1 === (T = this.testSepAxis(l, t, e, i, n, r)))
          )
            return !1;
          T < M && ((M = T), o.copy(l));
        }
      else
        for (var A = a ? a.length : t.faces.length, b = 0; b < A; b++) {
          var T;
          x = a ? a[b] : b;
          if (
            (l.copy(t.faceNormals[x]),
            r.vmult(l, l),
            0,
            !1 === (T = this.testSepAxis(l, t, e, i, n, r)))
          )
            return !1;
          T < M && ((M = T), o.copy(l));
        }
      for (var L = 0; L !== this.uniqueEdges.length; L++) {
        i.vmult(this.uniqueEdges[L], v);
        for (var N = 0; N !== t.uniqueEdges.length; N++)
          if ((r.vmult(t.uniqueEdges[N], y), v.cross(y, w), !w.almostZero())) {
            w.normalize();
            var D = this.testSepAxis(w, t, e, i, n, r);
            if (!1 === D) return !1;
            D < M && ((M = D), o.copy(w));
          }
      }
      return n.vsub(e, u), u.dot(o) > 0 && o.negate(o), !0;
    };
    var v = [],
      y = [];
    s.prototype.testSepAxis = function(t, e, i, n, r, o) {
      s.project(this, t, i, n, v), s.project(e, t, r, o, y);
      var a = v[0],
        c = v[1],
        l = y[0],
        u = y[1];
      if (a < u || l < c) return !1;
      var h = a - u,
        d = l - c;
      return h < d ? h : d;
    };
    var w = new r(),
      M = new r();
    (s.prototype.calculateLocalInertia = function(t, e) {
      this.computeLocalAABB(w, M);
      var i = M.x - w.x,
        n = M.y - w.y,
        r = M.z - w.z;
      (e.x = 1 / 12 * t * (2 * n * 2 * n + 2 * r * 2 * r)),
        (e.y = 1 / 12 * t * (2 * i * 2 * i + 2 * r * 2 * r)),
        (e.z = 1 / 12 * t * (2 * n * 2 * n + 2 * i * 2 * i));
    }),
      (s.prototype.getPlaneConstantOfFace = function(t) {
        var e = this.faces[t],
          i = this.faceNormals[t],
          n = this.vertices[e[0]];
        return -i.dot(n);
      });
    var E = new r(),
      b = new r(),
      x = new r(),
      A = new r(),
      T = new r(),
      L = new r(),
      N = new r(),
      D = new r();
    (s.prototype.clipFaceAgainstHull = function(t, e, i, n, r, o, s) {
      for (
        var a = E,
          c = b,
          l = x,
          u = A,
          h = T,
          d = L,
          p = N,
          f = D,
          m = n,
          g = [],
          v = -1,
          y = Number.MAX_VALUE,
          w = 0;
        w < this.faces.length;
        w++
      ) {
        a.copy(this.faceNormals[w]), i.vmult(a, a);
        var M = a.dot(t);
        M < y && ((y = M), (v = w));
      }
      if (!(v < 0)) {
        var S = this.faces[v];
        S.connectedFaces = [];
        for (var C = 0; C < this.faces.length; C++)
          for (var _ = 0; _ < this.faces[C].length; _++)
            -1 !== S.indexOf(this.faces[C][_]) &&
              C !== v &&
              -1 === S.connectedFaces.indexOf(C) &&
              S.connectedFaces.push(C);
        m.length;
        for (var I = S.length, j = 0; j < I; j++) {
          var O = this.vertices[S[j]],
            R = this.vertices[S[(j + 1) % I]];
          O.vsub(R, c),
            l.copy(c),
            i.vmult(l, l),
            e.vadd(l, l),
            u.copy(this.faceNormals[v]),
            i.vmult(u, u),
            e.vadd(u, u),
            l.cross(u, h),
            h.negate(h),
            d.copy(O),
            i.vmult(d, d),
            e.vadd(d, d);
          d.dot(h);
          var z = S.connectedFaces[j];
          p.copy(this.faceNormals[z]);
          var k = this.getPlaneConstantOfFace(z);
          f.copy(p), i.vmult(f, f);
          var B = k - f.dot(e);
          for (this.clipFaceAgainstPlane(m, g, f, B); m.length; ) m.shift();
          for (; g.length; ) m.push(g.shift());
        }
        p.copy(this.faceNormals[v]);
        k = this.getPlaneConstantOfFace(v);
        f.copy(p), i.vmult(f, f);
        for (B = k - f.dot(e), C = 0; C < m.length; C++) {
          var P = f.dot(m[C]) + B;
          if (
            (P <= r &&
              (console.log('clamped: depth=' + P + ' to minDist=' + r),
              (P = r)),
            P <= o)
          ) {
            var U = m[C];
            if (P <= 0) {
              var F = { point: U, normal: f, depth: P };
              s.push(F);
            }
          }
        }
      }
    }),
      (s.prototype.clipFaceAgainstPlane = function(t, e, i, n) {
        var o,
          s,
          a = t.length;
        if (a < 2) return e;
        var c = t[t.length - 1],
          l = t[0];
        o = i.dot(c) + n;
        for (var u = 0; u < a; u++) {
          if (((l = t[u]), (s = i.dot(l) + n), o < 0))
            if (s < 0) {
              (h = new r()).copy(l), e.push(h);
            } else {
              var h = new r();
              c.lerp(l, o / (o - s), h), e.push(h);
            }
          else if (s < 0) {
            h = new r();
            c.lerp(l, o / (o - s), h), e.push(h), e.push(l);
          }
          (c = l), (o = s);
        }
        return e;
      }),
      (s.prototype.computeWorldVertices = function(t, e) {
        for (var i = this.vertices.length; this.worldVertices.length < i; )
          this.worldVertices.push(new r());
        for (var n = this.vertices, o = this.worldVertices, s = 0; s !== i; s++)
          e.vmult(n[s], o[s]), t.vadd(o[s], o[s]);
        this.worldVerticesNeedsUpdate = !1;
      });
    new r();
    (s.prototype.computeLocalAABB = function(t, e) {
      var i = this.vertices.length,
        n = this.vertices;
      t.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE),
        e.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);
      for (var r = 0; r < i; r++) {
        var o = n[r];
        o.x < t.x ? (t.x = o.x) : o.x > e.x && (e.x = o.x),
          o.y < t.y ? (t.y = o.y) : o.y > e.y && (e.y = o.y),
          o.z < t.z ? (t.z = o.z) : o.z > e.z && (e.z = o.z);
      }
    }),
      (s.prototype.computeWorldFaceNormals = function(t) {
        for (
          var e = this.faceNormals.length;
          this.worldFaceNormals.length < e;

        )
          this.worldFaceNormals.push(new r());
        for (
          var i = this.faceNormals, n = this.worldFaceNormals, o = 0;
          o !== e;
          o++
        )
          t.vmult(i[o], n[o]);
        this.worldFaceNormalsNeedsUpdate = !1;
      }),
      (s.prototype.updateBoundingSphereRadius = function() {
        for (var t = 0, e = this.vertices, i = 0, n = e.length; i !== n; i++) {
          var r = e[i].norm2();
          r > t && (t = r);
        }
        this.boundingSphereRadius = Math.sqrt(t);
      });
    var S = new r();
    (s.prototype.calculateWorldAABB = function(t, e, i, n) {
      for (
        var r,
          o,
          s,
          a,
          c,
          l,
          u = this.vertices.length,
          h = this.vertices,
          d = 0;
        d < u;
        d++
      ) {
        S.copy(h[d]), e.vmult(S, S), t.vadd(S, S);
        var p = S;
        p.x < r || void 0 === r
          ? (r = p.x)
          : (p.x > a || void 0 === a) && (a = p.x),
          p.y < o || void 0 === o
            ? (o = p.y)
            : (p.y > c || void 0 === c) && (c = p.y),
          p.z < s || void 0 === s
            ? (s = p.z)
            : (p.z > l || void 0 === l) && (l = p.z);
      }
      i.set(r, o, s), n.set(a, c, l);
    }),
      (s.prototype.volume = function() {
        return 4 * Math.PI * this.boundingSphereRadius / 3;
      }),
      (s.prototype.getAveragePointLocal = function(t) {
        t = t || new r();
        for (var e = this.vertices.length, i = this.vertices, n = 0; n < e; n++)
          t.vadd(i[n], t);
        return t.mult(1 / e, t), t;
      }),
      (s.prototype.transformAllPoints = function(t, e) {
        var i = this.vertices.length,
          n = this.vertices;
        if (e) {
          for (var r = 0; r < i; r++) {
            var o = n[r];
            e.vmult(o, o);
          }
          for (r = 0; r < this.faceNormals.length; r++) {
            o = this.faceNormals[r];
            e.vmult(o, o);
          }
        }
        if (t)
          for (r = 0; r < i; r++) {
            (o = n[r]).vadd(t, o);
          }
      });
    var C = new r(),
      _ = new r(),
      I = new r();
    s.prototype.pointIsInside = function(t) {
      var e = this.vertices.length,
        i = this.vertices,
        n = this.faces,
        r = this.faceNormals,
        o = this.faces.length,
        s = C;
      this.getAveragePointLocal(s);
      for (var a = 0; a < o; a++) {
        this.faces[a].length, (e = r[a]);
        var c = i[n[a][0]],
          l = _;
        t.vsub(c, l);
        var u = e.dot(l),
          h = I;
        s.vsub(c, h);
        var d = e.dot(h);
        if ((u < 0 && d > 0) || (u > 0 && d < 0)) return !1;
      }
      return -1;
    };
    new r();
    var j = new r(),
      O = new r();
    s.project = function(t, e, i, n, r) {
      var s = t.vertices.length,
        a = j,
        c = 0,
        l = 0,
        u = O,
        h = t.vertices;
      u.setZero(),
        o.vectorToLocalFrame(i, n, e, a),
        o.pointToLocalFrame(i, n, u, u);
      var d = u.dot(a);
      l = c = h[0].dot(a);
      for (var p = 1; p < s; p++) {
        var f = h[p].dot(a);
        f > c && (c = f), f < l && (l = f);
      }
      if ((l -= d) > (c -= d)) {
        var m = l;
        (l = c), (c = m);
      }
      (r[0] = c), (r[1] = l);
    };
  },
  function(t, e, i) {
    var n = i(0),
      r = i(2);
    function o(t) {
      (t = t || {}),
        (this.position = new n()),
        t.position && this.position.copy(t.position),
        (this.quaternion = new r()),
        t.quaternion && this.quaternion.copy(t.quaternion);
    }
    t.exports = o;
    var s = new r();
    (o.pointToLocalFrame = function(t, e, i, r) {
      r = r || new n();
      return i.vsub(t, r), e.conjugate(s), s.vmult(r, r), r;
    }),
      (o.prototype.pointToLocal = function(t, e) {
        return o.pointToLocalFrame(this.position, this.quaternion, t, e);
      }),
      (o.pointToWorldFrame = function(t, e, i, r) {
        r = r || new n();
        return e.vmult(i, r), r.vadd(t, r), r;
      }),
      (o.prototype.pointToWorld = function(t, e) {
        return o.pointToWorldFrame(this.position, this.quaternion, t, e);
      }),
      (o.prototype.vectorToWorldFrame = function(t, e) {
        e = e || new n();
        return this.quaternion.vmult(t, e), e;
      }),
      (o.vectorToWorldFrame = function(t, e, i) {
        return t.vmult(e, i), i;
      }),
      (o.vectorToLocalFrame = function(t, e, i, r) {
        r = r || new n();
        return (e.w *= -1), e.vmult(i, r), (e.w *= -1), r;
      });
  },
  function(t, e, i) {
    t.exports = r;
    var n = i(12);
    function r(t, e, i) {
      (i = n.defaults(i, { collideConnected: !0, wakeUpBodies: !0 })),
        (this.equations = []),
        (this.bodyA = t),
        (this.bodyB = e),
        (this.id = r.idCounter++),
        (this.collideConnected = i.collideConnected),
        i.wakeUpBodies && (t && t.wakeUp(), e && e.wakeUp());
    }
    (r.prototype.update = function() {
      throw new Error(
        'method update() not implmemented in this Constraint subclass!'
      );
    }),
      (r.prototype.enable = function() {
        for (var t = this.equations, e = 0; e < t.length; e++)
          t[e].enabled = !0;
      }),
      (r.prototype.disable = function() {
        for (var t = this.equations, e = 0; e < t.length; e++)
          t[e].enabled = !1;
      }),
      (r.idCounter = 0);
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(57),
      r = i(0);
    function o(t, e, i, r) {
      (this.id = o.id++),
        (this.minForce = void 0 === i ? -1e6 : i),
        (this.maxForce = void 0 === r ? 1e6 : r),
        (this.bi = t),
        (this.bj = e),
        (this.a = 0),
        (this.b = 0),
        (this.eps = 0),
        (this.jacobianElementA = new n()),
        (this.jacobianElementB = new n()),
        (this.enabled = !0),
        (this.multiplier = 0),
        this.setSpookParams(1e7, 4, 1 / 60);
    }
    (o.prototype.constructor = o),
      (o.id = 0),
      (o.prototype.setSpookParams = function(t, e, i) {
        var n = e,
          r = t,
          o = i;
        (this.a = 4 / (o * (1 + 4 * n))),
          (this.b = 4 * n / (1 + 4 * n)),
          (this.eps = 4 / (o * o * r * (1 + 4 * n)));
      }),
      (o.prototype.computeB = function(t, e, i) {
        var n = this.computeGW();
        return -this.computeGq() * t - n * e - this.computeGiMf() * i;
      }),
      (o.prototype.computeGq = function() {
        var t = this.jacobianElementA,
          e = this.jacobianElementB,
          i = this.bi,
          n = this.bj,
          r = i.position,
          o = n.position;
        return t.spatial.dot(r) + e.spatial.dot(o);
      });
    new r();
    (o.prototype.computeGW = function() {
      var t = this.jacobianElementA,
        e = this.jacobianElementB,
        i = this.bi,
        n = this.bj,
        r = i.velocity,
        o = n.velocity,
        s = i.angularVelocity,
        a = n.angularVelocity;
      return t.multiplyVectors(r, s) + e.multiplyVectors(o, a);
    }),
      (o.prototype.computeGWlambda = function() {
        var t = this.jacobianElementA,
          e = this.jacobianElementB,
          i = this.bi,
          n = this.bj,
          r = i.vlambda,
          o = n.vlambda,
          s = i.wlambda,
          a = n.wlambda;
        return t.multiplyVectors(r, s) + e.multiplyVectors(o, a);
      });
    var s = new r(),
      a = new r(),
      c = new r(),
      l = new r();
    o.prototype.computeGiMf = function() {
      var t = this.jacobianElementA,
        e = this.jacobianElementB,
        i = this.bi,
        n = this.bj,
        r = i.force,
        o = i.torque,
        u = n.force,
        h = n.torque,
        d = i.invMassSolve,
        p = n.invMassSolve;
      return (
        r.scale(d, s),
        u.scale(p, a),
        i.invInertiaWorldSolve.vmult(o, c),
        n.invInertiaWorldSolve.vmult(h, l),
        t.multiplyVectors(s, c) + e.multiplyVectors(a, l)
      );
    };
    var u = new r();
    o.prototype.computeGiMGt = function() {
      var t = this.jacobianElementA,
        e = this.jacobianElementB,
        i = this.bi,
        n = this.bj,
        r = i.invMassSolve,
        o = n.invMassSolve,
        s = i.invInertiaWorldSolve,
        a = n.invInertiaWorldSolve,
        c = r + o;
      return (
        s.vmult(t.rotational, u),
        (c += u.dot(t.rotational)),
        a.vmult(e.rotational, u),
        (c += u.dot(e.rotational))
      );
    };
    var h = new r();
    new r(), new r(), new r(), new r(), new r();
    (o.prototype.addToWlambda = function(t) {
      var e = this.jacobianElementA,
        i = this.jacobianElementB,
        n = this.bi,
        r = this.bj,
        o = h;
      n.vlambda.addScaledVector(n.invMassSolve * t, e.spatial, n.vlambda),
        r.vlambda.addScaledVector(r.invMassSolve * t, i.spatial, r.vlambda),
        n.invInertiaWorldSolve.vmult(e.rotational, o),
        n.wlambda.addScaledVector(t, o, n.wlambda),
        r.invInertiaWorldSolve.vmult(i.rotational, o),
        r.wlambda.addScaledVector(t, o, r.wlambda);
    }),
      (o.prototype.computeC = function() {
        return this.computeGiMGt() + this.eps;
      });
  },
  function(t, e) {
    function i() {}
    (t.exports = i),
      (i.defaults = function(t, e) {
        t = t || {};
        for (var i in e) i in t || (t[i] = e[i]);
        return t;
      });
  },
  function(t, e) {
    function i(t) {
      var e = '';
      'string' == typeof (t = t || {})
        ? ((e = t), (t = {}))
        : 'object' == typeof t && (e = ''),
        (this.name = e),
        (this.id = i.idCounter++),
        (this.friction = void 0 !== t.friction ? t.friction : -1),
        (this.restitution = void 0 !== t.restitution ? t.restitution : -1);
    }
    (t.exports = i), (i.idCounter = 0);
  },
  function(t, e, i) {
    var n = i(0);
    function r() {
      (this.rayFromWorld = new n()),
        (this.rayToWorld = new n()),
        (this.hitNormalWorld = new n()),
        (this.hitPointWorld = new n()),
        (this.hasHit = !1),
        (this.shape = null),
        (this.body = null),
        (this.hitFaceIndex = -1),
        (this.distance = -1),
        (this._shouldStop = !1);
    }
    (t.exports = r),
      (r.prototype.reset = function() {
        this.rayFromWorld.setZero(),
          this.rayToWorld.setZero(),
          this.hitNormalWorld.setZero(),
          this.hitPointWorld.setZero(),
          (this.hasHit = !1),
          (this.shape = null),
          (this.body = null),
          (this.hitFaceIndex = -1),
          (this.distance = -1),
          (this._shouldStop = !1);
      }),
      (r.prototype.abort = function() {
        this._shouldStop = !0;
      }),
      (r.prototype.set = function(t, e, i, n, r, o, s) {
        this.rayFromWorld.copy(t),
          this.rayToWorld.copy(e),
          this.hitNormalWorld.copy(i),
          this.hitPointWorld.copy(n),
          (this.shape = r),
          (this.body = o),
          (this.distance = s);
      });
  },
  function(t, e) {
    t.exports = (function() {
      function t(t, e) {
        return 0 === e.length || -1 !== e.indexOf(t.detail.buttonEvent.type);
      }
      return {
        schema: { startButtons: { default: [] }, endButtons: { default: [] } },
        startButtonOk: function(e) {
          return t(e, this.data.startButtons);
        },
        endButtonOk: function(e) {
          return t(e, this.data.endButtons);
        }
      };
    })();
  },
  function(t, e) {
    var i;
    i = (function() {
      return this;
    })();
    try {
      i = i || Function('return this')() || (0, eval)('this');
    } catch (t) {
      'object' == typeof window && (i = window);
    }
    t.exports = i;
  },
  function(t, e, i) {
    t.exports = s;
    var n = i(1),
      r = i(0),
      o = i(8);
    function s(t) {
      n.call(this),
        (this.type = n.types.BOX),
        (this.halfExtents = t),
        (this.convexPolyhedronRepresentation = null),
        this.updateConvexPolyhedronRepresentation(),
        this.updateBoundingSphereRadius();
    }
    (s.prototype = new n()),
      (s.prototype.constructor = s),
      (s.prototype.updateConvexPolyhedronRepresentation = function() {
        var t = this.halfExtents.x,
          e = this.halfExtents.y,
          i = this.halfExtents.z,
          n = r,
          s = [
            new n(-t, -e, -i),
            new n(t, -e, -i),
            new n(t, e, -i),
            new n(-t, e, -i),
            new n(-t, -e, i),
            new n(t, -e, i),
            new n(t, e, i),
            new n(-t, e, i)
          ],
          a = (new n(0, 0, 1),
          new n(0, 1, 0),
          new n(1, 0, 0),
          new o(s, [
            [3, 2, 1, 0],
            [4, 5, 6, 7],
            [5, 4, 0, 1],
            [2, 3, 7, 6],
            [0, 4, 7, 3],
            [1, 2, 6, 5]
          ]));
        (this.convexPolyhedronRepresentation = a), (a.material = this.material);
      }),
      (s.prototype.calculateLocalInertia = function(t, e) {
        return (
          (e = e || new r()), s.calculateInertia(this.halfExtents, t, e), e
        );
      }),
      (s.calculateInertia = function(t, e, i) {
        var n = t;
        (i.x = 1 / 12 * e * (2 * n.y * 2 * n.y + 2 * n.z * 2 * n.z)),
          (i.y = 1 / 12 * e * (2 * n.x * 2 * n.x + 2 * n.z * 2 * n.z)),
          (i.z = 1 / 12 * e * (2 * n.y * 2 * n.y + 2 * n.x * 2 * n.x));
      }),
      (s.prototype.getSideNormals = function(t, e) {
        var i = t,
          n = this.halfExtents;
        if (
          (i[0].set(n.x, 0, 0),
          i[1].set(0, n.y, 0),
          i[2].set(0, 0, n.z),
          i[3].set(-n.x, 0, 0),
          i[4].set(0, -n.y, 0),
          i[5].set(0, 0, -n.z),
          void 0 !== e)
        )
          for (var r = 0; r !== i.length; r++) e.vmult(i[r], i[r]);
        return i;
      }),
      (s.prototype.volume = function() {
        return 8 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;
      }),
      (s.prototype.updateBoundingSphereRadius = function() {
        this.boundingSphereRadius = this.halfExtents.norm();
      });
    var a = new r();
    new r();
    s.prototype.forEachWorldCorner = function(t, e, i) {
      for (
        var n = this.halfExtents,
          r = [
            [n.x, n.y, n.z],
            [-n.x, n.y, n.z],
            [-n.x, -n.y, n.z],
            [-n.x, -n.y, -n.z],
            [n.x, -n.y, -n.z],
            [n.x, n.y, -n.z],
            [-n.x, n.y, -n.z],
            [n.x, -n.y, n.z]
          ],
          o = 0;
        o < r.length;
        o++
      )
        a.set(r[o][0], r[o][1], r[o][2]),
          e.vmult(a, a),
          t.vadd(a, a),
          i(a.x, a.y, a.z);
    };
    var c = [
      new r(),
      new r(),
      new r(),
      new r(),
      new r(),
      new r(),
      new r(),
      new r()
    ];
    s.prototype.calculateWorldAABB = function(t, e, i, n) {
      var r = this.halfExtents;
      c[0].set(r.x, r.y, r.z),
        c[1].set(-r.x, r.y, r.z),
        c[2].set(-r.x, -r.y, r.z),
        c[3].set(-r.x, -r.y, -r.z),
        c[4].set(r.x, -r.y, -r.z),
        c[5].set(r.x, r.y, -r.z),
        c[6].set(-r.x, r.y, -r.z),
        c[7].set(r.x, -r.y, r.z);
      var o = c[0];
      e.vmult(o, o), t.vadd(o, o), n.copy(o), i.copy(o);
      for (var s = 1; s < 8; s++) {
        o = c[s];
        e.vmult(o, o), t.vadd(o, o);
        var a = o.x,
          l = o.y,
          u = o.z;
        a > n.x && (n.x = a),
          l > n.y && (n.y = l),
          u > n.z && (n.z = u),
          a < i.x && (i.x = a),
          l < i.y && (i.y = l),
          u < i.z && (i.z = u);
      }
    };
  },
  function(t, e, i) {
    var n = i(5),
      r = i(0),
      o = i(2);
    i(1), i(29);
    function s() {
      (this.world = null), (this.useBoundingBoxes = !1), (this.dirty = !0);
    }
    (t.exports = s),
      (s.prototype.collisionPairs = function(t, e, i) {
        throw new Error(
          'collisionPairs not implemented for this BroadPhase class!'
        );
      }),
      (s.prototype.needBroadphaseCollision = function(t, e) {
        return (
          0 != (t.collisionFilterGroup & e.collisionFilterMask) &&
          0 != (e.collisionFilterGroup & t.collisionFilterMask) &&
          ((0 == (t.type & n.STATIC) && t.sleepState !== n.SLEEPING) ||
            (0 == (e.type & n.STATIC) && e.sleepState !== n.SLEEPING))
        );
      }),
      (s.prototype.intersectionTest = function(t, e, i, n) {
        this.useBoundingBoxes
          ? this.doBoundingBoxBroadphase(t, e, i, n)
          : this.doBoundingSphereBroadphase(t, e, i, n);
      });
    var a = new r();
    new r(), new o(), new r();
    (s.prototype.doBoundingSphereBroadphase = function(t, e, i, n) {
      var r = a;
      e.position.vsub(t.position, r);
      var o = Math.pow(t.boundingRadius + e.boundingRadius, 2);
      r.norm2() < o && (i.push(t), n.push(e));
    }),
      (s.prototype.doBoundingBoxBroadphase = function(t, e, i, n) {
        t.aabbNeedsUpdate && t.computeAABB(),
          e.aabbNeedsUpdate && e.computeAABB(),
          t.aabb.overlaps(e.aabb) && (i.push(t), n.push(e));
      });
    var c = { keys: [] },
      l = [],
      u = [];
    (s.prototype.makePairsUnique = function(t, e) {
      for (var i = c, n = l, r = u, o = t.length, s = 0; s !== o; s++)
        (n[s] = t[s]), (r[s] = e[s]);
      (t.length = 0), (e.length = 0);
      for (s = 0; s !== o; s++) {
        var a = n[s].id,
          h = r[s].id;
        (i[(d = a < h ? a + ',' + h : h + ',' + a)] = s), i.keys.push(d);
      }
      for (s = 0; s !== i.keys.length; s++) {
        var d,
          p = i[(d = i.keys.pop())];
        t.push(n[p]), e.push(r[p]), delete i[d];
      }
    }),
      (s.prototype.setWorld = function(t) {});
    var h = new r();
    (s.boundingSphereCheck = function(t, e) {
      var i = h;
      return (
        t.position.vsub(e.position, i),
        Math.pow(
          t.shape.boundingSphereRadius + e.shape.boundingSphereRadius,
          2
        ) > i.norm2()
      );
    }),
      (s.prototype.aabbQuery = function(t, e, i) {
        return (
          console.warn(
            '.aabbQuery is not implemented in this Broadphase subclass.'
          ),
          []
        );
      });
  },
  function(t, e, i) {
    t.exports = l;
    var n = i(0),
      r = i(2),
      o = i(9),
      s = (i(8), i(17), i(14)),
      a = i(1),
      c = i(3);
    function l(t, e) {
      (this.from = t ? t.clone() : new n()),
        (this.to = e ? e.clone() : new n()),
        (this._direction = new n()),
        (this.precision = 1e-4),
        (this.checkCollisionResponse = !0),
        (this.skipBackfaces = !1),
        (this.collisionFilterMask = -1),
        (this.collisionFilterGroup = -1),
        (this.mode = l.ANY),
        (this.result = new s()),
        (this.hasHit = !1),
        (this.callback = function(t) {});
    }
    (l.prototype.constructor = l), (l.CLOSEST = 1), (l.ANY = 2), (l.ALL = 4);
    var u = new c(),
      h = [];
    l.prototype.intersectWorld = function(t, e) {
      return (
        (this.mode = e.mode || l.ANY),
        (this.result = e.result || new s()),
        (this.skipBackfaces = !!e.skipBackfaces),
        (this.collisionFilterMask =
          void 0 !== e.collisionFilterMask ? e.collisionFilterMask : -1),
        (this.collisionFilterGroup =
          void 0 !== e.collisionFilterGroup ? e.collisionFilterGroup : -1),
        e.from && this.from.copy(e.from),
        e.to && this.to.copy(e.to),
        (this.callback = e.callback || function() {}),
        (this.hasHit = !1),
        this.result.reset(),
        this._updateDirection(),
        this.getAABB(u),
        (h.length = 0),
        t.broadphase.aabbQuery(t, u, h),
        this.intersectBodies(h),
        this.hasHit
      );
    };
    var d = new n(),
      p = new n();
    function f(t, e, i, n) {
      n.vsub(e, k), i.vsub(e, d), t.vsub(e, p);
      var r,
        o,
        s = k.dot(k),
        a = k.dot(d),
        c = k.dot(p),
        l = d.dot(d),
        u = d.dot(p);
      return (
        (r = l * c - a * u) >= 0 &&
        (o = s * u - a * c) >= 0 &&
        r + o < s * l - a * a
      );
    }
    l.pointInTriangle = f;
    var m = new n(),
      g = new r();
    (l.prototype.intersectBody = function(t, e) {
      e && ((this.result = e), this._updateDirection());
      var i = this.checkCollisionResponse;
      if (
        (!i || t.collisionResponse) &&
        0 != (this.collisionFilterGroup & t.collisionFilterMask) &&
        0 != (t.collisionFilterGroup & this.collisionFilterMask)
      )
        for (var n = m, r = g, o = 0, s = t.shapes.length; o < s; o++) {
          var a = t.shapes[o];
          if (
            (!i || a.collisionResponse) &&
            (t.quaternion.mult(t.shapeOrientations[o], r),
            t.quaternion.vmult(t.shapeOffsets[o], n),
            n.vadd(t.position, n),
            this.intersectShape(a, r, n, t),
            this.result._shouldStop)
          )
            break;
        }
    }),
      (l.prototype.intersectBodies = function(t, e) {
        e && ((this.result = e), this._updateDirection());
        for (var i = 0, n = t.length; !this.result._shouldStop && i < n; i++)
          this.intersectBody(t[i]);
      }),
      (l.prototype._updateDirection = function() {
        this.to.vsub(this.from, this._direction), this._direction.normalize();
      }),
      (l.prototype.intersectShape = function(t, e, i, n) {
        if (
          !(
            (function(t, e, i) {
              i.vsub(t, k);
              var n = k.dot(e);
              return e.mult(n, B), B.vadd(t, B), i.distanceTo(B);
            })(this.from, this._direction, i) > t.boundingSphereRadius
          )
        ) {
          var r = this[t.type];
          r && r.call(this, t, e, i, n, t);
        }
      });
    new n(), new n();
    var v = new n(),
      y = new n(),
      w = new n(),
      M = new n();
    new n(), new s();
    (l.prototype.intersectBox = function(t, e, i, n, r) {
      return this.intersectConvex(t.convexPolyhedronRepresentation, e, i, n, r);
    }),
      (l.prototype[a.types.BOX] = l.prototype.intersectBox),
      (l.prototype.intersectPlane = function(t, e, i, r, o) {
        var s = this.from,
          a = this.to,
          c = this._direction,
          l = new n(0, 0, 1);
        e.vmult(l, l);
        var u = new n();
        s.vsub(i, u);
        var h = u.dot(l);
        if ((a.vsub(i, u), !(h * u.dot(l) > 0 || s.distanceTo(a) < h))) {
          var d = l.dot(c);
          if (!(Math.abs(d) < this.precision)) {
            var p = new n(),
              f = new n(),
              m = new n();
            s.vsub(i, p);
            var g = -l.dot(p) / d;
            c.scale(g, f),
              s.vadd(f, m),
              this.reportIntersection(l, m, o, r, -1);
          }
        }
      }),
      (l.prototype[a.types.PLANE] = l.prototype.intersectPlane),
      (l.prototype.getAABB = function(t) {
        var e = this.to,
          i = this.from;
        (t.lowerBound.x = Math.min(e.x, i.x)),
          (t.lowerBound.y = Math.min(e.y, i.y)),
          (t.lowerBound.z = Math.min(e.z, i.z)),
          (t.upperBound.x = Math.max(e.x, i.x)),
          (t.upperBound.y = Math.max(e.y, i.y)),
          (t.upperBound.z = Math.max(e.z, i.z));
      });
    var E = { faceList: [0] },
      b = new n(),
      x = new l(),
      A = [];
    (l.prototype.intersectHeightfield = function(t, e, i, n, r) {
      t.data, t.elementSize;
      var s = x;
      s.from.copy(this.from),
        s.to.copy(this.to),
        o.pointToLocalFrame(i, e, s.from, s.from),
        o.pointToLocalFrame(i, e, s.to, s.to),
        s._updateDirection();
      var a,
        l,
        u,
        h,
        d = A;
      (a = l = 0), (u = h = t.data.length - 1);
      var p = new c();
      s.getAABB(p),
        t.getIndexOfPosition(p.lowerBound.x, p.lowerBound.y, d, !0),
        (a = Math.max(a, d[0])),
        (l = Math.max(l, d[1])),
        t.getIndexOfPosition(p.upperBound.x, p.upperBound.y, d, !0),
        (u = Math.min(u, d[0] + 1)),
        (h = Math.min(h, d[1] + 1));
      for (var f = a; f < u; f++)
        for (var m = l; m < h; m++) {
          if (this.result._shouldStop) return;
          if ((t.getAabbAtIndex(f, m, p), p.overlapsRay(s))) {
            if (
              (t.getConvexTrianglePillar(f, m, !1),
              o.pointToWorldFrame(i, e, t.pillarOffset, b),
              this.intersectConvex(t.pillarConvex, e, b, n, r, E),
              this.result._shouldStop)
            )
              return;
            t.getConvexTrianglePillar(f, m, !0),
              o.pointToWorldFrame(i, e, t.pillarOffset, b),
              this.intersectConvex(t.pillarConvex, e, b, n, r, E);
          }
        }
    }),
      (l.prototype[a.types.HEIGHTFIELD] = l.prototype.intersectHeightfield);
    var T = new n(),
      L = new n();
    (l.prototype.intersectSphere = function(t, e, i, n, r) {
      var o = this.from,
        s = this.to,
        a = t.radius,
        c =
          Math.pow(s.x - o.x, 2) +
          Math.pow(s.y - o.y, 2) +
          Math.pow(s.z - o.z, 2),
        l =
          2 *
          ((s.x - o.x) * (o.x - i.x) +
            (s.y - o.y) * (o.y - i.y) +
            (s.z - o.z) * (o.z - i.z)),
        u =
          Math.pow(o.x - i.x, 2) +
          Math.pow(o.y - i.y, 2) +
          Math.pow(o.z - i.z, 2) -
          Math.pow(a, 2),
        h = Math.pow(l, 2) - 4 * c * u,
        d = T,
        p = L;
      if (!(h < 0))
        if (0 === h)
          o.lerp(s, h, d),
            d.vsub(i, p),
            p.normalize(),
            this.reportIntersection(p, d, r, n, -1);
        else {
          var f = (-l - Math.sqrt(h)) / (2 * c),
            m = (-l + Math.sqrt(h)) / (2 * c);
          if (
            (f >= 0 &&
              f <= 1 &&
              (o.lerp(s, f, d),
              d.vsub(i, p),
              p.normalize(),
              this.reportIntersection(p, d, r, n, -1)),
            this.result._shouldStop)
          )
            return;
          m >= 0 &&
            m <= 1 &&
            (o.lerp(s, m, d),
            d.vsub(i, p),
            p.normalize(),
            this.reportIntersection(p, d, r, n, -1));
        }
    }),
      (l.prototype[a.types.SPHERE] = l.prototype.intersectSphere);
    var N = new n(),
      D = (new n(), new n(), new n());
    (l.prototype.intersectConvex = function(t, e, i, n, r, o) {
      for (
        var s = N,
          a = D,
          c = (o && o.faceList) || null,
          l = t.faces,
          u = t.vertices,
          h = t.faceNormals,
          d = this._direction,
          p = this.from,
          m = this.to,
          g = p.distanceTo(m),
          E = c ? c.length : l.length,
          b = this.result,
          x = 0;
        !b._shouldStop && x < E;
        x++
      ) {
        var A = c ? c[x] : x,
          T = l[A],
          L = h[A],
          S = e,
          C = i;
        a.copy(u[T[0]]),
          S.vmult(a, a),
          a.vadd(C, a),
          a.vsub(p, a),
          S.vmult(L, s);
        var _ = d.dot(s);
        if (!(Math.abs(_) < this.precision)) {
          var I = s.dot(a) / _;
          if (!(I < 0)) {
            d.mult(I, v),
              v.vadd(p, v),
              y.copy(u[T[0]]),
              S.vmult(y, y),
              C.vadd(y, y);
            for (var j = 1; !b._shouldStop && j < T.length - 1; j++) {
              w.copy(u[T[j]]),
                M.copy(u[T[j + 1]]),
                S.vmult(w, w),
                S.vmult(M, M),
                C.vadd(w, w),
                C.vadd(M, M);
              var O = v.distanceTo(p);
              (!f(v, y, w, M) && !f(v, w, y, M)) ||
                O > g ||
                this.reportIntersection(s, v, r, n, A);
            }
          }
        }
      }
    }),
      (l.prototype[a.types.CONVEXPOLYHEDRON] = l.prototype.intersectConvex);
    var S = new n(),
      C = new n(),
      _ = new n(),
      I = new n(),
      j = new n(),
      O = new n(),
      R = (new c(), []),
      z = new o();
    (l.prototype.intersectTrimesh = function(t, e, i, n, r, s) {
      var a = S,
        c = R,
        l = z,
        u = D,
        h = C,
        d = _,
        p = I,
        m = O,
        g = j,
        E = (s && s.faceList, t.indices),
        b = (t.vertices, t.faceNormals, this.from),
        x = this.to,
        A = this._direction;
      l.position.copy(i),
        l.quaternion.copy(e),
        o.vectorToLocalFrame(i, e, A, h),
        o.pointToLocalFrame(i, e, b, d),
        o.pointToLocalFrame(i, e, x, p),
        (p.x *= t.scale.x),
        (p.y *= t.scale.y),
        (p.z *= t.scale.z),
        (d.x *= t.scale.x),
        (d.y *= t.scale.y),
        (d.z *= t.scale.z),
        p.vsub(d, h),
        h.normalize();
      var T = d.distanceSquared(p);
      t.tree.rayQuery(this, l, c);
      for (var L = 0, N = c.length; !this.result._shouldStop && L !== N; L++) {
        var k = c[L];
        t.getNormal(k, a), t.getVertex(E[3 * k], y), y.vsub(d, u);
        var B = h.dot(a),
          P = a.dot(u) / B;
        if (!(P < 0)) {
          h.scale(P, v),
            v.vadd(d, v),
            t.getVertex(E[3 * k + 1], w),
            t.getVertex(E[3 * k + 2], M);
          var U = v.distanceSquared(d);
          (!f(v, w, y, M) && !f(v, y, w, M)) ||
            U > T ||
            (o.vectorToWorldFrame(e, a, g),
            o.pointToWorldFrame(i, e, v, m),
            this.reportIntersection(g, m, r, n, k));
        }
      }
      c.length = 0;
    }),
      (l.prototype[a.types.TRIMESH] = l.prototype.intersectTrimesh),
      (l.prototype.reportIntersection = function(t, e, i, n, r) {
        var o = this.from,
          s = this.to,
          a = o.distanceTo(e),
          c = this.result;
        if (!(this.skipBackfaces && t.dot(this._direction) > 0))
          switch (((c.hitFaceIndex = void 0 !== r ? r : -1), this.mode)) {
            case l.ALL:
              (this.hasHit = !0),
                c.set(o, s, t, e, i, n, a),
                (c.hasHit = !0),
                this.callback(c);
              break;
            case l.CLOSEST:
              (a < c.distance || !c.hasHit) &&
                ((this.hasHit = !0),
                (c.hasHit = !0),
                c.set(o, s, t, e, i, n, a));
              break;
            case l.ANY:
              (this.hasHit = !0),
                (c.hasHit = !0),
                c.set(o, s, t, e, i, n, a),
                (c._shouldStop = !0);
          }
      });
    var k = new n(),
      B = new n();
  },
  function(t, e) {
    function i() {
      this.equations = [];
    }
    (t.exports = i),
      (i.prototype.solve = function(t, e) {
        return 0;
      }),
      (i.prototype.addEquation = function(t) {
        t.enabled && this.equations.push(t);
      }),
      (i.prototype.removeEquation = function(t) {
        var e = this.equations,
          i = e.indexOf(t);
        -1 !== i && e.splice(i, 1);
      }),
      (i.prototype.removeAllEquations = function() {
        this.equations.length = 0;
      });
  },
  function(t, e, i) {
    t.exports = s;
    var n = i(10),
      r = i(6),
      o = i(0);
    function s(t, e, i, s, a) {
      n.call(this, t, i),
        (a = void 0 !== a ? a : 1e6),
        (this.pivotA = e ? e.clone() : new o()),
        (this.pivotB = s ? s.clone() : new o());
      var c = (this.equationX = new r(t, i)),
        l = (this.equationY = new r(t, i)),
        u = (this.equationZ = new r(t, i));
      this.equations.push(c, l, u),
        (c.minForce = l.minForce = u.minForce = -a),
        (c.maxForce = l.maxForce = u.maxForce = a),
        c.ni.set(1, 0, 0),
        l.ni.set(0, 1, 0),
        u.ni.set(0, 0, 1);
    }
    (s.prototype = new n()),
      (s.prototype.update = function() {
        var t = this.bodyA,
          e = this.bodyB,
          i = this.equationX,
          n = this.equationY,
          r = this.equationZ;
        t.quaternion.vmult(this.pivotA, i.ri),
          e.quaternion.vmult(this.pivotB, i.rj),
          n.ri.copy(i.ri),
          n.rj.copy(i.rj),
          r.ri.copy(i.ri),
          r.rj.copy(i.rj);
      });
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(0),
      r = (i(4), i(11));
    function o(t, e, i) {
      var o = void 0 !== (i = i || {}).maxForce ? i.maxForce : 1e6;
      r.call(this, t, e, -o, o),
        (this.axisA = i.axisA ? i.axisA.clone() : new n(1, 0, 0)),
        (this.axisB = i.axisB ? i.axisB.clone() : new n(0, 1, 0)),
        (this.maxAngle = Math.PI / 2);
    }
    (o.prototype = new r()), (o.prototype.constructor = o);
    var s = new n(),
      a = new n();
    o.prototype.computeB = function(t) {
      var e = this.a,
        i = this.b,
        n = this.axisA,
        r = this.axisB,
        o = s,
        c = a,
        l = this.jacobianElementA,
        u = this.jacobianElementB;
      return (
        n.cross(r, o),
        r.cross(n, c),
        l.rotational.copy(c),
        u.rotational.copy(o),
        -(Math.cos(this.maxAngle) - n.dot(r)) * e -
          this.computeGW() * i -
          t * this.computeGiMf()
      );
    };
  },
  function(t, e, i) {
    var n = i(7),
      r = i(78);
    (t.exports = {
      'dynamic-body': i(81),
      'static-body': i(85),
      constraint: i(86),
      system: i(87),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME),
          r.registerAll(),
          t.systems.physics || t.registerSystem('physics', this.system),
          t.components['dynamic-body'] ||
            t.registerComponent('dynamic-body', this['dynamic-body']),
          t.components['static-body'] ||
            t.registerComponent('static-body', this['static-body']),
          t.components.constraint ||
            t.registerComponent('constraint', this.constraint),
          (this._registered = !0));
      }
    }),
      (window.CANNON = window.CANNON || n);
  },
  function(t, e) {
    var i = function() {};
    (t.exports = i),
      (i.prototype = {
        constructor: i,
        addEventListener: function(t, e) {
          void 0 === this._listeners && (this._listeners = {});
          var i = this._listeners;
          return (
            void 0 === i[t] && (i[t] = []),
            -1 === i[t].indexOf(e) && i[t].push(e),
            this
          );
        },
        hasEventListener: function(t, e) {
          if (void 0 === this._listeners) return !1;
          var i = this._listeners;
          return void 0 !== i[t] && -1 !== i[t].indexOf(e);
        },
        hasAnyEventListener: function(t) {
          return void 0 !== this._listeners && void 0 !== this._listeners[t];
        },
        removeEventListener: function(t, e) {
          if (void 0 === this._listeners) return this;
          var i = this._listeners;
          if (void 0 === i[t]) return this;
          var n = i[t].indexOf(e);
          return -1 !== n && i[t].splice(n, 1), this;
        },
        dispatchEvent: function(t) {
          if (void 0 === this._listeners) return this;
          var e = this._listeners[t.type];
          if (void 0 !== e) {
            t.target = this;
            for (var i = 0, n = e.length; i < n; i++) e[i].call(this, t);
          }
          return this;
        }
      });
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(11),
      r = i(0);
    i(4);
    function o(t, e, i) {
      n.call(this, t, e, -i, i),
        (this.ri = new r()),
        (this.rj = new r()),
        (this.t = new r());
    }
    (o.prototype = new n()), (o.prototype.constructor = o);
    var s = new r(),
      a = new r();
    o.prototype.computeB = function(t) {
      this.a;
      var e = this.b,
        i = (this.bi, this.bj, this.ri),
        n = this.rj,
        r = s,
        o = a,
        c = this.t;
      i.cross(c, r), n.cross(c, o);
      var l = this.jacobianElementA,
        u = this.jacobianElementB;
      return (
        c.negate(l.spatial),
        r.negate(l.rotational),
        u.spatial.copy(c),
        u.rotational.copy(o),
        -this.computeGW() * e - t * this.computeGiMf()
      );
    };
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(0),
      r = (i(4), i(11));
    function o(t, e, i) {
      (i = void 0 !== i ? i : 1e6),
        r.call(this, t, e, -i, i),
        (this.axisA = new n()),
        (this.axisB = new n()),
        (this.targetVelocity = 0);
    }
    (o.prototype = new r()),
      (o.prototype.constructor = o),
      (o.prototype.computeB = function(t) {
        this.a;
        var e = this.b,
          i = (this.bi, this.bj, this.axisA),
          n = this.axisB,
          r = this.jacobianElementA,
          o = this.jacobianElementB;
        return (
          r.rotational.copy(i),
          n.negate(o.rotational),
          -(this.computeGW() - this.targetVelocity) * e - t * this.computeGiMf()
        );
      });
  },
  function(t, e) {
    t.exports = class {
      static computeCentroids(t) {
        var e, i, n;
        for (e = 0, i = t.faces.length; e < i; e++)
          ((n = t.faces[e]).centroid = new THREE.Vector3(0, 0, 0)),
            n.centroid.add(t.vertices[n.a]),
            n.centroid.add(t.vertices[n.b]),
            n.centroid.add(t.vertices[n.c]),
            n.centroid.divideScalar(3);
      }
      static roundNumber(t, e) {
        var i = Number(t + '').toFixed(parseInt(e));
        return parseFloat(i);
      }
      static sample(t) {
        return t[Math.floor(Math.random() * t.length)];
      }
      static mergeVertexIds(t, e) {
        var i = [];
        if (
          (t.forEach(t => {
            e.indexOf(t) >= 0 && i.push(t);
          }),
          i.length < 2)
        )
          return [];
        i.includes(t[0]) && i.includes(t[t.length - 1]) && t.push(t.shift()),
          i.includes(e[0]) && i.includes(e[e.length - 1]) && e.push(e.shift()),
          (i = []),
          t.forEach(t => {
            e.includes(t) && i.push(t);
          });
        for (var n = i[1], r = i[0], o = t.slice(); o[0] !== n; )
          o.push(o.shift());
        for (var s = 0, a = e.slice(); a[0] !== r; )
          if ((a.push(a.shift()), s++ > 10))
            throw new Error('Unexpected state');
        return a.shift(), a.pop(), (o = o.concat(a));
      }
      static setPolygonCentroid(t, e) {
        var i = new THREE.Vector3(),
          n = e.vertices;
        t.vertexIds.forEach(t => {
          i.add(n[t]);
        }),
          i.divideScalar(t.vertexIds.length),
          t.centroid.copy(i);
      }
      static cleanPolygon(t, e) {
        for (var i = [], n = e.vertices, r = 0; r < t.vertexIds.length; r++) {
          var o,
            s,
            a,
            c,
            l = n[t.vertexIds[r]];
          0 === r
            ? ((o = t.vertexIds[1]), (s = t.vertexIds[t.vertexIds.length - 1]))
            : r === t.vertexIds.length - 1
              ? ((o = t.vertexIds[0]),
                (s = t.vertexIds[t.vertexIds.length - 2]))
              : ((o = t.vertexIds[r + 1]), (s = t.vertexIds[r - 1])),
            (a = n[o]),
            (c = n[s]);
          var u = a.clone().sub(l),
            h = c.clone().sub(l),
            d = u.angleTo(h);
          if (d > Math.PI - 0.01 && d < Math.PI + 0.01) {
            var p = [];
            t.neighbours.forEach(e => {
              e.vertexIds.includes(t.vertexIds[r]) || p.push(e);
            }),
              (t.neighbours = p);
          } else i.push(t.vertexIds[r]);
        }
        (t.vertexIds = i), setPolygonCentroid(t, e);
      }
      static isConvex(t, e) {
        var i = e.vertices;
        if (t.vertexIds.length < 3) return !1;
        for (var n = !0, r = [], o = 0; o < t.vertexIds.length; o++) {
          var s,
            a,
            c = i[t.vertexIds[o]];
          0 === o
            ? ((s = i[t.vertexIds[1]]),
              (a = i[t.vertexIds[t.vertexIds.length - 1]]))
            : o === t.vertexIds.length - 1
              ? ((s = i[t.vertexIds[0]]),
                (a = i[t.vertexIds[t.vertexIds.length - 2]]))
              : ((s = i[t.vertexIds[o + 1]]), (a = i[t.vertexIds[o - 1]]));
          var l = s.clone().sub(c),
            u = a.clone().sub(c),
            h = l.angleTo(u);
          if (h === Math.PI || 0 === h) return !1;
          var d = l.cross(u).y;
          r.push(d);
        }
        return (
          r.forEach(t => {
            0 === t && (n = !1);
          }),
          r[0] > 0
            ? r.forEach(t => {
                t < 0 && (n = !1);
              })
            : r.forEach(t => {
                t > 0 && (n = !1);
              }),
          n
        );
      }
      static distanceToSquared(t, e) {
        var i = t.x - e.x,
          n = t.y - e.y,
          r = t.z - e.z;
        return i * i + n * n + r * r;
      }
      static isPointInPoly(t, e) {
        for (var i = !1, n = -1, r = t.length, o = r - 1; ++n < r; o = n)
          ((t[n].z <= e.z && e.z < t[o].z) ||
            (t[o].z <= e.z && e.z < t[n].z)) &&
            e.x <
              (t[o].x - t[n].x) * (e.z - t[n].z) / (t[o].z - t[n].z) + t[n].x &&
            (i = !i);
        return i;
      }
      static isVectorInPolygon(t, e, i) {
        var n = 1e5,
          r = -1e5,
          o = [];
        return (
          e.vertexIds.forEach(t => {
            (n = Math.min(i[t].y, n)), (r = Math.max(i[t].y, r)), o.push(i[t]);
          }),
          !!(t.y < r + 0.5 && t.y > n - 0.5 && this.isPointInPoly(o, t))
        );
      }
      static triarea2(t, e, i) {
        var n = e.x - t.x,
          r = e.z - t.z,
          o = i.x - t.x,
          s = i.z - t.z;
        return o * r - n * s;
      }
      static vequal(t, e) {
        return this.distanceToSquared(t, e) < 1e-5;
      }
      static array_intersect() {
        let t,
          e,
          i,
          n,
          r,
          o,
          s = [],
          a = {};
        for (
          o = arguments.length - 1, i = arguments[0].length, e = 0, t = 0;
          t <= o;
          t++
        )
          (n = arguments[t].length) < i && ((e = t), (i = n));
        for (t = 0; t <= o; t++) {
          r = arguments[(n = t === e ? 0 : t || e)].length;
          for (var c = 0; c < r; c++) {
            var l = arguments[n][c];
            a[l] === t - 1
              ? t === o ? (s.push(l), (a[l] = 0)) : (a[l] = t)
              : 0 === t && (a[l] = 0);
          }
        }
        return s;
      }
    };
  },
  function(t, e) {
    function i() {
      this.matrix = [];
    }
    (t.exports = i),
      (i.prototype.get = function(t, e) {
        if (((t = t.index), (e = e.index) > t)) {
          var i = e;
          (e = t), (t = i);
        }
        return this.matrix[((t * (t + 1)) >> 1) + e - 1];
      }),
      (i.prototype.set = function(t, e, i) {
        if (((t = t.index), (e = e.index) > t)) {
          var n = e;
          (e = t), (t = n);
        }
        this.matrix[((t * (t + 1)) >> 1) + e - 1] = i ? 1 : 0;
      }),
      (i.prototype.reset = function() {
        for (var t = 0, e = this.matrix.length; t !== e; t++)
          this.matrix[t] = 0;
      }),
      (i.prototype.setNumObjects = function(t) {
        this.matrix.length = (t * (t - 1)) >> 1;
      });
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(1),
      r = i(0);
    function o() {
      n.call(this),
        (this.type = n.types.PLANE),
        (this.worldNormal = new r()),
        (this.worldNormalNeedsUpdate = !0),
        (this.boundingSphereRadius = Number.MAX_VALUE);
    }
    (o.prototype = new n()),
      (o.prototype.constructor = o),
      (o.prototype.computeWorldNormal = function(t) {
        var e = this.worldNormal;
        e.set(0, 0, 1), t.vmult(e, e), (this.worldNormalNeedsUpdate = !1);
      }),
      (o.prototype.calculateLocalInertia = function(t, e) {
        return (e = e || new r());
      }),
      (o.prototype.volume = function() {
        return Number.MAX_VALUE;
      });
    var s = new r();
    (o.prototype.calculateWorldAABB = function(t, e, i, n) {
      s.set(0, 0, 1), e.vmult(s, s);
      var r = Number.MAX_VALUE;
      i.set(-r, -r, -r),
        n.set(r, r, r),
        1 === s.x && (n.x = t.x),
        1 === s.y && (n.y = t.y),
        1 === s.z && (n.z = t.z),
        -1 === s.x && (i.x = t.x),
        -1 === s.y && (i.y = t.y),
        -1 === s.z && (i.z = t.z);
    }),
      (o.prototype.updateBoundingSphereRadius = function() {
        this.boundingSphereRadius = Number.MAX_VALUE;
      });
  },
  function(t, e, i) {
    t.exports = p;
    var n = i(3),
      r = i(5),
      o = i(1),
      s = i(19),
      a = i(0),
      c = i(9),
      l = (i(8), i(2)),
      u = (i(20), i(31)),
      h = i(6),
      d = i(25);
    function p(t) {
      (this.contactPointPool = []),
        (this.frictionEquationPool = []),
        (this.result = []),
        (this.frictionResult = []),
        (this.v3pool = new u()),
        (this.world = t),
        (this.currentContactMaterial = null),
        (this.enableFrictionReduction = !1);
    }
    (p.prototype.createContactEquation = function(t, e, i, n, r, o) {
      var s;
      this.contactPointPool.length
        ? (((s = this.contactPointPool.pop()).bi = t), (s.bj = e))
        : (s = new h(t, e)),
        (s.enabled =
          t.collisionResponse &&
          e.collisionResponse &&
          i.collisionResponse &&
          n.collisionResponse);
      var a = this.currentContactMaterial;
      (s.restitution = a.restitution),
        s.setSpookParams(
          a.contactEquationStiffness,
          a.contactEquationRelaxation,
          this.world.dt
        );
      var c = i.material || t.material,
        l = n.material || e.material;
      return (
        c &&
          l &&
          c.restitution >= 0 &&
          l.restitution >= 0 &&
          (s.restitution = c.restitution * l.restitution),
        (s.si = r || i),
        (s.sj = o || n),
        s
      );
    }),
      (p.prototype.createFrictionEquationsFromContact = function(t, e) {
        var i = t.bi,
          n = t.bj,
          r = t.si,
          o = t.sj,
          s = this.world,
          a = this.currentContactMaterial,
          c = a.friction,
          l = r.material || i.material,
          u = o.material || n.material;
        if (
          (l &&
            u &&
            l.friction >= 0 &&
            u.friction >= 0 &&
            (c = l.friction * u.friction),
          c > 0)
        ) {
          var h = c * s.gravity.length(),
            p = i.invMass + n.invMass;
          p > 0 && (p = 1 / p);
          var f = this.frictionEquationPool,
            m = f.length ? f.pop() : new d(i, n, h * p),
            g = f.length ? f.pop() : new d(i, n, h * p);
          return (
            (m.bi = g.bi = i),
            (m.bj = g.bj = n),
            (m.minForce = g.minForce = -h * p),
            (m.maxForce = g.maxForce = h * p),
            m.ri.copy(t.ri),
            m.rj.copy(t.rj),
            g.ri.copy(t.ri),
            g.rj.copy(t.rj),
            t.ni.tangents(m.t, g.t),
            m.setSpookParams(
              a.frictionEquationStiffness,
              a.frictionEquationRelaxation,
              s.dt
            ),
            g.setSpookParams(
              a.frictionEquationStiffness,
              a.frictionEquationRelaxation,
              s.dt
            ),
            (m.enabled = g.enabled = t.enabled),
            e.push(m, g),
            !0
          );
        }
        return !1;
      });
    var f = new a(),
      m = new a(),
      g = new a();
    p.prototype.createFrictionFromAverage = function(t) {
      var e = this.result[this.result.length - 1];
      if (
        this.createFrictionEquationsFromContact(e, this.frictionResult) &&
        1 !== t
      ) {
        var i = this.frictionResult[this.frictionResult.length - 2],
          n = this.frictionResult[this.frictionResult.length - 1];
        f.setZero(), m.setZero(), g.setZero();
        for (var r = e.bi, o = (e.bj, 0); o !== t; o++)
          (e = this.result[this.result.length - 1 - o]).bodyA !== r
            ? (f.vadd(e.ni, f), m.vadd(e.ri, m), g.vadd(e.rj, g))
            : (f.vsub(e.ni, f), m.vadd(e.rj, m), g.vadd(e.ri, g));
        var s = 1 / t;
        m.scale(s, i.ri),
          g.scale(s, i.rj),
          n.ri.copy(i.ri),
          n.rj.copy(i.rj),
          f.normalize(),
          f.tangents(i.t, n.t);
      }
    };
    var v = new a(),
      y = new a(),
      w = new l(),
      M = new l();
    p.prototype.getContacts = function(t, e, i, n, o, s, a) {
      (this.contactPointPool = o),
        (this.frictionEquationPool = a),
        (this.result = n),
        (this.frictionResult = s);
      for (var c = w, l = M, u = v, h = y, d = 0, p = t.length; d !== p; d++) {
        var f = t[d],
          m = e[d],
          g = null;
        f.material &&
          m.material &&
          (g = i.getContactMaterial(f.material, m.material) || null);
        for (
          var E =
              (f.type & r.KINEMATIC && m.type & r.STATIC) ||
              (f.type & r.STATIC && m.type & r.KINEMATIC) ||
              (f.type & r.KINEMATIC && m.type & r.KINEMATIC),
            b = 0;
          b < f.shapes.length;
          b++
        ) {
          f.quaternion.mult(f.shapeOrientations[b], c),
            f.quaternion.vmult(f.shapeOffsets[b], u),
            u.vadd(f.position, u);
          for (var x = f.shapes[b], A = 0; A < m.shapes.length; A++) {
            m.quaternion.mult(m.shapeOrientations[A], l),
              m.quaternion.vmult(m.shapeOffsets[A], h),
              h.vadd(m.position, h);
            var T = m.shapes[A];
            if (
              !(
                u.distanceTo(h) >
                x.boundingSphereRadius + T.boundingSphereRadius
              )
            ) {
              var L = null;
              x.material &&
                T.material &&
                (L = i.getContactMaterial(x.material, T.material) || null),
                (this.currentContactMaterial =
                  L || g || i.defaultContactMaterial);
              var N = this[x.type | T.type];
              if (N) {
                (x.type < T.type
                  ? N.call(this, x, T, u, h, c, l, f, m, x, T, E)
                  : N.call(this, T, x, h, u, l, c, m, f, x, T, E)) &&
                  E &&
                  (i.shapeOverlapKeeper.set(x.id, T.id),
                  i.bodyOverlapKeeper.set(f.id, m.id));
              }
            }
          }
        }
      }
    };
    (p.prototype[o.types.BOX | o.types.BOX] = p.prototype.boxBox = function(
      t,
      e,
      i,
      n,
      r,
      o,
      s,
      a,
      c,
      l,
      u
    ) {
      return (
        (t.convexPolyhedronRepresentation.material = t.material),
        (e.convexPolyhedronRepresentation.material = e.material),
        (t.convexPolyhedronRepresentation.collisionResponse =
          t.collisionResponse),
        (e.convexPolyhedronRepresentation.collisionResponse =
          e.collisionResponse),
        this.convexConvex(
          t.convexPolyhedronRepresentation,
          e.convexPolyhedronRepresentation,
          i,
          n,
          r,
          o,
          s,
          a,
          t,
          e,
          u
        )
      );
    }),
      (p.prototype[
        o.types.BOX | o.types.CONVEXPOLYHEDRON
      ] = p.prototype.boxConvex = function(t, e, i, n, r, o, s, a, c, l, u) {
        return (
          (t.convexPolyhedronRepresentation.material = t.material),
          (t.convexPolyhedronRepresentation.collisionResponse =
            t.collisionResponse),
          this.convexConvex(
            t.convexPolyhedronRepresentation,
            e,
            i,
            n,
            r,
            o,
            s,
            a,
            t,
            e,
            u
          )
        );
      }),
      (p.prototype[
        o.types.BOX | o.types.PARTICLE
      ] = p.prototype.boxParticle = function(t, e, i, n, r, o, s, a, c, l, u) {
        return (
          (t.convexPolyhedronRepresentation.material = t.material),
          (t.convexPolyhedronRepresentation.collisionResponse =
            t.collisionResponse),
          this.convexParticle(
            t.convexPolyhedronRepresentation,
            e,
            i,
            n,
            r,
            o,
            s,
            a,
            t,
            e,
            u
          )
        );
      }),
      (p.prototype[o.types.SPHERE] = p.prototype.sphereSphere = function(
        t,
        e,
        i,
        n,
        r,
        o,
        s,
        a,
        c,
        l,
        u
      ) {
        if (u) return i.distanceSquared(n) < Math.pow(t.radius + e.radius, 2);
        var h = this.createContactEquation(s, a, t, e, c, l);
        n.vsub(i, h.ni),
          h.ni.normalize(),
          h.ri.copy(h.ni),
          h.rj.copy(h.ni),
          h.ri.mult(t.radius, h.ri),
          h.rj.mult(-e.radius, h.rj),
          h.ri.vadd(i, h.ri),
          h.ri.vsub(s.position, h.ri),
          h.rj.vadd(n, h.rj),
          h.rj.vsub(a.position, h.rj),
          this.result.push(h),
          this.createFrictionEquationsFromContact(h, this.frictionResult);
      });
    var E = new a(),
      b = new a(),
      x = new a();
    p.prototype[
      o.types.PLANE | o.types.TRIMESH
    ] = p.prototype.planeTrimesh = function(t, e, i, n, r, o, s, l, u, h, d) {
      var p = new a(),
        f = E;
      f.set(0, 0, 1), r.vmult(f, f);
      for (var m = 0; m < e.vertices.length / 3; m++) {
        e.getVertex(m, p);
        var g = new a();
        g.copy(p), c.pointToWorldFrame(n, o, g, p);
        var v = b;
        if ((p.vsub(i, v), f.dot(v) <= 0)) {
          if (d) return !0;
          var y = this.createContactEquation(s, l, t, e, u, h);
          y.ni.copy(f);
          var w = x;
          f.scale(v.dot(f), w),
            p.vsub(w, w),
            y.ri.copy(w),
            y.ri.vsub(s.position, y.ri),
            y.rj.copy(p),
            y.rj.vsub(l.position, y.rj),
            this.result.push(y),
            this.createFrictionEquationsFromContact(y, this.frictionResult);
        }
      }
    };
    var A = new a(),
      T = new a(),
      L = (new a(), new a()),
      N = new a(),
      D = new a(),
      S = new a(),
      C = new a(),
      _ = new a(),
      I = new a(),
      j = new a(),
      O = new a(),
      R = new a(),
      z = new a(),
      k = new n(),
      B = [];
    p.prototype[
      o.types.SPHERE | o.types.TRIMESH
    ] = p.prototype.sphereTrimesh = function(t, e, i, n, r, o, a, l, u, h, d) {
      var p = D,
        f = S,
        m = C,
        g = _,
        v = I,
        y = j,
        w = k,
        M = N,
        E = T,
        b = B;
      c.pointToLocalFrame(n, o, i, v);
      var x = t.radius;
      w.lowerBound.set(v.x - x, v.y - x, v.z - x),
        w.upperBound.set(v.x + x, v.y + x, v.z + x),
        e.getTrianglesInAABB(w, b);
      for (var P = L, U = t.radius * t.radius, F = 0; F < b.length; F++)
        for (var H = 0; H < 3; H++)
          if (
            (e.getVertex(e.indices[3 * b[F] + H], P),
            P.vsub(v, E),
            E.norm2() <= U)
          ) {
            if ((M.copy(P), c.pointToWorldFrame(n, o, M, P), P.vsub(i, E), d))
              return !0;
            (Y = this.createContactEquation(a, l, t, e, u, h)).ni.copy(E),
              Y.ni.normalize(),
              Y.ri.copy(Y.ni),
              Y.ri.scale(t.radius, Y.ri),
              Y.ri.vadd(i, Y.ri),
              Y.ri.vsub(a.position, Y.ri),
              Y.rj.copy(P),
              Y.rj.vsub(l.position, Y.rj),
              this.result.push(Y),
              this.createFrictionEquationsFromContact(Y, this.frictionResult);
          }
      for (F = 0; F < b.length; F++)
        for (H = 0; H < 3; H++) {
          e.getVertex(e.indices[3 * b[F] + H], p),
            e.getVertex(e.indices[3 * b[F] + (H + 1) % 3], f),
            f.vsub(p, m),
            v.vsub(f, y);
          var V = y.dot(m);
          v.vsub(p, y);
          var G = y.dot(m);
          if (G > 0 && V < 0)
            if (
              (v.vsub(p, y),
              g.copy(m),
              g.normalize(),
              (G = y.dot(g)),
              g.scale(G, y),
              y.vadd(p, y),
              (Z = y.distanceTo(v)) < t.radius)
            ) {
              if (d) return !0;
              var Y = this.createContactEquation(a, l, t, e, u, h);
              y.vsub(v, Y.ni),
                Y.ni.normalize(),
                Y.ni.scale(t.radius, Y.ri),
                c.pointToWorldFrame(n, o, y, y),
                y.vsub(l.position, Y.rj),
                c.vectorToWorldFrame(o, Y.ni, Y.ni),
                c.vectorToWorldFrame(o, Y.ri, Y.ri),
                this.result.push(Y),
                this.createFrictionEquationsFromContact(Y, this.frictionResult);
            }
        }
      for (
        var Q = O, W = R, q = z, X = A, K = ((F = 0), b.length);
        F !== K;
        F++
      ) {
        e.getTriangleVertices(b[F], Q, W, q),
          e.getNormal(b[F], X),
          v.vsub(Q, y);
        var Z = y.dot(X);
        if (
          (X.scale(Z, y),
          v.vsub(y, y),
          (Z = y.distanceTo(v)),
          s.pointInTriangle(y, Q, W, q) && Z < t.radius)
        ) {
          if (d) return !0;
          Y = this.createContactEquation(a, l, t, e, u, h);
          y.vsub(v, Y.ni),
            Y.ni.normalize(),
            Y.ni.scale(t.radius, Y.ri),
            c.pointToWorldFrame(n, o, y, y),
            y.vsub(l.position, Y.rj),
            c.vectorToWorldFrame(o, Y.ni, Y.ni),
            c.vectorToWorldFrame(o, Y.ri, Y.ri),
            this.result.push(Y),
            this.createFrictionEquationsFromContact(Y, this.frictionResult);
        }
      }
      b.length = 0;
    };
    var P = new a(),
      U = new a();
    p.prototype[
      o.types.SPHERE | o.types.PLANE
    ] = p.prototype.spherePlane = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = this.createContactEquation(s, a, t, e, c, l);
      if (
        (h.ni.set(0, 0, 1),
        o.vmult(h.ni, h.ni),
        h.ni.negate(h.ni),
        h.ni.normalize(),
        h.ni.mult(t.radius, h.ri),
        i.vsub(n, P),
        h.ni.mult(h.ni.dot(P), U),
        P.vsub(U, h.rj),
        -P.dot(h.ni) <= t.radius)
      ) {
        if (u) return !0;
        var d = h.ri,
          p = h.rj;
        d.vadd(i, d),
          d.vsub(s.position, d),
          p.vadd(n, p),
          p.vsub(a.position, p),
          this.result.push(h),
          this.createFrictionEquationsFromContact(h, this.frictionResult);
      }
    };
    var F = new a(),
      H = new a(),
      V = new a();
    function G(t, e, i) {
      for (var n = null, r = t.length, o = 0; o !== r; o++) {
        var s = t[o],
          a = F;
        t[(o + 1) % r].vsub(s, a);
        var c = H;
        a.cross(e, c);
        var l = V;
        i.vsub(s, l);
        var u = c.dot(l);
        if (!(null === n || (u > 0 && !0 === n) || (u <= 0 && !1 === n)))
          return !1;
        null === n && (n = u > 0);
      }
      return !0;
    }
    var Y = new a(),
      Q = new a(),
      W = new a(),
      q = new a(),
      X = [new a(), new a(), new a(), new a(), new a(), new a()],
      K = new a(),
      Z = new a(),
      J = new a(),
      $ = new a();
    p.prototype[
      o.types.SPHERE | o.types.BOX
    ] = p.prototype.sphereBox = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = this.v3pool,
        d = X;
      i.vsub(n, Y), e.getSideNormals(d, o);
      for (
        var p = t.radius,
          f = !1,
          m = Z,
          g = J,
          v = $,
          y = null,
          w = 0,
          M = 0,
          E = 0,
          b = null,
          x = 0,
          A = d.length;
        x !== A && !1 === f;
        x++
      ) {
        var T = Q;
        T.copy(d[x]);
        var L = T.norm();
        T.normalize();
        var N = Y.dot(T);
        if (N < L + p && N > 0) {
          var D = W,
            S = q;
          D.copy(d[(x + 1) % 3]), S.copy(d[(x + 2) % 3]);
          var C = D.norm(),
            _ = S.norm();
          D.normalize(), S.normalize();
          var I = Y.dot(D),
            j = Y.dot(S);
          if (I < C && I > -C && j < _ && j > -_) {
            var O = Math.abs(N - L - p);
            if (
              (null === b || O < b) &&
              ((b = O),
              (M = I),
              (E = j),
              (y = L),
              m.copy(T),
              g.copy(D),
              v.copy(S),
              w++,
              u)
            )
              return !0;
          }
        }
      }
      if (w) {
        f = !0;
        var R = this.createContactEquation(s, a, t, e, c, l);
        m.mult(-p, R.ri),
          R.ni.copy(m),
          R.ni.negate(R.ni),
          m.mult(y, m),
          g.mult(M, g),
          m.vadd(g, m),
          v.mult(E, v),
          m.vadd(v, R.rj),
          R.ri.vadd(i, R.ri),
          R.ri.vsub(s.position, R.ri),
          R.rj.vadd(n, R.rj),
          R.rj.vsub(a.position, R.rj),
          this.result.push(R),
          this.createFrictionEquationsFromContact(R, this.frictionResult);
      }
      for (var z = h.get(), k = K, B = 0; 2 !== B && !f; B++)
        for (var P = 0; 2 !== P && !f; P++)
          for (var U = 0; 2 !== U && !f; U++)
            if (
              (z.set(0, 0, 0),
              B ? z.vadd(d[0], z) : z.vsub(d[0], z),
              P ? z.vadd(d[1], z) : z.vsub(d[1], z),
              U ? z.vadd(d[2], z) : z.vsub(d[2], z),
              n.vadd(z, k),
              k.vsub(i, k),
              k.norm2() < p * p)
            ) {
              if (u) return !0;
              (f = !0),
                (R = this.createContactEquation(s, a, t, e, c, l)).ri.copy(k),
                R.ri.normalize(),
                R.ni.copy(R.ri),
                R.ri.mult(p, R.ri),
                R.rj.copy(z),
                R.ri.vadd(i, R.ri),
                R.ri.vsub(s.position, R.ri),
                R.rj.vadd(n, R.rj),
                R.rj.vsub(a.position, R.rj),
                this.result.push(R),
                this.createFrictionEquationsFromContact(R, this.frictionResult);
            }
      h.release(z), (z = null);
      var F = h.get(),
        H = h.get(),
        V = ((R = h.get()), h.get()),
        G = ((O = h.get()), d.length);
      for (B = 0; B !== G && !f; B++)
        for (P = 0; P !== G && !f; P++)
          if (B % 3 != P % 3) {
            d[P].cross(d[B], F),
              F.normalize(),
              d[B].vadd(d[P], H),
              R.copy(i),
              R.vsub(H, R),
              R.vsub(n, R);
            var tt = R.dot(F);
            F.mult(tt, V);
            for (U = 0; U === B % 3 || U === P % 3; ) U++;
            O.copy(i), O.vsub(V, O), O.vsub(H, O), O.vsub(n, O);
            var et = Math.abs(tt),
              it = O.norm();
            if (et < d[U].norm() && it < p) {
              if (u) return !0;
              f = !0;
              var nt = this.createContactEquation(s, a, t, e, c, l);
              H.vadd(V, nt.rj),
                nt.rj.copy(nt.rj),
                O.negate(nt.ni),
                nt.ni.normalize(),
                nt.ri.copy(nt.rj),
                nt.ri.vadd(n, nt.ri),
                nt.ri.vsub(i, nt.ri),
                nt.ri.normalize(),
                nt.ri.mult(p, nt.ri),
                nt.ri.vadd(i, nt.ri),
                nt.ri.vsub(s.position, nt.ri),
                nt.rj.vadd(n, nt.rj),
                nt.rj.vsub(a.position, nt.rj),
                this.result.push(nt),
                this.createFrictionEquationsFromContact(
                  nt,
                  this.frictionResult
                );
            }
          }
      h.release(F, H, R, V, O);
    };
    var tt = new a(),
      et = new a(),
      it = new a(),
      nt = new a(),
      rt = new a(),
      ot = new a(),
      st = new a(),
      at = new a(),
      ct = new a(),
      lt = new a();
    p.prototype[
      o.types.SPHERE | o.types.CONVEXPOLYHEDRON
    ] = p.prototype.sphereConvex = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = this.v3pool;
      i.vsub(n, tt);
      for (
        var d = e.faceNormals, p = e.faces, f = e.vertices, m = t.radius, g = 0;
        g !== f.length;
        g++
      ) {
        var v = f[g],
          y = rt;
        o.vmult(v, y), n.vadd(y, y);
        var w = nt;
        if ((y.vsub(i, w), w.norm2() < m * m))
          return (
            !!u ||
            ((M = !0),
            (O = this.createContactEquation(s, a, t, e, c, l)).ri.copy(w),
            O.ri.normalize(),
            O.ni.copy(O.ri),
            O.ri.mult(m, O.ri),
            y.vsub(n, O.rj),
            O.ri.vadd(i, O.ri),
            O.ri.vsub(s.position, O.ri),
            O.rj.vadd(n, O.rj),
            O.rj.vsub(a.position, O.rj),
            this.result.push(O),
            void this.createFrictionEquationsFromContact(
              O,
              this.frictionResult
            ))
          );
      }
      for (var M = !1, E = ((g = 0), p.length); g !== E && !1 === M; g++) {
        var b = d[g],
          x = p[g],
          A = ot;
        o.vmult(b, A);
        var T = st;
        o.vmult(f[x[0]], T), T.vadd(n, T);
        var L = at;
        A.mult(-m, L), i.vadd(L, L);
        var N = ct;
        L.vsub(T, N);
        var D = N.dot(A),
          S = lt;
        if ((i.vsub(T, S), D < 0 && S.dot(A) > 0)) {
          for (var C = [], _ = 0, I = x.length; _ !== I; _++) {
            var j = h.get();
            o.vmult(f[x[_]], j), n.vadd(j, j), C.push(j);
          }
          if (G(C, A, i)) {
            if (u) return !0;
            M = !0;
            var O = this.createContactEquation(s, a, t, e, c, l);
            A.mult(-m, O.ri), A.negate(O.ni);
            var R = h.get();
            A.mult(-D, R);
            var z = h.get();
            A.mult(-m, z),
              i.vsub(n, O.rj),
              O.rj.vadd(z, O.rj),
              O.rj.vadd(R, O.rj),
              O.rj.vadd(n, O.rj),
              O.rj.vsub(a.position, O.rj),
              O.ri.vadd(i, O.ri),
              O.ri.vsub(s.position, O.ri),
              h.release(R),
              h.release(z),
              this.result.push(O),
              this.createFrictionEquationsFromContact(O, this.frictionResult);
            _ = 0;
            for (var k = C.length; _ !== k; _++) h.release(C[_]);
            return;
          }
          for (_ = 0; _ !== x.length; _++) {
            var B = h.get(),
              P = h.get();
            o.vmult(f[x[(_ + 1) % x.length]], B),
              o.vmult(f[x[(_ + 2) % x.length]], P),
              n.vadd(B, B),
              n.vadd(P, P);
            var U = et;
            P.vsub(B, U);
            var F = it;
            U.unit(F);
            var H = h.get(),
              V = h.get();
            i.vsub(B, V);
            var Y = V.dot(F);
            F.mult(Y, H), H.vadd(B, H);
            var Q = h.get();
            if (
              (H.vsub(i, Q), Y > 0 && Y * Y < U.norm2() && Q.norm2() < m * m)
            ) {
              if (u) return !0;
              O = this.createContactEquation(s, a, t, e, c, l);
              H.vsub(n, O.rj),
                H.vsub(i, O.ni),
                O.ni.normalize(),
                O.ni.mult(m, O.ri),
                O.rj.vadd(n, O.rj),
                O.rj.vsub(a.position, O.rj),
                O.ri.vadd(i, O.ri),
                O.ri.vsub(s.position, O.ri),
                this.result.push(O),
                this.createFrictionEquationsFromContact(O, this.frictionResult);
              for (_ = 0, k = C.length; _ !== k; _++) h.release(C[_]);
              return (
                h.release(B),
                h.release(P),
                h.release(H),
                h.release(Q),
                void h.release(V)
              );
            }
            h.release(B),
              h.release(P),
              h.release(H),
              h.release(Q),
              h.release(V);
          }
          for (_ = 0, k = C.length; _ !== k; _++) h.release(C[_]);
        }
      }
    };
    new a(), new a();
    p.prototype[o.types.PLANE | o.types.BOX] = p.prototype.planeBox = function(
      t,
      e,
      i,
      n,
      r,
      o,
      s,
      a,
      c,
      l,
      u
    ) {
      return (
        (e.convexPolyhedronRepresentation.material = e.material),
        (e.convexPolyhedronRepresentation.collisionResponse =
          e.collisionResponse),
        (e.convexPolyhedronRepresentation.id = e.id),
        this.planeConvex(
          t,
          e.convexPolyhedronRepresentation,
          i,
          n,
          r,
          o,
          s,
          a,
          t,
          e,
          u
        )
      );
    };
    var ut = new a(),
      ht = new a(),
      dt = new a(),
      pt = new a();
    p.prototype[
      o.types.PLANE | o.types.CONVEXPOLYHEDRON
    ] = p.prototype.planeConvex = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = ut,
        d = ht;
      d.set(0, 0, 1), r.vmult(d, d);
      for (var p = 0, f = dt, m = 0; m !== e.vertices.length; m++) {
        if (
          (h.copy(e.vertices[m]),
          o.vmult(h, h),
          n.vadd(h, h),
          h.vsub(i, f),
          d.dot(f) <= 0)
        ) {
          if (u) return !0;
          var g = this.createContactEquation(s, a, t, e, c, l),
            v = pt;
          d.mult(d.dot(f), v),
            h.vsub(v, v),
            v.vsub(i, g.ri),
            g.ni.copy(d),
            h.vsub(n, g.rj),
            g.ri.vadd(i, g.ri),
            g.ri.vsub(s.position, g.ri),
            g.rj.vadd(n, g.rj),
            g.rj.vsub(a.position, g.rj),
            this.result.push(g),
            p++,
            this.enableFrictionReduction ||
              this.createFrictionEquationsFromContact(g, this.frictionResult);
        }
      }
      this.enableFrictionReduction && p && this.createFrictionFromAverage(p);
    };
    var ft = new a(),
      mt = new a();
    p.prototype[o.types.CONVEXPOLYHEDRON] = p.prototype.convexConvex = function(
      t,
      e,
      i,
      n,
      r,
      o,
      s,
      a,
      c,
      l,
      u,
      h,
      d
    ) {
      var p = ft;
      if (
        !(i.distanceTo(n) > t.boundingSphereRadius + e.boundingSphereRadius) &&
        t.findSeparatingAxis(e, i, r, n, o, p, h, d)
      ) {
        var f = [],
          m = mt;
        t.clipAgainstHull(i, r, e, n, o, p, -100, 100, f);
        for (var g = 0, v = 0; v !== f.length; v++) {
          if (u) return !0;
          var y = this.createContactEquation(s, a, t, e, c, l),
            w = y.ri,
            M = y.rj;
          p.negate(y.ni),
            f[v].normal.negate(m),
            m.mult(f[v].depth, m),
            f[v].point.vadd(m, w),
            M.copy(f[v].point),
            w.vsub(i, w),
            M.vsub(n, M),
            w.vadd(i, w),
            w.vsub(s.position, w),
            M.vadd(n, M),
            M.vsub(a.position, M),
            this.result.push(y),
            g++,
            this.enableFrictionReduction ||
              this.createFrictionEquationsFromContact(y, this.frictionResult);
        }
        this.enableFrictionReduction && g && this.createFrictionFromAverage(g);
      }
    };
    var gt = new a(),
      vt = new a(),
      yt = new a();
    p.prototype[
      o.types.PLANE | o.types.PARTICLE
    ] = p.prototype.planeParticle = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = gt;
      h.set(0, 0, 1), s.quaternion.vmult(h, h);
      var d = vt;
      if ((n.vsub(s.position, d), h.dot(d) <= 0)) {
        if (u) return !0;
        var p = this.createContactEquation(a, s, e, t, c, l);
        p.ni.copy(h), p.ni.negate(p.ni), p.ri.set(0, 0, 0);
        var f = yt;
        h.mult(h.dot(n), f),
          n.vsub(f, f),
          p.rj.copy(f),
          this.result.push(p),
          this.createFrictionEquationsFromContact(p, this.frictionResult);
      }
    };
    var wt = new a();
    p.prototype[
      o.types.PARTICLE | o.types.SPHERE
    ] = p.prototype.sphereParticle = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = wt;
      if ((h.set(0, 0, 1), n.vsub(i, h), h.norm2() <= t.radius * t.radius)) {
        if (u) return !0;
        var d = this.createContactEquation(a, s, e, t, c, l);
        h.normalize(),
          d.rj.copy(h),
          d.rj.mult(t.radius, d.rj),
          d.ni.copy(h),
          d.ni.negate(d.ni),
          d.ri.set(0, 0, 0),
          this.result.push(d),
          this.createFrictionEquationsFromContact(d, this.frictionResult);
      }
    };
    var Mt = new l(),
      Et = new a(),
      bt = (new a(), new a()),
      xt = new a(),
      At = new a();
    (p.prototype[
      o.types.PARTICLE | o.types.CONVEXPOLYHEDRON
    ] = p.prototype.convexParticle = function(t, e, i, n, r, o, s, a, c, l, u) {
      var h = -1,
        d = bt,
        p = At,
        f = null,
        m = Et;
      if (
        (m.copy(n),
        m.vsub(i, m),
        r.conjugate(Mt),
        Mt.vmult(m, m),
        t.pointIsInside(m))
      ) {
        t.worldVerticesNeedsUpdate && t.computeWorldVertices(i, r),
          t.worldFaceNormalsNeedsUpdate && t.computeWorldFaceNormals(r);
        for (var g = 0, v = t.faces.length; g !== v; g++) {
          var y = [t.worldVertices[t.faces[g][0]]],
            w = t.worldFaceNormals[g];
          n.vsub(y[0], xt);
          var M = -w.dot(xt);
          if (null === f || Math.abs(M) < Math.abs(f)) {
            if (u) return !0;
            (f = M), (h = g), d.copy(w), 0;
          }
        }
        if (-1 !== h) {
          var E = this.createContactEquation(a, s, e, t, c, l);
          d.mult(f, p),
            p.vadd(n, p),
            p.vsub(i, p),
            E.rj.copy(p),
            d.negate(E.ni),
            E.ri.set(0, 0, 0);
          var b = E.ri,
            x = E.rj;
          b.vadd(n, b),
            b.vsub(a.position, b),
            x.vadd(i, x),
            x.vsub(s.position, x),
            this.result.push(E),
            this.createFrictionEquationsFromContact(E, this.frictionResult);
        } else
          console.warn(
            'Point found inside convex, but did not find penetrating face!'
          );
      }
    }),
      (p.prototype[
        o.types.BOX | o.types.HEIGHTFIELD
      ] = p.prototype.boxHeightfield = function(
        t,
        e,
        i,
        n,
        r,
        o,
        s,
        a,
        c,
        l,
        u
      ) {
        return (
          (t.convexPolyhedronRepresentation.material = t.material),
          (t.convexPolyhedronRepresentation.collisionResponse =
            t.collisionResponse),
          this.convexHeightfield(
            t.convexPolyhedronRepresentation,
            e,
            i,
            n,
            r,
            o,
            s,
            a,
            t,
            e,
            u
          )
        );
      });
    var Tt = new a(),
      Lt = new a(),
      Nt = [0];
    p.prototype[
      o.types.CONVEXPOLYHEDRON | o.types.HEIGHTFIELD
    ] = p.prototype.convexHeightfield = function(
      t,
      e,
      i,
      n,
      r,
      o,
      s,
      a,
      l,
      u,
      h
    ) {
      var d = e.data,
        p = e.elementSize,
        f = t.boundingSphereRadius,
        m = Lt,
        g = Nt,
        v = Tt;
      c.pointToLocalFrame(n, o, i, v);
      var y = Math.floor((v.x - f) / p) - 1,
        w = Math.ceil((v.x + f) / p) + 1,
        M = Math.floor((v.y - f) / p) - 1,
        E = Math.ceil((v.y + f) / p) + 1;
      if (!(w < 0 || E < 0 || y > d.length || M > d[0].length)) {
        y < 0 && (y = 0),
          w < 0 && (w = 0),
          M < 0 && (M = 0),
          E < 0 && (E = 0),
          y >= d.length && (y = d.length - 1),
          w >= d.length && (w = d.length - 1),
          E >= d[0].length && (E = d[0].length - 1),
          M >= d[0].length && (M = d[0].length - 1);
        var b = [];
        e.getRectMinMax(y, M, w, E, b);
        var x = b[0],
          A = b[1];
        if (!(v.z - f > A || v.z + f < x))
          for (var T = y; T < w; T++)
            for (var L = M; L < E; L++) {
              var N = !1;
              if (
                (e.getConvexTrianglePillar(T, L, !1),
                c.pointToWorldFrame(n, o, e.pillarOffset, m),
                i.distanceTo(m) <
                  e.pillarConvex.boundingSphereRadius +
                    t.boundingSphereRadius &&
                  (N = this.convexConvex(
                    t,
                    e.pillarConvex,
                    i,
                    m,
                    r,
                    o,
                    s,
                    a,
                    null,
                    null,
                    h,
                    g,
                    null
                  )),
                h && N)
              )
                return !0;
              if (
                (e.getConvexTrianglePillar(T, L, !0),
                c.pointToWorldFrame(n, o, e.pillarOffset, m),
                i.distanceTo(m) <
                  e.pillarConvex.boundingSphereRadius +
                    t.boundingSphereRadius &&
                  (N = this.convexConvex(
                    t,
                    e.pillarConvex,
                    i,
                    m,
                    r,
                    o,
                    s,
                    a,
                    null,
                    null,
                    h,
                    g,
                    null
                  )),
                h && N)
              )
                return !0;
            }
      }
    };
    var Dt = new a(),
      St = new a();
    p.prototype[
      o.types.SPHERE | o.types.HEIGHTFIELD
    ] = p.prototype.sphereHeightfield = function(
      t,
      e,
      i,
      n,
      r,
      o,
      s,
      a,
      l,
      u,
      h
    ) {
      var d = e.data,
        p = t.radius,
        f = e.elementSize,
        m = St,
        g = Dt;
      c.pointToLocalFrame(n, o, i, g);
      var v = Math.floor((g.x - p) / f) - 1,
        y = Math.ceil((g.x + p) / f) + 1,
        w = Math.floor((g.y - p) / f) - 1,
        M = Math.ceil((g.y + p) / f) + 1;
      if (!(y < 0 || M < 0 || v > d.length || M > d[0].length)) {
        v < 0 && (v = 0),
          y < 0 && (y = 0),
          w < 0 && (w = 0),
          M < 0 && (M = 0),
          v >= d.length && (v = d.length - 1),
          y >= d.length && (y = d.length - 1),
          M >= d[0].length && (M = d[0].length - 1),
          w >= d[0].length && (w = d[0].length - 1);
        var E = [];
        e.getRectMinMax(v, w, y, M, E);
        var b = E[0],
          x = E[1];
        if (!(g.z - p > x || g.z + p < b))
          for (var A = this.result, T = v; T < y; T++)
            for (var L = w; L < M; L++) {
              var N = A.length,
                D = !1;
              if (
                (e.getConvexTrianglePillar(T, L, !1),
                c.pointToWorldFrame(n, o, e.pillarOffset, m),
                i.distanceTo(m) <
                  e.pillarConvex.boundingSphereRadius +
                    t.boundingSphereRadius &&
                  (D = this.sphereConvex(
                    t,
                    e.pillarConvex,
                    i,
                    m,
                    r,
                    o,
                    s,
                    a,
                    t,
                    e,
                    h
                  )),
                h && D)
              )
                return !0;
              if (
                (e.getConvexTrianglePillar(T, L, !0),
                c.pointToWorldFrame(n, o, e.pillarOffset, m),
                i.distanceTo(m) <
                  e.pillarConvex.boundingSphereRadius +
                    t.boundingSphereRadius &&
                  (D = this.sphereConvex(
                    t,
                    e.pillarConvex,
                    i,
                    m,
                    r,
                    o,
                    s,
                    a,
                    t,
                    e,
                    h
                  )),
                h && D)
              )
                return !0;
              if (A.length - N > 2) return;
            }
      }
    };
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(0),
      r = i(32);
    function o() {
      r.call(this), (this.type = n);
    }
    (o.prototype = new r()),
      (o.prototype.constructObject = function() {
        return new n();
      });
  },
  function(t, e) {
    function i() {
      (this.objects = []), (this.type = Object);
    }
    (t.exports = i),
      (i.prototype.release = function() {
        for (var t = arguments.length, e = 0; e !== t; e++)
          this.objects.push(arguments[e]);
        return this;
      }),
      (i.prototype.get = function() {
        return 0 === this.objects.length
          ? this.constructObject()
          : this.objects.pop();
      }),
      (i.prototype.constructObject = function() {
        throw new Error(
          'constructObject() not implemented in this Pool subclass yet!'
        );
      }),
      (i.prototype.resize = function(t) {
        for (var e = this.objects; e.length > t; ) e.pop();
        for (; e.length < t; ) e.push(this.constructObject());
        return this;
      });
  },
  function(t, e, i) {
    var n = i(12);
    function r(t, e, i) {
      (i = n.defaults(i, {
        friction: 0.3,
        restitution: 0.3,
        contactEquationStiffness: 1e7,
        contactEquationRelaxation: 3,
        frictionEquationStiffness: 1e7,
        frictionEquationRelaxation: 3
      })),
        (this.id = r.idCounter++),
        (this.materials = [t, e]),
        (this.friction = i.friction),
        (this.restitution = i.restitution),
        (this.contactEquationStiffness = i.contactEquationStiffness),
        (this.contactEquationRelaxation = i.contactEquationRelaxation),
        (this.frictionEquationStiffness = i.frictionEquationStiffness),
        (this.frictionEquationRelaxation = i.frictionEquationRelaxation);
    }
    (t.exports = r), (r.idCounter = 0);
  },
  function(t, e, i) {
    t.exports = r;
    i(0), i(2);
    var n = i(20);
    function r() {
      n.call(this), (this.iterations = 10), (this.tolerance = 1e-7);
    }
    r.prototype = new n();
    var o = [],
      s = [],
      a = [];
    r.prototype.solve = function(t, e) {
      var i,
        n,
        r,
        c,
        l,
        u = 0,
        h = this.iterations,
        d = this.tolerance * this.tolerance,
        p = this.equations,
        f = p.length,
        m = e.bodies,
        g = m.length,
        v = t;
      if (0 !== f)
        for (var y = 0; y !== g; y++) m[y].updateSolveMassProperties();
      var w = s,
        M = a,
        E = o;
      (w.length = f), (M.length = f), (E.length = f);
      for (y = 0; y !== f; y++) {
        var b = p[y];
        (E[y] = 0), (M[y] = b.computeB(v)), (w[y] = 1 / b.computeC());
      }
      if (0 !== f) {
        for (y = 0; y !== g; y++) {
          var x = (L = m[y]).vlambda,
            A = L.wlambda;
          x.set(0, 0, 0), A.set(0, 0, 0);
        }
        for (u = 0; u !== h; u++) {
          c = 0;
          for (var T = 0; T !== f; T++) {
            b = p[T];
            (i = M[T]),
              (n = w[T]),
              (l = E[T]) + (r = n * (i - b.computeGWlambda() - b.eps * l)) <
              b.minForce
                ? (r = b.minForce - l)
                : l + r > b.maxForce && (r = b.maxForce - l),
              (E[T] += r),
              (c += r > 0 ? r : -r),
              b.addToWlambda(r);
          }
          if (c * c < d) break;
        }
        for (y = 0; y !== g; y++) {
          var L,
            N = (L = m[y]).velocity,
            D = L.angularVelocity;
          L.vlambda.vmul(L.linearFactor, L.vlambda),
            N.vadd(L.vlambda, N),
            L.wlambda.vmul(L.angularFactor, L.wlambda),
            D.vadd(L.wlambda, D);
        }
        for (var S = p.length, C = 1 / v; S--; ) p[S].multiplier = E[S] * C;
      }
      return u;
    };
  },
  function(t, e, i) {
    t.exports = a;
    i(10);
    var n = i(21),
      r = i(22),
      o = i(26),
      s = (i(6), i(0));
    function a(t, e, i) {
      var a = void 0 !== (i = i || {}).maxForce ? i.maxForce : 1e6,
        c = i.pivotA ? i.pivotA.clone() : new s(),
        l = i.pivotB ? i.pivotB.clone() : new s();
      n.call(this, t, c, e, l, a),
        (this.axisA = i.axisA ? i.axisA.clone() : new s(1, 0, 0)).normalize(),
        (this.axisB = i.axisB ? i.axisB.clone() : new s(1, 0, 0)).normalize();
      var u = (this.rotationalEquation1 = new r(t, e, i)),
        h = (this.rotationalEquation2 = new r(t, e, i)),
        d = (this.motorEquation = new o(t, e, a));
      (d.enabled = !1), this.equations.push(u, h, d);
    }
    (a.prototype = new n()),
      (a.constructor = a),
      (a.prototype.enableMotor = function() {
        this.motorEquation.enabled = !0;
      }),
      (a.prototype.disableMotor = function() {
        this.motorEquation.enabled = !1;
      }),
      (a.prototype.setMotorSpeed = function(t) {
        this.motorEquation.targetVelocity = t;
      }),
      (a.prototype.setMotorMaxForce = function(t) {
        (this.motorEquation.maxForce = t), (this.motorEquation.minForce = -t);
      });
    var c = new s(),
      l = new s();
    a.prototype.update = function() {
      var t = this.bodyA,
        e = this.bodyB,
        i = this.motorEquation,
        r = this.rotationalEquation1,
        o = this.rotationalEquation2,
        s = c,
        a = l,
        u = this.axisA,
        h = this.axisB;
      n.prototype.update.call(this),
        t.quaternion.vmult(u, s),
        e.quaternion.vmult(h, a),
        s.tangents(r.axisA, o.axisA),
        r.axisB.copy(a),
        o.axisB.copy(a),
        this.motorEquation.enabled &&
          (t.quaternion.vmult(this.axisA, i.axisA),
          e.quaternion.vmult(this.axisB, i.axisB));
    };
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(18),
      r = i(3);
    function o() {
      n.apply(this);
    }
    (o.prototype = new n()),
      (o.prototype.constructor = o),
      (o.prototype.collisionPairs = function(t, e, i) {
        var n,
          r,
          o,
          s,
          a = t.bodies,
          c = a.length;
        for (n = 0; n !== c; n++)
          for (r = 0; r !== n; r++)
            (o = a[n]),
              (s = a[r]),
              this.needBroadphaseCollision(o, s) &&
                this.intersectionTest(o, s, e, i);
      });
    new r();
    o.prototype.aabbQuery = function(t, e, i) {
      i = i || [];
      for (var n = 0; n < t.bodies.length; n++) {
        var r = t.bodies[n];
        r.aabbNeedsUpdate && r.computeAABB(), r.aabb.overlaps(e) && i.push(r);
      }
      return i;
    };
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(1),
      r = i(0);
    function o() {
      n.call(this), (this.type = n.types.PARTICLE);
    }
    (o.prototype = new n()),
      (o.prototype.constructor = o),
      (o.prototype.calculateLocalInertia = function(t, e) {
        return (e = e || new r()).set(0, 0, 0), e;
      }),
      (o.prototype.volume = function() {
        return 0;
      }),
      (o.prototype.updateBoundingSphereRadius = function() {
        this.boundingSphereRadius = 0;
      }),
      (o.prototype.calculateWorldAABB = function(t, e, i, n) {
        i.copy(t), n.copy(t);
      });
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(1),
      r = i(0);
    function o(t) {
      if (
        (n.call(this),
        (this.radius = void 0 !== t ? Number(t) : 1),
        (this.type = n.types.SPHERE),
        this.radius < 0)
      )
        throw new Error('The sphere radius cannot be negative.');
      this.updateBoundingSphereRadius();
    }
    (o.prototype = new n()),
      (o.prototype.constructor = o),
      (o.prototype.calculateLocalInertia = function(t, e) {
        e = e || new r();
        var i = 2 * t * this.radius * this.radius / 5;
        return (e.x = i), (e.y = i), (e.z = i), e;
      }),
      (o.prototype.volume = function() {
        return 4 * Math.PI * this.radius / 3;
      }),
      (o.prototype.updateBoundingSphereRadius = function() {
        this.boundingSphereRadius = this.radius;
      }),
      (o.prototype.calculateWorldAABB = function(t, e, i, n) {
        for (
          var r = this.radius, o = ['x', 'y', 'z'], s = 0;
          s < o.length;
          s++
        ) {
          var a = o[s];
          (i[a] = t[a] - r), (n[a] = t[a] + r);
        }
      });
  },
  function(t, e, i) {
    var n,
      r,
      o,
      s,
      a,
      c = i(7),
      l = i(82);
    i(84),
      (t.exports = {
        schema: {
          shape: {
            default: 'auto',
            oneOf: ['auto', 'box', 'cylinder', 'sphere', 'hull', 'none']
          },
          cylinderAxis: { default: 'y', oneOf: ['x', 'y', 'z'] },
          sphereRadius: { default: NaN }
        },
        init: function() {
          (this.system = this.el.sceneEl.systems.physics),
            this.el.sceneEl.hasLoaded
              ? this.initBody()
              : this.el.sceneEl.addEventListener(
                  'loaded',
                  this.initBody.bind(this)
                );
        },
        initBody: function() {
          var t,
            e = this.el,
            i = this.data,
            n = e.getAttribute('position');
          if (
            ((this.body = new c.Body({
              mass: i.mass || 0,
              material: this.system.material,
              position: new c.Vec3(n.x, n.y, n.z),
              linearDamping: i.linearDamping,
              angularDamping: i.angularDamping
            })),
            this.el.object3D.updateMatrixWorld(!0),
            'none' !== i.shape)
          ) {
            var r =
              'auto' === i.shape
                ? void 0
                : AFRAME.utils.extend({}, this.data, {
                    type: l.Type[i.shape.toUpperCase()]
                  });
            if (!(t = l(this.el.object3D, r)))
              return void this.el.addEventListener(
                'model-loaded',
                this.initBody.bind(this)
              );
            this.body.addShape(t, t.offset, t.orientation),
              this.system.debug && this.createWireframe(this.body, t);
          }
          var o = e.getAttribute('rotation');
          this.body.quaternion
            .setFromEuler(
              THREE.Math.degToRad(o.x),
              THREE.Math.degToRad(o.y),
              THREE.Math.degToRad(o.z),
              'XYZ'
            )
            .normalize(),
            (this.el.body = this.body),
            (this.body.el = this.el),
            (this.isLoaded = !0),
            this.isPlaying && this._play(),
            this.el.emit('body-loaded', { body: this.el.body });
        },
        play: function() {
          this.isLoaded && this._play();
        },
        _play: function() {
          this.system.addBehavior(this, this.system.Phase.SIMULATE),
            this.system.addBody(this.body),
            this.wireframe && this.el.sceneEl.object3D.add(this.wireframe),
            this.syncToPhysics();
        },
        pause: function() {
          this.isLoaded &&
            (this.system.removeBehavior(this, this.system.Phase.SIMULATE),
            this.system.removeBody(this.body),
            this.wireframe && this.el.sceneEl.object3D.remove(this.wireframe));
        },
        remove: function() {
          this.pause(),
            delete this.body.el,
            delete this.body,
            delete this.el.body,
            delete this.wireframe;
        },
        createWireframe: function(t, e) {
          var i = e.offset,
            n = e.orientation,
            r = c.shape2mesh(t).children[0];
          (this.wireframe = new THREE.LineSegments(
            new THREE.EdgesGeometry(r.geometry),
            new THREE.LineBasicMaterial({ color: 16711680 })
          )),
            i && (this.wireframe.offset = i.clone()),
            n &&
              (n.inverse(n),
              (this.wireframe.orientation = new THREE.Quaternion(
                n.x,
                n.y,
                n.z,
                n.w
              ))),
            this.syncWireframe();
        },
        syncWireframe: function() {
          var t,
            e = this.wireframe;
          this.wireframe &&
            (e.quaternion.copy(this.body.quaternion),
            e.orientation && e.quaternion.multiply(e.orientation),
            e.position.copy(this.body.position),
            e.offset &&
              ((t = e.offset.clone().applyQuaternion(e.quaternion)),
              e.position.add(t)),
            e.updateMatrix());
        },
        syncToPhysics: ((s = new THREE.Quaternion()),
        (a = new THREE.Vector3()),
        function() {
          var t = this.el,
            e = t.parentEl,
            i = this.body;
          i &&
            (t.components.velocity &&
              i.velocity.copy(t.getAttribute('velocity')),
            e.isScene
              ? (i.quaternion.copy(t.object3D.quaternion),
                i.position.copy(t.object3D.position))
              : (t.object3D.getWorldQuaternion(s),
                i.quaternion.copy(s),
                t.object3D.getWorldPosition(a),
                i.position.copy(a)),
            this.wireframe && this.syncWireframe());
        }),
        syncFromPhysics: ((n = new THREE.Vector3()),
        (r = new THREE.Quaternion()),
        (o = new THREE.Quaternion()),
        function() {
          var t = this.el,
            e = t.parentEl,
            i = this.body;
          i &&
            (e.isScene
              ? (t.setAttribute('quaternion', i.quaternion),
                t.setAttribute('position', i.position))
              : (r.copy(i.quaternion),
                e.object3D.getWorldQuaternion(o),
                r.multiply(o.inverse()),
                t.setAttribute('quaternion', {
                  x: r.x,
                  y: r.y,
                  z: r.z,
                  w: r.w
                }),
                n.copy(i.position),
                e.object3D.worldToLocal(n),
                t.setAttribute('position', { x: n.x, y: n.y, z: n.z })),
            this.wireframe && this.syncWireframe());
        })
      });
  },
  function(t, e) {
    t.exports = function(t) {
      return (
        t.webpackPolyfill ||
          ((t.deprecate = function() {}),
          (t.paths = []),
          t.children || (t.children = []),
          Object.defineProperty(t, 'loaded', {
            enumerable: !0,
            get: function() {
              return t.l;
            }
          }),
          Object.defineProperty(t, 'id', {
            enumerable: !0,
            get: function() {
              return t.i;
            }
          }),
          (t.webpackPolyfill = 1)),
        t
      );
    };
  },
  function(t, e, i) {
    i(42),
      i(43),
      i(44),
      i(45),
      i(46),
      i(47),
      i(48),
      i(49),
      i(50),
      i(54),
      i(133);
    var n = i(146);
    AFRAME.registerComponent('gamepad-controls', n), i(149), i(150);
    i(157);
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_globals.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_starmap.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_drawingSpace.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_drawingSurface.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_engine.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_space.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_rand.js';
  },
  function(t, e, i) {
    t.exports = i.p + 'niv_textures.js';
  },
  function(t, i, n) {
    (function(i, n) {
      var r, o;
      (o = function() {
        return (function t(e, i, n) {
          function o(a, c) {
            if (!i[a]) {
              if (!e[a]) {
                if (!c && ('function' == typeof r && r)) return r(a, !0);
                if (s) return s(a, !0);
                var l = new Error("Cannot find module '" + a + "'");
                throw ((l.code = 'MODULE_NOT_FOUND'), l);
              }
              var u = (i[a] = { exports: {} });
              e[a][0].call(
                u.exports,
                function(t) {
                  var i = e[a][1][t];
                  return o(i || t);
                },
                u,
                u.exports,
                t,
                e,
                i,
                n
              );
            }
            return i[a].exports;
          }
          for (var s = 'function' == typeof r && r, a = 0; a < n.length; a++)
            o(n[a]);
          return o;
        })(
          {
            1: [
              function(t, e, i) {
                (function(t) {
                  var n = function() {
                    (this._tweens = {}), (this._tweensAddedDuringUpdate = {});
                  };
                  n.prototype = {
                    getAll: function() {
                      return Object.keys(this._tweens).map(
                        function(t) {
                          return this._tweens[t];
                        }.bind(this)
                      );
                    },
                    removeAll: function() {
                      this._tweens = {};
                    },
                    add: function(t) {
                      (this._tweens[t.getId()] = t),
                        (this._tweensAddedDuringUpdate[t.getId()] = t);
                    },
                    remove: function(t) {
                      delete this._tweens[t.getId()],
                        delete this._tweensAddedDuringUpdate[t.getId()];
                    },
                    update: function(t, e) {
                      var i = Object.keys(this._tweens);
                      if (0 === i.length) return !1;
                      for (t = void 0 !== t ? t : s.now(); i.length > 0; ) {
                        this._tweensAddedDuringUpdate = {};
                        for (var n = 0; n < i.length; n++)
                          !1 === this._tweens[i[n]].update(t) &&
                            ((this._tweens[i[n]]._isPlaying = !1),
                            e || delete this._tweens[i[n]]);
                        i = Object.keys(this._tweensAddedDuringUpdate);
                      }
                      return !0;
                    }
                  };
                  var r,
                    o,
                    s = new n();
                  (s.Group = n),
                    (s._nextId = 0),
                    (s.nextId = function() {
                      return s._nextId++;
                    }),
                    'undefined' == typeof window && void 0 !== t
                      ? (s.now = function() {
                          var e = t.hrtime();
                          return 1e3 * e[0] + e[1] / 1e6;
                        })
                      : 'undefined' != typeof window &&
                        void 0 !== window.performance &&
                        void 0 !== window.performance.now
                        ? (s.now = window.performance.now.bind(
                            window.performance
                          ))
                        : void 0 !== Date.now
                          ? (s.now = Date.now)
                          : (s.now = function() {
                              return new Date().getTime();
                            }),
                    (s.Tween = function(t, e) {
                      (this._object = t),
                        (this._valuesStart = {}),
                        (this._valuesEnd = {}),
                        (this._valuesStartRepeat = {}),
                        (this._duration = 1e3),
                        (this._repeat = 0),
                        (this._repeatDelayTime = void 0),
                        (this._yoyo = !1),
                        (this._isPlaying = !1),
                        (this._reversed = !1),
                        (this._delayTime = 0),
                        (this._startTime = null),
                        (this._easingFunction = s.Easing.Linear.None),
                        (this._interpolationFunction = s.Interpolation.Linear),
                        (this._chainedTweens = []),
                        (this._onStartCallback = null),
                        (this._onStartCallbackFired = !1),
                        (this._onUpdateCallback = null),
                        (this._onCompleteCallback = null),
                        (this._onStopCallback = null),
                        (this._group = e || s),
                        (this._id = s.nextId());
                    }),
                    (s.Tween.prototype = {
                      getId: function() {
                        return this._id;
                      },
                      isPlaying: function() {
                        return this._isPlaying;
                      },
                      to: function(t, e) {
                        return (
                          (this._valuesEnd = t),
                          void 0 !== e && (this._duration = e),
                          this
                        );
                      },
                      start: function(t) {
                        this._group.add(this),
                          (this._isPlaying = !0),
                          (this._onStartCallbackFired = !1),
                          (this._startTime = void 0 !== t ? t : s.now()),
                          (this._startTime += this._delayTime);
                        for (var e in this._valuesEnd) {
                          if (this._valuesEnd[e] instanceof Array) {
                            if (0 === this._valuesEnd[e].length) continue;
                            this._valuesEnd[e] = [this._object[e]].concat(
                              this._valuesEnd[e]
                            );
                          }
                          void 0 !== this._object[e] &&
                            ((this._valuesStart[e] = this._object[e]),
                            this._valuesStart[e] instanceof Array == !1 &&
                              (this._valuesStart[e] *= 1),
                            (this._valuesStartRepeat[e] =
                              this._valuesStart[e] || 0));
                        }
                        return this;
                      },
                      stop: function() {
                        return this._isPlaying
                          ? (this._group.remove(this),
                            (this._isPlaying = !1),
                            null !== this._onStopCallback &&
                              this._onStopCallback.call(
                                this._object,
                                this._object
                              ),
                            this.stopChainedTweens(),
                            this)
                          : this;
                      },
                      end: function() {
                        return (
                          this.update(this._startTime + this._duration), this
                        );
                      },
                      stopChainedTweens: function() {
                        for (
                          var t = 0, e = this._chainedTweens.length;
                          t < e;
                          t++
                        )
                          this._chainedTweens[t].stop();
                      },
                      delay: function(t) {
                        return (this._delayTime = t), this;
                      },
                      repeat: function(t) {
                        return (this._repeat = t), this;
                      },
                      repeatDelay: function(t) {
                        return (this._repeatDelayTime = t), this;
                      },
                      yoyo: function(t) {
                        return (this._yoyo = t), this;
                      },
                      easing: function(t) {
                        return (this._easingFunction = t), this;
                      },
                      interpolation: function(t) {
                        return (this._interpolationFunction = t), this;
                      },
                      chain: function() {
                        return (this._chainedTweens = arguments), this;
                      },
                      onStart: function(t) {
                        return (this._onStartCallback = t), this;
                      },
                      onUpdate: function(t) {
                        return (this._onUpdateCallback = t), this;
                      },
                      onComplete: function(t) {
                        return (this._onCompleteCallback = t), this;
                      },
                      onStop: function(t) {
                        return (this._onStopCallback = t), this;
                      },
                      update: function(t) {
                        var e, i, n;
                        if (t < this._startTime) return !0;
                        !1 === this._onStartCallbackFired &&
                          (null !== this._onStartCallback &&
                            this._onStartCallback.call(
                              this._object,
                              this._object
                            ),
                          (this._onStartCallbackFired = !0)),
                          (i =
                            (i = (t - this._startTime) / this._duration) > 1
                              ? 1
                              : i),
                          (n = this._easingFunction(i));
                        for (e in this._valuesEnd)
                          if (void 0 !== this._valuesStart[e]) {
                            var r = this._valuesStart[e] || 0,
                              o = this._valuesEnd[e];
                            o instanceof Array
                              ? (this._object[e] = this._interpolationFunction(
                                  o,
                                  n
                                ))
                              : ('string' == typeof o &&
                                  (o =
                                    '+' === o.charAt(0) || '-' === o.charAt(0)
                                      ? r + parseFloat(o)
                                      : parseFloat(o)),
                                'number' == typeof o &&
                                  (this._object[e] = r + (o - r) * n));
                          }
                        if (
                          (null !== this._onUpdateCallback &&
                            this._onUpdateCallback.call(this._object, n),
                          1 === i)
                        ) {
                          if (this._repeat > 0) {
                            isFinite(this._repeat) && this._repeat--;
                            for (e in this._valuesStartRepeat) {
                              if (
                                ('string' == typeof this._valuesEnd[e] &&
                                  (this._valuesStartRepeat[e] =
                                    this._valuesStartRepeat[e] +
                                    parseFloat(this._valuesEnd[e])),
                                this._yoyo)
                              ) {
                                var s = this._valuesStartRepeat[e];
                                (this._valuesStartRepeat[e] = this._valuesEnd[
                                  e
                                ]),
                                  (this._valuesEnd[e] = s);
                              }
                              this._valuesStart[e] = this._valuesStartRepeat[e];
                            }
                            return (
                              this._yoyo && (this._reversed = !this._reversed),
                              void 0 !== this._repeatDelayTime
                                ? (this._startTime = t + this._repeatDelayTime)
                                : (this._startTime = t + this._delayTime),
                              !0
                            );
                          }
                          null !== this._onCompleteCallback &&
                            this._onCompleteCallback.call(
                              this._object,
                              this._object
                            );
                          for (
                            var a = 0, c = this._chainedTweens.length;
                            a < c;
                            a++
                          )
                            this._chainedTweens[a].start(
                              this._startTime + this._duration
                            );
                          return !1;
                        }
                        return !0;
                      }
                    }),
                    (s.Easing = {
                      Linear: {
                        None: function(t) {
                          return t;
                        }
                      },
                      Quadratic: {
                        In: function(t) {
                          return t * t;
                        },
                        Out: function(t) {
                          return t * (2 - t);
                        },
                        InOut: function(t) {
                          return (t *= 2) < 1
                            ? 0.5 * t * t
                            : -0.5 * (--t * (t - 2) - 1);
                        }
                      },
                      Cubic: {
                        In: function(t) {
                          return t * t * t;
                        },
                        Out: function(t) {
                          return --t * t * t + 1;
                        },
                        InOut: function(t) {
                          return (t *= 2) < 1
                            ? 0.5 * t * t * t
                            : 0.5 * ((t -= 2) * t * t + 2);
                        }
                      },
                      Quartic: {
                        In: function(t) {
                          return t * t * t * t;
                        },
                        Out: function(t) {
                          return 1 - --t * t * t * t;
                        },
                        InOut: function(t) {
                          return (t *= 2) < 1
                            ? 0.5 * t * t * t * t
                            : -0.5 * ((t -= 2) * t * t * t - 2);
                        }
                      },
                      Quintic: {
                        In: function(t) {
                          return t * t * t * t * t;
                        },
                        Out: function(t) {
                          return --t * t * t * t * t + 1;
                        },
                        InOut: function(t) {
                          return (t *= 2) < 1
                            ? 0.5 * t * t * t * t * t
                            : 0.5 * ((t -= 2) * t * t * t * t + 2);
                        }
                      },
                      Sinusoidal: {
                        In: function(t) {
                          return 1 - Math.cos(t * Math.PI / 2);
                        },
                        Out: function(t) {
                          return Math.sin(t * Math.PI / 2);
                        },
                        InOut: function(t) {
                          return 0.5 * (1 - Math.cos(Math.PI * t));
                        }
                      },
                      Exponential: {
                        In: function(t) {
                          return 0 === t ? 0 : Math.pow(1024, t - 1);
                        },
                        Out: function(t) {
                          return 1 === t ? 1 : 1 - Math.pow(2, -10 * t);
                        },
                        InOut: function(t) {
                          return 0 === t
                            ? 0
                            : 1 === t
                              ? 1
                              : (t *= 2) < 1
                                ? 0.5 * Math.pow(1024, t - 1)
                                : 0.5 * (2 - Math.pow(2, -10 * (t - 1)));
                        }
                      },
                      Circular: {
                        In: function(t) {
                          return 1 - Math.sqrt(1 - t * t);
                        },
                        Out: function(t) {
                          return Math.sqrt(1 - --t * t);
                        },
                        InOut: function(t) {
                          return (t *= 2) < 1
                            ? -0.5 * (Math.sqrt(1 - t * t) - 1)
                            : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
                        }
                      },
                      Elastic: {
                        In: function(t) {
                          return 0 === t
                            ? 0
                            : 1 === t
                              ? 1
                              : -Math.pow(2, 10 * (t - 1)) *
                                Math.sin(5 * (t - 1.1) * Math.PI);
                        },
                        Out: function(t) {
                          return 0 === t
                            ? 0
                            : 1 === t
                              ? 1
                              : Math.pow(2, -10 * t) *
                                  Math.sin(5 * (t - 0.1) * Math.PI) +
                                1;
                        },
                        InOut: function(t) {
                          return 0 === t
                            ? 0
                            : 1 === t
                              ? 1
                              : (t *= 2) < 1
                                ? -0.5 *
                                  Math.pow(2, 10 * (t - 1)) *
                                  Math.sin(5 * (t - 1.1) * Math.PI)
                                : 0.5 *
                                    Math.pow(2, -10 * (t - 1)) *
                                    Math.sin(5 * (t - 1.1) * Math.PI) +
                                  1;
                        }
                      },
                      Back: {
                        In: function(t) {
                          return t * t * (2.70158 * t - 1.70158);
                        },
                        Out: function(t) {
                          return --t * t * (2.70158 * t + 1.70158) + 1;
                        },
                        InOut: function(t) {
                          return (t *= 2) < 1
                            ? t * t * (3.5949095 * t - 2.5949095) * 0.5
                            : 0.5 *
                                ((t -= 2) * t * (3.5949095 * t + 2.5949095) +
                                  2);
                        }
                      },
                      Bounce: {
                        In: function(t) {
                          return 1 - s.Easing.Bounce.Out(1 - t);
                        },
                        Out: function(t) {
                          return t < 1 / 2.75
                            ? 7.5625 * t * t
                            : t < 2 / 2.75
                              ? 7.5625 * (t -= 1.5 / 2.75) * t + 0.75
                              : t < 2.5 / 2.75
                                ? 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375
                                : 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
                        },
                        InOut: function(t) {
                          return t < 0.5
                            ? 0.5 * s.Easing.Bounce.In(2 * t)
                            : 0.5 * s.Easing.Bounce.Out(2 * t - 1) + 0.5;
                        }
                      }
                    }),
                    (s.Interpolation = {
                      Linear: function(t, e) {
                        var i = t.length - 1,
                          n = i * e,
                          r = Math.floor(n),
                          o = s.Interpolation.Utils.Linear;
                        return e < 0
                          ? o(t[0], t[1], n)
                          : e > 1
                            ? o(t[i], t[i - 1], i - n)
                            : o(t[r], t[r + 1 > i ? i : r + 1], n - r);
                      },
                      Bezier: function(t, e) {
                        for (
                          var i = 0,
                            n = t.length - 1,
                            r = Math.pow,
                            o = s.Interpolation.Utils.Bernstein,
                            a = 0;
                          a <= n;
                          a++
                        )
                          i += r(1 - e, n - a) * r(e, a) * t[a] * o(n, a);
                        return i;
                      },
                      CatmullRom: function(t, e) {
                        var i = t.length - 1,
                          n = i * e,
                          r = Math.floor(n),
                          o = s.Interpolation.Utils.CatmullRom;
                        return t[0] === t[i]
                          ? (e < 0 && (r = Math.floor((n = i * (1 + e)))),
                            o(
                              t[(r - 1 + i) % i],
                              t[r],
                              t[(r + 1) % i],
                              t[(r + 2) % i],
                              n - r
                            ))
                          : e < 0
                            ? t[0] - (o(t[0], t[0], t[1], t[1], -n) - t[0])
                            : e > 1
                              ? t[i] -
                                (o(t[i], t[i], t[i - 1], t[i - 1], n - i) -
                                  t[i])
                              : o(
                                  t[r ? r - 1 : 0],
                                  t[r],
                                  t[i < r + 1 ? i : r + 1],
                                  t[i < r + 2 ? i : r + 2],
                                  n - r
                                );
                      },
                      Utils: {
                        Linear: function(t, e, i) {
                          return (e - t) * i + t;
                        },
                        Bernstein: function(t, e) {
                          var i = s.Interpolation.Utils.Factorial;
                          return i(t) / i(e) / i(t - e);
                        },
                        Factorial: ((r = [1]),
                        function(t) {
                          var e = 1;
                          if (r[t]) return r[t];
                          for (var i = t; i > 1; i--) e *= i;
                          return (r[t] = e), e;
                        }),
                        CatmullRom: function(t, e, i, n, r) {
                          var o = 0.5 * (i - t),
                            s = 0.5 * (n - e),
                            a = r * r;
                          return (
                            (2 * e - 2 * i + o + s) * (r * a) +
                            (-3 * e + 3 * i - 2 * o - s) * a +
                            o * r +
                            e
                          );
                        }
                      }
                    }),
                    (o = this),
                    void 0 !== e && 'object' == typeof i
                      ? (e.exports = s)
                      : void 0 !== o && (o.TWEEN = s);
                }.call(this, t('_process')));
              },
              { _process: 6 }
            ],
            2: [
              function(t, e, i) {
                var n = Object.prototype.toString;
                e.exports = function(t) {
                  return (
                    (t.BYTES_PER_ELEMENT &&
                      '[object ArrayBuffer]' === n.call(t.buffer)) ||
                    Array.isArray(t)
                  );
                };
              },
              {}
            ],
            3: [
              function(t, e, i) {
                e.exports = function(t, e) {
                  return 'number' == typeof t
                    ? t
                    : 'number' == typeof e ? e : 0;
                };
              },
              {}
            ],
            4: [
              function(t, e, i) {
                'use strict';
                (i.byteLength = function(t) {
                  return 3 * t.length / 4 - l(t);
                }),
                  (i.toByteArray = function(t) {
                    var e,
                      i,
                      n,
                      s,
                      a,
                      c = t.length;
                    (s = l(t)),
                      (a = new o(3 * c / 4 - s)),
                      (i = s > 0 ? c - 4 : c);
                    var u = 0;
                    for (e = 0; e < i; e += 4)
                      (n =
                        (r[t.charCodeAt(e)] << 18) |
                        (r[t.charCodeAt(e + 1)] << 12) |
                        (r[t.charCodeAt(e + 2)] << 6) |
                        r[t.charCodeAt(e + 3)]),
                        (a[u++] = (n >> 16) & 255),
                        (a[u++] = (n >> 8) & 255),
                        (a[u++] = 255 & n);
                    2 === s
                      ? ((n =
                          (r[t.charCodeAt(e)] << 2) |
                          (r[t.charCodeAt(e + 1)] >> 4)),
                        (a[u++] = 255 & n))
                      : 1 === s &&
                        ((n =
                          (r[t.charCodeAt(e)] << 10) |
                          (r[t.charCodeAt(e + 1)] << 4) |
                          (r[t.charCodeAt(e + 2)] >> 2)),
                        (a[u++] = (n >> 8) & 255),
                        (a[u++] = 255 & n));
                    return a;
                  }),
                  (i.fromByteArray = function(t) {
                    for (
                      var e,
                        i = t.length,
                        r = i % 3,
                        o = '',
                        s = [],
                        a = 0,
                        c = i - r;
                      a < c;
                      a += 16383
                    )
                      s.push(u(t, a, a + 16383 > c ? c : a + 16383));
                    1 === r
                      ? ((e = t[i - 1]),
                        (o += n[e >> 2]),
                        (o += n[(e << 4) & 63]),
                        (o += '=='))
                      : 2 === r &&
                        ((e = (t[i - 2] << 8) + t[i - 1]),
                        (o += n[e >> 10]),
                        (o += n[(e >> 4) & 63]),
                        (o += n[(e << 2) & 63]),
                        (o += '='));
                    return s.push(o), s.join('');
                  });
                for (
                  var n = [],
                    r = [],
                    o = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
                    s =
                      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                    a = 0,
                    c = s.length;
                  a < c;
                  ++a
                )
                  (n[a] = s[a]), (r[s.charCodeAt(a)] = a);
                function l(t) {
                  var e = t.length;
                  if (e % 4 > 0)
                    throw new Error(
                      'Invalid string. Length must be a multiple of 4'
                    );
                  return '=' === t[e - 2] ? 2 : '=' === t[e - 1] ? 1 : 0;
                }
                function u(t, e, i) {
                  for (var r, o, s = [], a = e; a < i; a += 3)
                    (r = (t[a] << 16) + (t[a + 1] << 8) + t[a + 2]),
                      s.push(
                        n[((o = r) >> 18) & 63] +
                          n[(o >> 12) & 63] +
                          n[(o >> 6) & 63] +
                          n[63 & o]
                      );
                  return s.join('');
                }
                (r['-'.charCodeAt(0)] = 62), (r['_'.charCodeAt(0)] = 63);
              },
              {}
            ],
            5: [
              function(t, e, i) {
                'use strict';
                e.exports = {
                  createLink: function(t, e) {
                    var i =
                        document.head ||
                        document.getElementsByTagName('head')[0],
                      n = document.createElement('link');
                    (n.href = t), (n.rel = 'stylesheet');
                    for (var r in e)
                      if (e.hasOwnProperty(r)) {
                        var o = e[r];
                        n.setAttribute('data-' + r, o);
                      }
                    i.appendChild(n);
                  },
                  createStyle: function(t, e) {
                    var i =
                        document.head ||
                        document.getElementsByTagName('head')[0],
                      n = document.createElement('style');
                    n.type = 'text/css';
                    for (var r in e)
                      if (e.hasOwnProperty(r)) {
                        var o = e[r];
                        n.setAttribute('data-' + r, o);
                      }
                    n.sheet
                      ? ((n.innerHTML = t),
                        (n.sheet.cssText = t),
                        i.appendChild(n))
                      : n.styleSheet
                        ? (i.appendChild(n), (n.styleSheet.cssText = t))
                        : (n.appendChild(document.createTextNode(t)),
                          i.appendChild(n));
                  }
                };
              },
              {}
            ],
            6: [
              function(t, e, i) {
                var n,
                  r,
                  o = (e.exports = {});
                function s() {
                  throw new Error('setTimeout has not been defined');
                }
                function a() {
                  throw new Error('clearTimeout has not been defined');
                }
                function c(t) {
                  if (n === setTimeout) return setTimeout(t, 0);
                  if ((n === s || !n) && setTimeout)
                    return (n = setTimeout), setTimeout(t, 0);
                  try {
                    return n(t, 0);
                  } catch (e) {
                    try {
                      return n.call(null, t, 0);
                    } catch (e) {
                      return n.call(this, t, 0);
                    }
                  }
                }
                !(function() {
                  try {
                    n = 'function' == typeof setTimeout ? setTimeout : s;
                  } catch (t) {
                    n = s;
                  }
                  try {
                    r = 'function' == typeof clearTimeout ? clearTimeout : a;
                  } catch (t) {
                    r = a;
                  }
                })();
                var l,
                  u = [],
                  h = !1,
                  d = -1;
                function p() {
                  h &&
                    l &&
                    ((h = !1),
                    l.length ? (u = l.concat(u)) : (d = -1),
                    u.length && f());
                }
                function f() {
                  if (!h) {
                    var t = c(p);
                    h = !0;
                    for (var e = u.length; e; ) {
                      for (l = u, u = []; ++d < e; ) l && l[d].run();
                      (d = -1), (e = u.length);
                    }
                    (l = null),
                      (h = !1),
                      (function(t) {
                        if (r === clearTimeout) return clearTimeout(t);
                        if ((r === a || !r) && clearTimeout)
                          return (r = clearTimeout), clearTimeout(t);
                        try {
                          r(t);
                        } catch (e) {
                          try {
                            return r.call(null, t);
                          } catch (e) {
                            return r.call(this, t);
                          }
                        }
                      })(t);
                  }
                }
                function m(t, e) {
                  (this.fun = t), (this.array = e);
                }
                function g() {}
                (o.nextTick = function(t) {
                  var e = new Array(arguments.length - 1);
                  if (arguments.length > 1)
                    for (var i = 1; i < arguments.length; i++)
                      e[i - 1] = arguments[i];
                  u.push(new m(t, e)), 1 !== u.length || h || c(f);
                }),
                  (m.prototype.run = function() {
                    this.fun.apply(null, this.array);
                  }),
                  (o.title = 'browser'),
                  (o.browser = !0),
                  (o.env = {}),
                  (o.argv = []),
                  (o.version = ''),
                  (o.versions = {}),
                  (o.on = g),
                  (o.addListener = g),
                  (o.once = g),
                  (o.off = g),
                  (o.removeListener = g),
                  (o.removeAllListeners = g),
                  (o.emit = g),
                  (o.prependListener = g),
                  (o.prependOnceListener = g),
                  (o.listeners = function(t) {
                    return [];
                  }),
                  (o.binding = function(t) {
                    throw new Error('process.binding is not supported');
                  }),
                  (o.cwd = function() {
                    return '/';
                  }),
                  (o.chdir = function(t) {
                    throw new Error('process.chdir is not supported');
                  }),
                  (o.umask = function() {
                    return 0;
                  });
              },
              {}
            ],
            7: [
              function(t, e, i) {
                var n = t('buffer').Buffer;
                e.exports = function(t, e) {
                  if (n.isBuffer(t) && n.isBuffer(e)) {
                    if ('function' == typeof t.equals) return t.equals(e);
                    if (t.length !== e.length) return !1;
                    for (var i = 0; i < t.length; i++)
                      if (t[i] !== e[i]) return !1;
                    return !0;
                  }
                };
              },
              { buffer: 8 }
            ],
            8: [
              function(t, e, n) {
                (function(e) {
                  'use strict';
                  var i = t('base64-js'),
                    r = t('ieee754'),
                    o = t('isarray');
                  function s() {
                    return c.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
                  }
                  function a(t, e) {
                    if (s() < e)
                      throw new RangeError('Invalid typed array length');
                    return (
                      c.TYPED_ARRAY_SUPPORT
                        ? ((t = new Uint8Array(e)).__proto__ = c.prototype)
                        : (null === t && (t = new c(e)), (t.length = e)),
                      t
                    );
                  }
                  function c(t, e, i) {
                    if (!(c.TYPED_ARRAY_SUPPORT || this instanceof c))
                      return new c(t, e, i);
                    if ('number' == typeof t) {
                      if ('string' == typeof e)
                        throw new Error(
                          'If encoding is specified then the first argument must be a string'
                        );
                      return h(this, t);
                    }
                    return l(this, t, e, i);
                  }
                  function l(t, e, i, n) {
                    if ('number' == typeof e)
                      throw new TypeError(
                        '"value" argument must not be a number'
                      );
                    return 'undefined' != typeof ArrayBuffer &&
                      e instanceof ArrayBuffer
                      ? (function(t, e, i, n) {
                          if ((e.byteLength, i < 0 || e.byteLength < i))
                            throw new RangeError("'offset' is out of bounds");
                          if (e.byteLength < i + (n || 0))
                            throw new RangeError("'length' is out of bounds");
                          e =
                            void 0 === i && void 0 === n
                              ? new Uint8Array(e)
                              : void 0 === n
                                ? new Uint8Array(e, i)
                                : new Uint8Array(e, i, n);
                          c.TYPED_ARRAY_SUPPORT
                            ? ((t = e).__proto__ = c.prototype)
                            : (t = d(t, e));
                          return t;
                        })(t, e, i, n)
                      : 'string' == typeof e
                        ? (function(t, e, i) {
                            ('string' == typeof i && '' !== i) || (i = 'utf8');
                            if (!c.isEncoding(i))
                              throw new TypeError(
                                '"encoding" must be a valid string encoding'
                              );
                            var n = 0 | f(e, i),
                              r = (t = a(t, n)).write(e, i);
                            r !== n && (t = t.slice(0, r));
                            return t;
                          })(t, e, i)
                        : (function(t, e) {
                            if (c.isBuffer(e)) {
                              var i = 0 | p(e.length);
                              return 0 === (t = a(t, i)).length
                                ? t
                                : (e.copy(t, 0, 0, i), t);
                            }
                            if (e) {
                              if (
                                ('undefined' != typeof ArrayBuffer &&
                                  e.buffer instanceof ArrayBuffer) ||
                                'length' in e
                              )
                                return 'number' != typeof e.length ||
                                  (n = e.length) != n
                                  ? a(t, 0)
                                  : d(t, e);
                              if ('Buffer' === e.type && o(e.data))
                                return d(t, e.data);
                            }
                            var n;
                            throw new TypeError(
                              'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
                            );
                          })(t, e);
                  }
                  function u(t) {
                    if ('number' != typeof t)
                      throw new TypeError('"size" argument must be a number');
                    if (t < 0)
                      throw new RangeError(
                        '"size" argument must not be negative'
                      );
                  }
                  function h(t, e) {
                    if (
                      (u(e),
                      (t = a(t, e < 0 ? 0 : 0 | p(e))),
                      !c.TYPED_ARRAY_SUPPORT)
                    )
                      for (var i = 0; i < e; ++i) t[i] = 0;
                    return t;
                  }
                  function d(t, e) {
                    var i = e.length < 0 ? 0 : 0 | p(e.length);
                    t = a(t, i);
                    for (var n = 0; n < i; n += 1) t[n] = 255 & e[n];
                    return t;
                  }
                  function p(t) {
                    if (t >= s())
                      throw new RangeError(
                        'Attempt to allocate Buffer larger than maximum size: 0x' +
                          s().toString(16) +
                          ' bytes'
                      );
                    return 0 | t;
                  }
                  function f(t, e) {
                    if (c.isBuffer(t)) return t.length;
                    if (
                      'undefined' != typeof ArrayBuffer &&
                      'function' == typeof ArrayBuffer.isView &&
                      (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)
                    )
                      return t.byteLength;
                    'string' != typeof t && (t = '' + t);
                    var i = t.length;
                    if (0 === i) return 0;
                    for (var n = !1; ; )
                      switch (e) {
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                          return i;
                        case 'utf8':
                        case 'utf-8':
                        case void 0:
                          return z(t).length;
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                          return 2 * i;
                        case 'hex':
                          return i >>> 1;
                        case 'base64':
                          return k(t).length;
                        default:
                          if (n) return z(t).length;
                          (e = ('' + e).toLowerCase()), (n = !0);
                      }
                  }
                  function m(t, e, i) {
                    var n = t[e];
                    (t[e] = t[i]), (t[i] = n);
                  }
                  function g(t, e, i, n, r) {
                    if (0 === t.length) return -1;
                    if (
                      ('string' == typeof i
                        ? ((n = i), (i = 0))
                        : i > 2147483647
                          ? (i = 2147483647)
                          : i < -2147483648 && (i = -2147483648),
                      (i = +i),
                      isNaN(i) && (i = r ? 0 : t.length - 1),
                      i < 0 && (i = t.length + i),
                      i >= t.length)
                    ) {
                      if (r) return -1;
                      i = t.length - 1;
                    } else if (i < 0) {
                      if (!r) return -1;
                      i = 0;
                    }
                    if (
                      ('string' == typeof e && (e = c.from(e, n)),
                      c.isBuffer(e))
                    )
                      return 0 === e.length ? -1 : v(t, e, i, n, r);
                    if ('number' == typeof e)
                      return (
                        (e &= 255),
                        c.TYPED_ARRAY_SUPPORT &&
                        'function' == typeof Uint8Array.prototype.indexOf
                          ? r
                            ? Uint8Array.prototype.indexOf.call(t, e, i)
                            : Uint8Array.prototype.lastIndexOf.call(t, e, i)
                          : v(t, [e], i, n, r)
                      );
                    throw new TypeError('val must be string, number or Buffer');
                  }
                  function v(t, e, i, n, r) {
                    var o,
                      s = 1,
                      a = t.length,
                      c = e.length;
                    if (
                      void 0 !== n &&
                      ('ucs2' === (n = String(n).toLowerCase()) ||
                        'ucs-2' === n ||
                        'utf16le' === n ||
                        'utf-16le' === n)
                    ) {
                      if (t.length < 2 || e.length < 2) return -1;
                      (s = 2), (a /= 2), (c /= 2), (i /= 2);
                    }
                    function l(t, e) {
                      return 1 === s ? t[e] : t.readUInt16BE(e * s);
                    }
                    if (r) {
                      var u = -1;
                      for (o = i; o < a; o++)
                        if (l(t, o) === l(e, -1 === u ? 0 : o - u)) {
                          if ((-1 === u && (u = o), o - u + 1 === c))
                            return u * s;
                        } else -1 !== u && (o -= o - u), (u = -1);
                    } else
                      for (i + c > a && (i = a - c), o = i; o >= 0; o--) {
                        for (var h = !0, d = 0; d < c; d++)
                          if (l(t, o + d) !== l(e, d)) {
                            h = !1;
                            break;
                          }
                        if (h) return o;
                      }
                    return -1;
                  }
                  function y(t, e, i, n) {
                    i = Number(i) || 0;
                    var r = t.length - i;
                    n ? (n = Number(n)) > r && (n = r) : (n = r);
                    var o = e.length;
                    if (o % 2 != 0) throw new TypeError('Invalid hex string');
                    n > o / 2 && (n = o / 2);
                    for (var s = 0; s < n; ++s) {
                      var a = parseInt(e.substr(2 * s, 2), 16);
                      if (isNaN(a)) return s;
                      t[i + s] = a;
                    }
                    return s;
                  }
                  function w(t, e, i, n) {
                    return B(
                      (function(t) {
                        for (var e = [], i = 0; i < t.length; ++i)
                          e.push(255 & t.charCodeAt(i));
                        return e;
                      })(e),
                      t,
                      i,
                      n
                    );
                  }
                  function M(t, e, n) {
                    return 0 === e && n === t.length
                      ? i.fromByteArray(t)
                      : i.fromByteArray(t.slice(e, n));
                  }
                  function E(t, e, i) {
                    i = Math.min(t.length, i);
                    for (var n = [], r = e; r < i; ) {
                      var o,
                        s,
                        a,
                        c,
                        l = t[r],
                        u = null,
                        h = l > 239 ? 4 : l > 223 ? 3 : l > 191 ? 2 : 1;
                      if (r + h <= i)
                        switch (h) {
                          case 1:
                            l < 128 && (u = l);
                            break;
                          case 2:
                            128 == (192 & (o = t[r + 1])) &&
                              (c = ((31 & l) << 6) | (63 & o)) > 127 &&
                              (u = c);
                            break;
                          case 3:
                            (o = t[r + 1]),
                              (s = t[r + 2]),
                              128 == (192 & o) &&
                                128 == (192 & s) &&
                                (c =
                                  ((15 & l) << 12) |
                                  ((63 & o) << 6) |
                                  (63 & s)) > 2047 &&
                                (c < 55296 || c > 57343) &&
                                (u = c);
                            break;
                          case 4:
                            (o = t[r + 1]),
                              (s = t[r + 2]),
                              (a = t[r + 3]),
                              128 == (192 & o) &&
                                128 == (192 & s) &&
                                128 == (192 & a) &&
                                (c =
                                  ((15 & l) << 18) |
                                  ((63 & o) << 12) |
                                  ((63 & s) << 6) |
                                  (63 & a)) > 65535 &&
                                c < 1114112 &&
                                (u = c);
                        }
                      null === u
                        ? ((u = 65533), (h = 1))
                        : u > 65535 &&
                          ((u -= 65536),
                          n.push(((u >>> 10) & 1023) | 55296),
                          (u = 56320 | (1023 & u))),
                        n.push(u),
                        (r += h);
                    }
                    return (function(t) {
                      var e = t.length;
                      if (e <= b) return String.fromCharCode.apply(String, t);
                      var i = '',
                        n = 0;
                      for (; n < e; )
                        i += String.fromCharCode.apply(
                          String,
                          t.slice(n, (n += b))
                        );
                      return i;
                    })(n);
                  }
                  (n.Buffer = c),
                    (n.SlowBuffer = function(t) {
                      +t != t && (t = 0);
                      return c.alloc(+t);
                    }),
                    (n.INSPECT_MAX_BYTES = 50),
                    (c.TYPED_ARRAY_SUPPORT =
                      void 0 !== e.TYPED_ARRAY_SUPPORT
                        ? e.TYPED_ARRAY_SUPPORT
                        : (function() {
                            try {
                              var t = new Uint8Array(1);
                              return (
                                (t.__proto__ = {
                                  __proto__: Uint8Array.prototype,
                                  foo: function() {
                                    return 42;
                                  }
                                }),
                                42 === t.foo() &&
                                  'function' == typeof t.subarray &&
                                  0 === t.subarray(1, 1).byteLength
                              );
                            } catch (t) {
                              return !1;
                            }
                          })()),
                    (n.kMaxLength = s()),
                    (c.poolSize = 8192),
                    (c._augment = function(t) {
                      return (t.__proto__ = c.prototype), t;
                    }),
                    (c.from = function(t, e, i) {
                      return l(null, t, e, i);
                    }),
                    c.TYPED_ARRAY_SUPPORT &&
                      ((c.prototype.__proto__ = Uint8Array.prototype),
                      (c.__proto__ = Uint8Array),
                      'undefined' != typeof Symbol &&
                        Symbol.species &&
                        c[Symbol.species] === c &&
                        Object.defineProperty(c, Symbol.species, {
                          value: null,
                          configurable: !0
                        })),
                    (c.alloc = function(t, e, i) {
                      return (
                        (n = null),
                        (o = e),
                        (s = i),
                        u((r = t)),
                        r <= 0
                          ? a(n, r)
                          : void 0 !== o
                            ? 'string' == typeof s
                              ? a(n, r).fill(o, s)
                              : a(n, r).fill(o)
                            : a(n, r)
                      );
                      var n, r, o, s;
                    }),
                    (c.allocUnsafe = function(t) {
                      return h(null, t);
                    }),
                    (c.allocUnsafeSlow = function(t) {
                      return h(null, t);
                    }),
                    (c.isBuffer = function(t) {
                      return !(null == t || !t._isBuffer);
                    }),
                    (c.compare = function(t, e) {
                      if (!c.isBuffer(t) || !c.isBuffer(e))
                        throw new TypeError('Arguments must be Buffers');
                      if (t === e) return 0;
                      for (
                        var i = t.length,
                          n = e.length,
                          r = 0,
                          o = Math.min(i, n);
                        r < o;
                        ++r
                      )
                        if (t[r] !== e[r]) {
                          (i = t[r]), (n = e[r]);
                          break;
                        }
                      return i < n ? -1 : n < i ? 1 : 0;
                    }),
                    (c.isEncoding = function(t) {
                      switch (String(t).toLowerCase()) {
                        case 'hex':
                        case 'utf8':
                        case 'utf-8':
                        case 'ascii':
                        case 'latin1':
                        case 'binary':
                        case 'base64':
                        case 'ucs2':
                        case 'ucs-2':
                        case 'utf16le':
                        case 'utf-16le':
                          return !0;
                        default:
                          return !1;
                      }
                    }),
                    (c.concat = function(t, e) {
                      if (!o(t))
                        throw new TypeError(
                          '"list" argument must be an Array of Buffers'
                        );
                      if (0 === t.length) return c.alloc(0);
                      var i;
                      if (void 0 === e)
                        for (e = 0, i = 0; i < t.length; ++i) e += t[i].length;
                      var n = c.allocUnsafe(e),
                        r = 0;
                      for (i = 0; i < t.length; ++i) {
                        var s = t[i];
                        if (!c.isBuffer(s))
                          throw new TypeError(
                            '"list" argument must be an Array of Buffers'
                          );
                        s.copy(n, r), (r += s.length);
                      }
                      return n;
                    }),
                    (c.byteLength = f),
                    (c.prototype._isBuffer = !0),
                    (c.prototype.swap16 = function() {
                      var t = this.length;
                      if (t % 2 != 0)
                        throw new RangeError(
                          'Buffer size must be a multiple of 16-bits'
                        );
                      for (var e = 0; e < t; e += 2) m(this, e, e + 1);
                      return this;
                    }),
                    (c.prototype.swap32 = function() {
                      var t = this.length;
                      if (t % 4 != 0)
                        throw new RangeError(
                          'Buffer size must be a multiple of 32-bits'
                        );
                      for (var e = 0; e < t; e += 4)
                        m(this, e, e + 3), m(this, e + 1, e + 2);
                      return this;
                    }),
                    (c.prototype.swap64 = function() {
                      var t = this.length;
                      if (t % 8 != 0)
                        throw new RangeError(
                          'Buffer size must be a multiple of 64-bits'
                        );
                      for (var e = 0; e < t; e += 8)
                        m(this, e, e + 7),
                          m(this, e + 1, e + 6),
                          m(this, e + 2, e + 5),
                          m(this, e + 3, e + 4);
                      return this;
                    }),
                    (c.prototype.toString = function() {
                      var t = 0 | this.length;
                      return 0 === t
                        ? ''
                        : 0 === arguments.length
                          ? E(this, 0, t)
                          : function(t, e, i) {
                              var n = !1;
                              if (
                                ((void 0 === e || e < 0) && (e = 0),
                                e > this.length)
                              )
                                return '';
                              if (
                                ((void 0 === i || i > this.length) &&
                                  (i = this.length),
                                i <= 0)
                              )
                                return '';
                              if ((i >>>= 0) <= (e >>>= 0)) return '';
                              for (t || (t = 'utf8'); ; )
                                switch (t) {
                                  case 'hex':
                                    return T(this, e, i);
                                  case 'utf8':
                                  case 'utf-8':
                                    return E(this, e, i);
                                  case 'ascii':
                                    return x(this, e, i);
                                  case 'latin1':
                                  case 'binary':
                                    return A(this, e, i);
                                  case 'base64':
                                    return M(this, e, i);
                                  case 'ucs2':
                                  case 'ucs-2':
                                  case 'utf16le':
                                  case 'utf-16le':
                                    return L(this, e, i);
                                  default:
                                    if (n)
                                      throw new TypeError(
                                        'Unknown encoding: ' + t
                                      );
                                    (t = (t + '').toLowerCase()), (n = !0);
                                }
                            }.apply(this, arguments);
                    }),
                    (c.prototype.equals = function(t) {
                      if (!c.isBuffer(t))
                        throw new TypeError('Argument must be a Buffer');
                      return this === t || 0 === c.compare(this, t);
                    }),
                    (c.prototype.inspect = function() {
                      var t = '',
                        e = n.INSPECT_MAX_BYTES;
                      return (
                        this.length > 0 &&
                          ((t = this.toString('hex', 0, e)
                            .match(/.{2}/g)
                            .join(' ')),
                          this.length > e && (t += ' ... ')),
                        '<Buffer ' + t + '>'
                      );
                    }),
                    (c.prototype.compare = function(t, e, i, n, r) {
                      if (!c.isBuffer(t))
                        throw new TypeError('Argument must be a Buffer');
                      if (
                        (void 0 === e && (e = 0),
                        void 0 === i && (i = t ? t.length : 0),
                        void 0 === n && (n = 0),
                        void 0 === r && (r = this.length),
                        e < 0 || i > t.length || n < 0 || r > this.length)
                      )
                        throw new RangeError('out of range index');
                      if (n >= r && e >= i) return 0;
                      if (n >= r) return -1;
                      if (e >= i) return 1;
                      if (
                        ((e >>>= 0),
                        (i >>>= 0),
                        (n >>>= 0),
                        (r >>>= 0),
                        this === t)
                      )
                        return 0;
                      for (
                        var o = r - n,
                          s = i - e,
                          a = Math.min(o, s),
                          l = this.slice(n, r),
                          u = t.slice(e, i),
                          h = 0;
                        h < a;
                        ++h
                      )
                        if (l[h] !== u[h]) {
                          (o = l[h]), (s = u[h]);
                          break;
                        }
                      return o < s ? -1 : s < o ? 1 : 0;
                    }),
                    (c.prototype.includes = function(t, e, i) {
                      return -1 !== this.indexOf(t, e, i);
                    }),
                    (c.prototype.indexOf = function(t, e, i) {
                      return g(this, t, e, i, !0);
                    }),
                    (c.prototype.lastIndexOf = function(t, e, i) {
                      return g(this, t, e, i, !1);
                    }),
                    (c.prototype.write = function(t, e, i, n) {
                      if (void 0 === e)
                        (n = 'utf8'), (i = this.length), (e = 0);
                      else if (void 0 === i && 'string' == typeof e)
                        (n = e), (i = this.length), (e = 0);
                      else {
                        if (!isFinite(e))
                          throw new Error(
                            'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                          );
                        (e |= 0),
                          isFinite(i)
                            ? ((i |= 0), void 0 === n && (n = 'utf8'))
                            : ((n = i), (i = void 0));
                      }
                      var r = this.length - e;
                      if (
                        ((void 0 === i || i > r) && (i = r),
                        (t.length > 0 && (i < 0 || e < 0)) || e > this.length)
                      )
                        throw new RangeError(
                          'Attempt to write outside buffer bounds'
                        );
                      n || (n = 'utf8');
                      for (var o, s, a, c, l, u, h, d, p, f = !1; ; )
                        switch (n) {
                          case 'hex':
                            return y(this, t, e, i);
                          case 'utf8':
                          case 'utf-8':
                            return (
                              (d = e),
                              (p = i),
                              B(z(t, (h = this).length - d), h, d, p)
                            );
                          case 'ascii':
                            return w(this, t, e, i);
                          case 'latin1':
                          case 'binary':
                            return w(this, t, e, i);
                          case 'base64':
                            return (
                              (c = this), (l = e), (u = i), B(k(t), c, l, u)
                            );
                          case 'ucs2':
                          case 'ucs-2':
                          case 'utf16le':
                          case 'utf-16le':
                            return (
                              (s = e),
                              (a = i),
                              B(
                                (function(t, e) {
                                  for (
                                    var i, n, r, o = [], s = 0;
                                    s < t.length && !((e -= 2) < 0);
                                    ++s
                                  )
                                    (i = t.charCodeAt(s)),
                                      (n = i >> 8),
                                      (r = i % 256),
                                      o.push(r),
                                      o.push(n);
                                  return o;
                                })(t, (o = this).length - s),
                                o,
                                s,
                                a
                              )
                            );
                          default:
                            if (f)
                              throw new TypeError('Unknown encoding: ' + n);
                            (n = ('' + n).toLowerCase()), (f = !0);
                        }
                    }),
                    (c.prototype.toJSON = function() {
                      return {
                        type: 'Buffer',
                        data: Array.prototype.slice.call(this._arr || this, 0)
                      };
                    });
                  var b = 4096;
                  function x(t, e, i) {
                    var n = '';
                    i = Math.min(t.length, i);
                    for (var r = e; r < i; ++r)
                      n += String.fromCharCode(127 & t[r]);
                    return n;
                  }
                  function A(t, e, i) {
                    var n = '';
                    i = Math.min(t.length, i);
                    for (var r = e; r < i; ++r) n += String.fromCharCode(t[r]);
                    return n;
                  }
                  function T(t, e, i) {
                    var n = t.length;
                    (!e || e < 0) && (e = 0), (!i || i < 0 || i > n) && (i = n);
                    for (var r = '', o = e; o < i; ++o) r += R(t[o]);
                    return r;
                  }
                  function L(t, e, i) {
                    for (
                      var n = t.slice(e, i), r = '', o = 0;
                      o < n.length;
                      o += 2
                    )
                      r += String.fromCharCode(n[o] + 256 * n[o + 1]);
                    return r;
                  }
                  function N(t, e, i) {
                    if (t % 1 != 0 || t < 0)
                      throw new RangeError('offset is not uint');
                    if (t + e > i)
                      throw new RangeError(
                        'Trying to access beyond buffer length'
                      );
                  }
                  function D(t, e, i, n, r, o) {
                    if (!c.isBuffer(t))
                      throw new TypeError(
                        '"buffer" argument must be a Buffer instance'
                      );
                    if (e > r || e < o)
                      throw new RangeError('"value" argument is out of bounds');
                    if (i + n > t.length)
                      throw new RangeError('Index out of range');
                  }
                  function S(t, e, i, n) {
                    e < 0 && (e = 65535 + e + 1);
                    for (var r = 0, o = Math.min(t.length - i, 2); r < o; ++r)
                      t[i + r] =
                        (e & (255 << (8 * (n ? r : 1 - r)))) >>>
                        (8 * (n ? r : 1 - r));
                  }
                  function C(t, e, i, n) {
                    e < 0 && (e = 4294967295 + e + 1);
                    for (var r = 0, o = Math.min(t.length - i, 4); r < o; ++r)
                      t[i + r] = (e >>> (8 * (n ? r : 3 - r))) & 255;
                  }
                  function _(t, e, i, n, r, o) {
                    if (i + n > t.length)
                      throw new RangeError('Index out of range');
                    if (i < 0) throw new RangeError('Index out of range');
                  }
                  function I(t, e, i, n, o) {
                    return (
                      o || _(t, 0, i, 4), r.write(t, e, i, n, 23, 4), i + 4
                    );
                  }
                  function j(t, e, i, n, o) {
                    return (
                      o || _(t, 0, i, 8), r.write(t, e, i, n, 52, 8), i + 8
                    );
                  }
                  (c.prototype.slice = function(t, e) {
                    var i,
                      n = this.length;
                    if (
                      ((t = ~~t),
                      (e = void 0 === e ? n : ~~e),
                      t < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n),
                      e < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n),
                      e < t && (e = t),
                      c.TYPED_ARRAY_SUPPORT)
                    )
                      (i = this.subarray(t, e)).__proto__ = c.prototype;
                    else {
                      var r = e - t;
                      i = new c(r, void 0);
                      for (var o = 0; o < r; ++o) i[o] = this[o + t];
                    }
                    return i;
                  }),
                    (c.prototype.readUIntLE = function(t, e, i) {
                      (t |= 0), (e |= 0), i || N(t, e, this.length);
                      for (
                        var n = this[t], r = 1, o = 0;
                        ++o < e && (r *= 256);

                      )
                        n += this[t + o] * r;
                      return n;
                    }),
                    (c.prototype.readUIntBE = function(t, e, i) {
                      (t |= 0), (e |= 0), i || N(t, e, this.length);
                      for (var n = this[t + --e], r = 1; e > 0 && (r *= 256); )
                        n += this[t + --e] * r;
                      return n;
                    }),
                    (c.prototype.readUInt8 = function(t, e) {
                      return e || N(t, 1, this.length), this[t];
                    }),
                    (c.prototype.readUInt16LE = function(t, e) {
                      return (
                        e || N(t, 2, this.length), this[t] | (this[t + 1] << 8)
                      );
                    }),
                    (c.prototype.readUInt16BE = function(t, e) {
                      return (
                        e || N(t, 2, this.length), (this[t] << 8) | this[t + 1]
                      );
                    }),
                    (c.prototype.readUInt32LE = function(t, e) {
                      return (
                        e || N(t, 4, this.length),
                        (this[t] | (this[t + 1] << 8) | (this[t + 2] << 16)) +
                          16777216 * this[t + 3]
                      );
                    }),
                    (c.prototype.readUInt32BE = function(t, e) {
                      return (
                        e || N(t, 4, this.length),
                        16777216 * this[t] +
                          ((this[t + 1] << 16) |
                            (this[t + 2] << 8) |
                            this[t + 3])
                      );
                    }),
                    (c.prototype.readIntLE = function(t, e, i) {
                      (t |= 0), (e |= 0), i || N(t, e, this.length);
                      for (
                        var n = this[t], r = 1, o = 0;
                        ++o < e && (r *= 256);

                      )
                        n += this[t + o] * r;
                      return n >= (r *= 128) && (n -= Math.pow(2, 8 * e)), n;
                    }),
                    (c.prototype.readIntBE = function(t, e, i) {
                      (t |= 0), (e |= 0), i || N(t, e, this.length);
                      for (
                        var n = e, r = 1, o = this[t + --n];
                        n > 0 && (r *= 256);

                      )
                        o += this[t + --n] * r;
                      return o >= (r *= 128) && (o -= Math.pow(2, 8 * e)), o;
                    }),
                    (c.prototype.readInt8 = function(t, e) {
                      return (
                        e || N(t, 1, this.length),
                        128 & this[t] ? -1 * (255 - this[t] + 1) : this[t]
                      );
                    }),
                    (c.prototype.readInt16LE = function(t, e) {
                      e || N(t, 2, this.length);
                      var i = this[t] | (this[t + 1] << 8);
                      return 32768 & i ? 4294901760 | i : i;
                    }),
                    (c.prototype.readInt16BE = function(t, e) {
                      e || N(t, 2, this.length);
                      var i = this[t + 1] | (this[t] << 8);
                      return 32768 & i ? 4294901760 | i : i;
                    }),
                    (c.prototype.readInt32LE = function(t, e) {
                      return (
                        e || N(t, 4, this.length),
                        this[t] |
                          (this[t + 1] << 8) |
                          (this[t + 2] << 16) |
                          (this[t + 3] << 24)
                      );
                    }),
                    (c.prototype.readInt32BE = function(t, e) {
                      return (
                        e || N(t, 4, this.length),
                        (this[t] << 24) |
                          (this[t + 1] << 16) |
                          (this[t + 2] << 8) |
                          this[t + 3]
                      );
                    }),
                    (c.prototype.readFloatLE = function(t, e) {
                      return (
                        e || N(t, 4, this.length), r.read(this, t, !0, 23, 4)
                      );
                    }),
                    (c.prototype.readFloatBE = function(t, e) {
                      return (
                        e || N(t, 4, this.length), r.read(this, t, !1, 23, 4)
                      );
                    }),
                    (c.prototype.readDoubleLE = function(t, e) {
                      return (
                        e || N(t, 8, this.length), r.read(this, t, !0, 52, 8)
                      );
                    }),
                    (c.prototype.readDoubleBE = function(t, e) {
                      return (
                        e || N(t, 8, this.length), r.read(this, t, !1, 52, 8)
                      );
                    }),
                    (c.prototype.writeUIntLE = function(t, e, i, n) {
                      ((t = +t), (e |= 0), (i |= 0), n) ||
                        D(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
                      var r = 1,
                        o = 0;
                      for (this[e] = 255 & t; ++o < i && (r *= 256); )
                        this[e + o] = (t / r) & 255;
                      return e + i;
                    }),
                    (c.prototype.writeUIntBE = function(t, e, i, n) {
                      ((t = +t), (e |= 0), (i |= 0), n) ||
                        D(this, t, e, i, Math.pow(2, 8 * i) - 1, 0);
                      var r = i - 1,
                        o = 1;
                      for (this[e + r] = 255 & t; --r >= 0 && (o *= 256); )
                        this[e + r] = (t / o) & 255;
                      return e + i;
                    }),
                    (c.prototype.writeUInt8 = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 1, 255, 0),
                        c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
                        (this[e] = 255 & t),
                        e + 1
                      );
                    }),
                    (c.prototype.writeUInt16LE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 2, 65535, 0),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
                          : S(this, t, e, !0),
                        e + 2
                      );
                    }),
                    (c.prototype.writeUInt16BE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 2, 65535, 0),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
                          : S(this, t, e, !1),
                        e + 2
                      );
                    }),
                    (c.prototype.writeUInt32LE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 4, 4294967295, 0),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e + 3] = t >>> 24),
                            (this[e + 2] = t >>> 16),
                            (this[e + 1] = t >>> 8),
                            (this[e] = 255 & t))
                          : C(this, t, e, !0),
                        e + 4
                      );
                    }),
                    (c.prototype.writeUInt32BE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 4, 4294967295, 0),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = t >>> 24),
                            (this[e + 1] = t >>> 16),
                            (this[e + 2] = t >>> 8),
                            (this[e + 3] = 255 & t))
                          : C(this, t, e, !1),
                        e + 4
                      );
                    }),
                    (c.prototype.writeIntLE = function(t, e, i, n) {
                      if (((t = +t), (e |= 0), !n)) {
                        var r = Math.pow(2, 8 * i - 1);
                        D(this, t, e, i, r - 1, -r);
                      }
                      var o = 0,
                        s = 1,
                        a = 0;
                      for (this[e] = 255 & t; ++o < i && (s *= 256); )
                        t < 0 && 0 === a && 0 !== this[e + o - 1] && (a = 1),
                          (this[e + o] = (((t / s) >> 0) - a) & 255);
                      return e + i;
                    }),
                    (c.prototype.writeIntBE = function(t, e, i, n) {
                      if (((t = +t), (e |= 0), !n)) {
                        var r = Math.pow(2, 8 * i - 1);
                        D(this, t, e, i, r - 1, -r);
                      }
                      var o = i - 1,
                        s = 1,
                        a = 0;
                      for (this[e + o] = 255 & t; --o >= 0 && (s *= 256); )
                        t < 0 && 0 === a && 0 !== this[e + o + 1] && (a = 1),
                          (this[e + o] = (((t / s) >> 0) - a) & 255);
                      return e + i;
                    }),
                    (c.prototype.writeInt8 = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 1, 127, -128),
                        c.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)),
                        t < 0 && (t = 255 + t + 1),
                        (this[e] = 255 & t),
                        e + 1
                      );
                    }),
                    (c.prototype.writeInt16LE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 2, 32767, -32768),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = 255 & t), (this[e + 1] = t >>> 8))
                          : S(this, t, e, !0),
                        e + 2
                      );
                    }),
                    (c.prototype.writeInt16BE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 2, 32767, -32768),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = t >>> 8), (this[e + 1] = 255 & t))
                          : S(this, t, e, !1),
                        e + 2
                      );
                    }),
                    (c.prototype.writeInt32LE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 4, 2147483647, -2147483648),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = 255 & t),
                            (this[e + 1] = t >>> 8),
                            (this[e + 2] = t >>> 16),
                            (this[e + 3] = t >>> 24))
                          : C(this, t, e, !0),
                        e + 4
                      );
                    }),
                    (c.prototype.writeInt32BE = function(t, e, i) {
                      return (
                        (t = +t),
                        (e |= 0),
                        i || D(this, t, e, 4, 2147483647, -2147483648),
                        t < 0 && (t = 4294967295 + t + 1),
                        c.TYPED_ARRAY_SUPPORT
                          ? ((this[e] = t >>> 24),
                            (this[e + 1] = t >>> 16),
                            (this[e + 2] = t >>> 8),
                            (this[e + 3] = 255 & t))
                          : C(this, t, e, !1),
                        e + 4
                      );
                    }),
                    (c.prototype.writeFloatLE = function(t, e, i) {
                      return I(this, t, e, !0, i);
                    }),
                    (c.prototype.writeFloatBE = function(t, e, i) {
                      return I(this, t, e, !1, i);
                    }),
                    (c.prototype.writeDoubleLE = function(t, e, i) {
                      return j(this, t, e, !0, i);
                    }),
                    (c.prototype.writeDoubleBE = function(t, e, i) {
                      return j(this, t, e, !1, i);
                    }),
                    (c.prototype.copy = function(t, e, i, n) {
                      if (
                        (i || (i = 0),
                        n || 0 === n || (n = this.length),
                        e >= t.length && (e = t.length),
                        e || (e = 0),
                        n > 0 && n < i && (n = i),
                        n === i)
                      )
                        return 0;
                      if (0 === t.length || 0 === this.length) return 0;
                      if (e < 0)
                        throw new RangeError('targetStart out of bounds');
                      if (i < 0 || i >= this.length)
                        throw new RangeError('sourceStart out of bounds');
                      if (n < 0)
                        throw new RangeError('sourceEnd out of bounds');
                      n > this.length && (n = this.length),
                        t.length - e < n - i && (n = t.length - e + i);
                      var r,
                        o = n - i;
                      if (this === t && i < e && e < n)
                        for (r = o - 1; r >= 0; --r) t[r + e] = this[r + i];
                      else if (o < 1e3 || !c.TYPED_ARRAY_SUPPORT)
                        for (r = 0; r < o; ++r) t[r + e] = this[r + i];
                      else
                        Uint8Array.prototype.set.call(
                          t,
                          this.subarray(i, i + o),
                          e
                        );
                      return o;
                    }),
                    (c.prototype.fill = function(t, e, i, n) {
                      if ('string' == typeof t) {
                        if (
                          ('string' == typeof e
                            ? ((n = e), (e = 0), (i = this.length))
                            : 'string' == typeof i &&
                              ((n = i), (i = this.length)),
                          1 === t.length)
                        ) {
                          var r = t.charCodeAt(0);
                          r < 256 && (t = r);
                        }
                        if (void 0 !== n && 'string' != typeof n)
                          throw new TypeError('encoding must be a string');
                        if ('string' == typeof n && !c.isEncoding(n))
                          throw new TypeError('Unknown encoding: ' + n);
                      } else 'number' == typeof t && (t &= 255);
                      if (e < 0 || this.length < e || this.length < i)
                        throw new RangeError('Out of range index');
                      if (i <= e) return this;
                      var o;
                      if (
                        ((e >>>= 0),
                        (i = void 0 === i ? this.length : i >>> 0),
                        t || (t = 0),
                        'number' == typeof t)
                      )
                        for (o = e; o < i; ++o) this[o] = t;
                      else {
                        var s = c.isBuffer(t) ? t : z(new c(t, n).toString()),
                          a = s.length;
                        for (o = 0; o < i - e; ++o) this[o + e] = s[o % a];
                      }
                      return this;
                    });
                  var O = /[^+\/0-9A-Za-z-_]/g;
                  function R(t) {
                    return t < 16 ? '0' + t.toString(16) : t.toString(16);
                  }
                  function z(t, e) {
                    var i;
                    e = e || 1 / 0;
                    for (
                      var n = t.length, r = null, o = [], s = 0;
                      s < n;
                      ++s
                    ) {
                      if ((i = t.charCodeAt(s)) > 55295 && i < 57344) {
                        if (!r) {
                          if (i > 56319) {
                            (e -= 3) > -1 && o.push(239, 191, 189);
                            continue;
                          }
                          if (s + 1 === n) {
                            (e -= 3) > -1 && o.push(239, 191, 189);
                            continue;
                          }
                          r = i;
                          continue;
                        }
                        if (i < 56320) {
                          (e -= 3) > -1 && o.push(239, 191, 189), (r = i);
                          continue;
                        }
                        i = 65536 + (((r - 55296) << 10) | (i - 56320));
                      } else r && (e -= 3) > -1 && o.push(239, 191, 189);
                      if (((r = null), i < 128)) {
                        if ((e -= 1) < 0) break;
                        o.push(i);
                      } else if (i < 2048) {
                        if ((e -= 2) < 0) break;
                        o.push((i >> 6) | 192, (63 & i) | 128);
                      } else if (i < 65536) {
                        if ((e -= 3) < 0) break;
                        o.push(
                          (i >> 12) | 224,
                          ((i >> 6) & 63) | 128,
                          (63 & i) | 128
                        );
                      } else {
                        if (!(i < 1114112))
                          throw new Error('Invalid code point');
                        if ((e -= 4) < 0) break;
                        o.push(
                          (i >> 18) | 240,
                          ((i >> 12) & 63) | 128,
                          ((i >> 6) & 63) | 128,
                          (63 & i) | 128
                        );
                      }
                    }
                    return o;
                  }
                  function k(t) {
                    return i.toByteArray(
                      (function(t) {
                        var e;
                        if (
                          (t = ((e = t),
                          e.trim
                            ? e.trim()
                            : e.replace(/^\s+|\s+$/g, '')).replace(O, ''))
                            .length < 2
                        )
                          return '';
                        for (; t.length % 4 != 0; ) t += '=';
                        return t;
                      })(t)
                    );
                  }
                  function B(t, e, i, n) {
                    for (
                      var r = 0;
                      r < n && !(r + i >= e.length || r >= t.length);
                      ++r
                    )
                      e[r + i] = t[r];
                    return r;
                  }
                }.call(
                  this,
                  void 0 !== i
                    ? i
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window ? window : {}
                ));
              },
              { 'base64-js': 4, ieee754: 18, isarray: 9 }
            ],
            9: [
              function(t, e, i) {
                var n = {}.toString;
                e.exports =
                  Array.isArray ||
                  function(t) {
                    return '[object Array]' == n.call(t);
                  };
              },
              {}
            ],
            10: [
              function(t, e, i) {
                function n() {
                  var t;
                  try {
                    t = i.storage.debug;
                  } catch (t) {}
                  return t;
                }
                ((i = e.exports = t('./debug')).log = function() {
                  return (
                    'object' == typeof console &&
                    console.log &&
                    Function.prototype.apply.call(
                      console.log,
                      console,
                      arguments
                    )
                  );
                }),
                  (i.formatArgs = function() {
                    var t = arguments,
                      e = this.useColors;
                    if (
                      ((t[0] =
                        (e ? '%c' : '') +
                        this.namespace +
                        (e ? ' %c' : ' ') +
                        t[0] +
                        (e ? '%c ' : ' ')),
                      !e)
                    )
                      return t;
                    var i = 'color: ' + this.color,
                      n = 0,
                      r = 0;
                    return (
                      (t = [t[0], i, 'color: inherit'].concat(
                        Array.prototype.slice.call(t, 1)
                      ))[0].replace(/%[a-z%]/g, function(t) {
                        '%%' !== t && '%c' === t && (r = ++n);
                      }),
                      t.splice(r, 0, i),
                      t
                    );
                  }),
                  (i.save = function(t) {
                    try {
                      null == t
                        ? i.storage.removeItem('debug')
                        : (i.storage.debug = t);
                    } catch (t) {}
                  }),
                  (i.load = n),
                  (i.useColors = function() {
                    return (
                      'WebkitAppearance' in document.documentElement.style ||
                      (window.console &&
                        (console.firebug ||
                          (console.exception && console.table))) ||
                      (navigator.userAgent
                        .toLowerCase()
                        .match(/firefox\/(\d+)/) &&
                        parseInt(RegExp.$1, 10) >= 31)
                    );
                  }),
                  (i.storage =
                    'undefined' != typeof chrome && void 0 !== chrome.storage
                      ? chrome.storage.local
                      : (function() {
                          try {
                            return window.localStorage;
                          } catch (t) {}
                        })()),
                  (i.colors = [
                    'lightseagreen',
                    'forestgreen',
                    'goldenrod',
                    'dodgerblue',
                    'darkorchid',
                    'crimson'
                  ]),
                  (i.formatters.j = function(t) {
                    return JSON.stringify(t);
                  }),
                  i.enable(n());
              },
              { './debug': 11 }
            ],
            11: [
              function(t, e, i) {
                ((i = e.exports = function(t) {
                  function e() {}
                  function r() {
                    var t = r;
                    null == t.useColors && (t.useColors = i.useColors()),
                      null == t.color &&
                        t.useColors &&
                        (t.color = i.colors[n++ % i.colors.length]);
                    var e = Array.prototype.slice.call(arguments);
                    (e[0] = i.coerce(e[0])),
                      'string' != typeof e[0] && (e = ['%o'].concat(e));
                    var o = 0;
                    (e[0] = e[0].replace(/%([a-z%])/g, function(n, r) {
                      if ('%%' === n) return n;
                      o++;
                      var s = i.formatters[r];
                      if ('function' == typeof s) {
                        var a = e[o];
                        (n = s.call(t, a)), e.splice(o, 1), o--;
                      }
                      return n;
                    })),
                      'function' == typeof i.formatArgs &&
                        (e = i.formatArgs.apply(t, e));
                    var s = r.log || i.log || console.log.bind(console);
                    s.apply(t, e);
                  }
                  (e.enabled = !1), (r.enabled = !0);
                  var o = i.enabled(t) ? r : e;
                  return (o.namespace = t), o;
                }).coerce = function(t) {
                  return t instanceof Error ? t.stack || t.message : t;
                }),
                  (i.disable = function() {
                    i.enable('');
                  }),
                  (i.enable = function(t) {
                    i.save(t);
                    for (
                      var e = (t || '').split(/[\s,]+/), n = e.length, r = 0;
                      r < n;
                      r++
                    )
                      e[r] &&
                        ('-' === (t = e[r].replace(/\*/g, '.*?'))[0]
                          ? i.skips.push(new RegExp('^' + t.substr(1) + '$'))
                          : i.names.push(new RegExp('^' + t + '$')));
                  }),
                  (i.enabled = function(t) {
                    var e, n;
                    for (e = 0, n = i.skips.length; e < n; e++)
                      if (i.skips[e].test(t)) return !1;
                    for (e = 0, n = i.names.length; e < n; e++)
                      if (i.names[e].test(t)) return !0;
                    return !1;
                  }),
                  (i.names = []),
                  (i.skips = []),
                  (i.formatters = {});
                var n = 0;
              },
              {}
            ],
            12: [
              function(t, e, i) {
                'use strict';
                var n = t('is-obj'),
                  r = Object.prototype.hasOwnProperty,
                  o = Object.prototype.propertyIsEnumerable;
                function s(t, e, i) {
                  var o = e[i];
                  if (void 0 !== o && null !== o) {
                    if (r.call(t, i) && (void 0 === t[i] || null === t[i]))
                      throw new TypeError(
                        'Cannot convert undefined or null to object (' + i + ')'
                      );
                    r.call(t, i) && n(o)
                      ? (t[i] = a(Object(t[i]), e[i]))
                      : (t[i] = o);
                  }
                }
                function a(t, e) {
                  if (t === e) return t;
                  e = Object(e);
                  for (var i in e) r.call(e, i) && s(t, e, i);
                  if (Object.getOwnPropertySymbols)
                    for (
                      var n = Object.getOwnPropertySymbols(e), a = 0;
                      a < n.length;
                      a++
                    )
                      o.call(e, n[a]) && s(t, e, n[a]);
                  return t;
                }
                e.exports = function(t) {
                  t = (function(t) {
                    if (null === t || void 0 === t)
                      throw new TypeError(
                        'Sources cannot be null or undefined'
                      );
                    return Object(t);
                  })(t);
                  for (var e = 1; e < arguments.length; e++) a(t, arguments[e]);
                  return t;
                };
              },
              { 'is-obj': 22 }
            ],
            13: [
              function(t, i, n) {
                !(function(t, i, n, r) {
                  'use strict';
                  function o(t, e) {
                    for (var i = 0, n = t.length; i < n; i++) m(t[i], e);
                  }
                  function s(t) {
                    return function(e) {
                      st(e) && (m(e, t), o(e.querySelectorAll(V), t));
                    };
                  }
                  function a(t) {
                    var e = lt.call(t, 'is'),
                      i = t.nodeName.toUpperCase(),
                      n = Y.call(F, e ? B + e.toUpperCase() : k + i);
                    return e && -1 < n && !c(i, e) ? -1 : n;
                  }
                  function c(t, e) {
                    return -1 < V.indexOf(t + '[is="' + e + '"]');
                  }
                  function l(t) {
                    var e = t.currentTarget,
                      i = t.attrChange,
                      n = t.attrName,
                      r = t.target;
                    wt &&
                      (!r || r === e) &&
                      e.attributeChangedCallback &&
                      'style' !== n &&
                      t.prevValue !== t.newValue &&
                      e.attributeChangedCallback(
                        n,
                        i === t[_] ? null : t.prevValue,
                        i === t[j] ? null : t.newValue
                      );
                  }
                  function u(t) {
                    var e = s(t);
                    return function(t) {
                      g.push(e, t.target);
                    };
                  }
                  function h(t) {
                    yt &&
                      ((yt = !1), t.currentTarget.removeEventListener(R, h)),
                      o(
                        (t.target || i).querySelectorAll(V),
                        t.detail === C ? C : S
                      ),
                      ot &&
                        (function() {
                          for (var t, e = 0, i = at.length; e < i; e++)
                            (t = at[e]),
                              G.contains(t) ||
                                (i--, at.splice(e--, 1), m(t, C));
                        })();
                  }
                  function d(t, e) {
                    ut.call(this, t, e), v.call(this, { target: this });
                  }
                  function p(t, e) {
                    it(t, e),
                      M
                        ? M.observe(t, pt)
                        : (vt &&
                            ((t.setAttribute = d),
                            (t[D] = w(t)),
                            t.addEventListener(z, v)),
                          t.addEventListener(O, l)),
                      t.createdCallback &&
                        wt &&
                        ((t.created = !0),
                        t.createdCallback(),
                        (t.created = !1));
                  }
                  function f(t) {
                    throw new Error('A ' + t + ' type is already registered');
                  }
                  function m(t, e) {
                    var i,
                      n = a(t);
                    -1 < n &&
                      (E(t, H[n]),
                      (n = 0),
                      e !== S || t[S]
                        ? e === C &&
                          !t[C] &&
                          ((t[S] = !1), (t[C] = !0), (n = 1))
                        : ((t[C] = !1),
                          (t[S] = !0),
                          (n = 1),
                          ot && Y.call(at, t) < 0 && at.push(t)),
                      n && (i = t[e + 'Callback']) && i.call(t));
                  }
                  if (!(r in i)) {
                    var g,
                      v,
                      y,
                      w,
                      M,
                      E,
                      b,
                      x,
                      A,
                      T,
                      L,
                      N,
                      D = '__' + r + ((1e5 * Math.random()) >> 0),
                      S = 'attached',
                      C = 'detached',
                      _ = 'ADDITION',
                      I = 'MODIFICATION',
                      j = 'REMOVAL',
                      O = 'DOMAttrModified',
                      R = 'DOMContentLoaded',
                      z = 'DOMSubtreeModified',
                      k = '<',
                      B = '=',
                      P = /^[A-Z][A-Z0-9]*(?:-[A-Z0-9]+)+$/,
                      U = [
                        'ANNOTATION-XML',
                        'COLOR-PROFILE',
                        'FONT-FACE',
                        'FONT-FACE-SRC',
                        'FONT-FACE-URI',
                        'FONT-FACE-FORMAT',
                        'FONT-FACE-NAME',
                        'MISSING-GLYPH'
                      ],
                      F = [],
                      H = [],
                      V = '',
                      G = i.documentElement,
                      Y =
                        F.indexOf ||
                        function(t) {
                          for (var e = this.length; e-- && this[e] !== t; );
                          return e;
                        },
                      Q = n.prototype,
                      W = Q.hasOwnProperty,
                      q = Q.isPrototypeOf,
                      X = n.defineProperty,
                      K = n.getOwnPropertyDescriptor,
                      Z = n.getOwnPropertyNames,
                      J = n.getPrototypeOf,
                      $ = n.setPrototypeOf,
                      tt = !!n.__proto__,
                      et =
                        n.create ||
                        function t(e) {
                          return e ? ((t.prototype = e), new t()) : this;
                        },
                      it =
                        $ ||
                        (tt
                          ? function(t, e) {
                              return (t.__proto__ = e), t;
                            }
                          : Z && K
                            ? (function() {
                                function t(t, e) {
                                  for (
                                    var i, n = Z(e), r = 0, o = n.length;
                                    r < o;
                                    r++
                                  )
                                    (i = n[r]),
                                      W.call(t, i) || X(t, i, K(e, i));
                                }
                                return function(e, i) {
                                  do {
                                    t(e, i);
                                  } while ((i = J(i)) && !q.call(i, e));
                                  return e;
                                };
                              })()
                            : function(t, e) {
                                for (var i in e) t[i] = e[i];
                                return t;
                              }),
                      nt = t.MutationObserver || t.WebKitMutationObserver,
                      rt = (t.HTMLElement || t.Element || t.Node).prototype,
                      ot = !q.call(rt, G),
                      st = ot
                        ? function(t) {
                            return 1 === t.nodeType;
                          }
                        : function(t) {
                            return q.call(rt, t);
                          },
                      at = ot && [],
                      ct = rt.cloneNode,
                      lt = rt.getAttribute,
                      ut = rt.setAttribute,
                      ht = rt.removeAttribute,
                      dt = i.createElement,
                      pt = nt && {
                        attributes: !0,
                        characterData: !0,
                        attributeOldValue: !0
                      },
                      ft =
                        nt ||
                        function(t) {
                          (vt = !1), G.removeEventListener(O, ft);
                        },
                      mt =
                        t.requestAnimationFrame ||
                        t.webkitRequestAnimationFrame ||
                        t.mozRequestAnimationFrame ||
                        t.msRequestAnimationFrame ||
                        function(t) {
                          setTimeout(t, 10);
                        },
                      gt = !1,
                      vt = !0,
                      yt = !0,
                      wt = !0;
                    $ || tt
                      ? ((E = function(t, e) {
                          q.call(e, t) || p(t, e);
                        }),
                        (b = p))
                      : (b = E = function(t, e) {
                          t[D] || ((t[D] = n(!0)), p(t, e));
                        }),
                      ot
                        ? ((vt = !1),
                          (x = K(rt, 'addEventListener')),
                          (A = x.value),
                          (T = function(t) {
                            var e = new CustomEvent(O, { bubbles: !0 });
                            (e.attrName = t),
                              (e.prevValue = lt.call(this, t)),
                              (e.newValue = null),
                              (e[j] = e.attrChange = 2),
                              ht.call(this, t),
                              this.dispatchEvent(e);
                          }),
                          (L = function(t, i) {
                            var n = this.hasAttribute(t),
                              r = n && lt.call(this, t);
                            (e = new CustomEvent(O, { bubbles: !0 })),
                              ut.call(this, t, i),
                              (e.attrName = t),
                              (e.prevValue = n ? r : null),
                              (e.newValue = i),
                              n
                                ? (e[I] = e.attrChange = 1)
                                : (e[_] = e.attrChange = 0),
                              this.dispatchEvent(e);
                          }),
                          (N = function(t) {
                            var e,
                              i = t.currentTarget,
                              n = i[D],
                              r = t.propertyName;
                            n.hasOwnProperty(r) &&
                              ((n = n[r]),
                              ((e = new CustomEvent(O, {
                                bubbles: !0
                              })).attrName =
                                n.name),
                              (e.prevValue = n.value || null),
                              (e.newValue = n.value = i[r] || null),
                              null == e.prevValue
                                ? (e[_] = e.attrChange = 0)
                                : (e[I] = e.attrChange = 1),
                              i.dispatchEvent(e));
                          }),
                          (x.value = function(t, e, i) {
                            t === O &&
                              this.attributeChangedCallback &&
                              this.setAttribute !== L &&
                              ((this[D] = {
                                className: {
                                  name: 'class',
                                  value: this.className
                                }
                              }),
                              (this.setAttribute = L),
                              (this.removeAttribute = T),
                              A.call(this, 'propertychange', N)),
                              A.call(this, t, e, i);
                          }),
                          X(rt, 'addEventListener', x))
                        : nt ||
                          (G.addEventListener(O, ft),
                          G.setAttribute(D, 1),
                          G.removeAttribute(D),
                          vt &&
                            ((v = function(t) {
                              var e, i, n;
                              if (this === t.target) {
                                (e = this[D]), (this[D] = i = w(this));
                                for (n in i) {
                                  if (!(n in e))
                                    return y(0, this, n, e[n], i[n], _);
                                  if (i[n] !== e[n])
                                    return y(1, this, n, e[n], i[n], I);
                                }
                                for (n in e)
                                  if (!(n in i))
                                    return y(2, this, n, e[n], i[n], j);
                              }
                            }),
                            (y = function(t, e, i, n, r, o) {
                              var s = {
                                attrChange: t,
                                currentTarget: e,
                                attrName: i,
                                prevValue: n,
                                newValue: r
                              };
                              (s[o] = t), l(s);
                            }),
                            (w = function(t) {
                              for (
                                var e,
                                  i,
                                  n = {},
                                  r = t.attributes,
                                  o = 0,
                                  s = r.length;
                                o < s;
                                o++
                              )
                                (e = r[o]),
                                  (i = e.name),
                                  'setAttribute' !== i && (n[i] = e.value);
                              return n;
                            }))),
                      (i[r] = function(t, e) {
                        if (
                          ((n = t.toUpperCase()),
                          gt ||
                            ((gt = !0),
                            nt
                              ? (M = (function(t, e) {
                                  function i(t, e) {
                                    for (
                                      var i = 0, n = t.length;
                                      i < n;
                                      e(t[i++])
                                    );
                                  }
                                  return new nt(function(n) {
                                    for (
                                      var r, o, s, a = 0, c = n.length;
                                      a < c;
                                      a++
                                    )
                                      (r = n[a]),
                                        'childList' === r.type
                                          ? (i(r.addedNodes, t),
                                            i(r.removedNodes, e))
                                          : ((o = r.target),
                                            wt &&
                                              o.attributeChangedCallback &&
                                              'style' !== r.attributeName &&
                                              ((s = lt.call(
                                                o,
                                                r.attributeName
                                              )),
                                              s !== r.oldValue &&
                                                o.attributeChangedCallback(
                                                  r.attributeName,
                                                  r.oldValue,
                                                  s
                                                )));
                                  });
                                })(s(S), s(C))).observe(i, {
                                  childList: !0,
                                  subtree: !0
                                })
                              : ((g = []),
                                mt(function t() {
                                  for (; g.length; )
                                    g.shift().call(null, g.shift());
                                  mt(t);
                                }),
                                i.addEventListener('DOMNodeInserted', u(S)),
                                i.addEventListener('DOMNodeRemoved', u(C))),
                            i.addEventListener(R, h),
                            i.addEventListener('readystatechange', h),
                            (i.createElement = function(t, e) {
                              var n = dt.apply(i, arguments),
                                r = '' + t,
                                o = Y.call(
                                  F,
                                  (e ? B : k) + (e || r).toUpperCase()
                                ),
                                s = -1 < o;
                              return (
                                e &&
                                  (n.setAttribute('is', (e = e.toLowerCase())),
                                  s && (s = c(r.toUpperCase(), e))),
                                (wt = !i.createElement.innerHTMLHelper),
                                s && b(n, H[o]),
                                n
                              );
                            }),
                            (rt.cloneNode = function(t) {
                              var e = ct.call(this, !!t),
                                i = a(e);
                              return (
                                -1 < i && b(e, H[i]),
                                t &&
                                  (function(t) {
                                    for (var e, i = 0, n = t.length; i < n; i++)
                                      (e = t[i]), b(e, H[a(e)]);
                                  })(e.querySelectorAll(V)),
                                e
                              );
                            })),
                          -2 < Y.call(F, B + n) + Y.call(F, k + n) && f(t),
                          !P.test(n) || -1 < Y.call(U, n))
                        )
                          throw new Error('The type ' + t + ' is invalid');
                        var n,
                          r,
                          l = function() {
                            return p
                              ? i.createElement(m, n)
                              : i.createElement(m);
                          },
                          d = e || Q,
                          p = W.call(d, 'extends'),
                          m = p ? e.extends.toUpperCase() : n;
                        return (
                          p && -1 < Y.call(F, k + m) && f(m),
                          (r = F.push((p ? B : k) + n) - 1),
                          (V = V.concat(
                            V.length ? ',' : '',
                            p ? m + '[is="' + t.toLowerCase() + '"]' : m
                          )),
                          (l.prototype = H[r] = W.call(d, 'prototype')
                            ? d.prototype
                            : et(rt)),
                          o(i.querySelectorAll(V), S),
                          l
                        );
                      });
                  }
                })(window, document, Object, 'registerElement');
              },
              {}
            ],
            14: [
              function(t, e, i) {
                e.exports = function(t) {
                  switch (t) {
                    case 'int8':
                      return Int8Array;
                    case 'int16':
                      return Int16Array;
                    case 'int32':
                      return Int32Array;
                    case 'uint8':
                      return Uint8Array;
                    case 'uint16':
                      return Uint16Array;
                    case 'uint32':
                      return Uint32Array;
                    case 'float32':
                      return Float32Array;
                    case 'float64':
                      return Float64Array;
                    case 'array':
                      return Array;
                    case 'uint8_clamped':
                      return Uint8ClampedArray;
                  }
                };
              },
              {}
            ],
            15: [
              function(t, e, i) {
                var n = t('dtype');
                e.exports = function(t, e, i) {
                  if (!t)
                    throw new TypeError('must specify data as first parameter');
                  if (
                    ((i = 0 | +(i || 0)),
                    Array.isArray(t) && Array.isArray(t[0]))
                  ) {
                    var r = t[0].length,
                      o = t.length * r;
                    (e && 'string' != typeof e) ||
                      (e = new (n(e || 'float32'))(o + i));
                    var s = e.length - i;
                    if (o !== s)
                      throw new Error(
                        'source length ' +
                          o +
                          ' (' +
                          r +
                          'x' +
                          t.length +
                          ') does not match destination length ' +
                          s
                      );
                    for (var a = 0, c = i; a < t.length; a++)
                      for (var l = 0; l < r; l++) e[c++] = t[a][l];
                  } else if (e && 'string' != typeof e) e.set(t, i);
                  else {
                    var u = n(e || 'float32');
                    0 === i
                      ? (e = new u(t))
                      : (e = new u(t.length + i)).set(t, i);
                  }
                  return e;
                };
              },
              { dtype: 14 }
            ],
            16: [
              function(t, e, i) {
                var n = t('is-function');
                e.exports = function(t, e, i) {
                  if (!n(e)) throw new TypeError('iterator must be a function');
                  arguments.length < 3 && (i = this);
                  '[object Array]' === r.call(t)
                    ? (function(t, e, i) {
                        for (var n = 0, r = t.length; n < r; n++)
                          o.call(t, n) && e.call(i, t[n], n, t);
                      })(t, e, i)
                    : 'string' == typeof t
                      ? (function(t, e, i) {
                          for (var n = 0, r = t.length; n < r; n++)
                            e.call(i, t.charAt(n), n, t);
                        })(t, e, i)
                      : (function(t, e, i) {
                          for (var n in t)
                            o.call(t, n) && e.call(i, t[n], n, t);
                        })(t, e, i);
                };
                var r = Object.prototype.toString,
                  o = Object.prototype.hasOwnProperty;
              },
              { 'is-function': 21 }
            ],
            17: [
              function(t, e, n) {
                (function(t) {
                  var i;
                  (i =
                    'undefined' != typeof window
                      ? window
                      : void 0 !== t
                        ? t
                        : 'undefined' != typeof self ? self : {}),
                    (e.exports = i);
                }.call(
                  this,
                  void 0 !== i
                    ? i
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window ? window : {}
                ));
              },
              {}
            ],
            18: [
              function(t, e, i) {
                (i.read = function(t, e, i, n, r) {
                  var o,
                    s,
                    a = 8 * r - n - 1,
                    c = (1 << a) - 1,
                    l = c >> 1,
                    u = -7,
                    h = i ? r - 1 : 0,
                    d = i ? -1 : 1,
                    p = t[e + h];
                  for (
                    h += d, o = p & ((1 << -u) - 1), p >>= -u, u += a;
                    u > 0;
                    o = 256 * o + t[e + h], h += d, u -= 8
                  );
                  for (
                    s = o & ((1 << -u) - 1), o >>= -u, u += n;
                    u > 0;
                    s = 256 * s + t[e + h], h += d, u -= 8
                  );
                  if (0 === o) o = 1 - l;
                  else {
                    if (o === c) return s ? NaN : 1 / 0 * (p ? -1 : 1);
                    (s += Math.pow(2, n)), (o -= l);
                  }
                  return (p ? -1 : 1) * s * Math.pow(2, o - n);
                }),
                  (i.write = function(t, e, i, n, r, o) {
                    var s,
                      a,
                      c,
                      l = 8 * o - r - 1,
                      u = (1 << l) - 1,
                      h = u >> 1,
                      d = 23 === r ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                      p = n ? 0 : o - 1,
                      f = n ? 1 : -1,
                      m = e < 0 || (0 === e && 1 / e < 0) ? 1 : 0;
                    for (
                      e = Math.abs(e),
                        isNaN(e) || e === 1 / 0
                          ? ((a = isNaN(e) ? 1 : 0), (s = u))
                          : ((s = Math.floor(Math.log(e) / Math.LN2)),
                            e * (c = Math.pow(2, -s)) < 1 && (s--, (c *= 2)),
                            (e += s + h >= 1 ? d / c : d * Math.pow(2, 1 - h)) *
                              c >=
                              2 && (s++, (c /= 2)),
                            s + h >= u
                              ? ((a = 0), (s = u))
                              : s + h >= 1
                                ? ((a = (e * c - 1) * Math.pow(2, r)), (s += h))
                                : ((a =
                                    e * Math.pow(2, h - 1) * Math.pow(2, r)),
                                  (s = 0)));
                      r >= 8;
                      t[i + p] = 255 & a, p += f, a /= 256, r -= 8
                    );
                    for (
                      s = (s << r) | a, l += r;
                      l > 0;
                      t[i + p] = 255 & s, p += f, s /= 256, l -= 8
                    );
                    t[i + p - f] |= 128 * m;
                  });
              },
              {}
            ],
            19: [
              function(t, e, i) {
                'function' == typeof Object.create
                  ? (e.exports = function(t, e) {
                      (t.super_ = e),
                        (t.prototype = Object.create(e.prototype, {
                          constructor: {
                            value: t,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                          }
                        }));
                    })
                  : (e.exports = function(t, e) {
                      t.super_ = e;
                      var i = function() {};
                      (i.prototype = e.prototype),
                        (t.prototype = new i()),
                        (t.prototype.constructor = t);
                    });
              },
              {}
            ],
            20: [
              function(t, e, i) {
                function n(t) {
                  return (
                    !!t.constructor &&
                    'function' == typeof t.constructor.isBuffer &&
                    t.constructor.isBuffer(t)
                  );
                }
                e.exports = function(t) {
                  return (
                    null != t &&
                    (n(t) ||
                      ('function' == typeof (e = t).readFloatLE &&
                        'function' == typeof e.slice &&
                        n(e.slice(0, 0))) ||
                      !!t._isBuffer)
                  );
                  var e;
                };
              },
              {}
            ],
            21: [
              function(t, e, i) {
                e.exports = function(t) {
                  var e = n.call(t);
                  return (
                    '[object Function]' === e ||
                    ('function' == typeof t && '[object RegExp]' !== e) ||
                    ('undefined' != typeof window &&
                      (t === window.setTimeout ||
                        t === window.alert ||
                        t === window.confirm ||
                        t === window.prompt))
                  );
                };
                var n = Object.prototype.toString;
              },
              {}
            ],
            22: [
              function(t, e, i) {
                'use strict';
                e.exports = function(t) {
                  var e = typeof t;
                  return null !== t && ('object' === e || 'function' === e);
                };
              },
              {}
            ],
            23: [
              function(t, e, i) {
                var n = t('word-wrapper'),
                  r = t('xtend'),
                  o = t('as-number'),
                  s = [
                    'x',
                    'e',
                    'a',
                    'o',
                    'n',
                    's',
                    'r',
                    'c',
                    'u',
                    'm',
                    'v',
                    'w',
                    'z'
                  ],
                  a = ['m', 'w'],
                  c = [
                    'H',
                    'I',
                    'N',
                    'E',
                    'F',
                    'K',
                    'L',
                    'T',
                    'U',
                    'V',
                    'W',
                    'X',
                    'Y',
                    'Z'
                  ],
                  l = '\t'.charCodeAt(0),
                  u = ' '.charCodeAt(0),
                  h = 0,
                  d = 1,
                  p = 2;
                function f(t) {
                  (this.glyphs = []),
                    (this._measure = this.computeMetrics.bind(this)),
                    this.update(t);
                }
                function m(t, e) {
                  if (!t.chars || 0 === t.chars.length) return null;
                  var i = v(t.chars, e);
                  return i >= 0 ? t.chars[i] : null;
                }
                function g(t, e, i) {
                  if (!t.kernings || 0 === t.kernings.length) return 0;
                  for (var n = t.kernings, r = 0; r < n.length; r++) {
                    var o = n[r];
                    if (o.first === e && o.second === i) return o.amount;
                  }
                  return 0;
                }
                function v(t, e, i) {
                  for (var n = (i = i || 0); n < t.length; n++)
                    if (t[n].id === e) return n;
                  return -1;
                }
                (e.exports = function(t) {
                  return new f(t);
                }),
                  (f.prototype.update = function(t) {
                    if (
                      ((t = r({ measure: this._measure }, t)),
                      (this._opt = t),
                      (this._opt.tabSize = o(this._opt.tabSize, 4)),
                      !t.font)
                    )
                      throw new Error('must provide a valid bitmap font');
                    var e = this.glyphs,
                      i = t.text || '',
                      a = t.font;
                    this._setupSpaceGlyphs(a);
                    var l = n.lines(i, t),
                      u = t.width || 0;
                    e.length = 0;
                    var f = l.reduce(function(t, e) {
                        return Math.max(t, e.width, u);
                      }, 0),
                      m = 0,
                      y = 0,
                      w = o(t.lineHeight, a.common.lineHeight),
                      M = a.common.base,
                      E = w - M,
                      b = t.letterSpacing || 0,
                      x = w * l.length - E,
                      A = (function(t) {
                        if ('center' === t) return d;
                        if ('right' === t) return p;
                        return h;
                      })(this._opt.align);
                    (y -= x),
                      (this._width = f),
                      (this._height = x),
                      (this._descender = w - M),
                      (this._baseline = M),
                      (this._xHeight = (function(t) {
                        for (var e = 0; e < s.length; e++) {
                          var i = s[e].charCodeAt(0),
                            n = v(t.chars, i);
                          if (n >= 0) return t.chars[n].height;
                        }
                        return 0;
                      })(a)),
                      (this._capHeight = (function(t) {
                        for (var e = 0; e < c.length; e++) {
                          var i = c[e].charCodeAt(0),
                            n = v(t.chars, i);
                          if (n >= 0) return t.chars[n].height;
                        }
                        return 0;
                      })(a)),
                      (this._lineHeight = w),
                      (this._ascender = w - E - this._xHeight);
                    var T = this;
                    l.forEach(function(t, n) {
                      for (
                        var r, o = t.start, s = t.end, c = t.width, l = o;
                        l < s;
                        l++
                      ) {
                        var u = i.charCodeAt(l),
                          h = T.getGlyph(a, u);
                        if (h) {
                          r && (m += g(a, r.id, h.id));
                          var v = m;
                          A === d
                            ? (v += (f - c) / 2)
                            : A === p && (v += f - c),
                            e.push({
                              position: [v, y],
                              data: h,
                              index: l,
                              line: n
                            }),
                            (m += h.xadvance + b),
                            (r = h);
                        }
                      }
                      (y += w), (m = 0);
                    }),
                      (this._linesTotal = l.length);
                  }),
                  (f.prototype._setupSpaceGlyphs = function(t) {
                    if (
                      ((this._fallbackSpaceGlyph = null),
                      (this._fallbackTabGlyph = null),
                      t.chars && 0 !== t.chars.length)
                    ) {
                      var e =
                          m(t, u) ||
                          (function(t) {
                            for (var e = 0; e < a.length; e++) {
                              var i = a[e].charCodeAt(0),
                                n = v(t.chars, i);
                              if (n >= 0) return t.chars[n];
                            }
                            return 0;
                          })(t) ||
                          t.chars[0],
                        i = this._opt.tabSize * e.xadvance;
                      (this._fallbackSpaceGlyph = e),
                        (this._fallbackTabGlyph = r(e, {
                          x: 0,
                          y: 0,
                          xadvance: i,
                          id: l,
                          xoffset: 0,
                          yoffset: 0,
                          width: 0,
                          height: 0
                        }));
                    }
                  }),
                  (f.prototype.getGlyph = function(t, e) {
                    var i = m(t, e);
                    return (
                      i ||
                      (e === l
                        ? this._fallbackTabGlyph
                        : e === u ? this._fallbackSpaceGlyph : null)
                    );
                  }),
                  (f.prototype.computeMetrics = function(t, e, i, n) {
                    var r,
                      o = this._opt.letterSpacing || 0,
                      s = this._opt.font,
                      a = 0,
                      c = 0,
                      l = 0;
                    if (!s.chars || 0 === s.chars.length)
                      return { start: e, end: e, width: 0 };
                    i = Math.min(t.length, i);
                    for (var u = e; u < i; u++) {
                      var h,
                        d = t.charCodeAt(u);
                      if ((h = this.getGlyph(s, d))) {
                        h.xoffset;
                        var p =
                            (a += r ? g(s, r.id, h.id) : 0) + h.xadvance + o,
                          f = a + h.width;
                        if (f >= n || p >= n) break;
                        (a = p), (c = f), (r = h);
                      }
                      l++;
                    }
                    return (
                      r && (c += r.xoffset), { start: e, end: e + l, width: c }
                    );
                  }),
                  [
                    'width',
                    'height',
                    'descender',
                    'ascender',
                    'xHeight',
                    'baseline',
                    'capHeight',
                    'lineHeight'
                  ].forEach(function(t) {
                    Object.defineProperty(f.prototype, t, {
                      get: ((e = t),
                      new Function(
                        [
                          'return function ' + e + '() {',
                          '  return this._' + e,
                          '}'
                        ].join('\n')
                      )()),
                      configurable: !0
                    });
                    var e;
                  });
              },
              { 'as-number': 3, 'word-wrapper': 72, xtend: 75 }
            ],
            24: [
              function(t, e, i) {
                (function(i) {
                  var n = t('xhr'),
                    r = function() {},
                    o = t('parse-bmfont-ascii'),
                    s = t('parse-bmfont-xml'),
                    a = t('parse-bmfont-binary'),
                    c = t('./lib/is-binary'),
                    l = t('xtend'),
                    u =
                      self.XMLHttpRequest &&
                      'withCredentials' in new XMLHttpRequest();
                  e.exports = function(t, e) {
                    (e = 'function' == typeof e ? e : r),
                      'string' == typeof t ? (t = { uri: t }) : t || (t = {}),
                      t.binary &&
                        (t = (function(t) {
                          if (u) return l(t, { responseType: 'arraybuffer' });
                          if (void 0 === self.XMLHttpRequest)
                            throw new Error(
                              'your browser does not support XHR loading'
                            );
                          var e = new self.XMLHttpRequest();
                          return (
                            e.overrideMimeType(
                              'text/plain; charset=x-user-defined'
                            ),
                            l({ xhr: e }, t)
                          );
                        })(t)),
                      n(t, function(n, l, u) {
                        if (n) return e(n);
                        if (!/^2/.test(l.statusCode))
                          return e(
                            new Error('http status code: ' + l.statusCode)
                          );
                        if (!u) return e(new Error('no body result'));
                        var h,
                          d,
                          p = !1;
                        if (
                          ((h = u),
                          '[object ArrayBuffer]' ===
                            Object.prototype.toString.call(h))
                        ) {
                          var f = new Uint8Array(u);
                          u = new i(f, 'binary');
                        }
                        c(u) &&
                          ((p = !0),
                          'string' == typeof u && (u = new i(u, 'binary'))),
                          p ||
                            (i.isBuffer(u) && (u = u.toString(t.encoding)),
                            (u = u.trim()));
                        try {
                          var m = l.headers['content-type'];
                          d = p
                            ? a(u)
                            : /json/.test(m) || '{' === u.charAt(0)
                              ? JSON.parse(u)
                              : /xml/.test(m) || '<' === u.charAt(0)
                                ? s(u)
                                : o(u);
                        } catch (t) {
                          e(new Error('error parsing font ' + t.message)),
                            (e = r);
                        }
                        e(null, d);
                      });
                  };
                }.call(this, t('buffer').Buffer));
              },
              {
                './lib/is-binary': 25,
                buffer: 8,
                'parse-bmfont-ascii': 27,
                'parse-bmfont-binary': 28,
                'parse-bmfont-xml': 29,
                xhr: 73,
                xtend: 75
              }
            ],
            25: [
              function(t, e, i) {
                (function(i) {
                  var n = t('buffer-equal'),
                    r = new i([66, 77, 70, 3]);
                  e.exports = function(t) {
                    return 'string' == typeof t
                      ? 'BMF' === t.substring(0, 3)
                      : t.length > 4 && n(t.slice(0, 4), r);
                  };
                }.call(this, t('buffer').Buffer));
              },
              { buffer: 8, 'buffer-equal': 7 }
            ],
            26: [
              function(t, e, i) {
                'use strict';
                var n = Object.getOwnPropertySymbols,
                  r = Object.prototype.hasOwnProperty,
                  o = Object.prototype.propertyIsEnumerable;
                e.exports = (function() {
                  try {
                    if (!Object.assign) return !1;
                    var t = new String('abc');
                    if (
                      ((t[5] = 'de'), '5' === Object.getOwnPropertyNames(t)[0])
                    )
                      return !1;
                    for (var e = {}, i = 0; i < 10; i++)
                      e['_' + String.fromCharCode(i)] = i;
                    if (
                      '0123456789' !==
                      Object.getOwnPropertyNames(e)
                        .map(function(t) {
                          return e[t];
                        })
                        .join('')
                    )
                      return !1;
                    var n = {};
                    return (
                      'abcdefghijklmnopqrst'.split('').forEach(function(t) {
                        n[t] = t;
                      }),
                      'abcdefghijklmnopqrst' ===
                        Object.keys(Object.assign({}, n)).join('')
                    );
                  } catch (t) {
                    return !1;
                  }
                })()
                  ? Object.assign
                  : function(t, e) {
                      for (
                        var i,
                          s,
                          a = (function(t) {
                            if (null === t || void 0 === t)
                              throw new TypeError(
                                'Object.assign cannot be called with null or undefined'
                              );
                            return Object(t);
                          })(t),
                          c = 1;
                        c < arguments.length;
                        c++
                      ) {
                        i = Object(arguments[c]);
                        for (var l in i) r.call(i, l) && (a[l] = i[l]);
                        if (n) {
                          s = n(i);
                          for (var u = 0; u < s.length; u++)
                            o.call(i, s[u]) && (a[s[u]] = i[s[u]]);
                        }
                      }
                      return a;
                    };
              },
              {}
            ],
            27: [
              function(t, e, i) {
                function n(t, e) {
                  if (!(t = t.replace(/\t+/g, ' ').trim())) return null;
                  var i = t.indexOf(' ');
                  if (-1 === i) throw new Error('no named row at line ' + e);
                  var n = t.substring(0, i);
                  t = (t = (t = (t = t.substring(i + 1)).replace(
                    /letter=[\'\"]\S+[\'\"]/gi,
                    ''
                  )).split('=')).map(function(t) {
                    return t.trim().match(/(".*?"|[^"\s]+)+(?=\s*|\s*$)/g);
                  });
                  for (var o = [], s = 0; s < t.length; s++) {
                    var a = t[s];
                    0 === s
                      ? o.push({ key: a[0], data: '' })
                      : s === t.length - 1
                        ? (o[o.length - 1].data = r(a[0]))
                        : ((o[o.length - 1].data = r(a[0])),
                          o.push({ key: a[1], data: '' }));
                  }
                  var c = { key: n, data: {} };
                  return (
                    o.forEach(function(t) {
                      c.data[t.key] = t.data;
                    }),
                    c
                  );
                }
                function r(t) {
                  return t && 0 !== t.length
                    ? 0 === t.indexOf('"') || 0 === t.indexOf("'")
                      ? t.substring(1, t.length - 1)
                      : -1 !== t.indexOf(',')
                        ? t.split(',').map(function(t) {
                            return parseInt(t, 10);
                          })
                        : parseInt(t, 10)
                    : '';
                }
                e.exports = function(t) {
                  if (!t) throw new Error('no data provided');
                  var e = { pages: [], chars: [], kernings: [] },
                    i = (t = t.toString().trim()).split(/\r\n?|\n/g);
                  if (0 === i.length) throw new Error('no data in BMFont file');
                  for (var r = 0; r < i.length; r++) {
                    var o = n(i[r], r);
                    if (o)
                      if ('page' === o.key) {
                        if ('number' != typeof o.data.id)
                          throw new Error(
                            'malformed file at line ' +
                              r +
                              ' -- needs page id=N'
                          );
                        if ('string' != typeof o.data.file)
                          throw new Error(
                            'malformed file at line ' +
                              r +
                              ' -- needs page file="path"'
                          );
                        e.pages[o.data.id] = o.data.file;
                      } else
                        'chars' === o.key ||
                          'kernings' === o.key ||
                          ('char' === o.key
                            ? e.chars.push(o.data)
                            : 'kerning' === o.key
                              ? e.kernings.push(o.data)
                              : (e[o.key] = o.data));
                  }
                  return e;
                };
              },
              {}
            ],
            28: [
              function(t, e, i) {
                var n = [66, 77, 70];
                function r(t, e, i) {
                  if (i > e.length - 1) return 0;
                  var n = e.readUInt8(i++),
                    r = e.readInt32LE(i);
                  switch (((i += 4), n)) {
                    case 1:
                      t.info = (function(t, e) {
                        var i = {};
                        i.size = t.readInt16LE(e);
                        var n = t.readUInt8(e + 2);
                        (i.smooth = (n >> 7) & 1),
                          (i.unicode = (n >> 6) & 1),
                          (i.italic = (n >> 5) & 1),
                          (i.bold = (n >> 4) & 1),
                          (n >> 3) & 1 && (i.fixedHeight = 1);
                        return (
                          (i.charset = t.readUInt8(e + 3) || ''),
                          (i.stretchH = t.readUInt16LE(e + 4)),
                          (i.aa = t.readUInt8(e + 6)),
                          (i.padding = [
                            t.readInt8(e + 7),
                            t.readInt8(e + 8),
                            t.readInt8(e + 9),
                            t.readInt8(e + 10)
                          ]),
                          (i.spacing = [
                            t.readInt8(e + 11),
                            t.readInt8(e + 12)
                          ]),
                          (i.outline = t.readUInt8(e + 13)),
                          (i.face = ((r = t),
                          (s = e + 14),
                          o(r, s).toString('utf8'))),
                          i
                        );
                        var r, s;
                      })(e, i);
                      break;
                    case 2:
                      t.common = (function(t, e) {
                        var i = {};
                        (i.lineHeight = t.readUInt16LE(e)),
                          (i.base = t.readUInt16LE(e + 2)),
                          (i.scaleW = t.readUInt16LE(e + 4)),
                          (i.scaleH = t.readUInt16LE(e + 6)),
                          (i.pages = t.readUInt16LE(e + 8));
                        t.readUInt8(e + 10);
                        return (
                          (i.packed = 0),
                          (i.alphaChnl = t.readUInt8(e + 11)),
                          (i.redChnl = t.readUInt8(e + 12)),
                          (i.greenChnl = t.readUInt8(e + 13)),
                          (i.blueChnl = t.readUInt8(e + 14)),
                          i
                        );
                      })(e, i);
                      break;
                    case 3:
                      t.pages = (function(t, e, i) {
                        for (
                          var n = [],
                            r = o(t, e),
                            s = r.length + 1,
                            a = i / s,
                            c = 0;
                          c < a;
                          c++
                        )
                          (n[c] = t.slice(e, e + r.length).toString('utf8')),
                            (e += s);
                        return n;
                      })(e, i, r);
                      break;
                    case 4:
                      t.chars = (function(t, e, i) {
                        for (var n = [], r = i / 20, o = 0; o < r; o++) {
                          var s = {},
                            a = 20 * o;
                          (s.id = t.readUInt32LE(e + 0 + a)),
                            (s.x = t.readUInt16LE(e + 4 + a)),
                            (s.y = t.readUInt16LE(e + 6 + a)),
                            (s.width = t.readUInt16LE(e + 8 + a)),
                            (s.height = t.readUInt16LE(e + 10 + a)),
                            (s.xoffset = t.readInt16LE(e + 12 + a)),
                            (s.yoffset = t.readInt16LE(e + 14 + a)),
                            (s.xadvance = t.readInt16LE(e + 16 + a)),
                            (s.page = t.readUInt8(e + 18 + a)),
                            (s.chnl = t.readUInt8(e + 19 + a)),
                            (n[o] = s);
                        }
                        return n;
                      })(e, i, r);
                      break;
                    case 5:
                      t.kernings = (function(t, e, i) {
                        for (var n = [], r = i / 10, o = 0; o < r; o++) {
                          var s = {},
                            a = 10 * o;
                          (s.first = t.readUInt32LE(e + 0 + a)),
                            (s.second = t.readUInt32LE(e + 4 + a)),
                            (s.amount = t.readInt16LE(e + 8 + a)),
                            (n[o] = s);
                        }
                        return n;
                      })(e, i, r);
                  }
                  return 5 + r;
                }
                function o(t, e) {
                  for (var i = e; i < t.length && 0 !== t[i]; i++);
                  return t.slice(e, i);
                }
                e.exports = function(t) {
                  if (t.length < 6)
                    throw new Error('invalid buffer length for BMFont');
                  if (
                    !n.every(function(e, i) {
                      return t.readUInt8(i) === e;
                    })
                  )
                    throw new Error('BMFont missing BMF byte header');
                  var e = 3;
                  if (t.readUInt8(e++) > 3)
                    throw new Error(
                      'Only supports BMFont Binary v3 (BMFont App v1.10)'
                    );
                  for (var i = { kernings: [], chars: [] }, o = 0; o < 5; o++)
                    e += r(i, t, e);
                  return i;
                };
              },
              {}
            ],
            29: [
              function(t, e, i) {
                var n = t('./parse-attribs'),
                  r = t('xml-parse-from-string'),
                  o = {
                    scaleh: 'scaleH',
                    scalew: 'scaleW',
                    stretchh: 'stretchH',
                    lineheight: 'lineHeight',
                    alphachnl: 'alphaChnl',
                    redchnl: 'redChnl',
                    greenchnl: 'greenChnl',
                    bluechnl: 'blueChnl'
                  };
                function s(t) {
                  return (function(t) {
                    for (var e = [], i = 0; i < t.attributes.length; i++)
                      e.push(t.attributes[i]);
                    return e;
                  })(t).reduce(function(t, e) {
                    var i;
                    return (
                      (t[((i = e.nodeName), o[i.toLowerCase()] || i)] =
                        e.nodeValue),
                      t
                    );
                  }, {});
                }
                e.exports = function(t) {
                  t = t.toString();
                  var e = r(t),
                    i = { pages: [], chars: [], kernings: [] };
                  ['info', 'common'].forEach(function(t) {
                    var r = e.getElementsByTagName(t)[0];
                    r && (i[t] = n(s(r)));
                  });
                  var o = e.getElementsByTagName('pages')[0];
                  if (!o)
                    throw new Error('malformed file -- no <pages> element');
                  for (
                    var a = o.getElementsByTagName('page'), c = 0;
                    c < a.length;
                    c++
                  ) {
                    var l = a[c],
                      u = parseInt(l.getAttribute('id'), 10),
                      h = l.getAttribute('file');
                    if (isNaN(u))
                      throw new Error(
                        'malformed file -- page "id" attribute is NaN'
                      );
                    if (!h)
                      throw new Error(
                        'malformed file -- needs page "file" attribute'
                      );
                    i.pages[parseInt(u, 10)] = h;
                  }
                  return (
                    ['chars', 'kernings'].forEach(function(t) {
                      var r = e.getElementsByTagName(t)[0];
                      if (r)
                        for (
                          var o = t.substring(0, t.length - 1),
                            a = r.getElementsByTagName(o),
                            c = 0;
                          c < a.length;
                          c++
                        ) {
                          var l = a[c];
                          i[t].push(n(s(l)));
                        }
                    }),
                    i
                  );
                };
              },
              { './parse-attribs': 30, 'xml-parse-from-string': 74 }
            ],
            30: [
              function(t, e, i) {
                e.exports = function(t) {
                  'chasrset' in t &&
                    ((t.charset = t.chasrset), delete t.chasrset);
                  for (var e in t)
                    'face' !== e &&
                      'charset' !== e &&
                      (t[e] =
                        'padding' === e || 'spacing' === e
                          ? t[e].split(',').map(function(t) {
                              return parseInt(t, 10);
                            })
                          : parseInt(t[e], 10));
                  return t;
                };
              },
              {}
            ],
            31: [
              function(t, e, i) {
                var n = t('trim'),
                  r = t('for-each');
                e.exports = function(t) {
                  if (!t) return {};
                  var e = {};
                  return (
                    r(n(t).split('\n'), function(t) {
                      var i,
                        r = t.indexOf(':'),
                        o = n(t.slice(0, r)).toLowerCase(),
                        s = n(t.slice(r + 1));
                      void 0 === e[o]
                        ? (e[o] = s)
                        : ((i = e[o]),
                          '[object Array]' === Object.prototype.toString.call(i)
                            ? e[o].push(s)
                            : (e[o] = [e[o], s]));
                    }),
                    e
                  );
                };
              },
              { 'for-each': 16, trim: 46 }
            ],
            32: [
              function(t, e, i) {
                (function(t) {
                  function e(t, e) {
                    for (var i = 0, n = t.length - 1; n >= 0; n--) {
                      var r = t[n];
                      '.' === r
                        ? t.splice(n, 1)
                        : '..' === r
                          ? (t.splice(n, 1), i++)
                          : i && (t.splice(n, 1), i--);
                    }
                    if (e) for (; i--; i) t.unshift('..');
                    return t;
                  }
                  var n = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,
                    r = function(t) {
                      return n.exec(t).slice(1);
                    };
                  function o(t, e) {
                    if (t.filter) return t.filter(e);
                    for (var i = [], n = 0; n < t.length; n++)
                      e(t[n], n, t) && i.push(t[n]);
                    return i;
                  }
                  (i.resolve = function() {
                    for (
                      var i = '', n = !1, r = arguments.length - 1;
                      r >= -1 && !n;
                      r--
                    ) {
                      var s = r >= 0 ? arguments[r] : t.cwd();
                      if ('string' != typeof s)
                        throw new TypeError(
                          'Arguments to path.resolve must be strings'
                        );
                      s && ((i = s + '/' + i), (n = '/' === s.charAt(0)));
                    }
                    return (
                      (i = e(
                        o(i.split('/'), function(t) {
                          return !!t;
                        }),
                        !n
                      ).join('/')),
                      (n ? '/' : '') + i || '.'
                    );
                  }),
                    (i.normalize = function(t) {
                      var n = i.isAbsolute(t),
                        r = '/' === s(t, -1);
                      return (
                        (t = e(
                          o(t.split('/'), function(t) {
                            return !!t;
                          }),
                          !n
                        ).join('/')) ||
                          n ||
                          (t = '.'),
                        t && r && (t += '/'),
                        (n ? '/' : '') + t
                      );
                    }),
                    (i.isAbsolute = function(t) {
                      return '/' === t.charAt(0);
                    }),
                    (i.join = function() {
                      var t = Array.prototype.slice.call(arguments, 0);
                      return i.normalize(
                        o(t, function(t, e) {
                          if ('string' != typeof t)
                            throw new TypeError(
                              'Arguments to path.join must be strings'
                            );
                          return t;
                        }).join('/')
                      );
                    }),
                    (i.relative = function(t, e) {
                      function n(t) {
                        for (var e = 0; e < t.length && '' === t[e]; e++);
                        for (var i = t.length - 1; i >= 0 && '' === t[i]; i--);
                        return e > i ? [] : t.slice(e, i - e + 1);
                      }
                      (t = i.resolve(t).substr(1)),
                        (e = i.resolve(e).substr(1));
                      for (
                        var r = n(t.split('/')),
                          o = n(e.split('/')),
                          s = Math.min(r.length, o.length),
                          a = s,
                          c = 0;
                        c < s;
                        c++
                      )
                        if (r[c] !== o[c]) {
                          a = c;
                          break;
                        }
                      var l = [];
                      for (c = a; c < r.length; c++) l.push('..');
                      return (l = l.concat(o.slice(a))).join('/');
                    }),
                    (i.sep = '/'),
                    (i.delimiter = ':'),
                    (i.dirname = function(t) {
                      var e = r(t),
                        i = e[0],
                        n = e[1];
                      return i || n
                        ? (n && (n = n.substr(0, n.length - 1)), i + n)
                        : '.';
                    }),
                    (i.basename = function(t, e) {
                      var i = r(t)[2];
                      return (
                        e &&
                          i.substr(-1 * e.length) === e &&
                          (i = i.substr(0, i.length - e.length)),
                        i
                      );
                    }),
                    (i.extname = function(t) {
                      return r(t)[3];
                    });
                  var s =
                    'b' === 'ab'.substr(-1)
                      ? function(t, e, i) {
                          return t.substr(e, i);
                        }
                      : function(t, e, i) {
                          return e < 0 && (e = t.length + e), t.substr(e, i);
                        };
                }.call(this, t('_process')));
              },
              { _process: 6 }
            ],
            33: [
              function(t, e, n) {
                (function(t) {
                  var i = t.performance || {},
                    n = (function() {
                      for (
                        var t = ['now', 'webkitNow', 'msNow', 'mozNow', 'oNow'];
                        t.length;

                      ) {
                        var e = t.shift();
                        if (e in i) return i[e].bind(i);
                      }
                      var n =
                          Date.now ||
                          function() {
                            return new Date().getTime();
                          },
                        r = (i.timing || {}).navigationStart || n();
                      return function() {
                        return n() - r;
                      };
                    })();
                  (n.performanceNow = i.now),
                    (n.noConflict = function() {
                      i.now = n.performanceNow;
                    }),
                    (n.conflict = function() {
                      i.now = n;
                    }),
                    n.conflict(),
                    (e.exports = n);
                }.call(
                  this,
                  void 0 !== i
                    ? i
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window ? window : {}
                ));
              },
              {}
            ],
            34: [
              function(t, e, i) {
                !(function(t) {
                  var i = setTimeout,
                    r =
                      ('function' == typeof n && n) ||
                      function(t) {
                        i(t, 1);
                      };
                  function o(t, e) {
                    return function() {
                      t.apply(e, arguments);
                    };
                  }
                  var s =
                    Array.isArray ||
                    function(t) {
                      return (
                        '[object Array]' === Object.prototype.toString.call(t)
                      );
                    };
                  function a(t) {
                    if ('object' != typeof this)
                      throw new TypeError(
                        'Promises must be constructed via new'
                      );
                    if ('function' != typeof t)
                      throw new TypeError('not a function');
                    (this._state = null),
                      (this._value = null),
                      (this._deferreds = []),
                      d(t, o(l, this), o(u, this));
                  }
                  function c(t) {
                    var e = this;
                    null !== this._state
                      ? r(function() {
                          var i = e._state ? t.onFulfilled : t.onRejected;
                          if (null !== i) {
                            var n;
                            try {
                              n = i(e._value);
                            } catch (e) {
                              return void t.reject(e);
                            }
                            t.resolve(n);
                          } else (e._state ? t.resolve : t.reject)(e._value);
                        })
                      : this._deferreds.push(t);
                  }
                  function l(t) {
                    try {
                      if (t === this)
                        throw new TypeError(
                          'A promise cannot be resolved with itself.'
                        );
                      if (
                        t &&
                        ('object' == typeof t || 'function' == typeof t)
                      ) {
                        var e = t.then;
                        if ('function' == typeof e)
                          return void d(o(e, t), o(l, this), o(u, this));
                      }
                      (this._state = !0), (this._value = t), h.call(this);
                    } catch (t) {
                      u.call(this, t);
                    }
                  }
                  function u(t) {
                    (this._state = !1), (this._value = t), h.call(this);
                  }
                  function h() {
                    for (var t = 0, e = this._deferreds.length; t < e; t++)
                      c.call(this, this._deferreds[t]);
                    this._deferreds = null;
                  }
                  function d(t, e, i) {
                    var n = !1;
                    try {
                      t(
                        function(t) {
                          n || ((n = !0), e(t));
                        },
                        function(t) {
                          n || ((n = !0), i(t));
                        }
                      );
                    } catch (t) {
                      if (n) return;
                      (n = !0), i(t);
                    }
                  }
                  (a.prototype.catch = function(t) {
                    return this.then(null, t);
                  }),
                    (a.prototype.then = function(t, e) {
                      var i = this;
                      return new a(function(n, r) {
                        c.call(
                          i,
                          new function(t, e, i, n) {
                            (this.onFulfilled =
                              'function' == typeof t ? t : null),
                              (this.onRejected =
                                'function' == typeof e ? e : null),
                              (this.resolve = i),
                              (this.reject = n);
                          }(t, e, n, r)
                        );
                      });
                    }),
                    (a.all = function() {
                      var t = Array.prototype.slice.call(
                        1 === arguments.length && s(arguments[0])
                          ? arguments[0]
                          : arguments
                      );
                      return new a(function(e, i) {
                        if (0 === t.length) return e([]);
                        var n = t.length;
                        function r(o, s) {
                          try {
                            if (
                              s &&
                              ('object' == typeof s || 'function' == typeof s)
                            ) {
                              var a = s.then;
                              if ('function' == typeof a)
                                return void a.call(
                                  s,
                                  function(t) {
                                    r(o, t);
                                  },
                                  i
                                );
                            }
                            (t[o] = s), 0 == --n && e(t);
                          } catch (t) {
                            i(t);
                          }
                        }
                        for (var o = 0; o < t.length; o++) r(o, t[o]);
                      });
                    }),
                    (a.resolve = function(t) {
                      return t && 'object' == typeof t && t.constructor === a
                        ? t
                        : new a(function(e) {
                            e(t);
                          });
                    }),
                    (a.reject = function(t) {
                      return new a(function(e, i) {
                        i(t);
                      });
                    }),
                    (a.race = function(t) {
                      return new a(function(e, i) {
                        for (var n = 0, r = t.length; n < r; n++)
                          t[n].then(e, i);
                      });
                    }),
                    (a._setImmediateFn = function(t) {
                      r = t;
                    }),
                    void 0 !== e && e.exports
                      ? (e.exports = a)
                      : t.Promise || (t.Promise = a);
                })(this);
              },
              {}
            ],
            35: [
              function(t, e, i) {
                var n = t('dtype'),
                  r = t('an-array'),
                  o = t('is-buffer'),
                  s = [0, 2, 3],
                  a = [2, 1, 3];
                e.exports = function(t, e) {
                  (t && (r(t) || o(t))) || ((e = t || {}), (t = null));
                  for (
                    var i =
                        'string' ==
                        typeof (e =
                          'number' == typeof e ? { count: e } : e || {}).type
                          ? e.type
                          : 'uint16',
                      c = 'number' == typeof e.count ? e.count : 1,
                      l = e.start || 0,
                      u = !1 !== e.clockwise ? s : a,
                      h = u[0],
                      d = u[1],
                      p = u[2],
                      f = 6 * c,
                      m = t || new (n(i))(f),
                      g = 0,
                      v = 0;
                    g < f;
                    g += 6, v += 4
                  ) {
                    var y = g + l;
                    (m[y + 0] = v + 0),
                      (m[y + 1] = v + 1),
                      (m[y + 2] = v + 2),
                      (m[y + 3] = v + h),
                      (m[y + 4] = v + d),
                      (m[y + 5] = v + p);
                  }
                  return m;
                };
              },
              { 'an-array': 2, dtype: 14, 'is-buffer': 20 }
            ],
            36: [
              function(t, e, i) {
                function n(t, e) {
                  var i = (e = e || {}).preserveNumbers,
                    n = {};
                  return (
                    (function(t) {
                      var e,
                        i = [],
                        n = 0,
                        r = /url\([^\)]+$/,
                        o = '';
                      for (; n < t.length; )
                        -1 === (e = t.indexOf(';', n)) && (e = t.length),
                          (o += t.substring(n, e)),
                          r.test(o)
                            ? ((o += ';'), (n = e + 1))
                            : (i.push(o), (o = ''), (n = e + 1));
                      return i;
                    })(t)
                      .map(function(t) {
                        return t.trim();
                      })
                      .filter(Boolean)
                      .forEach(function(t) {
                        var e,
                          r = t.indexOf(':'),
                          o = t.substr(0, r).trim(),
                          s = t.substr(r + 1).trim();
                        i &&
                          ((e = s), !isNaN(parseFloat(e)) && isFinite(e)) &&
                          (s = Number(s)),
                          (n[o] = s);
                      }),
                    n
                  );
                }
                function r(t) {
                  return Object.keys(t)
                    .map(function(e) {
                      return e + ':' + t[e];
                    })
                    .join(';');
                }
                (e.exports.parse = n),
                  (e.exports.stringify = r),
                  (e.exports.normalize = function(t, e) {
                    return r(n(t, e));
                  });
              },
              {}
            ],
            37: [
              function(t, e, i) {
                var n = t('layout-bmfont-text'),
                  r = t('inherits'),
                  o = t('quad-indices'),
                  s = t('three-buffer-vertex-data'),
                  a = t('object-assign'),
                  c = t('./lib/vertices'),
                  l = t('./lib/utils'),
                  u = THREE.BufferGeometry;
                function h(t) {
                  u.call(this),
                    'string' == typeof t && (t = { text: t }),
                    (this._opt = a({}, t)),
                    t && this.update(t);
                }
                (e.exports = function(t) {
                  return new h(t);
                }),
                  r(h, u),
                  (h.prototype.update = function(t) {
                    if (
                      ('string' == typeof t && (t = { text: t }),
                      !(t = a({}, this._opt, t)).font)
                    )
                      throw new TypeError('must specify a { font } in options');
                    this.layout = n(t);
                    var e = !1 !== t.flipY,
                      i = t.font,
                      r = i.common.scaleW,
                      l = i.common.scaleH,
                      u = this.layout.glyphs.filter(function(t) {
                        var e = t.data;
                        return e.width * e.height > 0;
                      });
                    this.visibleGlyphs = u;
                    var h = c.positions(u),
                      d = c.uvs(u, r, l, e),
                      p = o({ clockwise: !0, type: 'uint16', count: u.length });
                    if (
                      (s.index(this, p, 1, 'uint16'),
                      s.attr(this, 'position', h, 2),
                      s.attr(this, 'uv', d, 2),
                      !t.multipage && 'page' in this.attributes)
                    )
                      this.removeAttribute('page');
                    else if (t.multipage) {
                      var f = c.pages(u);
                      s.attr(this, 'page', f, 1);
                    }
                  }),
                  (h.prototype.computeBoundingSphere = function() {
                    null === this.boundingSphere &&
                      (this.boundingSphere = new THREE.Sphere());
                    var t = this.attributes.position.array,
                      e = this.attributes.position.itemSize;
                    if (!t || !e || t.length < 2)
                      return (
                        (this.boundingSphere.radius = 0),
                        void this.boundingSphere.center.set(0, 0, 0)
                      );
                    l.computeSphere(t, this.boundingSphere),
                      isNaN(this.boundingSphere.radius) &&
                        console.error(
                          'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.'
                        );
                  }),
                  (h.prototype.computeBoundingBox = function() {
                    null === this.boundingBox &&
                      (this.boundingBox = new THREE.Box3());
                    var t = this.boundingBox,
                      e = this.attributes.position.array,
                      i = this.attributes.position.itemSize;
                    !e || !i || e.length < 2
                      ? t.makeEmpty()
                      : l.computeBox(e, t);
                  });
              },
              {
                './lib/utils': 38,
                './lib/vertices': 39,
                inherits: 19,
                'layout-bmfont-text': 23,
                'object-assign': 26,
                'quad-indices': 35,
                'three-buffer-vertex-data': 40
              }
            ],
            38: [
              function(t, e, i) {
                var n = 2,
                  r = { min: [0, 0], max: [0, 0] };
                function o(t) {
                  var e = t.length / n;
                  (r.min[0] = t[0]),
                    (r.min[1] = t[1]),
                    (r.max[0] = t[0]),
                    (r.max[1] = t[1]);
                  for (var i = 0; i < e; i++) {
                    var o = t[i * n + 0],
                      s = t[i * n + 1];
                    (r.min[0] = Math.min(o, r.min[0])),
                      (r.min[1] = Math.min(s, r.min[1])),
                      (r.max[0] = Math.max(o, r.max[0])),
                      (r.max[1] = Math.max(s, r.max[1]));
                  }
                }
                (e.exports.computeBox = function(t, e) {
                  o(t),
                    e.min.set(r.min[0], r.min[1], 0),
                    e.max.set(r.max[0], r.max[1], 0);
                }),
                  (e.exports.computeSphere = function(t, e) {
                    o(t);
                    var i = r.min[0],
                      n = r.min[1],
                      s = r.max[0] - i,
                      a = r.max[1] - n,
                      c = Math.sqrt(s * s + a * a);
                    e.center.set(i + s / 2, n + a / 2, 0), (e.radius = c / 2);
                  });
              },
              {}
            ],
            39: [
              function(t, e, i) {
                (e.exports.pages = function(t) {
                  var e = new Float32Array(4 * t.length * 1),
                    i = 0;
                  return (
                    t.forEach(function(t) {
                      var n = t.data.page || 0;
                      (e[i++] = n), (e[i++] = n), (e[i++] = n), (e[i++] = n);
                    }),
                    e
                  );
                }),
                  (e.exports.uvs = function(t, e, i, n) {
                    var r = new Float32Array(4 * t.length * 2),
                      o = 0;
                    return (
                      t.forEach(function(t) {
                        var s = t.data,
                          a = s.x + s.width,
                          c = s.y + s.height,
                          l = s.x / e,
                          u = s.y / i,
                          h = a / e,
                          d = c / i;
                        n && ((u = (i - s.y) / i), (d = (i - c) / i)),
                          (r[o++] = l),
                          (r[o++] = u),
                          (r[o++] = l),
                          (r[o++] = d),
                          (r[o++] = h),
                          (r[o++] = d),
                          (r[o++] = h),
                          (r[o++] = u);
                      }),
                      r
                    );
                  }),
                  (e.exports.positions = function(t) {
                    var e = new Float32Array(4 * t.length * 2),
                      i = 0;
                    return (
                      t.forEach(function(t) {
                        var n = t.data,
                          r = t.position[0] + n.xoffset,
                          o = t.position[1] + n.yoffset,
                          s = n.width,
                          a = n.height;
                        (e[i++] = r),
                          (e[i++] = o),
                          (e[i++] = r),
                          (e[i++] = o + a),
                          (e[i++] = r + s),
                          (e[i++] = o + a),
                          (e[i++] = r + s),
                          (e[i++] = o);
                      }),
                      e
                    );
                  });
              },
              {}
            ],
            40: [
              function(t, e, i) {
                var n = t('flatten-vertex-data'),
                  r = !1;
                function o(t, e, i, o) {
                  if (
                    ((e = e || []),
                    !t ||
                      (function(t, e, i) {
                        if (t.itemSize !== i) return !0;
                        if (!t.array) return !0;
                        var n = t.array.length;
                        return Array.isArray(e) && Array.isArray(e[0])
                          ? n !== e.length * i
                          : n !== e.length;
                      })(t, e, i))
                  ) {
                    e = n(e, o);
                    var s = t && 'function' != typeof t.setArray;
                    return (
                      (t && !s) ||
                        (s &&
                          !r &&
                          ((r = !0),
                          console.warn(
                            [
                              'A WebGL buffer is being updated with a new size or itemSize, ',
                              'however this version of ThreeJS only supports fixed-size buffers.',
                              '\nThe old buffer may still be kept in memory.\n',
                              'To avoid memory leaks, it is recommended that you dispose ',
                              'your geometries and create new ones, or update to ThreeJS r82 or newer.\n',
                              'See here for discussion:\n',
                              'https://github.com/mrdoob/three.js/pull/9631'
                            ].join('')
                          )),
                        (t = new THREE.BufferAttribute(e, i))),
                      (t.itemSize = i),
                      (t.needsUpdate = !0),
                      'function' == typeof t.setArray && t.setArray(e),
                      t
                    );
                  }
                  return n(e, t.array), (t.needsUpdate = !0), null;
                }
                (e.exports.attr = function(t, e, i, n, r) {
                  'number' != typeof n && (n = 3);
                  'string' != typeof r && (r = 'float32');
                  if (
                    Array.isArray(i) &&
                    Array.isArray(i[0]) &&
                    i[0].length !== n
                  )
                    throw new Error(
                      'Nested vertex array has unexpected size; expected ' +
                        n +
                        ' but found ' +
                        i[0].length
                    );
                  var s = o(t.getAttribute(e), i, n, r);
                  s && t.addAttribute(e, s);
                }),
                  (e.exports.index = function(t, e, i, n) {
                    'number' != typeof i && (i = 1);
                    'string' != typeof n && (n = 'uint16');
                    var r = !t.index && 'function' != typeof t.setIndex,
                      s = o(r ? t.getAttribute('index') : t.index, e, i, n);
                    s && (r ? t.addAttribute('index', s) : (t.index = s));
                  });
              },
              { 'flatten-vertex-data': 15 }
            ],
            41: [
              function(t, e, i) {
                var n;
                (n = this),
                  (function(t) {
                    'use strict';
                    function e() {}
                    void 0 === Number.EPSILON &&
                      (Number.EPSILON = Math.pow(2, -52)),
                      void 0 === Number.isInteger &&
                        (Number.isInteger = function(t) {
                          return (
                            'number' == typeof t &&
                            isFinite(t) &&
                            Math.floor(t) === t
                          );
                        }),
                      void 0 === Math.sign &&
                        (Math.sign = function(t) {
                          return t < 0 ? -1 : t > 0 ? 1 : +t;
                        }),
                      void 0 === Function.prototype.name &&
                        Object.defineProperty(Function.prototype, 'name', {
                          get: function() {
                            return this.toString().match(
                              /^\s*function\s*([^\(\s]*)/
                            )[1];
                          }
                        }),
                      void 0 === Object.assign &&
                        (Object.assign = function(t) {
                          if (void 0 === t || null === t)
                            throw new TypeError(
                              'Cannot convert undefined or null to object'
                            );
                          for (
                            var e = Object(t), i = 1;
                            i < arguments.length;
                            i++
                          ) {
                            var n = arguments[i];
                            if (void 0 !== n && null !== n)
                              for (var r in n)
                                Object.prototype.hasOwnProperty.call(n, r) &&
                                  (e[r] = n[r]);
                          }
                          return e;
                        }),
                      Object.assign(e.prototype, {
                        addEventListener: function(t, e) {
                          void 0 === this._listeners && (this._listeners = {});
                          var i = this._listeners;
                          void 0 === i[t] && (i[t] = []),
                            -1 === i[t].indexOf(e) && i[t].push(e);
                        },
                        hasEventListener: function(t, e) {
                          if (void 0 === this._listeners) return !1;
                          var i = this._listeners;
                          return void 0 !== i[t] && -1 !== i[t].indexOf(e);
                        },
                        removeEventListener: function(t, e) {
                          if (void 0 !== this._listeners) {
                            var i = this._listeners[t];
                            if (void 0 !== i) {
                              var n = i.indexOf(e);
                              -1 !== n && i.splice(n, 1);
                            }
                          }
                        },
                        dispatchEvent: function(t) {
                          if (void 0 !== this._listeners) {
                            var e = this._listeners[t.type];
                            if (void 0 !== e) {
                              t.target = this;
                              for (
                                var i = e.slice(0), n = 0, r = i.length;
                                n < r;
                                n++
                              )
                                i[n].call(this, t);
                            }
                          }
                        }
                      });
                    var i,
                      n,
                      r,
                      o,
                      s,
                      a,
                      c = '87',
                      l = 0,
                      u = 1,
                      h = 2,
                      d = 0,
                      p = 1,
                      f = 2,
                      m = 0,
                      g = 1,
                      v = 2,
                      y = 0,
                      w = 1,
                      M = 2,
                      E = 0,
                      b = 1,
                      x = 2,
                      A = 3,
                      T = 4,
                      L = 5,
                      N = 100,
                      D = 101,
                      S = 102,
                      C = 103,
                      _ = 104,
                      I = 200,
                      j = 201,
                      O = 202,
                      R = 203,
                      z = 204,
                      k = 205,
                      B = 206,
                      P = 207,
                      U = 208,
                      F = 209,
                      H = 210,
                      V = 0,
                      G = 1,
                      Y = 2,
                      Q = 3,
                      W = 4,
                      q = 5,
                      X = 6,
                      K = 7,
                      Z = 0,
                      J = 1,
                      $ = 2,
                      tt = 0,
                      et = 1,
                      it = 2,
                      nt = 3,
                      rt = 4,
                      ot = 301,
                      st = 302,
                      at = 303,
                      ct = 304,
                      lt = 305,
                      ut = 306,
                      ht = 307,
                      dt = 1e3,
                      pt = 1001,
                      ft = 1002,
                      mt = 1003,
                      gt = 1004,
                      vt = 1005,
                      yt = 1006,
                      wt = 1007,
                      Mt = 1008,
                      Et = 1009,
                      bt = 1010,
                      xt = 1011,
                      At = 1012,
                      Tt = 1013,
                      Lt = 1014,
                      Nt = 1015,
                      Dt = 1016,
                      St = 1017,
                      Ct = 1018,
                      _t = 1019,
                      It = 1020,
                      jt = 1021,
                      Ot = 1022,
                      Rt = 1023,
                      zt = 1024,
                      kt = 1025,
                      Bt = Rt,
                      Pt = 1026,
                      Ut = 1027,
                      Ft = 2001,
                      Ht = 2002,
                      Vt = 2003,
                      Gt = 2004,
                      Yt = 2100,
                      Qt = 2101,
                      Wt = 2102,
                      qt = 2103,
                      Xt = 2151,
                      Kt = 2201,
                      Zt = 2400,
                      Jt = 0,
                      $t = 1,
                      te = 2,
                      ee = 3e3,
                      ie = 3001,
                      ne = 3007,
                      re = 3002,
                      oe = 3004,
                      se = 3005,
                      ae = 3006,
                      ce = 3200,
                      le = 3201,
                      ue = {
                        DEG2RAD: Math.PI / 180,
                        RAD2DEG: 180 / Math.PI,
                        generateUUID: ((n = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(
                          ''
                        )),
                        (r = new Array(36)),
                        (o = 0),
                        function() {
                          for (var t = 0; t < 36; t++)
                            8 === t || 13 === t || 18 === t || 23 === t
                              ? (r[t] = '-')
                              : 14 === t
                                ? (r[t] = '4')
                                : (o <= 2 &&
                                    (o =
                                      (33554432 + 16777216 * Math.random()) |
                                      0),
                                  (i = 15 & o),
                                  (o >>= 4),
                                  (r[t] = n[19 === t ? (3 & i) | 8 : i]));
                          return r.join('');
                        }),
                        clamp: function(t, e, i) {
                          return Math.max(e, Math.min(i, t));
                        },
                        euclideanModulo: function(t, e) {
                          return (t % e + e) % e;
                        },
                        mapLinear: function(t, e, i, n, r) {
                          return n + (t - e) * (r - n) / (i - e);
                        },
                        lerp: function(t, e, i) {
                          return (1 - i) * t + i * e;
                        },
                        smoothstep: function(t, e, i) {
                          return t <= e
                            ? 0
                            : t >= i
                              ? 1
                              : (t = (t - e) / (i - e)) * t * (3 - 2 * t);
                        },
                        smootherstep: function(t, e, i) {
                          return t <= e
                            ? 0
                            : t >= i
                              ? 1
                              : (t = (t - e) / (i - e)) *
                                t *
                                t *
                                (t * (6 * t - 15) + 10);
                        },
                        randInt: function(t, e) {
                          return t + Math.floor(Math.random() * (e - t + 1));
                        },
                        randFloat: function(t, e) {
                          return t + Math.random() * (e - t);
                        },
                        randFloatSpread: function(t) {
                          return t * (0.5 - Math.random());
                        },
                        degToRad: function(t) {
                          return t * ue.DEG2RAD;
                        },
                        radToDeg: function(t) {
                          return t * ue.RAD2DEG;
                        },
                        isPowerOfTwo: function(t) {
                          return 0 == (t & (t - 1)) && 0 !== t;
                        },
                        nearestPowerOfTwo: function(t) {
                          return Math.pow(
                            2,
                            Math.round(Math.log(t) / Math.LN2)
                          );
                        },
                        nextPowerOfTwo: function(t) {
                          return (
                            t--,
                            (t |= t >> 1),
                            (t |= t >> 2),
                            (t |= t >> 4),
                            (t |= t >> 8),
                            (t |= t >> 16),
                            ++t
                          );
                        }
                      };
                    function he(t, e) {
                      (this.x = t || 0), (this.y = e || 0);
                    }
                    Object.defineProperties(he.prototype, {
                      width: {
                        get: function() {
                          return this.x;
                        },
                        set: function(t) {
                          this.x = t;
                        }
                      },
                      height: {
                        get: function() {
                          return this.y;
                        },
                        set: function(t) {
                          this.y = t;
                        }
                      }
                    }),
                      Object.assign(he.prototype, {
                        isVector2: !0,
                        set: function(t, e) {
                          return (this.x = t), (this.y = e), this;
                        },
                        setScalar: function(t) {
                          return (this.x = t), (this.y = t), this;
                        },
                        setX: function(t) {
                          return (this.x = t), this;
                        },
                        setY: function(t) {
                          return (this.y = t), this;
                        },
                        setComponent: function(t, e) {
                          switch (t) {
                            case 0:
                              this.x = e;
                              break;
                            case 1:
                              this.y = e;
                              break;
                            default:
                              throw new Error('index is out of range: ' + t);
                          }
                          return this;
                        },
                        getComponent: function(t) {
                          switch (t) {
                            case 0:
                              return this.x;
                            case 1:
                              return this.y;
                            default:
                              throw new Error('index is out of range: ' + t);
                          }
                        },
                        clone: function() {
                          return new this.constructor(this.x, this.y);
                        },
                        copy: function(t) {
                          return (this.x = t.x), (this.y = t.y), this;
                        },
                        add: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'
                              ),
                              this.addVectors(t, e))
                            : ((this.x += t.x), (this.y += t.y), this);
                        },
                        addScalar: function(t) {
                          return (this.x += t), (this.y += t), this;
                        },
                        addVectors: function(t, e) {
                          return (
                            (this.x = t.x + e.x), (this.y = t.y + e.y), this
                          );
                        },
                        addScaledVector: function(t, e) {
                          return (this.x += t.x * e), (this.y += t.y * e), this;
                        },
                        sub: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'
                              ),
                              this.subVectors(t, e))
                            : ((this.x -= t.x), (this.y -= t.y), this);
                        },
                        subScalar: function(t) {
                          return (this.x -= t), (this.y -= t), this;
                        },
                        subVectors: function(t, e) {
                          return (
                            (this.x = t.x - e.x), (this.y = t.y - e.y), this
                          );
                        },
                        multiply: function(t) {
                          return (this.x *= t.x), (this.y *= t.y), this;
                        },
                        multiplyScalar: function(t) {
                          return (this.x *= t), (this.y *= t), this;
                        },
                        divide: function(t) {
                          return (this.x /= t.x), (this.y /= t.y), this;
                        },
                        divideScalar: function(t) {
                          return this.multiplyScalar(1 / t);
                        },
                        min: function(t) {
                          return (
                            (this.x = Math.min(this.x, t.x)),
                            (this.y = Math.min(this.y, t.y)),
                            this
                          );
                        },
                        max: function(t) {
                          return (
                            (this.x = Math.max(this.x, t.x)),
                            (this.y = Math.max(this.y, t.y)),
                            this
                          );
                        },
                        clamp: function(t, e) {
                          return (
                            (this.x = Math.max(t.x, Math.min(e.x, this.x))),
                            (this.y = Math.max(t.y, Math.min(e.y, this.y))),
                            this
                          );
                        },
                        clampScalar: ((s = new he()),
                        (a = new he()),
                        function(t, e) {
                          return s.set(t, t), a.set(e, e), this.clamp(s, a);
                        }),
                        clampLength: function(t, e) {
                          var i = this.length();
                          return this.divideScalar(i || 1).multiplyScalar(
                            Math.max(t, Math.min(e, i))
                          );
                        },
                        floor: function() {
                          return (
                            (this.x = Math.floor(this.x)),
                            (this.y = Math.floor(this.y)),
                            this
                          );
                        },
                        ceil: function() {
                          return (
                            (this.x = Math.ceil(this.x)),
                            (this.y = Math.ceil(this.y)),
                            this
                          );
                        },
                        round: function() {
                          return (
                            (this.x = Math.round(this.x)),
                            (this.y = Math.round(this.y)),
                            this
                          );
                        },
                        roundToZero: function() {
                          return (
                            (this.x =
                              this.x < 0
                                ? Math.ceil(this.x)
                                : Math.floor(this.x)),
                            (this.y =
                              this.y < 0
                                ? Math.ceil(this.y)
                                : Math.floor(this.y)),
                            this
                          );
                        },
                        negate: function() {
                          return (this.x = -this.x), (this.y = -this.y), this;
                        },
                        dot: function(t) {
                          return this.x * t.x + this.y * t.y;
                        },
                        lengthSq: function() {
                          return this.x * this.x + this.y * this.y;
                        },
                        length: function() {
                          return Math.sqrt(this.x * this.x + this.y * this.y);
                        },
                        lengthManhattan: function() {
                          return Math.abs(this.x) + Math.abs(this.y);
                        },
                        normalize: function() {
                          return this.divideScalar(this.length() || 1);
                        },
                        angle: function() {
                          var t = Math.atan2(this.y, this.x);
                          return t < 0 && (t += 2 * Math.PI), t;
                        },
                        distanceTo: function(t) {
                          return Math.sqrt(this.distanceToSquared(t));
                        },
                        distanceToSquared: function(t) {
                          var e = this.x - t.x,
                            i = this.y - t.y;
                          return e * e + i * i;
                        },
                        distanceToManhattan: function(t) {
                          return (
                            Math.abs(this.x - t.x) + Math.abs(this.y - t.y)
                          );
                        },
                        setLength: function(t) {
                          return this.normalize().multiplyScalar(t);
                        },
                        lerp: function(t, e) {
                          return (
                            (this.x += (t.x - this.x) * e),
                            (this.y += (t.y - this.y) * e),
                            this
                          );
                        },
                        lerpVectors: function(t, e, i) {
                          return this.subVectors(e, t)
                            .multiplyScalar(i)
                            .add(t);
                        },
                        equals: function(t) {
                          return t.x === this.x && t.y === this.y;
                        },
                        fromArray: function(t, e) {
                          return (
                            void 0 === e && (e = 0),
                            (this.x = t[e]),
                            (this.y = t[e + 1]),
                            this
                          );
                        },
                        toArray: function(t, e) {
                          return (
                            void 0 === t && (t = []),
                            void 0 === e && (e = 0),
                            (t[e] = this.x),
                            (t[e + 1] = this.y),
                            t
                          );
                        },
                        fromBufferAttribute: function(t, e, i) {
                          return (
                            void 0 !== i &&
                              console.warn(
                                'THREE.Vector2: offset has been removed from .fromBufferAttribute().'
                              ),
                            (this.x = t.getX(e)),
                            (this.y = t.getY(e)),
                            this
                          );
                        },
                        rotateAround: function(t, e) {
                          var i = Math.cos(e),
                            n = Math.sin(e),
                            r = this.x - t.x,
                            o = this.y - t.y;
                          return (
                            (this.x = r * i - o * n + t.x),
                            (this.y = r * n + o * i + t.y),
                            this
                          );
                        }
                      });
                    var de,
                      pe,
                      fe,
                      me,
                      ge,
                      ve,
                      ye,
                      we,
                      Me,
                      Ee,
                      be,
                      xe,
                      Ae,
                      Te,
                      Le,
                      Ne,
                      De,
                      Se,
                      Ce,
                      _e = 0;
                    function Ie(t, e, i, n, r, o, s, a, c, l) {
                      Object.defineProperty(this, 'id', { value: _e++ }),
                        (this.uuid = ue.generateUUID()),
                        (this.name = ''),
                        (this.image = void 0 !== t ? t : Ie.DEFAULT_IMAGE),
                        (this.mipmaps = []),
                        (this.mapping = void 0 !== e ? e : Ie.DEFAULT_MAPPING),
                        (this.wrapS = void 0 !== i ? i : pt),
                        (this.wrapT = void 0 !== n ? n : pt),
                        (this.magFilter = void 0 !== r ? r : yt),
                        (this.minFilter = void 0 !== o ? o : Mt),
                        (this.anisotropy = void 0 !== c ? c : 1),
                        (this.format = void 0 !== s ? s : Rt),
                        (this.type = void 0 !== a ? a : Et),
                        (this.offset = new he(0, 0)),
                        (this.repeat = new he(1, 1)),
                        (this.generateMipmaps = !0),
                        (this.premultiplyAlpha = !1),
                        (this.flipY = !0),
                        (this.unpackAlignment = 4),
                        (this.encoding = void 0 !== l ? l : ee),
                        (this.version = 0),
                        (this.onUpdate = null);
                    }
                    function je(t, e, i, n) {
                      (this.x = t || 0),
                        (this.y = e || 0),
                        (this.z = i || 0),
                        (this.w = void 0 !== n ? n : 1);
                    }
                    function Oe(t, e, i) {
                      (this.uuid = ue.generateUUID()),
                        (this.width = t),
                        (this.height = e),
                        (this.scissor = new je(0, 0, t, e)),
                        (this.scissorTest = !1),
                        (this.viewport = new je(0, 0, t, e)),
                        void 0 === (i = i || {}).minFilter &&
                          (i.minFilter = yt),
                        (this.texture = new Ie(
                          void 0,
                          void 0,
                          i.wrapS,
                          i.wrapT,
                          i.magFilter,
                          i.minFilter,
                          i.format,
                          i.type,
                          i.anisotropy,
                          i.encoding
                        )),
                        (this.depthBuffer =
                          void 0 === i.depthBuffer || i.depthBuffer),
                        (this.stencilBuffer =
                          void 0 === i.stencilBuffer || i.stencilBuffer),
                        (this.depthTexture =
                          void 0 !== i.depthTexture ? i.depthTexture : null);
                    }
                    function Re(t, e, i) {
                      Oe.call(this, t, e, i),
                        (this.activeCubeFace = 0),
                        (this.activeMipMapLevel = 0);
                    }
                    function ze(t, e, i, n) {
                      (this._x = t || 0),
                        (this._y = e || 0),
                        (this._z = i || 0),
                        (this._w = void 0 !== n ? n : 1);
                    }
                    function ke(t, e, i) {
                      (this.x = t || 0), (this.y = e || 0), (this.z = i || 0);
                    }
                    function Be() {
                      (this.elements = [
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1,
                        0,
                        0,
                        0,
                        0,
                        1
                      ]),
                        arguments.length > 0 &&
                          console.error(
                            'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.'
                          );
                    }
                    function Pe(t, e, i, n, r, o, s, a, c, l, u, h) {
                      Ie.call(this, null, o, s, a, c, l, n, r, u, h),
                        (this.image = { data: t, width: e, height: i }),
                        (this.magFilter = void 0 !== c ? c : mt),
                        (this.minFilter = void 0 !== l ? l : mt),
                        (this.generateMipmaps = !1),
                        (this.flipY = !1),
                        (this.unpackAlignment = 1);
                    }
                    function Ue(t, e, i, n, r, o, s, a, c, l) {
                      (t = void 0 !== t ? t : []),
                        (e = void 0 !== e ? e : ot),
                        Ie.call(this, t, e, i, n, r, o, s, a, c, l),
                        (this.flipY = !1);
                    }
                    (Ie.DEFAULT_IMAGE = void 0),
                      (Ie.DEFAULT_MAPPING = 300),
                      Object.defineProperty(Ie.prototype, 'needsUpdate', {
                        set: function(t) {
                          !0 === t && this.version++;
                        }
                      }),
                      Object.assign(Ie.prototype, e.prototype, {
                        constructor: Ie,
                        isTexture: !0,
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            (this.name = t.name),
                            (this.image = t.image),
                            (this.mipmaps = t.mipmaps.slice(0)),
                            (this.mapping = t.mapping),
                            (this.wrapS = t.wrapS),
                            (this.wrapT = t.wrapT),
                            (this.magFilter = t.magFilter),
                            (this.minFilter = t.minFilter),
                            (this.anisotropy = t.anisotropy),
                            (this.format = t.format),
                            (this.type = t.type),
                            this.offset.copy(t.offset),
                            this.repeat.copy(t.repeat),
                            (this.generateMipmaps = t.generateMipmaps),
                            (this.premultiplyAlpha = t.premultiplyAlpha),
                            (this.flipY = t.flipY),
                            (this.unpackAlignment = t.unpackAlignment),
                            (this.encoding = t.encoding),
                            this
                          );
                        },
                        toJSON: function(t) {
                          if (void 0 !== t.textures[this.uuid])
                            return t.textures[this.uuid];
                          var e = {
                            metadata: {
                              version: 4.5,
                              type: 'Texture',
                              generator: 'Texture.toJSON'
                            },
                            uuid: this.uuid,
                            name: this.name,
                            mapping: this.mapping,
                            repeat: [this.repeat.x, this.repeat.y],
                            offset: [this.offset.x, this.offset.y],
                            wrap: [this.wrapS, this.wrapT],
                            minFilter: this.minFilter,
                            magFilter: this.magFilter,
                            anisotropy: this.anisotropy,
                            flipY: this.flipY
                          };
                          if (void 0 !== this.image) {
                            var i = this.image;
                            void 0 === i.uuid && (i.uuid = ue.generateUUID()),
                              void 0 === t.images[i.uuid] &&
                                (t.images[i.uuid] = {
                                  uuid: i.uuid,
                                  url: (function(t) {
                                    var e;
                                    if (t instanceof HTMLCanvasElement) e = t;
                                    else {
                                      ((e = document.createElementNS(
                                        'http://www.w3.org/1999/xhtml',
                                        'canvas'
                                      )).width =
                                        t.width),
                                        (e.height = t.height);
                                      var i = e.getContext('2d');
                                      t instanceof ImageData
                                        ? i.putImageData(t, 0, 0)
                                        : i.drawImage(
                                            t,
                                            0,
                                            0,
                                            t.width,
                                            t.height
                                          );
                                    }
                                    return e.width > 2048 || e.height > 2048
                                      ? e.toDataURL('image/jpeg', 0.6)
                                      : e.toDataURL('image/png');
                                  })(i)
                                }),
                              (e.image = i.uuid);
                          }
                          return (t.textures[this.uuid] = e), e;
                        },
                        dispose: function() {
                          this.dispatchEvent({ type: 'dispose' });
                        },
                        transformUv: function(t) {
                          if (300 === this.mapping) {
                            if (
                              (t.multiply(this.repeat),
                              t.add(this.offset),
                              t.x < 0 || t.x > 1)
                            )
                              switch (this.wrapS) {
                                case dt:
                                  t.x = t.x - Math.floor(t.x);
                                  break;
                                case pt:
                                  t.x = t.x < 0 ? 0 : 1;
                                  break;
                                case ft:
                                  1 === Math.abs(Math.floor(t.x) % 2)
                                    ? (t.x = Math.ceil(t.x) - t.x)
                                    : (t.x = t.x - Math.floor(t.x));
                              }
                            if (t.y < 0 || t.y > 1)
                              switch (this.wrapT) {
                                case dt:
                                  t.y = t.y - Math.floor(t.y);
                                  break;
                                case pt:
                                  t.y = t.y < 0 ? 0 : 1;
                                  break;
                                case ft:
                                  1 === Math.abs(Math.floor(t.y) % 2)
                                    ? (t.y = Math.ceil(t.y) - t.y)
                                    : (t.y = t.y - Math.floor(t.y));
                              }
                            this.flipY && (t.y = 1 - t.y);
                          }
                        }
                      }),
                      Object.assign(je.prototype, {
                        isVector4: !0,
                        set: function(t, e, i, n) {
                          return (
                            (this.x = t),
                            (this.y = e),
                            (this.z = i),
                            (this.w = n),
                            this
                          );
                        },
                        setScalar: function(t) {
                          return (
                            (this.x = t),
                            (this.y = t),
                            (this.z = t),
                            (this.w = t),
                            this
                          );
                        },
                        setX: function(t) {
                          return (this.x = t), this;
                        },
                        setY: function(t) {
                          return (this.y = t), this;
                        },
                        setZ: function(t) {
                          return (this.z = t), this;
                        },
                        setW: function(t) {
                          return (this.w = t), this;
                        },
                        setComponent: function(t, e) {
                          switch (t) {
                            case 0:
                              this.x = e;
                              break;
                            case 1:
                              this.y = e;
                              break;
                            case 2:
                              this.z = e;
                              break;
                            case 3:
                              this.w = e;
                              break;
                            default:
                              throw new Error('index is out of range: ' + t);
                          }
                          return this;
                        },
                        getComponent: function(t) {
                          switch (t) {
                            case 0:
                              return this.x;
                            case 1:
                              return this.y;
                            case 2:
                              return this.z;
                            case 3:
                              return this.w;
                            default:
                              throw new Error('index is out of range: ' + t);
                          }
                        },
                        clone: function() {
                          return new this.constructor(
                            this.x,
                            this.y,
                            this.z,
                            this.w
                          );
                        },
                        copy: function(t) {
                          return (
                            (this.x = t.x),
                            (this.y = t.y),
                            (this.z = t.z),
                            (this.w = void 0 !== t.w ? t.w : 1),
                            this
                          );
                        },
                        add: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'
                              ),
                              this.addVectors(t, e))
                            : ((this.x += t.x),
                              (this.y += t.y),
                              (this.z += t.z),
                              (this.w += t.w),
                              this);
                        },
                        addScalar: function(t) {
                          return (
                            (this.x += t),
                            (this.y += t),
                            (this.z += t),
                            (this.w += t),
                            this
                          );
                        },
                        addVectors: function(t, e) {
                          return (
                            (this.x = t.x + e.x),
                            (this.y = t.y + e.y),
                            (this.z = t.z + e.z),
                            (this.w = t.w + e.w),
                            this
                          );
                        },
                        addScaledVector: function(t, e) {
                          return (
                            (this.x += t.x * e),
                            (this.y += t.y * e),
                            (this.z += t.z * e),
                            (this.w += t.w * e),
                            this
                          );
                        },
                        sub: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'
                              ),
                              this.subVectors(t, e))
                            : ((this.x -= t.x),
                              (this.y -= t.y),
                              (this.z -= t.z),
                              (this.w -= t.w),
                              this);
                        },
                        subScalar: function(t) {
                          return (
                            (this.x -= t),
                            (this.y -= t),
                            (this.z -= t),
                            (this.w -= t),
                            this
                          );
                        },
                        subVectors: function(t, e) {
                          return (
                            (this.x = t.x - e.x),
                            (this.y = t.y - e.y),
                            (this.z = t.z - e.z),
                            (this.w = t.w - e.w),
                            this
                          );
                        },
                        multiplyScalar: function(t) {
                          return (
                            (this.x *= t),
                            (this.y *= t),
                            (this.z *= t),
                            (this.w *= t),
                            this
                          );
                        },
                        applyMatrix4: function(t) {
                          var e = this.x,
                            i = this.y,
                            n = this.z,
                            r = this.w,
                            o = t.elements;
                          return (
                            (this.x =
                              o[0] * e + o[4] * i + o[8] * n + o[12] * r),
                            (this.y =
                              o[1] * e + o[5] * i + o[9] * n + o[13] * r),
                            (this.z =
                              o[2] * e + o[6] * i + o[10] * n + o[14] * r),
                            (this.w =
                              o[3] * e + o[7] * i + o[11] * n + o[15] * r),
                            this
                          );
                        },
                        divideScalar: function(t) {
                          return this.multiplyScalar(1 / t);
                        },
                        setAxisAngleFromQuaternion: function(t) {
                          this.w = 2 * Math.acos(t.w);
                          var e = Math.sqrt(1 - t.w * t.w);
                          return (
                            e < 1e-4
                              ? ((this.x = 1), (this.y = 0), (this.z = 0))
                              : ((this.x = t.x / e),
                                (this.y = t.y / e),
                                (this.z = t.z / e)),
                            this
                          );
                        },
                        setAxisAngleFromRotationMatrix: function(t) {
                          var e,
                            i,
                            n,
                            r,
                            o = t.elements,
                            s = o[0],
                            a = o[4],
                            c = o[8],
                            l = o[1],
                            u = o[5],
                            h = o[9],
                            d = o[2],
                            p = o[6],
                            f = o[10];
                          if (
                            Math.abs(a - l) < 0.01 &&
                            Math.abs(c - d) < 0.01 &&
                            Math.abs(h - p) < 0.01
                          ) {
                            if (
                              Math.abs(a + l) < 0.1 &&
                              Math.abs(c + d) < 0.1 &&
                              Math.abs(h + p) < 0.1 &&
                              Math.abs(s + u + f - 3) < 0.1
                            )
                              return this.set(1, 0, 0, 0), this;
                            e = Math.PI;
                            var m = (s + 1) / 2,
                              g = (u + 1) / 2,
                              v = (f + 1) / 2,
                              y = (a + l) / 4,
                              w = (c + d) / 4,
                              M = (h + p) / 4;
                            return (
                              m > g && m > v
                                ? m < 0.01
                                  ? ((i = 0),
                                    (n = 0.707106781),
                                    (r = 0.707106781))
                                  : ((n = y / (i = Math.sqrt(m))), (r = w / i))
                                : g > v
                                  ? g < 0.01
                                    ? ((i = 0.707106781),
                                      (n = 0),
                                      (r = 0.707106781))
                                    : ((i = y / (n = Math.sqrt(g))),
                                      (r = M / n))
                                  : v < 0.01
                                    ? ((i = 0.707106781),
                                      (n = 0.707106781),
                                      (r = 0))
                                    : ((i = w / (r = Math.sqrt(v))),
                                      (n = M / r)),
                              this.set(i, n, r, e),
                              this
                            );
                          }
                          var E = Math.sqrt(
                            (p - h) * (p - h) +
                              (c - d) * (c - d) +
                              (l - a) * (l - a)
                          );
                          return (
                            Math.abs(E) < 0.001 && (E = 1),
                            (this.x = (p - h) / E),
                            (this.y = (c - d) / E),
                            (this.z = (l - a) / E),
                            (this.w = Math.acos((s + u + f - 1) / 2)),
                            this
                          );
                        },
                        min: function(t) {
                          return (
                            (this.x = Math.min(this.x, t.x)),
                            (this.y = Math.min(this.y, t.y)),
                            (this.z = Math.min(this.z, t.z)),
                            (this.w = Math.min(this.w, t.w)),
                            this
                          );
                        },
                        max: function(t) {
                          return (
                            (this.x = Math.max(this.x, t.x)),
                            (this.y = Math.max(this.y, t.y)),
                            (this.z = Math.max(this.z, t.z)),
                            (this.w = Math.max(this.w, t.w)),
                            this
                          );
                        },
                        clamp: function(t, e) {
                          return (
                            (this.x = Math.max(t.x, Math.min(e.x, this.x))),
                            (this.y = Math.max(t.y, Math.min(e.y, this.y))),
                            (this.z = Math.max(t.z, Math.min(e.z, this.z))),
                            (this.w = Math.max(t.w, Math.min(e.w, this.w))),
                            this
                          );
                        },
                        clampScalar: function(t, e) {
                          return (
                            void 0 === de && ((de = new je()), (pe = new je())),
                            de.set(t, t, t, t),
                            pe.set(e, e, e, e),
                            this.clamp(de, pe)
                          );
                        },
                        clampLength: function(t, e) {
                          var i = this.length();
                          return this.divideScalar(i || 1).multiplyScalar(
                            Math.max(t, Math.min(e, i))
                          );
                        },
                        floor: function() {
                          return (
                            (this.x = Math.floor(this.x)),
                            (this.y = Math.floor(this.y)),
                            (this.z = Math.floor(this.z)),
                            (this.w = Math.floor(this.w)),
                            this
                          );
                        },
                        ceil: function() {
                          return (
                            (this.x = Math.ceil(this.x)),
                            (this.y = Math.ceil(this.y)),
                            (this.z = Math.ceil(this.z)),
                            (this.w = Math.ceil(this.w)),
                            this
                          );
                        },
                        round: function() {
                          return (
                            (this.x = Math.round(this.x)),
                            (this.y = Math.round(this.y)),
                            (this.z = Math.round(this.z)),
                            (this.w = Math.round(this.w)),
                            this
                          );
                        },
                        roundToZero: function() {
                          return (
                            (this.x =
                              this.x < 0
                                ? Math.ceil(this.x)
                                : Math.floor(this.x)),
                            (this.y =
                              this.y < 0
                                ? Math.ceil(this.y)
                                : Math.floor(this.y)),
                            (this.z =
                              this.z < 0
                                ? Math.ceil(this.z)
                                : Math.floor(this.z)),
                            (this.w =
                              this.w < 0
                                ? Math.ceil(this.w)
                                : Math.floor(this.w)),
                            this
                          );
                        },
                        negate: function() {
                          return (
                            (this.x = -this.x),
                            (this.y = -this.y),
                            (this.z = -this.z),
                            (this.w = -this.w),
                            this
                          );
                        },
                        dot: function(t) {
                          return (
                            this.x * t.x +
                            this.y * t.y +
                            this.z * t.z +
                            this.w * t.w
                          );
                        },
                        lengthSq: function() {
                          return (
                            this.x * this.x +
                            this.y * this.y +
                            this.z * this.z +
                            this.w * this.w
                          );
                        },
                        length: function() {
                          return Math.sqrt(
                            this.x * this.x +
                              this.y * this.y +
                              this.z * this.z +
                              this.w * this.w
                          );
                        },
                        lengthManhattan: function() {
                          return (
                            Math.abs(this.x) +
                            Math.abs(this.y) +
                            Math.abs(this.z) +
                            Math.abs(this.w)
                          );
                        },
                        normalize: function() {
                          return this.divideScalar(this.length() || 1);
                        },
                        setLength: function(t) {
                          return this.normalize().multiplyScalar(t);
                        },
                        lerp: function(t, e) {
                          return (
                            (this.x += (t.x - this.x) * e),
                            (this.y += (t.y - this.y) * e),
                            (this.z += (t.z - this.z) * e),
                            (this.w += (t.w - this.w) * e),
                            this
                          );
                        },
                        lerpVectors: function(t, e, i) {
                          return this.subVectors(e, t)
                            .multiplyScalar(i)
                            .add(t);
                        },
                        equals: function(t) {
                          return (
                            t.x === this.x &&
                            t.y === this.y &&
                            t.z === this.z &&
                            t.w === this.w
                          );
                        },
                        fromArray: function(t, e) {
                          return (
                            void 0 === e && (e = 0),
                            (this.x = t[e]),
                            (this.y = t[e + 1]),
                            (this.z = t[e + 2]),
                            (this.w = t[e + 3]),
                            this
                          );
                        },
                        toArray: function(t, e) {
                          return (
                            void 0 === t && (t = []),
                            void 0 === e && (e = 0),
                            (t[e] = this.x),
                            (t[e + 1] = this.y),
                            (t[e + 2] = this.z),
                            (t[e + 3] = this.w),
                            t
                          );
                        },
                        fromBufferAttribute: function(t, e, i) {
                          return (
                            void 0 !== i &&
                              console.warn(
                                'THREE.Vector4: offset has been removed from .fromBufferAttribute().'
                              ),
                            (this.x = t.getX(e)),
                            (this.y = t.getY(e)),
                            (this.z = t.getZ(e)),
                            (this.w = t.getW(e)),
                            this
                          );
                        }
                      }),
                      Object.assign(Oe.prototype, e.prototype, {
                        isWebGLRenderTarget: !0,
                        setSize: function(t, e) {
                          (this.width === t && this.height === e) ||
                            ((this.width = t),
                            (this.height = e),
                            this.dispose()),
                            this.viewport.set(0, 0, t, e),
                            this.scissor.set(0, 0, t, e);
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            (this.width = t.width),
                            (this.height = t.height),
                            this.viewport.copy(t.viewport),
                            (this.texture = t.texture.clone()),
                            (this.depthBuffer = t.depthBuffer),
                            (this.stencilBuffer = t.stencilBuffer),
                            (this.depthTexture = t.depthTexture),
                            this
                          );
                        },
                        dispose: function() {
                          this.dispatchEvent({ type: 'dispose' });
                        }
                      }),
                      (Re.prototype = Object.create(Oe.prototype)),
                      (Re.prototype.constructor = Re),
                      (Re.prototype.isWebGLRenderTargetCube = !0),
                      Object.assign(ze, {
                        slerp: function(t, e, i, n) {
                          return i.copy(t).slerp(e, n);
                        },
                        slerpFlat: function(t, e, i, n, r, o, s) {
                          var a = i[n + 0],
                            c = i[n + 1],
                            l = i[n + 2],
                            u = i[n + 3],
                            h = r[o + 0],
                            d = r[o + 1],
                            p = r[o + 2],
                            f = r[o + 3];
                          if (u !== f || a !== h || c !== d || l !== p) {
                            var m = 1 - s,
                              g = a * h + c * d + l * p + u * f,
                              v = g >= 0 ? 1 : -1,
                              y = 1 - g * g;
                            if (y > Number.EPSILON) {
                              var w = Math.sqrt(y),
                                M = Math.atan2(w, g * v);
                              (m = Math.sin(m * M) / w),
                                (s = Math.sin(s * M) / w);
                            }
                            var E = s * v;
                            if (
                              ((a = a * m + h * E),
                              (c = c * m + d * E),
                              (l = l * m + p * E),
                              (u = u * m + f * E),
                              m === 1 - s)
                            ) {
                              var b =
                                1 / Math.sqrt(a * a + c * c + l * l + u * u);
                              (a *= b), (c *= b), (l *= b), (u *= b);
                            }
                          }
                          (t[e] = a),
                            (t[e + 1] = c),
                            (t[e + 2] = l),
                            (t[e + 3] = u);
                        }
                      }),
                      Object.defineProperties(ze.prototype, {
                        x: {
                          get: function() {
                            return this._x;
                          },
                          set: function(t) {
                            (this._x = t), this.onChangeCallback();
                          }
                        },
                        y: {
                          get: function() {
                            return this._y;
                          },
                          set: function(t) {
                            (this._y = t), this.onChangeCallback();
                          }
                        },
                        z: {
                          get: function() {
                            return this._z;
                          },
                          set: function(t) {
                            (this._z = t), this.onChangeCallback();
                          }
                        },
                        w: {
                          get: function() {
                            return this._w;
                          },
                          set: function(t) {
                            (this._w = t), this.onChangeCallback();
                          }
                        }
                      }),
                      Object.assign(ze.prototype, {
                        set: function(t, e, i, n) {
                          return (
                            (this._x = t),
                            (this._y = e),
                            (this._z = i),
                            (this._w = n),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor(
                            this._x,
                            this._y,
                            this._z,
                            this._w
                          );
                        },
                        copy: function(t) {
                          return (
                            (this._x = t.x),
                            (this._y = t.y),
                            (this._z = t.z),
                            (this._w = t.w),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        setFromEuler: function(t, e) {
                          if (!t || !t.isEuler)
                            throw new Error(
                              'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.'
                            );
                          var i = t._x,
                            n = t._y,
                            r = t._z,
                            o = t.order,
                            s = Math.cos,
                            a = Math.sin,
                            c = s(i / 2),
                            l = s(n / 2),
                            u = s(r / 2),
                            h = a(i / 2),
                            d = a(n / 2),
                            p = a(r / 2);
                          return (
                            'XYZ' === o
                              ? ((this._x = h * l * u + c * d * p),
                                (this._y = c * d * u - h * l * p),
                                (this._z = c * l * p + h * d * u),
                                (this._w = c * l * u - h * d * p))
                              : 'YXZ' === o
                                ? ((this._x = h * l * u + c * d * p),
                                  (this._y = c * d * u - h * l * p),
                                  (this._z = c * l * p - h * d * u),
                                  (this._w = c * l * u + h * d * p))
                                : 'ZXY' === o
                                  ? ((this._x = h * l * u - c * d * p),
                                    (this._y = c * d * u + h * l * p),
                                    (this._z = c * l * p + h * d * u),
                                    (this._w = c * l * u - h * d * p))
                                  : 'ZYX' === o
                                    ? ((this._x = h * l * u - c * d * p),
                                      (this._y = c * d * u + h * l * p),
                                      (this._z = c * l * p - h * d * u),
                                      (this._w = c * l * u + h * d * p))
                                    : 'YZX' === o
                                      ? ((this._x = h * l * u + c * d * p),
                                        (this._y = c * d * u + h * l * p),
                                        (this._z = c * l * p - h * d * u),
                                        (this._w = c * l * u - h * d * p))
                                      : 'XZY' === o &&
                                        ((this._x = h * l * u - c * d * p),
                                        (this._y = c * d * u - h * l * p),
                                        (this._z = c * l * p + h * d * u),
                                        (this._w = c * l * u + h * d * p)),
                            !1 !== e && this.onChangeCallback(),
                            this
                          );
                        },
                        setFromAxisAngle: function(t, e) {
                          var i = e / 2,
                            n = Math.sin(i);
                          return (
                            (this._x = t.x * n),
                            (this._y = t.y * n),
                            (this._z = t.z * n),
                            (this._w = Math.cos(i)),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        setFromRotationMatrix: function(t) {
                          var e,
                            i = t.elements,
                            n = i[0],
                            r = i[4],
                            o = i[8],
                            s = i[1],
                            a = i[5],
                            c = i[9],
                            l = i[2],
                            u = i[6],
                            h = i[10],
                            d = n + a + h;
                          return (
                            d > 0
                              ? ((e = 0.5 / Math.sqrt(d + 1)),
                                (this._w = 0.25 / e),
                                (this._x = (u - c) * e),
                                (this._y = (o - l) * e),
                                (this._z = (s - r) * e))
                              : n > a && n > h
                                ? ((e = 2 * Math.sqrt(1 + n - a - h)),
                                  (this._w = (u - c) / e),
                                  (this._x = 0.25 * e),
                                  (this._y = (r + s) / e),
                                  (this._z = (o + l) / e))
                                : a > h
                                  ? ((e = 2 * Math.sqrt(1 + a - n - h)),
                                    (this._w = (o - l) / e),
                                    (this._x = (r + s) / e),
                                    (this._y = 0.25 * e),
                                    (this._z = (c + u) / e))
                                  : ((e = 2 * Math.sqrt(1 + h - n - a)),
                                    (this._w = (s - r) / e),
                                    (this._x = (o + l) / e),
                                    (this._y = (c + u) / e),
                                    (this._z = 0.25 * e)),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        setFromUnitVectors: ((me = new ke()),
                        function(t, e) {
                          return (
                            void 0 === me && (me = new ke()),
                            (fe = t.dot(e) + 1) < 1e-6
                              ? ((fe = 0),
                                Math.abs(t.x) > Math.abs(t.z)
                                  ? me.set(-t.y, t.x, 0)
                                  : me.set(0, -t.z, t.y))
                              : me.crossVectors(t, e),
                            (this._x = me.x),
                            (this._y = me.y),
                            (this._z = me.z),
                            (this._w = fe),
                            this.normalize()
                          );
                        }),
                        inverse: function() {
                          return this.conjugate().normalize();
                        },
                        conjugate: function() {
                          return (
                            (this._x *= -1),
                            (this._y *= -1),
                            (this._z *= -1),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        dot: function(t) {
                          return (
                            this._x * t._x +
                            this._y * t._y +
                            this._z * t._z +
                            this._w * t._w
                          );
                        },
                        lengthSq: function() {
                          return (
                            this._x * this._x +
                            this._y * this._y +
                            this._z * this._z +
                            this._w * this._w
                          );
                        },
                        length: function() {
                          return Math.sqrt(
                            this._x * this._x +
                              this._y * this._y +
                              this._z * this._z +
                              this._w * this._w
                          );
                        },
                        normalize: function() {
                          var t = this.length();
                          return (
                            0 === t
                              ? ((this._x = 0),
                                (this._y = 0),
                                (this._z = 0),
                                (this._w = 1))
                              : ((t = 1 / t),
                                (this._x = this._x * t),
                                (this._y = this._y * t),
                                (this._z = this._z * t),
                                (this._w = this._w * t)),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        multiply: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.'
                              ),
                              this.multiplyQuaternions(t, e))
                            : this.multiplyQuaternions(this, t);
                        },
                        premultiply: function(t) {
                          return this.multiplyQuaternions(t, this);
                        },
                        multiplyQuaternions: function(t, e) {
                          var i = t._x,
                            n = t._y,
                            r = t._z,
                            o = t._w,
                            s = e._x,
                            a = e._y,
                            c = e._z,
                            l = e._w;
                          return (
                            (this._x = i * l + o * s + n * c - r * a),
                            (this._y = n * l + o * a + r * s - i * c),
                            (this._z = r * l + o * c + i * a - n * s),
                            (this._w = o * l - i * s - n * a - r * c),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        slerp: function(t, e) {
                          if (0 === e) return this;
                          if (1 === e) return this.copy(t);
                          var i = this._x,
                            n = this._y,
                            r = this._z,
                            o = this._w,
                            s = o * t._w + i * t._x + n * t._y + r * t._z;
                          if (
                            (s < 0
                              ? ((this._w = -t._w),
                                (this._x = -t._x),
                                (this._y = -t._y),
                                (this._z = -t._z),
                                (s = -s))
                              : this.copy(t),
                            s >= 1)
                          )
                            return (
                              (this._w = o),
                              (this._x = i),
                              (this._y = n),
                              (this._z = r),
                              this
                            );
                          var a = Math.sqrt(1 - s * s);
                          if (Math.abs(a) < 0.001)
                            return (
                              (this._w = 0.5 * (o + this._w)),
                              (this._x = 0.5 * (i + this._x)),
                              (this._y = 0.5 * (n + this._y)),
                              (this._z = 0.5 * (r + this._z)),
                              this
                            );
                          var c = Math.atan2(a, s),
                            l = Math.sin((1 - e) * c) / a,
                            u = Math.sin(e * c) / a;
                          return (
                            (this._w = o * l + this._w * u),
                            (this._x = i * l + this._x * u),
                            (this._y = n * l + this._y * u),
                            (this._z = r * l + this._z * u),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        equals: function(t) {
                          return (
                            t._x === this._x &&
                            t._y === this._y &&
                            t._z === this._z &&
                            t._w === this._w
                          );
                        },
                        fromArray: function(t, e) {
                          return (
                            void 0 === e && (e = 0),
                            (this._x = t[e]),
                            (this._y = t[e + 1]),
                            (this._z = t[e + 2]),
                            (this._w = t[e + 3]),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        toArray: function(t, e) {
                          return (
                            void 0 === t && (t = []),
                            void 0 === e && (e = 0),
                            (t[e] = this._x),
                            (t[e + 1] = this._y),
                            (t[e + 2] = this._z),
                            (t[e + 3] = this._w),
                            t
                          );
                        },
                        onChange: function(t) {
                          return (this.onChangeCallback = t), this;
                        },
                        onChangeCallback: function() {}
                      }),
                      Object.assign(ke.prototype, {
                        isVector3: !0,
                        set: function(t, e, i) {
                          return (this.x = t), (this.y = e), (this.z = i), this;
                        },
                        setScalar: function(t) {
                          return (this.x = t), (this.y = t), (this.z = t), this;
                        },
                        setX: function(t) {
                          return (this.x = t), this;
                        },
                        setY: function(t) {
                          return (this.y = t), this;
                        },
                        setZ: function(t) {
                          return (this.z = t), this;
                        },
                        setComponent: function(t, e) {
                          switch (t) {
                            case 0:
                              this.x = e;
                              break;
                            case 1:
                              this.y = e;
                              break;
                            case 2:
                              this.z = e;
                              break;
                            default:
                              throw new Error('index is out of range: ' + t);
                          }
                          return this;
                        },
                        getComponent: function(t) {
                          switch (t) {
                            case 0:
                              return this.x;
                            case 1:
                              return this.y;
                            case 2:
                              return this.z;
                            default:
                              throw new Error('index is out of range: ' + t);
                          }
                        },
                        clone: function() {
                          return new this.constructor(this.x, this.y, this.z);
                        },
                        copy: function(t) {
                          return (
                            (this.x = t.x), (this.y = t.y), (this.z = t.z), this
                          );
                        },
                        add: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'
                              ),
                              this.addVectors(t, e))
                            : ((this.x += t.x),
                              (this.y += t.y),
                              (this.z += t.z),
                              this);
                        },
                        addScalar: function(t) {
                          return (
                            (this.x += t), (this.y += t), (this.z += t), this
                          );
                        },
                        addVectors: function(t, e) {
                          return (
                            (this.x = t.x + e.x),
                            (this.y = t.y + e.y),
                            (this.z = t.z + e.z),
                            this
                          );
                        },
                        addScaledVector: function(t, e) {
                          return (
                            (this.x += t.x * e),
                            (this.y += t.y * e),
                            (this.z += t.z * e),
                            this
                          );
                        },
                        sub: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'
                              ),
                              this.subVectors(t, e))
                            : ((this.x -= t.x),
                              (this.y -= t.y),
                              (this.z -= t.z),
                              this);
                        },
                        subScalar: function(t) {
                          return (
                            (this.x -= t), (this.y -= t), (this.z -= t), this
                          );
                        },
                        subVectors: function(t, e) {
                          return (
                            (this.x = t.x - e.x),
                            (this.y = t.y - e.y),
                            (this.z = t.z - e.z),
                            this
                          );
                        },
                        multiply: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.'
                              ),
                              this.multiplyVectors(t, e))
                            : ((this.x *= t.x),
                              (this.y *= t.y),
                              (this.z *= t.z),
                              this);
                        },
                        multiplyScalar: function(t) {
                          return (
                            (this.x *= t), (this.y *= t), (this.z *= t), this
                          );
                        },
                        multiplyVectors: function(t, e) {
                          return (
                            (this.x = t.x * e.x),
                            (this.y = t.y * e.y),
                            (this.z = t.z * e.z),
                            this
                          );
                        },
                        applyEuler: ((xe = new ze()),
                        function(t) {
                          return (
                            (t && t.isEuler) ||
                              console.error(
                                'THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.'
                              ),
                            this.applyQuaternion(xe.setFromEuler(t))
                          );
                        }),
                        applyAxisAngle: ((be = new ze()),
                        function(t, e) {
                          return this.applyQuaternion(
                            be.setFromAxisAngle(t, e)
                          );
                        }),
                        applyMatrix3: function(t) {
                          var e = this.x,
                            i = this.y,
                            n = this.z,
                            r = t.elements;
                          return (
                            (this.x = r[0] * e + r[3] * i + r[6] * n),
                            (this.y = r[1] * e + r[4] * i + r[7] * n),
                            (this.z = r[2] * e + r[5] * i + r[8] * n),
                            this
                          );
                        },
                        applyMatrix4: function(t) {
                          var e = this.x,
                            i = this.y,
                            n = this.z,
                            r = t.elements,
                            o = 1 / (r[3] * e + r[7] * i + r[11] * n + r[15]);
                          return (
                            (this.x =
                              (r[0] * e + r[4] * i + r[8] * n + r[12]) * o),
                            (this.y =
                              (r[1] * e + r[5] * i + r[9] * n + r[13]) * o),
                            (this.z =
                              (r[2] * e + r[6] * i + r[10] * n + r[14]) * o),
                            this
                          );
                        },
                        applyQuaternion: function(t) {
                          var e = this.x,
                            i = this.y,
                            n = this.z,
                            r = t.x,
                            o = t.y,
                            s = t.z,
                            a = t.w,
                            c = a * e + o * n - s * i,
                            l = a * i + s * e - r * n,
                            u = a * n + r * i - o * e,
                            h = -r * e - o * i - s * n;
                          return (
                            (this.x = c * a + h * -r + l * -s - u * -o),
                            (this.y = l * a + h * -o + u * -r - c * -s),
                            (this.z = u * a + h * -s + c * -o - l * -r),
                            this
                          );
                        },
                        project: ((Ee = new Be()),
                        function(t) {
                          return (
                            Ee.multiplyMatrices(
                              t.projectionMatrix,
                              Ee.getInverse(t.matrixWorld)
                            ),
                            this.applyMatrix4(Ee)
                          );
                        }),
                        unproject: ((Me = new Be()),
                        function(t) {
                          return (
                            Me.multiplyMatrices(
                              t.matrixWorld,
                              Me.getInverse(t.projectionMatrix)
                            ),
                            this.applyMatrix4(Me)
                          );
                        }),
                        transformDirection: function(t) {
                          var e = this.x,
                            i = this.y,
                            n = this.z,
                            r = t.elements;
                          return (
                            (this.x = r[0] * e + r[4] * i + r[8] * n),
                            (this.y = r[1] * e + r[5] * i + r[9] * n),
                            (this.z = r[2] * e + r[6] * i + r[10] * n),
                            this.normalize()
                          );
                        },
                        divide: function(t) {
                          return (
                            (this.x /= t.x),
                            (this.y /= t.y),
                            (this.z /= t.z),
                            this
                          );
                        },
                        divideScalar: function(t) {
                          return this.multiplyScalar(1 / t);
                        },
                        min: function(t) {
                          return (
                            (this.x = Math.min(this.x, t.x)),
                            (this.y = Math.min(this.y, t.y)),
                            (this.z = Math.min(this.z, t.z)),
                            this
                          );
                        },
                        max: function(t) {
                          return (
                            (this.x = Math.max(this.x, t.x)),
                            (this.y = Math.max(this.y, t.y)),
                            (this.z = Math.max(this.z, t.z)),
                            this
                          );
                        },
                        clamp: function(t, e) {
                          return (
                            (this.x = Math.max(t.x, Math.min(e.x, this.x))),
                            (this.y = Math.max(t.y, Math.min(e.y, this.y))),
                            (this.z = Math.max(t.z, Math.min(e.z, this.z))),
                            this
                          );
                        },
                        clampScalar: ((ye = new ke()),
                        (we = new ke()),
                        function(t, e) {
                          return (
                            ye.set(t, t, t), we.set(e, e, e), this.clamp(ye, we)
                          );
                        }),
                        clampLength: function(t, e) {
                          var i = this.length();
                          return this.divideScalar(i || 1).multiplyScalar(
                            Math.max(t, Math.min(e, i))
                          );
                        },
                        floor: function() {
                          return (
                            (this.x = Math.floor(this.x)),
                            (this.y = Math.floor(this.y)),
                            (this.z = Math.floor(this.z)),
                            this
                          );
                        },
                        ceil: function() {
                          return (
                            (this.x = Math.ceil(this.x)),
                            (this.y = Math.ceil(this.y)),
                            (this.z = Math.ceil(this.z)),
                            this
                          );
                        },
                        round: function() {
                          return (
                            (this.x = Math.round(this.x)),
                            (this.y = Math.round(this.y)),
                            (this.z = Math.round(this.z)),
                            this
                          );
                        },
                        roundToZero: function() {
                          return (
                            (this.x =
                              this.x < 0
                                ? Math.ceil(this.x)
                                : Math.floor(this.x)),
                            (this.y =
                              this.y < 0
                                ? Math.ceil(this.y)
                                : Math.floor(this.y)),
                            (this.z =
                              this.z < 0
                                ? Math.ceil(this.z)
                                : Math.floor(this.z)),
                            this
                          );
                        },
                        negate: function() {
                          return (
                            (this.x = -this.x),
                            (this.y = -this.y),
                            (this.z = -this.z),
                            this
                          );
                        },
                        dot: function(t) {
                          return this.x * t.x + this.y * t.y + this.z * t.z;
                        },
                        lengthSq: function() {
                          return (
                            this.x * this.x + this.y * this.y + this.z * this.z
                          );
                        },
                        length: function() {
                          return Math.sqrt(
                            this.x * this.x + this.y * this.y + this.z * this.z
                          );
                        },
                        lengthManhattan: function() {
                          return (
                            Math.abs(this.x) +
                            Math.abs(this.y) +
                            Math.abs(this.z)
                          );
                        },
                        normalize: function() {
                          return this.divideScalar(this.length() || 1);
                        },
                        setLength: function(t) {
                          return this.normalize().multiplyScalar(t);
                        },
                        lerp: function(t, e) {
                          return (
                            (this.x += (t.x - this.x) * e),
                            (this.y += (t.y - this.y) * e),
                            (this.z += (t.z - this.z) * e),
                            this
                          );
                        },
                        lerpVectors: function(t, e, i) {
                          return this.subVectors(e, t)
                            .multiplyScalar(i)
                            .add(t);
                        },
                        cross: function(t, e) {
                          if (void 0 !== e)
                            return (
                              console.warn(
                                'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.'
                              ),
                              this.crossVectors(t, e)
                            );
                          var i = this.x,
                            n = this.y,
                            r = this.z;
                          return (
                            (this.x = n * t.z - r * t.y),
                            (this.y = r * t.x - i * t.z),
                            (this.z = i * t.y - n * t.x),
                            this
                          );
                        },
                        crossVectors: function(t, e) {
                          var i = t.x,
                            n = t.y,
                            r = t.z,
                            o = e.x,
                            s = e.y,
                            a = e.z;
                          return (
                            (this.x = n * a - r * s),
                            (this.y = r * o - i * a),
                            (this.z = i * s - n * o),
                            this
                          );
                        },
                        projectOnVector: function(t) {
                          var e = t.dot(this) / t.lengthSq();
                          return this.copy(t).multiplyScalar(e);
                        },
                        projectOnPlane: ((ve = new ke()),
                        function(t) {
                          return ve.copy(this).projectOnVector(t), this.sub(ve);
                        }),
                        reflect: ((ge = new ke()),
                        function(t) {
                          return this.sub(
                            ge.copy(t).multiplyScalar(2 * this.dot(t))
                          );
                        }),
                        angleTo: function(t) {
                          var e =
                            this.dot(t) /
                            Math.sqrt(this.lengthSq() * t.lengthSq());
                          return Math.acos(ue.clamp(e, -1, 1));
                        },
                        distanceTo: function(t) {
                          return Math.sqrt(this.distanceToSquared(t));
                        },
                        distanceToSquared: function(t) {
                          var e = this.x - t.x,
                            i = this.y - t.y,
                            n = this.z - t.z;
                          return e * e + i * i + n * n;
                        },
                        distanceToManhattan: function(t) {
                          return (
                            Math.abs(this.x - t.x) +
                            Math.abs(this.y - t.y) +
                            Math.abs(this.z - t.z)
                          );
                        },
                        setFromSpherical: function(t) {
                          var e = Math.sin(t.phi) * t.radius;
                          return (
                            (this.x = e * Math.sin(t.theta)),
                            (this.y = Math.cos(t.phi) * t.radius),
                            (this.z = e * Math.cos(t.theta)),
                            this
                          );
                        },
                        setFromCylindrical: function(t) {
                          return (
                            (this.x = t.radius * Math.sin(t.theta)),
                            (this.y = t.y),
                            (this.z = t.radius * Math.cos(t.theta)),
                            this
                          );
                        },
                        setFromMatrixPosition: function(t) {
                          var e = t.elements;
                          return (
                            (this.x = e[12]),
                            (this.y = e[13]),
                            (this.z = e[14]),
                            this
                          );
                        },
                        setFromMatrixScale: function(t) {
                          var e = this.setFromMatrixColumn(t, 0).length(),
                            i = this.setFromMatrixColumn(t, 1).length(),
                            n = this.setFromMatrixColumn(t, 2).length();
                          return (this.x = e), (this.y = i), (this.z = n), this;
                        },
                        setFromMatrixColumn: function(t, e) {
                          return this.fromArray(t.elements, 4 * e);
                        },
                        equals: function(t) {
                          return (
                            t.x === this.x && t.y === this.y && t.z === this.z
                          );
                        },
                        fromArray: function(t, e) {
                          return (
                            void 0 === e && (e = 0),
                            (this.x = t[e]),
                            (this.y = t[e + 1]),
                            (this.z = t[e + 2]),
                            this
                          );
                        },
                        toArray: function(t, e) {
                          return (
                            void 0 === t && (t = []),
                            void 0 === e && (e = 0),
                            (t[e] = this.x),
                            (t[e + 1] = this.y),
                            (t[e + 2] = this.z),
                            t
                          );
                        },
                        fromBufferAttribute: function(t, e, i) {
                          return (
                            void 0 !== i &&
                              console.warn(
                                'THREE.Vector3: offset has been removed from .fromBufferAttribute().'
                              ),
                            (this.x = t.getX(e)),
                            (this.y = t.getY(e)),
                            (this.z = t.getZ(e)),
                            this
                          );
                        }
                      }),
                      Object.assign(Be.prototype, {
                        isMatrix4: !0,
                        set: function(
                          t,
                          e,
                          i,
                          n,
                          r,
                          o,
                          s,
                          a,
                          c,
                          l,
                          u,
                          h,
                          d,
                          p,
                          f,
                          m
                        ) {
                          var g = this.elements;
                          return (
                            (g[0] = t),
                            (g[4] = e),
                            (g[8] = i),
                            (g[12] = n),
                            (g[1] = r),
                            (g[5] = o),
                            (g[9] = s),
                            (g[13] = a),
                            (g[2] = c),
                            (g[6] = l),
                            (g[10] = u),
                            (g[14] = h),
                            (g[3] = d),
                            (g[7] = p),
                            (g[11] = f),
                            (g[15] = m),
                            this
                          );
                        },
                        identity: function() {
                          return (
                            this.set(
                              1,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        clone: function() {
                          return new Be().fromArray(this.elements);
                        },
                        copy: function(t) {
                          var e = this.elements,
                            i = t.elements;
                          return (
                            (e[0] = i[0]),
                            (e[1] = i[1]),
                            (e[2] = i[2]),
                            (e[3] = i[3]),
                            (e[4] = i[4]),
                            (e[5] = i[5]),
                            (e[6] = i[6]),
                            (e[7] = i[7]),
                            (e[8] = i[8]),
                            (e[9] = i[9]),
                            (e[10] = i[10]),
                            (e[11] = i[11]),
                            (e[12] = i[12]),
                            (e[13] = i[13]),
                            (e[14] = i[14]),
                            (e[15] = i[15]),
                            this
                          );
                        },
                        copyPosition: function(t) {
                          var e = this.elements,
                            i = t.elements;
                          return (
                            (e[12] = i[12]),
                            (e[13] = i[13]),
                            (e[14] = i[14]),
                            this
                          );
                        },
                        extractBasis: function(t, e, i) {
                          return (
                            t.setFromMatrixColumn(this, 0),
                            e.setFromMatrixColumn(this, 1),
                            i.setFromMatrixColumn(this, 2),
                            this
                          );
                        },
                        makeBasis: function(t, e, i) {
                          return (
                            this.set(
                              t.x,
                              e.x,
                              i.x,
                              0,
                              t.y,
                              e.y,
                              i.y,
                              0,
                              t.z,
                              e.z,
                              i.z,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        extractRotation: ((Ce = new ke()),
                        function(t) {
                          var e = this.elements,
                            i = t.elements,
                            n = 1 / Ce.setFromMatrixColumn(t, 0).length(),
                            r = 1 / Ce.setFromMatrixColumn(t, 1).length(),
                            o = 1 / Ce.setFromMatrixColumn(t, 2).length();
                          return (
                            (e[0] = i[0] * n),
                            (e[1] = i[1] * n),
                            (e[2] = i[2] * n),
                            (e[4] = i[4] * r),
                            (e[5] = i[5] * r),
                            (e[6] = i[6] * r),
                            (e[8] = i[8] * o),
                            (e[9] = i[9] * o),
                            (e[10] = i[10] * o),
                            this
                          );
                        }),
                        makeRotationFromEuler: function(t) {
                          (t && t.isEuler) ||
                            console.error(
                              'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.'
                            );
                          var e = this.elements,
                            i = t.x,
                            n = t.y,
                            r = t.z,
                            o = Math.cos(i),
                            s = Math.sin(i),
                            a = Math.cos(n),
                            c = Math.sin(n),
                            l = Math.cos(r),
                            u = Math.sin(r);
                          if ('XYZ' === t.order) {
                            var h = o * l,
                              d = o * u,
                              p = s * l,
                              f = s * u;
                            (e[0] = a * l),
                              (e[4] = -a * u),
                              (e[8] = c),
                              (e[1] = d + p * c),
                              (e[5] = h - f * c),
                              (e[9] = -s * a),
                              (e[2] = f - h * c),
                              (e[6] = p + d * c),
                              (e[10] = o * a);
                          } else if ('YXZ' === t.order) {
                            var m = a * l,
                              g = a * u,
                              v = c * l,
                              y = c * u;
                            (e[0] = m + y * s),
                              (e[4] = v * s - g),
                              (e[8] = o * c),
                              (e[1] = o * u),
                              (e[5] = o * l),
                              (e[9] = -s),
                              (e[2] = g * s - v),
                              (e[6] = y + m * s),
                              (e[10] = o * a);
                          } else if ('ZXY' === t.order) {
                            (m = a * l), (g = a * u), (v = c * l), (y = c * u);
                            (e[0] = m - y * s),
                              (e[4] = -o * u),
                              (e[8] = v + g * s),
                              (e[1] = g + v * s),
                              (e[5] = o * l),
                              (e[9] = y - m * s),
                              (e[2] = -o * c),
                              (e[6] = s),
                              (e[10] = o * a);
                          } else if ('ZYX' === t.order) {
                            (h = o * l), (d = o * u), (p = s * l), (f = s * u);
                            (e[0] = a * l),
                              (e[4] = p * c - d),
                              (e[8] = h * c + f),
                              (e[1] = a * u),
                              (e[5] = f * c + h),
                              (e[9] = d * c - p),
                              (e[2] = -c),
                              (e[6] = s * a),
                              (e[10] = o * a);
                          } else if ('YZX' === t.order) {
                            var w = o * a,
                              M = o * c,
                              E = s * a,
                              b = s * c;
                            (e[0] = a * l),
                              (e[4] = b - w * u),
                              (e[8] = E * u + M),
                              (e[1] = u),
                              (e[5] = o * l),
                              (e[9] = -s * l),
                              (e[2] = -c * l),
                              (e[6] = M * u + E),
                              (e[10] = w - b * u);
                          } else if ('XZY' === t.order) {
                            (w = o * a), (M = o * c), (E = s * a), (b = s * c);
                            (e[0] = a * l),
                              (e[4] = -u),
                              (e[8] = c * l),
                              (e[1] = w * u + b),
                              (e[5] = o * l),
                              (e[9] = M * u - E),
                              (e[2] = E * u - M),
                              (e[6] = s * l),
                              (e[10] = b * u + w);
                          }
                          return (
                            (e[3] = 0),
                            (e[7] = 0),
                            (e[11] = 0),
                            (e[12] = 0),
                            (e[13] = 0),
                            (e[14] = 0),
                            (e[15] = 1),
                            this
                          );
                        },
                        makeRotationFromQuaternion: function(t) {
                          var e = this.elements,
                            i = t._x,
                            n = t._y,
                            r = t._z,
                            o = t._w,
                            s = i + i,
                            a = n + n,
                            c = r + r,
                            l = i * s,
                            u = i * a,
                            h = i * c,
                            d = n * a,
                            p = n * c,
                            f = r * c,
                            m = o * s,
                            g = o * a,
                            v = o * c;
                          return (
                            (e[0] = 1 - (d + f)),
                            (e[4] = u - v),
                            (e[8] = h + g),
                            (e[1] = u + v),
                            (e[5] = 1 - (l + f)),
                            (e[9] = p - m),
                            (e[2] = h - g),
                            (e[6] = p + m),
                            (e[10] = 1 - (l + d)),
                            (e[3] = 0),
                            (e[7] = 0),
                            (e[11] = 0),
                            (e[12] = 0),
                            (e[13] = 0),
                            (e[14] = 0),
                            (e[15] = 1),
                            this
                          );
                        },
                        lookAt: ((Ne = new ke()),
                        (De = new ke()),
                        (Se = new ke()),
                        function(t, e, i) {
                          var n = this.elements;
                          return (
                            Se.subVectors(t, e),
                            0 === Se.lengthSq() && (Se.z = 1),
                            Se.normalize(),
                            Ne.crossVectors(i, Se),
                            0 === Ne.lengthSq() &&
                              (1 === Math.abs(i.z)
                                ? (Se.x += 1e-4)
                                : (Se.z += 1e-4),
                              Se.normalize(),
                              Ne.crossVectors(i, Se)),
                            Ne.normalize(),
                            De.crossVectors(Se, Ne),
                            (n[0] = Ne.x),
                            (n[4] = De.x),
                            (n[8] = Se.x),
                            (n[1] = Ne.y),
                            (n[5] = De.y),
                            (n[9] = Se.y),
                            (n[2] = Ne.z),
                            (n[6] = De.z),
                            (n[10] = Se.z),
                            this
                          );
                        }),
                        multiply: function(t, e) {
                          return void 0 !== e
                            ? (console.warn(
                                'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.'
                              ),
                              this.multiplyMatrices(t, e))
                            : this.multiplyMatrices(this, t);
                        },
                        premultiply: function(t) {
                          return this.multiplyMatrices(t, this);
                        },
                        multiplyMatrices: function(t, e) {
                          var i = t.elements,
                            n = e.elements,
                            r = this.elements,
                            o = i[0],
                            s = i[4],
                            a = i[8],
                            c = i[12],
                            l = i[1],
                            u = i[5],
                            h = i[9],
                            d = i[13],
                            p = i[2],
                            f = i[6],
                            m = i[10],
                            g = i[14],
                            v = i[3],
                            y = i[7],
                            w = i[11],
                            M = i[15],
                            E = n[0],
                            b = n[4],
                            x = n[8],
                            A = n[12],
                            T = n[1],
                            L = n[5],
                            N = n[9],
                            D = n[13],
                            S = n[2],
                            C = n[6],
                            _ = n[10],
                            I = n[14],
                            j = n[3],
                            O = n[7],
                            R = n[11],
                            z = n[15];
                          return (
                            (r[0] = o * E + s * T + a * S + c * j),
                            (r[4] = o * b + s * L + a * C + c * O),
                            (r[8] = o * x + s * N + a * _ + c * R),
                            (r[12] = o * A + s * D + a * I + c * z),
                            (r[1] = l * E + u * T + h * S + d * j),
                            (r[5] = l * b + u * L + h * C + d * O),
                            (r[9] = l * x + u * N + h * _ + d * R),
                            (r[13] = l * A + u * D + h * I + d * z),
                            (r[2] = p * E + f * T + m * S + g * j),
                            (r[6] = p * b + f * L + m * C + g * O),
                            (r[10] = p * x + f * N + m * _ + g * R),
                            (r[14] = p * A + f * D + m * I + g * z),
                            (r[3] = v * E + y * T + w * S + M * j),
                            (r[7] = v * b + y * L + w * C + M * O),
                            (r[11] = v * x + y * N + w * _ + M * R),
                            (r[15] = v * A + y * D + w * I + M * z),
                            this
                          );
                        },
                        multiplyScalar: function(t) {
                          var e = this.elements;
                          return (
                            (e[0] *= t),
                            (e[4] *= t),
                            (e[8] *= t),
                            (e[12] *= t),
                            (e[1] *= t),
                            (e[5] *= t),
                            (e[9] *= t),
                            (e[13] *= t),
                            (e[2] *= t),
                            (e[6] *= t),
                            (e[10] *= t),
                            (e[14] *= t),
                            (e[3] *= t),
                            (e[7] *= t),
                            (e[11] *= t),
                            (e[15] *= t),
                            this
                          );
                        },
                        applyToBufferAttribute: ((Le = new ke()),
                        function(t) {
                          for (var e = 0, i = t.count; e < i; e++)
                            (Le.x = t.getX(e)),
                              (Le.y = t.getY(e)),
                              (Le.z = t.getZ(e)),
                              Le.applyMatrix4(this),
                              t.setXYZ(e, Le.x, Le.y, Le.z);
                          return t;
                        }),
                        determinant: function() {
                          var t = this.elements,
                            e = t[0],
                            i = t[4],
                            n = t[8],
                            r = t[12],
                            o = t[1],
                            s = t[5],
                            a = t[9],
                            c = t[13],
                            l = t[2],
                            u = t[6],
                            h = t[10],
                            d = t[14];
                          return (
                            t[3] *
                              (+r * a * u -
                                n * c * u -
                                r * s * h +
                                i * c * h +
                                n * s * d -
                                i * a * d) +
                            t[7] *
                              (+e * a * d -
                                e * c * h +
                                r * o * h -
                                n * o * d +
                                n * c * l -
                                r * a * l) +
                            t[11] *
                              (+e * c * u -
                                e * s * d -
                                r * o * u +
                                i * o * d +
                                r * s * l -
                                i * c * l) +
                            t[15] *
                              (-n * s * l -
                                e * a * u +
                                e * s * h +
                                n * o * u -
                                i * o * h +
                                i * a * l)
                          );
                        },
                        transpose: function() {
                          var t,
                            e = this.elements;
                          return (
                            (t = e[1]),
                            (e[1] = e[4]),
                            (e[4] = t),
                            (t = e[2]),
                            (e[2] = e[8]),
                            (e[8] = t),
                            (t = e[6]),
                            (e[6] = e[9]),
                            (e[9] = t),
                            (t = e[3]),
                            (e[3] = e[12]),
                            (e[12] = t),
                            (t = e[7]),
                            (e[7] = e[13]),
                            (e[13] = t),
                            (t = e[11]),
                            (e[11] = e[14]),
                            (e[14] = t),
                            this
                          );
                        },
                        setPosition: function(t) {
                          var e = this.elements;
                          return (
                            (e[12] = t.x), (e[13] = t.y), (e[14] = t.z), this
                          );
                        },
                        getInverse: function(t, e) {
                          var i = this.elements,
                            n = t.elements,
                            r = n[0],
                            o = n[1],
                            s = n[2],
                            a = n[3],
                            c = n[4],
                            l = n[5],
                            u = n[6],
                            h = n[7],
                            d = n[8],
                            p = n[9],
                            f = n[10],
                            m = n[11],
                            g = n[12],
                            v = n[13],
                            y = n[14],
                            w = n[15],
                            M =
                              p * y * h -
                              v * f * h +
                              v * u * m -
                              l * y * m -
                              p * u * w +
                              l * f * w,
                            E =
                              g * f * h -
                              d * y * h -
                              g * u * m +
                              c * y * m +
                              d * u * w -
                              c * f * w,
                            b =
                              d * v * h -
                              g * p * h +
                              g * l * m -
                              c * v * m -
                              d * l * w +
                              c * p * w,
                            x =
                              g * p * u -
                              d * v * u -
                              g * l * f +
                              c * v * f +
                              d * l * y -
                              c * p * y,
                            A = r * M + o * E + s * b + a * x;
                          if (0 === A) {
                            var T =
                              "THREE.Matrix4: .getInverse() can't invert matrix, determinant is 0";
                            if (!0 === e) throw new Error(T);
                            return console.warn(T), this.identity();
                          }
                          var L = 1 / A;
                          return (
                            (i[0] = M * L),
                            (i[1] =
                              (v * f * a -
                                p * y * a -
                                v * s * m +
                                o * y * m +
                                p * s * w -
                                o * f * w) *
                              L),
                            (i[2] =
                              (l * y * a -
                                v * u * a +
                                v * s * h -
                                o * y * h -
                                l * s * w +
                                o * u * w) *
                              L),
                            (i[3] =
                              (p * u * a -
                                l * f * a -
                                p * s * h +
                                o * f * h +
                                l * s * m -
                                o * u * m) *
                              L),
                            (i[4] = E * L),
                            (i[5] =
                              (d * y * a -
                                g * f * a +
                                g * s * m -
                                r * y * m -
                                d * s * w +
                                r * f * w) *
                              L),
                            (i[6] =
                              (g * u * a -
                                c * y * a -
                                g * s * h +
                                r * y * h +
                                c * s * w -
                                r * u * w) *
                              L),
                            (i[7] =
                              (c * f * a -
                                d * u * a +
                                d * s * h -
                                r * f * h -
                                c * s * m +
                                r * u * m) *
                              L),
                            (i[8] = b * L),
                            (i[9] =
                              (g * p * a -
                                d * v * a -
                                g * o * m +
                                r * v * m +
                                d * o * w -
                                r * p * w) *
                              L),
                            (i[10] =
                              (c * v * a -
                                g * l * a +
                                g * o * h -
                                r * v * h -
                                c * o * w +
                                r * l * w) *
                              L),
                            (i[11] =
                              (d * l * a -
                                c * p * a -
                                d * o * h +
                                r * p * h +
                                c * o * m -
                                r * l * m) *
                              L),
                            (i[12] = x * L),
                            (i[13] =
                              (d * v * s -
                                g * p * s +
                                g * o * f -
                                r * v * f -
                                d * o * y +
                                r * p * y) *
                              L),
                            (i[14] =
                              (g * l * s -
                                c * v * s -
                                g * o * u +
                                r * v * u +
                                c * o * y -
                                r * l * y) *
                              L),
                            (i[15] =
                              (c * p * s -
                                d * l * s +
                                d * o * u -
                                r * p * u -
                                c * o * f +
                                r * l * f) *
                              L),
                            this
                          );
                        },
                        scale: function(t) {
                          var e = this.elements,
                            i = t.x,
                            n = t.y,
                            r = t.z;
                          return (
                            (e[0] *= i),
                            (e[4] *= n),
                            (e[8] *= r),
                            (e[1] *= i),
                            (e[5] *= n),
                            (e[9] *= r),
                            (e[2] *= i),
                            (e[6] *= n),
                            (e[10] *= r),
                            (e[3] *= i),
                            (e[7] *= n),
                            (e[11] *= r),
                            this
                          );
                        },
                        getMaxScaleOnAxis: function() {
                          var t = this.elements,
                            e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2],
                            i = t[4] * t[4] + t[5] * t[5] + t[6] * t[6],
                            n = t[8] * t[8] + t[9] * t[9] + t[10] * t[10];
                          return Math.sqrt(Math.max(e, i, n));
                        },
                        makeTranslation: function(t, e, i) {
                          return (
                            this.set(
                              1,
                              0,
                              0,
                              t,
                              0,
                              1,
                              0,
                              e,
                              0,
                              0,
                              1,
                              i,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        makeRotationX: function(t) {
                          var e = Math.cos(t),
                            i = Math.sin(t);
                          return (
                            this.set(
                              1,
                              0,
                              0,
                              0,
                              0,
                              e,
                              -i,
                              0,
                              0,
                              i,
                              e,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        makeRotationY: function(t) {
                          var e = Math.cos(t),
                            i = Math.sin(t);
                          return (
                            this.set(
                              e,
                              0,
                              i,
                              0,
                              0,
                              1,
                              0,
                              0,
                              -i,
                              0,
                              e,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        makeRotationZ: function(t) {
                          var e = Math.cos(t),
                            i = Math.sin(t);
                          return (
                            this.set(
                              e,
                              -i,
                              0,
                              0,
                              i,
                              e,
                              0,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        makeRotationAxis: function(t, e) {
                          var i = Math.cos(e),
                            n = Math.sin(e),
                            r = 1 - i,
                            o = t.x,
                            s = t.y,
                            a = t.z,
                            c = r * o,
                            l = r * s;
                          return (
                            this.set(
                              c * o + i,
                              c * s - n * a,
                              c * a + n * s,
                              0,
                              c * s + n * a,
                              l * s + i,
                              l * a - n * o,
                              0,
                              c * a - n * s,
                              l * a + n * o,
                              r * a * a + i,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        makeScale: function(t, e, i) {
                          return (
                            this.set(
                              t,
                              0,
                              0,
                              0,
                              0,
                              e,
                              0,
                              0,
                              0,
                              0,
                              i,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        makeShear: function(t, e, i) {
                          return (
                            this.set(
                              1,
                              e,
                              i,
                              0,
                              t,
                              1,
                              i,
                              0,
                              t,
                              e,
                              1,
                              0,
                              0,
                              0,
                              0,
                              1
                            ),
                            this
                          );
                        },
                        compose: function(t, e, i) {
                          return (
                            this.makeRotationFromQuaternion(e),
                            this.scale(i),
                            this.setPosition(t),
                            this
                          );
                        },
                        decompose: ((Ae = new ke()),
                        (Te = new Be()),
                        function(t, e, i) {
                          var n = this.elements,
                            r = Ae.set(n[0], n[1], n[2]).length(),
                            o = Ae.set(n[4], n[5], n[6]).length(),
                            s = Ae.set(n[8], n[9], n[10]).length();
                          this.determinant() < 0 && (r = -r),
                            (t.x = n[12]),
                            (t.y = n[13]),
                            (t.z = n[14]),
                            Te.copy(this);
                          var a = 1 / r,
                            c = 1 / o,
                            l = 1 / s;
                          return (
                            (Te.elements[0] *= a),
                            (Te.elements[1] *= a),
                            (Te.elements[2] *= a),
                            (Te.elements[4] *= c),
                            (Te.elements[5] *= c),
                            (Te.elements[6] *= c),
                            (Te.elements[8] *= l),
                            (Te.elements[9] *= l),
                            (Te.elements[10] *= l),
                            e.setFromRotationMatrix(Te),
                            (i.x = r),
                            (i.y = o),
                            (i.z = s),
                            this
                          );
                        }),
                        makePerspective: function(t, e, i, n, r, o) {
                          void 0 === o &&
                            console.warn(
                              'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.'
                            );
                          var s = this.elements,
                            a = 2 * r / (e - t),
                            c = 2 * r / (i - n),
                            l = (e + t) / (e - t),
                            u = (i + n) / (i - n),
                            h = -(o + r) / (o - r),
                            d = -2 * o * r / (o - r);
                          return (
                            (s[0] = a),
                            (s[4] = 0),
                            (s[8] = l),
                            (s[12] = 0),
                            (s[1] = 0),
                            (s[5] = c),
                            (s[9] = u),
                            (s[13] = 0),
                            (s[2] = 0),
                            (s[6] = 0),
                            (s[10] = h),
                            (s[14] = d),
                            (s[3] = 0),
                            (s[7] = 0),
                            (s[11] = -1),
                            (s[15] = 0),
                            this
                          );
                        },
                        makeOrthographic: function(t, e, i, n, r, o) {
                          var s = this.elements,
                            a = 1 / (e - t),
                            c = 1 / (i - n),
                            l = 1 / (o - r),
                            u = (e + t) * a,
                            h = (i + n) * c,
                            d = (o + r) * l;
                          return (
                            (s[0] = 2 * a),
                            (s[4] = 0),
                            (s[8] = 0),
                            (s[12] = -u),
                            (s[1] = 0),
                            (s[5] = 2 * c),
                            (s[9] = 0),
                            (s[13] = -h),
                            (s[2] = 0),
                            (s[6] = 0),
                            (s[10] = -2 * l),
                            (s[14] = -d),
                            (s[3] = 0),
                            (s[7] = 0),
                            (s[11] = 0),
                            (s[15] = 1),
                            this
                          );
                        },
                        equals: function(t) {
                          for (
                            var e = this.elements, i = t.elements, n = 0;
                            n < 16;
                            n++
                          )
                            if (e[n] !== i[n]) return !1;
                          return !0;
                        },
                        fromArray: function(t, e) {
                          void 0 === e && (e = 0);
                          for (var i = 0; i < 16; i++)
                            this.elements[i] = t[i + e];
                          return this;
                        },
                        toArray: function(t, e) {
                          void 0 === t && (t = []), void 0 === e && (e = 0);
                          var i = this.elements;
                          return (
                            (t[e] = i[0]),
                            (t[e + 1] = i[1]),
                            (t[e + 2] = i[2]),
                            (t[e + 3] = i[3]),
                            (t[e + 4] = i[4]),
                            (t[e + 5] = i[5]),
                            (t[e + 6] = i[6]),
                            (t[e + 7] = i[7]),
                            (t[e + 8] = i[8]),
                            (t[e + 9] = i[9]),
                            (t[e + 10] = i[10]),
                            (t[e + 11] = i[11]),
                            (t[e + 12] = i[12]),
                            (t[e + 13] = i[13]),
                            (t[e + 14] = i[14]),
                            (t[e + 15] = i[15]),
                            t
                          );
                        }
                      }),
                      (Pe.prototype = Object.create(Ie.prototype)),
                      (Pe.prototype.constructor = Pe),
                      (Pe.prototype.isDataTexture = !0),
                      (Ue.prototype = Object.create(Ie.prototype)),
                      (Ue.prototype.constructor = Ue),
                      (Ue.prototype.isCubeTexture = !0),
                      Object.defineProperty(Ue.prototype, 'images', {
                        get: function() {
                          return this.image;
                        },
                        set: function(t) {
                          this.image = t;
                        }
                      });
                    var Fe = new Ie(),
                      He = new Ue();
                    function Ve() {
                      (this.seq = []), (this.map = {});
                    }
                    var Ge = [],
                      Ye = [],
                      Qe = new Float32Array(16),
                      We = new Float32Array(9);
                    function qe(t, e, i) {
                      var n = t[0];
                      if (n <= 0 || n > 0) return t;
                      var r = e * i,
                        o = Ge[r];
                      if (
                        (void 0 === o &&
                          ((o = new Float32Array(r)), (Ge[r] = o)),
                        0 !== e)
                      ) {
                        n.toArray(o, 0);
                        for (var s = 1, a = 0; s !== e; ++s)
                          (a += i), t[s].toArray(o, a);
                      }
                      return o;
                    }
                    function Xe(t, e) {
                      var i = Ye[e];
                      void 0 === i && ((i = new Int32Array(e)), (Ye[e] = i));
                      for (var n = 0; n !== e; ++n) i[n] = t.allocTextureUnit();
                      return i;
                    }
                    function Ke(t, e) {
                      t.uniform1f(this.addr, e);
                    }
                    function Ze(t, e) {
                      t.uniform1i(this.addr, e);
                    }
                    function Je(t, e) {
                      void 0 === e.x
                        ? t.uniform2fv(this.addr, e)
                        : t.uniform2f(this.addr, e.x, e.y);
                    }
                    function $e(t, e) {
                      void 0 !== e.x
                        ? t.uniform3f(this.addr, e.x, e.y, e.z)
                        : void 0 !== e.r
                          ? t.uniform3f(this.addr, e.r, e.g, e.b)
                          : t.uniform3fv(this.addr, e);
                    }
                    function ti(t, e) {
                      void 0 === e.x
                        ? t.uniform4fv(this.addr, e)
                        : t.uniform4f(this.addr, e.x, e.y, e.z, e.w);
                    }
                    function ei(t, e) {
                      t.uniformMatrix2fv(this.addr, !1, e.elements || e);
                    }
                    function ii(t, e) {
                      void 0 === e.elements
                        ? t.uniformMatrix3fv(this.addr, !1, e)
                        : (We.set(e.elements),
                          t.uniformMatrix3fv(this.addr, !1, We));
                    }
                    function ni(t, e) {
                      void 0 === e.elements
                        ? t.uniformMatrix4fv(this.addr, !1, e)
                        : (Qe.set(e.elements),
                          t.uniformMatrix4fv(this.addr, !1, Qe));
                    }
                    function ri(t, e, i) {
                      var n = i.allocTextureUnit();
                      t.uniform1i(this.addr, n), i.setTexture2D(e || Fe, n);
                    }
                    function oi(t, e, i) {
                      var n = i.allocTextureUnit();
                      t.uniform1i(this.addr, n), i.setTextureCube(e || He, n);
                    }
                    function si(t, e) {
                      t.uniform2iv(this.addr, e);
                    }
                    function ai(t, e) {
                      t.uniform3iv(this.addr, e);
                    }
                    function ci(t, e) {
                      t.uniform4iv(this.addr, e);
                    }
                    function li(t, e) {
                      t.uniform1fv(this.addr, e);
                    }
                    function ui(t, e) {
                      t.uniform1iv(this.addr, e);
                    }
                    function hi(t, e) {
                      t.uniform2fv(this.addr, qe(e, this.size, 2));
                    }
                    function di(t, e) {
                      t.uniform3fv(this.addr, qe(e, this.size, 3));
                    }
                    function pi(t, e) {
                      t.uniform4fv(this.addr, qe(e, this.size, 4));
                    }
                    function fi(t, e) {
                      t.uniformMatrix2fv(this.addr, !1, qe(e, this.size, 4));
                    }
                    function mi(t, e) {
                      t.uniformMatrix3fv(this.addr, !1, qe(e, this.size, 9));
                    }
                    function gi(t, e) {
                      t.uniformMatrix4fv(this.addr, !1, qe(e, this.size, 16));
                    }
                    function vi(t, e, i) {
                      var n = e.length,
                        r = Xe(i, n);
                      t.uniform1iv(this.addr, r);
                      for (var o = 0; o !== n; ++o)
                        i.setTexture2D(e[o] || Fe, r[o]);
                    }
                    function yi(t, e, i) {
                      var n = e.length,
                        r = Xe(i, n);
                      t.uniform1iv(this.addr, r);
                      for (var o = 0; o !== n; ++o)
                        i.setTextureCube(e[o] || He, r[o]);
                    }
                    function wi(t, e, i) {
                      (this.id = t),
                        (this.addr = i),
                        (this.setValue = (function(t) {
                          switch (t) {
                            case 5126:
                              return Ke;
                            case 35664:
                              return Je;
                            case 35665:
                              return $e;
                            case 35666:
                              return ti;
                            case 35674:
                              return ei;
                            case 35675:
                              return ii;
                            case 35676:
                              return ni;
                            case 35678:
                            case 36198:
                              return ri;
                            case 35680:
                              return oi;
                            case 5124:
                            case 35670:
                              return Ze;
                            case 35667:
                            case 35671:
                              return si;
                            case 35668:
                            case 35672:
                              return ai;
                            case 35669:
                            case 35673:
                              return ci;
                          }
                        })(e.type));
                    }
                    function Mi(t, e, i) {
                      (this.id = t),
                        (this.addr = i),
                        (this.size = e.size),
                        (this.setValue = (function(t) {
                          switch (t) {
                            case 5126:
                              return li;
                            case 35664:
                              return hi;
                            case 35665:
                              return di;
                            case 35666:
                              return pi;
                            case 35674:
                              return fi;
                            case 35675:
                              return mi;
                            case 35676:
                              return gi;
                            case 35678:
                              return vi;
                            case 35680:
                              return yi;
                            case 5124:
                            case 35670:
                              return ui;
                            case 35667:
                            case 35671:
                              return si;
                            case 35668:
                            case 35672:
                              return ai;
                            case 35669:
                            case 35673:
                              return ci;
                          }
                        })(e.type));
                    }
                    function Ei(t) {
                      (this.id = t), Ve.call(this);
                    }
                    Ei.prototype.setValue = function(t, e) {
                      for (
                        var i = this.seq, n = 0, r = i.length;
                        n !== r;
                        ++n
                      ) {
                        var o = i[n];
                        o.setValue(t, e[o.id]);
                      }
                    };
                    var bi = /([\w\d_]+)(\])?(\[|\.)?/g;
                    function xi(t, e) {
                      t.seq.push(e), (t.map[e.id] = e);
                    }
                    function Ai(t, e, i) {
                      var n = t.name,
                        r = n.length;
                      for (bi.lastIndex = 0; ; ) {
                        var o = bi.exec(n),
                          s = bi.lastIndex,
                          a = o[1],
                          c = ']' === o[2],
                          l = o[3];
                        if (
                          (c && (a |= 0),
                          void 0 === l || ('[' === l && s + 2 === r))
                        ) {
                          xi(
                            i,
                            void 0 === l ? new wi(a, t, e) : new Mi(a, t, e)
                          );
                          break;
                        }
                        var u = i.map[a];
                        void 0 === u && xi(i, (u = new Ei(a))), (i = u);
                      }
                    }
                    function Ti(t, e, i) {
                      Ve.call(this), (this.renderer = i);
                      for (
                        var n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS),
                          r = 0;
                        r < n;
                        ++r
                      ) {
                        var o = t.getActiveUniform(e, r),
                          s = o.name;
                        Ai(o, t.getUniformLocation(e, s), this);
                      }
                    }
                    (Ti.prototype.setValue = function(t, e, i) {
                      var n = this.map[e];
                      void 0 !== n && n.setValue(t, i, this.renderer);
                    }),
                      (Ti.prototype.setOptional = function(t, e, i) {
                        var n = e[i];
                        void 0 !== n && this.setValue(t, i, n);
                      }),
                      (Ti.upload = function(t, e, i, n) {
                        for (var r = 0, o = e.length; r !== o; ++r) {
                          var s = e[r],
                            a = i[s.id];
                          !1 !== a.needsUpdate && s.setValue(t, a.value, n);
                        }
                      }),
                      (Ti.seqWithValue = function(t, e) {
                        for (var i = [], n = 0, r = t.length; n !== r; ++n) {
                          var o = t[n];
                          o.id in e && i.push(o);
                        }
                        return i;
                      });
                    var Li = {
                      aliceblue: 15792383,
                      antiquewhite: 16444375,
                      aqua: 65535,
                      aquamarine: 8388564,
                      azure: 15794175,
                      beige: 16119260,
                      bisque: 16770244,
                      black: 0,
                      blanchedalmond: 16772045,
                      blue: 255,
                      blueviolet: 9055202,
                      brown: 10824234,
                      burlywood: 14596231,
                      cadetblue: 6266528,
                      chartreuse: 8388352,
                      chocolate: 13789470,
                      coral: 16744272,
                      cornflowerblue: 6591981,
                      cornsilk: 16775388,
                      crimson: 14423100,
                      cyan: 65535,
                      darkblue: 139,
                      darkcyan: 35723,
                      darkgoldenrod: 12092939,
                      darkgray: 11119017,
                      darkgreen: 25600,
                      darkgrey: 11119017,
                      darkkhaki: 12433259,
                      darkmagenta: 9109643,
                      darkolivegreen: 5597999,
                      darkorange: 16747520,
                      darkorchid: 10040012,
                      darkred: 9109504,
                      darksalmon: 15308410,
                      darkseagreen: 9419919,
                      darkslateblue: 4734347,
                      darkslategray: 3100495,
                      darkslategrey: 3100495,
                      darkturquoise: 52945,
                      darkviolet: 9699539,
                      deeppink: 16716947,
                      deepskyblue: 49151,
                      dimgray: 6908265,
                      dimgrey: 6908265,
                      dodgerblue: 2003199,
                      firebrick: 11674146,
                      floralwhite: 16775920,
                      forestgreen: 2263842,
                      fuchsia: 16711935,
                      gainsboro: 14474460,
                      ghostwhite: 16316671,
                      gold: 16766720,
                      goldenrod: 14329120,
                      gray: 8421504,
                      green: 32768,
                      greenyellow: 11403055,
                      grey: 8421504,
                      honeydew: 15794160,
                      hotpink: 16738740,
                      indianred: 13458524,
                      indigo: 4915330,
                      ivory: 16777200,
                      khaki: 15787660,
                      lavender: 15132410,
                      lavenderblush: 16773365,
                      lawngreen: 8190976,
                      lemonchiffon: 16775885,
                      lightblue: 11393254,
                      lightcoral: 15761536,
                      lightcyan: 14745599,
                      lightgoldenrodyellow: 16448210,
                      lightgray: 13882323,
                      lightgreen: 9498256,
                      lightgrey: 13882323,
                      lightpink: 16758465,
                      lightsalmon: 16752762,
                      lightseagreen: 2142890,
                      lightskyblue: 8900346,
                      lightslategray: 7833753,
                      lightslategrey: 7833753,
                      lightsteelblue: 11584734,
                      lightyellow: 16777184,
                      lime: 65280,
                      limegreen: 3329330,
                      linen: 16445670,
                      magenta: 16711935,
                      maroon: 8388608,
                      mediumaquamarine: 6737322,
                      mediumblue: 205,
                      mediumorchid: 12211667,
                      mediumpurple: 9662683,
                      mediumseagreen: 3978097,
                      mediumslateblue: 8087790,
                      mediumspringgreen: 64154,
                      mediumturquoise: 4772300,
                      mediumvioletred: 13047173,
                      midnightblue: 1644912,
                      mintcream: 16121850,
                      mistyrose: 16770273,
                      moccasin: 16770229,
                      navajowhite: 16768685,
                      navy: 128,
                      oldlace: 16643558,
                      olive: 8421376,
                      olivedrab: 7048739,
                      orange: 16753920,
                      orangered: 16729344,
                      orchid: 14315734,
                      palegoldenrod: 15657130,
                      palegreen: 10025880,
                      paleturquoise: 11529966,
                      palevioletred: 14381203,
                      papayawhip: 16773077,
                      peachpuff: 16767673,
                      peru: 13468991,
                      pink: 16761035,
                      plum: 14524637,
                      powderblue: 11591910,
                      purple: 8388736,
                      rebeccapurple: 6697881,
                      red: 16711680,
                      rosybrown: 12357519,
                      royalblue: 4286945,
                      saddlebrown: 9127187,
                      salmon: 16416882,
                      sandybrown: 16032864,
                      seagreen: 3050327,
                      seashell: 16774638,
                      sienna: 10506797,
                      silver: 12632256,
                      skyblue: 8900331,
                      slateblue: 6970061,
                      slategray: 7372944,
                      slategrey: 7372944,
                      snow: 16775930,
                      springgreen: 65407,
                      steelblue: 4620980,
                      tan: 13808780,
                      teal: 32896,
                      thistle: 14204888,
                      tomato: 16737095,
                      turquoise: 4251856,
                      violet: 15631086,
                      wheat: 16113331,
                      white: 16777215,
                      whitesmoke: 16119285,
                      yellow: 16776960,
                      yellowgreen: 10145074
                    };
                    function Ni(t, e, i) {
                      return void 0 === e && void 0 === i
                        ? this.set(t)
                        : this.setRGB(t, e, i);
                    }
                    Object.assign(Ni.prototype, {
                      isColor: !0,
                      r: 1,
                      g: 1,
                      b: 1,
                      set: function(t) {
                        return (
                          t && t.isColor
                            ? this.copy(t)
                            : 'number' == typeof t
                              ? this.setHex(t)
                              : 'string' == typeof t && this.setStyle(t),
                          this
                        );
                      },
                      setScalar: function(t) {
                        return (this.r = t), (this.g = t), (this.b = t), this;
                      },
                      setHex: function(t) {
                        return (
                          (t = Math.floor(t)),
                          (this.r = ((t >> 16) & 255) / 255),
                          (this.g = ((t >> 8) & 255) / 255),
                          (this.b = (255 & t) / 255),
                          this
                        );
                      },
                      setRGB: function(t, e, i) {
                        return (this.r = t), (this.g = e), (this.b = i), this;
                      },
                      setHSL: (function() {
                        function t(t, e, i) {
                          return (
                            i < 0 && (i += 1),
                            i > 1 && (i -= 1),
                            i < 1 / 6
                              ? t + 6 * (e - t) * i
                              : i < 0.5
                                ? e
                                : i < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - i) : t
                          );
                        }
                        return function(e, i, n) {
                          if (
                            ((e = ue.euclideanModulo(e, 1)),
                            (i = ue.clamp(i, 0, 1)),
                            (n = ue.clamp(n, 0, 1)),
                            0 === i)
                          )
                            this.r = this.g = this.b = n;
                          else {
                            var r = n <= 0.5 ? n * (1 + i) : n + i - n * i,
                              o = 2 * n - r;
                            (this.r = t(o, r, e + 1 / 3)),
                              (this.g = t(o, r, e)),
                              (this.b = t(o, r, e - 1 / 3));
                          }
                          return this;
                        };
                      })(),
                      setStyle: function(t) {
                        function e(e) {
                          void 0 !== e &&
                            parseFloat(e) < 1 &&
                            console.warn(
                              'THREE.Color: Alpha component of ' +
                                t +
                                ' will be ignored.'
                            );
                        }
                        var i;
                        if ((i = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(t))) {
                          var n,
                            r = i[1],
                            o = i[2];
                          switch (r) {
                            case 'rgb':
                            case 'rgba':
                              if (
                                (n = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                                  o
                                ))
                              )
                                return (
                                  (this.r =
                                    Math.min(255, parseInt(n[1], 10)) / 255),
                                  (this.g =
                                    Math.min(255, parseInt(n[2], 10)) / 255),
                                  (this.b =
                                    Math.min(255, parseInt(n[3], 10)) / 255),
                                  e(n[5]),
                                  this
                                );
                              if (
                                (n = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                                  o
                                ))
                              )
                                return (
                                  (this.r =
                                    Math.min(100, parseInt(n[1], 10)) / 100),
                                  (this.g =
                                    Math.min(100, parseInt(n[2], 10)) / 100),
                                  (this.b =
                                    Math.min(100, parseInt(n[3], 10)) / 100),
                                  e(n[5]),
                                  this
                                );
                              break;
                            case 'hsl':
                            case 'hsla':
                              if (
                                (n = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
                                  o
                                ))
                              ) {
                                var s = parseFloat(n[1]) / 360,
                                  a = parseInt(n[2], 10) / 100,
                                  c = parseInt(n[3], 10) / 100;
                                return e(n[5]), this.setHSL(s, a, c);
                              }
                          }
                        } else if ((i = /^\#([A-Fa-f0-9]+)$/.exec(t))) {
                          var l,
                            u = (l = i[1]).length;
                          if (3 === u)
                            return (
                              (this.r =
                                parseInt(l.charAt(0) + l.charAt(0), 16) / 255),
                              (this.g =
                                parseInt(l.charAt(1) + l.charAt(1), 16) / 255),
                              (this.b =
                                parseInt(l.charAt(2) + l.charAt(2), 16) / 255),
                              this
                            );
                          if (6 === u)
                            return (
                              (this.r =
                                parseInt(l.charAt(0) + l.charAt(1), 16) / 255),
                              (this.g =
                                parseInt(l.charAt(2) + l.charAt(3), 16) / 255),
                              (this.b =
                                parseInt(l.charAt(4) + l.charAt(5), 16) / 255),
                              this
                            );
                        }
                        t &&
                          t.length > 0 &&
                          (void 0 !== (l = Li[t])
                            ? this.setHex(l)
                            : console.warn('THREE.Color: Unknown color ' + t));
                        return this;
                      },
                      clone: function() {
                        return new this.constructor(this.r, this.g, this.b);
                      },
                      copy: function(t) {
                        return (
                          (this.r = t.r), (this.g = t.g), (this.b = t.b), this
                        );
                      },
                      copyGammaToLinear: function(t, e) {
                        return (
                          void 0 === e && (e = 2),
                          (this.r = Math.pow(t.r, e)),
                          (this.g = Math.pow(t.g, e)),
                          (this.b = Math.pow(t.b, e)),
                          this
                        );
                      },
                      copyLinearToGamma: function(t, e) {
                        void 0 === e && (e = 2);
                        var i = e > 0 ? 1 / e : 1;
                        return (
                          (this.r = Math.pow(t.r, i)),
                          (this.g = Math.pow(t.g, i)),
                          (this.b = Math.pow(t.b, i)),
                          this
                        );
                      },
                      convertGammaToLinear: function() {
                        var t = this.r,
                          e = this.g,
                          i = this.b;
                        return (
                          (this.r = t * t),
                          (this.g = e * e),
                          (this.b = i * i),
                          this
                        );
                      },
                      convertLinearToGamma: function() {
                        return (
                          (this.r = Math.sqrt(this.r)),
                          (this.g = Math.sqrt(this.g)),
                          (this.b = Math.sqrt(this.b)),
                          this
                        );
                      },
                      getHex: function() {
                        return (
                          ((255 * this.r) << 16) ^
                          ((255 * this.g) << 8) ^
                          ((255 * this.b) << 0)
                        );
                      },
                      getHexString: function() {
                        return ('000000' + this.getHex().toString(16)).slice(
                          -6
                        );
                      },
                      getHSL: function(t) {
                        var e,
                          i,
                          n = t || { h: 0, s: 0, l: 0 },
                          r = this.r,
                          o = this.g,
                          s = this.b,
                          a = Math.max(r, o, s),
                          c = Math.min(r, o, s),
                          l = (c + a) / 2;
                        if (c === a) (e = 0), (i = 0);
                        else {
                          var u = a - c;
                          switch (((i =
                            l <= 0.5 ? u / (a + c) : u / (2 - a - c)),
                          a)) {
                            case r:
                              e = (o - s) / u + (o < s ? 6 : 0);
                              break;
                            case o:
                              e = (s - r) / u + 2;
                              break;
                            case s:
                              e = (r - o) / u + 4;
                          }
                          e /= 6;
                        }
                        return (n.h = e), (n.s = i), (n.l = l), n;
                      },
                      getStyle: function() {
                        return (
                          'rgb(' +
                          ((255 * this.r) | 0) +
                          ',' +
                          ((255 * this.g) | 0) +
                          ',' +
                          ((255 * this.b) | 0) +
                          ')'
                        );
                      },
                      offsetHSL: function(t, e, i) {
                        var n = this.getHSL();
                        return (
                          (n.h += t),
                          (n.s += e),
                          (n.l += i),
                          this.setHSL(n.h, n.s, n.l),
                          this
                        );
                      },
                      add: function(t) {
                        return (
                          (this.r += t.r),
                          (this.g += t.g),
                          (this.b += t.b),
                          this
                        );
                      },
                      addColors: function(t, e) {
                        return (
                          (this.r = t.r + e.r),
                          (this.g = t.g + e.g),
                          (this.b = t.b + e.b),
                          this
                        );
                      },
                      addScalar: function(t) {
                        return (
                          (this.r += t), (this.g += t), (this.b += t), this
                        );
                      },
                      sub: function(t) {
                        return (
                          (this.r = Math.max(0, this.r - t.r)),
                          (this.g = Math.max(0, this.g - t.g)),
                          (this.b = Math.max(0, this.b - t.b)),
                          this
                        );
                      },
                      multiply: function(t) {
                        return (
                          (this.r *= t.r),
                          (this.g *= t.g),
                          (this.b *= t.b),
                          this
                        );
                      },
                      multiplyScalar: function(t) {
                        return (
                          (this.r *= t), (this.g *= t), (this.b *= t), this
                        );
                      },
                      lerp: function(t, e) {
                        return (
                          (this.r += (t.r - this.r) * e),
                          (this.g += (t.g - this.g) * e),
                          (this.b += (t.b - this.b) * e),
                          this
                        );
                      },
                      equals: function(t) {
                        return (
                          t.r === this.r && t.g === this.g && t.b === this.b
                        );
                      },
                      fromArray: function(t, e) {
                        return (
                          void 0 === e && (e = 0),
                          (this.r = t[e]),
                          (this.g = t[e + 1]),
                          (this.b = t[e + 2]),
                          this
                        );
                      },
                      toArray: function(t, e) {
                        return (
                          void 0 === t && (t = []),
                          void 0 === e && (e = 0),
                          (t[e] = this.r),
                          (t[e + 1] = this.g),
                          (t[e + 2] = this.b),
                          t
                        );
                      },
                      toJSON: function() {
                        return this.getHex();
                      }
                    });
                    var Di,
                      Si,
                      Ci = {
                        common: {
                          diffuse: { value: new Ni(15658734) },
                          opacity: { value: 1 },
                          map: { value: null },
                          offsetRepeat: { value: new je(0, 0, 1, 1) },
                          alphaMap: { value: null }
                        },
                        specularmap: { specularMap: { value: null } },
                        envmap: {
                          envMap: { value: null },
                          flipEnvMap: { value: -1 },
                          reflectivity: { value: 1 },
                          refractionRatio: { value: 0.98 }
                        },
                        aomap: {
                          aoMap: { value: null },
                          aoMapIntensity: { value: 1 }
                        },
                        lightmap: {
                          lightMap: { value: null },
                          lightMapIntensity: { value: 1 }
                        },
                        emissivemap: { emissiveMap: { value: null } },
                        bumpmap: {
                          bumpMap: { value: null },
                          bumpScale: { value: 1 }
                        },
                        normalmap: {
                          normalMap: { value: null },
                          normalScale: { value: new he(1, 1) }
                        },
                        displacementmap: {
                          displacementMap: { value: null },
                          displacementScale: { value: 1 },
                          displacementBias: { value: 0 }
                        },
                        roughnessmap: { roughnessMap: { value: null } },
                        metalnessmap: { metalnessMap: { value: null } },
                        gradientmap: { gradientMap: { value: null } },
                        fog: {
                          fogDensity: { value: 25e-5 },
                          fogNear: { value: 1 },
                          fogFar: { value: 2e3 },
                          fogColor: { value: new Ni(16777215) }
                        },
                        lights: {
                          ambientLightColor: { value: [] },
                          directionalLights: {
                            value: [],
                            properties: {
                              direction: {},
                              color: {},
                              shadow: {},
                              shadowBias: {},
                              shadowRadius: {},
                              shadowMapSize: {}
                            }
                          },
                          directionalShadowMap: { value: [] },
                          directionalShadowMatrix: { value: [] },
                          spotLights: {
                            value: [],
                            properties: {
                              color: {},
                              position: {},
                              direction: {},
                              distance: {},
                              coneCos: {},
                              penumbraCos: {},
                              decay: {},
                              shadow: {},
                              shadowBias: {},
                              shadowRadius: {},
                              shadowMapSize: {}
                            }
                          },
                          spotShadowMap: { value: [] },
                          spotShadowMatrix: { value: [] },
                          pointLights: {
                            value: [],
                            properties: {
                              color: {},
                              position: {},
                              decay: {},
                              distance: {},
                              shadow: {},
                              shadowBias: {},
                              shadowRadius: {},
                              shadowMapSize: {},
                              shadowCameraNear: {},
                              shadowCameraFar: {}
                            }
                          },
                          pointShadowMap: { value: [] },
                          pointShadowMatrix: { value: [] },
                          hemisphereLights: {
                            value: [],
                            properties: {
                              direction: {},
                              skyColor: {},
                              groundColor: {}
                            }
                          },
                          rectAreaLights: {
                            value: [],
                            properties: {
                              color: {},
                              position: {},
                              width: {},
                              height: {}
                            }
                          }
                        },
                        points: {
                          diffuse: { value: new Ni(15658734) },
                          opacity: { value: 1 },
                          size: { value: 1 },
                          scale: { value: 1 },
                          map: { value: null },
                          offsetRepeat: { value: new je(0, 0, 1, 1) }
                        }
                      },
                      _i = {
                        merge: function(t) {
                          for (var e = {}, i = 0; i < t.length; i++) {
                            var n = this.clone(t[i]);
                            for (var r in n) e[r] = n[r];
                          }
                          return e;
                        },
                        clone: function(t) {
                          var e = {};
                          for (var i in t) {
                            e[i] = {};
                            for (var n in t[i]) {
                              var r = t[i][n];
                              r &&
                              (r.isColor ||
                                r.isMatrix3 ||
                                r.isMatrix4 ||
                                r.isVector2 ||
                                r.isVector3 ||
                                r.isVector4 ||
                                r.isTexture)
                                ? (e[i][n] = r.clone())
                                : Array.isArray(r)
                                  ? (e[i][n] = r.slice())
                                  : (e[i][n] = r);
                            }
                          }
                          return e;
                        }
                      },
                      Ii = {
                        alphamap_fragment:
                          '#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif\n',
                        alphamap_pars_fragment:
                          '#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif\n',
                        alphatest_fragment:
                          '#ifdef ALPHATEST\n\tif ( diffuseColor.a < ALPHATEST ) discard;\n#endif\n',
                        aomap_fragment:
                          '#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif\n',
                        aomap_pars_fragment:
                          '#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif',
                        begin_vertex:
                          '\nvec3 transformed = vec3( position );\n',
                        beginnormal_vertex:
                          '\nvec3 objectNormal = vec3( normal );\n',
                        bsdfs:
                          'float punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tif( decayExponent > 0.0 ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tfloat maxDistanceCutoffFactor = pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\treturn distanceFalloff * maxDistanceCutoffFactor;\n#else\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n#endif\n\t}\n\treturn 1.0;\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNL = saturate( dot( geometry.normal, incidentLight.direction ) );\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE  = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS  = 0.5 / LUT_SIZE;\n\tfloat theta = acos( dot( N, V ) );\n\tvec2 uv = vec2(\n\t\tsqrt( saturate( roughness ) ),\n\t\tsaturate( theta / ( 0.5 * PI ) ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.86267 + (0.49788 + 0.01436 * y ) * y;\n\tfloat b = 3.45068 + (4.18814 + y) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = (x > 0.0) ? v : 0.5 * inversesqrt( 1.0 - x * x ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transpose( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tvec3 result = vec3( LTC_ClippedSphereFormFactor( vectorFormFactor ) );\n\treturn result;\n}\nvec3 BRDF_Specular_GGX_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 AB = vec2( -1.04, 1.04 ) * a004 + r.zw;\n\treturn specularColor * AB.x + AB.y;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH = saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH = saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, dotLH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n',
                        bumpmap_pars_fragment:
                          '#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 );\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif\n',
                        clipping_planes_fragment:
                          '#if NUM_CLIPPING_PLANES > 0\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; ++ i ) {\n\t\tvec4 plane = clippingPlanes[ i ];\n\t\tif ( dot( vViewPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t\t\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; ++ i ) {\n\t\t\tvec4 plane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vViewPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\tif ( clipped ) discard;\n\t\n\t#endif\n#endif\n',
                        clipping_planes_pars_fragment:
                          '#if NUM_CLIPPING_PLANES > 0\n\t#if ! defined( PHYSICAL ) && ! defined( PHONG )\n\t\tvarying vec3 vViewPosition;\n\t#endif\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif\n',
                        clipping_planes_pars_vertex:
                          '#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvarying vec3 vViewPosition;\n#endif\n',
                        clipping_planes_vertex:
                          '#if NUM_CLIPPING_PLANES > 0 && ! defined( PHYSICAL ) && ! defined( PHONG )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n',
                        color_fragment:
                          '#ifdef USE_COLOR\n\tdiffuseColor.rgb *= vColor;\n#endif',
                        color_pars_fragment:
                          '#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif\n',
                        color_pars_vertex:
                          '#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif',
                        color_vertex:
                          '#ifdef USE_COLOR\n\tvColor.xyz = color.xyz;\n#endif',
                        common:
                          '#define PI 3.14159265359\n#define PI2 6.28318530718\n#define PI_HALF 1.5707963267949\n#define RECIPROCAL_PI 0.31830988618\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\tfloat distance = dot( planeNormal, point - pointOnPlane );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnPlane, planeNormal ) );\n}\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transpose( const in mat3 v ) {\n\tmat3 tmp;\n\ttmp[0] = vec3(v[0].x, v[1].x, v[2].x);\n\ttmp[1] = vec3(v[0].y, v[1].y, v[2].y);\n\ttmp[2] = vec3(v[0].z, v[1].z, v[2].z);\n\treturn tmp;\n}\n',
                        cube_uv_reflection_fragment:
                          '#ifdef ENVMAP_TYPE_CUBE_UV\n#define cubeUV_textureSize (1024.0)\nint getFaceFromDirection(vec3 direction) {\n\tvec3 absDirection = abs(direction);\n\tint face = -1;\n\tif( absDirection.x > absDirection.z ) {\n\t\tif(absDirection.x > absDirection.y )\n\t\t\tface = direction.x > 0.0 ? 0 : 3;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\telse {\n\t\tif(absDirection.z > absDirection.y )\n\t\t\tface = direction.z > 0.0 ? 2 : 5;\n\t\telse\n\t\t\tface = direction.y > 0.0 ? 1 : 4;\n\t}\n\treturn face;\n}\n#define cubeUV_maxLods1  (log2(cubeUV_textureSize*0.25) - 1.0)\n#define cubeUV_rangeClamp (exp2((6.0 - 1.0) * 2.0))\nvec2 MipLevelInfo( vec3 vec, float roughnessLevel, float roughness ) {\n\tfloat scale = exp2(cubeUV_maxLods1 - roughnessLevel);\n\tfloat dxRoughness = dFdx(roughness);\n\tfloat dyRoughness = dFdy(roughness);\n\tvec3 dx = dFdx( vec * scale * dxRoughness );\n\tvec3 dy = dFdy( vec * scale * dyRoughness );\n\tfloat d = max( dot( dx, dx ), dot( dy, dy ) );\n\td = clamp(d, 1.0, cubeUV_rangeClamp);\n\tfloat mipLevel = 0.5 * log2(d);\n\treturn vec2(floor(mipLevel), fract(mipLevel));\n}\n#define cubeUV_maxLods2 (log2(cubeUV_textureSize*0.25) - 2.0)\n#define cubeUV_rcpTextureSize (1.0 / cubeUV_textureSize)\nvec2 getCubeUV(vec3 direction, float roughnessLevel, float mipLevel) {\n\tmipLevel = roughnessLevel > cubeUV_maxLods2 - 3.0 ? 0.0 : mipLevel;\n\tfloat a = 16.0 * cubeUV_rcpTextureSize;\n\tvec2 exp2_packed = exp2( vec2( roughnessLevel, mipLevel ) );\n\tvec2 rcp_exp2_packed = vec2( 1.0 ) / exp2_packed;\n\tfloat powScale = exp2_packed.x * exp2_packed.y;\n\tfloat scale = rcp_exp2_packed.x * rcp_exp2_packed.y * 0.25;\n\tfloat mipOffset = 0.75*(1.0 - rcp_exp2_packed.y) * rcp_exp2_packed.x;\n\tbool bRes = mipLevel == 0.0;\n\tscale =  bRes && (scale < a) ? a : scale;\n\tvec3 r;\n\tvec2 offset;\n\tint face = getFaceFromDirection(direction);\n\tfloat rcpPowScale = 1.0 / powScale;\n\tif( face == 0) {\n\t\tr = vec3(direction.x, -direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 1) {\n\t\tr = vec3(direction.y, direction.x, direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 2) {\n\t\tr = vec3(direction.z, direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.75 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? a : offset.y;\n\t}\n\telse if( face == 3) {\n\t\tr = vec3(direction.x, direction.z, direction.y);\n\t\toffset = vec2(0.0+mipOffset,0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse if( face == 4) {\n\t\tr = vec3(direction.y, direction.x, -direction.z);\n\t\toffset = vec2(scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\telse {\n\t\tr = vec3(direction.z, -direction.x, direction.y);\n\t\toffset = vec2(2.0*scale+mipOffset, 0.5 * rcpPowScale);\n\t\toffset.y = bRes && (offset.y < 2.0*a) ? 0.0 : offset.y;\n\t}\n\tr = normalize(r);\n\tfloat texelOffset = 0.5 * cubeUV_rcpTextureSize;\n\tvec2 s = ( r.yz / abs( r.x ) + vec2( 1.0 ) ) * 0.5;\n\tvec2 base = offset + vec2( texelOffset );\n\treturn base + s * ( scale - 2.0 * texelOffset );\n}\n#define cubeUV_maxLods3 (log2(cubeUV_textureSize*0.25) - 3.0)\nvec4 textureCubeUV(vec3 reflectedDirection, float roughness ) {\n\tfloat roughnessVal = roughness* cubeUV_maxLods3;\n\tfloat r1 = floor(roughnessVal);\n\tfloat r2 = r1 + 1.0;\n\tfloat t = fract(roughnessVal);\n\tvec2 mipInfo = MipLevelInfo(reflectedDirection, r1, roughness);\n\tfloat s = mipInfo.y;\n\tfloat level0 = mipInfo.x;\n\tfloat level1 = level0 + 1.0;\n\tlevel1 = level1 > 5.0 ? 5.0 : level1;\n\tlevel0 += min( floor( s + 0.5 ), 5.0 );\n\tvec2 uv_10 = getCubeUV(reflectedDirection, r1, level0);\n\tvec4 color10 = envMapTexelToLinear(texture2D(envMap, uv_10));\n\tvec2 uv_20 = getCubeUV(reflectedDirection, r2, level0);\n\tvec4 color20 = envMapTexelToLinear(texture2D(envMap, uv_20));\n\tvec4 result = mix(color10, color20, t);\n\treturn vec4(result.rgb, 1.0);\n}\n#endif\n',
                        defaultnormal_vertex:
                          'vec3 transformedNormal = normalMatrix * objectNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n',
                        displacementmap_pars_vertex:
                          '#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif\n',
                        displacementmap_vertex:
                          '#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n#endif\n',
                        emissivemap_fragment:
                          '#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\temissiveColor.rgb = emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif\n',
                        emissivemap_pars_fragment:
                          '#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif\n',
                        encodings_fragment:
                          '  gl_FragColor = linearToOutputTexel( gl_FragColor );\n',
                        encodings_pars_fragment:
                          '\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.w );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent = max( max( value.r, value.g ), value.b );\n\tfloat fExp = clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.xyz * value.w * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat M      = clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM            = ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB = max( value.x, max( value.g, value.b ) );\n\tfloat D      = max( maxRange / maxRGB, 1.0 );\n\tD            = min( floor( D ) / 255.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM = mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value )  {\n\tvec3 Xp_Y_XYZp = value.rgb * cLogLuvM;\n\tXp_Y_XYZp = max(Xp_Y_XYZp, vec3(1e-6, 1e-6, 1e-6));\n\tvec4 vResult;\n\tvResult.xy = Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le = 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w = fract(Le);\n\tvResult.z = (Le - (floor(vResult.w*255.0))/255.0)/255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM = mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le = value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y = exp2((Le - 127.0) / 2.0);\n\tXp_Y_XYZp.z = Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x = value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB = Xp_Y_XYZp.rgb * cLogLuvInverseM;\n\treturn vec4( max(vRGB, 0.0), 1.0 );\n}\n',
                        envmap_fragment:
                          '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\tvec2 sampleUV;\n\t\treflectVec = normalize( reflectVec );\n\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\tvec4 envColor = texture2D( envMap, sampleUV );\n\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\treflectVec = normalize( reflectVec );\n\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0, 0.0, 1.0 ) );\n\t\tvec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\tenvColor = envMapTexelToLinear( envColor );\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif\n',
                        envmap_pars_fragment:
                          '#if defined( USE_ENVMAP ) || defined( PHYSICAL )\n\tuniform float reflectivity;\n\tuniform float envMapIntensity;\n#endif\n#ifdef USE_ENVMAP\n\t#if ! defined( PHYSICAL ) && ( defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) )\n\t\tvarying vec3 vWorldPosition;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\tuniform float flipEnvMap;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( PHYSICAL )\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif\n',
                        envmap_pars_vertex:
                          '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif\n',
                        envmap_vertex:
                          '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif\n',
                        fog_vertex:
                          '\n#ifdef USE_FOG\nfogDepth = -mvPosition.z;\n#endif',
                        fog_pars_vertex:
                          '#ifdef USE_FOG\n  varying float fogDepth;\n#endif\n',
                        fog_fragment:
                          '#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * fogDepth * fogDepth * LOG2 ) );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif\n',
                        fog_pars_fragment:
                          '#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif\n',
                        gradientmap_pars_fragment:
                          '#ifdef TOON\n\tuniform sampler2D gradientMap;\n\tvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\t\tfloat dotNL = dot( normal, lightDirection );\n\t\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t\t#ifdef USE_GRADIENTMAP\n\t\t\treturn texture2D( gradientMap, coord ).rgb;\n\t\t#else\n\t\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t\t#endif\n\t}\n#endif\n',
                        lightmap_fragment:
                          '#ifdef USE_LIGHTMAP\n\treflectedLight.indirectDiffuse += PI * texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n#endif\n',
                        lightmap_pars_fragment:
                          '#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif',
                        lights_lambert_vertex:
                          'vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\n#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = PI * directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvLightFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry );\n\t\t#endif\n\t}\n#endif\n',
                        lights_pars:
                          'uniform vec3 ambientLightColor;\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color = directionalLight.color;\n\t\tdirectLight.direction = directionalLight.direction;\n\t\tdirectLight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t\tfloat shadowCameraNear;\n\t\tfloat shadowCameraFar;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tdirectLight.color = pointLight.color;\n\t\tdirectLight.color *= punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible = ( directLight.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t\tint shadow;\n\t\tfloat shadowBias;\n\t\tfloat shadowRadius;\n\t\tvec2 shadowMapSize;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight  ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tdirectLight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tfloat angleCos = dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos > spotLight.coneCos ) {\n\t\t\tfloat spotEffect = smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color = spotLight.color;\n\t\t\tdirectLight.color *= spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible = true;\n\t\t} else {\n\t\t\tdirectLight.color = vec3( 0.0 );\n\t\t\tdirectLight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltcMat;\tuniform sampler2D ltcMag;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL = dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *= PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif\n#if defined( USE_ENVMAP ) && defined( PHYSICAL )\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal = inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryVec = vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\tvec4 envMapColor = textureCubeUV( queryVec, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor = vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar = float( maxMIPLevel );\n\t\tfloat desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( pow2( blinnShininessExponent ) + 1.0 );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in GeometricContext geometry, const in float blinnShininessExponent, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( -geometry.viewDir, geometry.normal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( -geometry.viewDir, geometry.normal, refractionRatio );\n\t\t#endif\n\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel = getSpecularMIPLevel( blinnShininessExponent, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 queryReflectVec = vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\tvec4 envMapColor = textureCubeUV(queryReflectVec, BlinnExponentToGGXRoughness(blinnShininessExponent));\n\t\t#elif defined( ENVMAP_TYPE_EQUIREC )\n\t\t\tvec2 sampleUV;\n\t\t\tsampleUV.y = asin( clamp( reflectVec.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\t\t\tsampleUV.x = atan( reflectVec.z, reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, sampleUV, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, sampleUV, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_SPHERE )\n\t\t\tvec3 reflectView = normalize( ( viewMatrix * vec4( reflectVec, 0.0 ) ).xyz + vec3( 0.0,0.0,1.0 ) );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor = texture2DLodEXT( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb = envMapTexelToLinear( envMapColor ).rgb;\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif\n',
                        lights_phong_fragment:
                          'BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;\n',
                        lights_phong_pars_fragment:
                          'varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3\tdiffuseColor;\n\tvec3\tspecularColor;\n\tfloat\tspecularShininess;\n\tfloat\tspecularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifdef TOON\n\t\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#else\n\t\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\t\tvec3 irradiance = dotNL * directLight.color;\n\t#endif\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)\n',
                        lights_physical_fragment:
                          'PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nmaterial.specularRoughness = clamp( roughnessFactor, 0.04, 1.0 );\n#ifdef STANDARD\n\tmaterial.specularColor = mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.clearCoat = saturate( clearCoat );\tmaterial.clearCoatRoughness = clamp( clearCoatRoughness, 0.04, 1.0 );\n#endif\n',
                        lights_physical_pars_fragment:
                          'struct PhysicalMaterial {\n\tvec3\tdiffuseColor;\n\tfloat\tspecularRoughness;\n\tvec3\tspecularColor;\n\t#ifndef STANDARD\n\t\tfloat clearCoat;\n\t\tfloat clearCoatRoughness;\n\t#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearCoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos - halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos + halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos + halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos - halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tfloat norm = texture2D( ltcMag, uv ).a;\n\t\tvec4 t = texture2D( ltcMat, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3(   1,   0, t.y ),\n\t\t\tvec3(   0, t.z,   0 ),\n\t\t\tvec3( t.w,   0, t.x )\n\t\t);\n\t\treflectedLight.directSpecular += lightColor * material.specularColor * norm * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *= PI;\n\t#endif\n\t#ifndef STANDARD\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.directSpecular += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry, material.specularColor, material.specularRoughness );\n\treflectedLight.directDiffuse += ( 1.0 - clearCoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\t#ifndef STANDARD\n\t\treflectedLight.directSpecular += irradiance * material.clearCoat * BRDF_Specular_GGX( directLight, geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 clearCoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t#ifndef STANDARD\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\tfloat dotNL = dotNV;\n\t\tfloat clearCoatDHR = material.clearCoat * clearCoatDHRApprox( material.clearCoatRoughness, dotNL );\n\t#else\n\t\tfloat clearCoatDHR = 0.0;\n\t#endif\n\treflectedLight.indirectSpecular += ( 1.0 - clearCoatDHR ) * radiance * BRDF_Specular_GGX_Environment( geometry, material.specularColor, material.specularRoughness );\n\t#ifndef STANDARD\n\t\treflectedLight.indirectSpecular += clearCoatRadiance * material.clearCoat * BRDF_Specular_GGX_Environment( geometry, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearCoatRoughness );\n\t#endif\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\n#define Material_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.specularRoughness )\n#define Material_ClearCoat_BlinnShininessExponent( material )   GGXRoughnessToBlinnExponent( material.clearCoatRoughness )\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}\n',
                        lights_template:
                          '\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = normalize( vViewPosition );\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( pointLight.shadow, directLight.visible ) ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( spotLight.shadow, directLight.visible ) ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#ifdef USE_SHADOWMAP\n\t\tdirectLight.color *= all( bvec2( directionalLight.shadow, directLight.visible ) ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#ifdef USE_LIGHTMAP\n\t\tvec3 lightMapIrradiance = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( PHYSICAL ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tirradiance += getLightProbeIndirectIrradiance( geometry, 8 );\n\t#endif\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tvec3 radiance = getLightProbeIndirectRadiance( geometry, Material_BlinnShininessExponent( material ), 8 );\n\t#ifndef STANDARD\n\t\tvec3 clearCoatRadiance = getLightProbeIndirectRadiance( geometry, Material_ClearCoat_BlinnShininessExponent( material ), 8 );\n\t#else\n\t\tvec3 clearCoatRadiance = vec3( 0.0 );\n\t#endif\n\tRE_IndirectSpecular( radiance, clearCoatRadiance, geometry, material, reflectedLight );\n#endif\n',
                        logdepthbuf_fragment:
                          '#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\tgl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n#endif',
                        logdepthbuf_pars_fragment:
                          '#ifdef USE_LOGDEPTHBUF\n\tuniform float logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n#endif\n',
                        logdepthbuf_pars_vertex:
                          '#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t#endif\n\tuniform float logDepthBufFC;\n#endif',
                        logdepthbuf_vertex:
                          '#ifdef USE_LOGDEPTHBUF\n\tgl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t#else\n\t\tgl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\t#endif\n#endif\n',
                        map_fragment:
                          '#ifdef USE_MAP\n\tvec4 texelColor = texture2D( map, vUv );\n\ttexelColor = mapTexelToLinear( texelColor );\n\tdiffuseColor *= texelColor;\n#endif\n',
                        map_pars_fragment:
                          '#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n',
                        map_particle_fragment:
                          '#ifdef USE_MAP\n\tvec4 mapTexel = texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\tdiffuseColor *= mapTexelToLinear( mapTexel );\n#endif\n',
                        map_particle_pars_fragment:
                          '#ifdef USE_MAP\n\tuniform vec4 offsetRepeat;\n\tuniform sampler2D map;\n#endif\n',
                        metalnessmap_fragment:
                          'float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif\n',
                        metalnessmap_pars_fragment:
                          '#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif',
                        morphnormal_vertex:
                          '#ifdef USE_MORPHNORMALS\n\tobjectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n\tobjectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n\tobjectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n\tobjectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n#endif\n',
                        morphtarget_pars_vertex:
                          '#ifdef USE_MORPHTARGETS\n\t#ifndef USE_MORPHNORMALS\n\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif',
                        morphtarget_vertex:
                          '#ifdef USE_MORPHTARGETS\n\ttransformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n\ttransformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n\ttransformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n\ttransformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\ttransformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n\ttransformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n\ttransformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n\ttransformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\t#endif\n#endif\n',
                        normal_fragment:
                          '#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n#endif\n#ifdef USE_NORMALMAP\n\tnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n',
                        normalmap_pars_fragment:
                          '#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 S = normalize( q0 * st1.t - q1 * st0.t );\n\t\tvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n\t\tvec3 N = normalize( surf_norm );\n\t\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t\tmapN.xy = normalScale * mapN.xy;\n\t\tmat3 tsn = mat3( S, T, N );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif\n',
                        packing:
                          'vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 1.0 - 2.0 * rgb.xyz;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256.,  256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}\n',
                        premultiplied_alpha_fragment:
                          '#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif\n',
                        project_vertex:
                          'vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n',
                        dithering_fragment:
                          '#if defined( DITHERING )\n  gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif\n',
                        dithering_pars_fragment:
                          '#if defined( DITHERING )\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif\n',
                        roughnessmap_fragment:
                          'float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif\n',
                        roughnessmap_pars_fragment:
                          '#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif',
                        shadowmap_pars_fragment:
                          '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tfloat texture2DShadowLerp( sampler2D depths, vec2 size, vec2 uv, float compare ) {\n\t\tconst vec2 offset = vec2( 0.0, 1.0 );\n\t\tvec2 texelSize = vec2( 1.0 ) / size;\n\t\tvec2 centroidUV = floor( uv * size + 0.5 ) / size;\n\t\tfloat lb = texture2DCompare( depths, centroidUV + texelSize * offset.xx, compare );\n\t\tfloat lt = texture2DCompare( depths, centroidUV + texelSize * offset.xy, compare );\n\t\tfloat rb = texture2DCompare( depths, centroidUV + texelSize * offset.yx, compare );\n\t\tfloat rt = texture2DCompare( depths, centroidUV + texelSize * offset.yy, compare );\n\t\tvec2 f = fract( uv * size + 0.5 );\n\t\tfloat a = mix( lb, lt, f.y );\n\t\tfloat b = mix( rb, rt, f.y );\n\t\tfloat c = mix( a, b, f.x );\n\t\treturn c;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tshadow = (\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DShadowLerp( shadowMap, shadowMapSize, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif\n',
                        shadowmap_pars_vertex:
                          '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHTS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHTS ];\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHTS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHTS ];\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHTS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHTS ];\n\t#endif\n#endif\n',
                        shadowmap_vertex:
                          '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * worldPosition;\n\t}\n\t#endif\n#endif\n',
                        shadowmask_pars_fragment:
                          'float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHTS > 0\n\tDirectionalLight directionalLight;\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tshadow *= bool( directionalLight.shadow ) ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_SPOT_LIGHTS > 0\n\tSpotLight spotLight;\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tshadow *= bool( spotLight.shadow ) ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#endif\n\t#if NUM_POINT_LIGHTS > 0\n\tPointLight pointLight;\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tshadow *= bool( pointLight.shadow ) ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#endif\n\t#endif\n\treturn shadow;\n}\n',
                        skinbase_vertex:
                          '#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif',
                        skinning_pars_vertex:
                          '#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif\n',
                        skinning_vertex:
                          '#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif\n',
                        skinnormal_vertex:
                          '#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n#endif\n',
                        specularmap_fragment:
                          'float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif',
                        specularmap_pars_fragment:
                          '#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif',
                        tonemapping_fragment:
                          '#if defined( TONE_MAPPING )\n  gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif\n',
                        tonemapping_pars_fragment:
                          '#define saturate(a) clamp( a, 0.0, 1.0 )\nuniform float toneMappingExposure;\nuniform float toneMappingWhitePoint;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\n#define Uncharted2Helper( x ) max( ( ( x * ( 0.15 * x + 0.10 * 0.50 ) + 0.20 * 0.02 ) / ( x * ( 0.15 * x + 0.50 ) + 0.20 * 0.30 ) ) - 0.02 / 0.30, vec3( 0.0 ) )\nvec3 Uncharted2ToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( Uncharted2Helper( color ) / Uncharted2Helper( vec3( toneMappingWhitePoint ) ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\n',
                        uv_pars_fragment:
                          '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n#endif',
                        uv_pars_vertex:
                          '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvarying vec2 vUv;\n\tuniform vec4 offsetRepeat;\n#endif\n',
                        uv_vertex:
                          '#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )\n\tvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif',
                        uv2_pars_fragment:
                          '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif',
                        uv2_pars_vertex:
                          '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n#endif',
                        uv2_vertex:
                          '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = uv2;\n#endif',
                        worldpos_vertex:
                          '#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( PHYSICAL ) || defined( LAMBERT ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n#endif\n',
                        cube_frag:
                          'uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldPosition;\nvoid main() {\n\tgl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n\tgl_FragColor.a *= opacity;\n}\n',
                        cube_vert:
                          'varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n',
                        depth_frag:
                          '#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( gl_FragCoord.z ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( gl_FragCoord.z );\n\t#endif\n}\n',
                        depth_vert:
                          '#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n}\n',
                        distanceRGBA_frag:
                          '#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}\n',
                        distanceRGBA_vert:
                          '#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}\n',
                        equirect_frag:
                          'uniform sampler2D tEquirect;\nvarying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldPosition );\n\tvec2 sampleUV;\n\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n}\n',
                        equirect_vert:
                          'varying vec3 vWorldPosition;\n#include <common>\nvoid main() {\n\tvWorldPosition = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}\n',
                        linedashed_frag:
                          'uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n',
                        linedashed_vert:
                          'uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\tvLineDistance = scale * lineDistance;\n\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n',
                        meshbasic_frag:
                          'uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\treflectedLight.indirectDiffuse += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n',
                        meshbasic_vert:
                          '#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_ENVMAP\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}\n',
                        meshlambert_frag:
                          'uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\treflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n',
                        meshlambert_vert:
                          '#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                        meshphong_frag:
                          '#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n',
                        meshphong_vert:
                          '#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                        meshphysical_frag:
                          '#define PHYSICAL\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifndef STANDARD\n\tuniform float clearCoat;\n\tuniform float clearCoatRoughness;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <lights_pars>\n#include <lights_physical_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_template>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}\n',
                        meshphysical_vert:
                          '#define PHYSICAL\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                        normal_frag:
                          '#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n}\n',
                        normal_vert:
                          '#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}\n',
                        points_frag:
                          'uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\tgl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <premultiplied_alpha_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n',
                        points_vert:
                          'uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#ifdef USE_SIZEATTENUATION\n\t\tgl_PointSize = size * ( scale / - mvPosition.z );\n\t#else\n\t\tgl_PointSize = size;\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}\n',
                        shadow_frag:
                          'uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <bsdfs>\n#include <lights_pars>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n}\n',
                        shadow_vert:
                          '#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n}\n'
                      },
                      ji = {
                        basic: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.specularmap,
                            Ci.envmap,
                            Ci.aomap,
                            Ci.lightmap,
                            Ci.fog
                          ]),
                          vertexShader: Ii.meshbasic_vert,
                          fragmentShader: Ii.meshbasic_frag
                        },
                        lambert: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.specularmap,
                            Ci.envmap,
                            Ci.aomap,
                            Ci.lightmap,
                            Ci.emissivemap,
                            Ci.fog,
                            Ci.lights,
                            { emissive: { value: new Ni(0) } }
                          ]),
                          vertexShader: Ii.meshlambert_vert,
                          fragmentShader: Ii.meshlambert_frag
                        },
                        phong: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.specularmap,
                            Ci.envmap,
                            Ci.aomap,
                            Ci.lightmap,
                            Ci.emissivemap,
                            Ci.bumpmap,
                            Ci.normalmap,
                            Ci.displacementmap,
                            Ci.gradientmap,
                            Ci.fog,
                            Ci.lights,
                            {
                              emissive: { value: new Ni(0) },
                              specular: { value: new Ni(1118481) },
                              shininess: { value: 30 }
                            }
                          ]),
                          vertexShader: Ii.meshphong_vert,
                          fragmentShader: Ii.meshphong_frag
                        },
                        standard: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.envmap,
                            Ci.aomap,
                            Ci.lightmap,
                            Ci.emissivemap,
                            Ci.bumpmap,
                            Ci.normalmap,
                            Ci.displacementmap,
                            Ci.roughnessmap,
                            Ci.metalnessmap,
                            Ci.fog,
                            Ci.lights,
                            {
                              emissive: { value: new Ni(0) },
                              roughness: { value: 0.5 },
                              metalness: { value: 0.5 },
                              envMapIntensity: { value: 1 }
                            }
                          ]),
                          vertexShader: Ii.meshphysical_vert,
                          fragmentShader: Ii.meshphysical_frag
                        },
                        points: {
                          uniforms: _i.merge([Ci.points, Ci.fog]),
                          vertexShader: Ii.points_vert,
                          fragmentShader: Ii.points_frag
                        },
                        dashed: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.fog,
                            {
                              scale: { value: 1 },
                              dashSize: { value: 1 },
                              totalSize: { value: 2 }
                            }
                          ]),
                          vertexShader: Ii.linedashed_vert,
                          fragmentShader: Ii.linedashed_frag
                        },
                        depth: {
                          uniforms: _i.merge([Ci.common, Ci.displacementmap]),
                          vertexShader: Ii.depth_vert,
                          fragmentShader: Ii.depth_frag
                        },
                        normal: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.bumpmap,
                            Ci.normalmap,
                            Ci.displacementmap,
                            { opacity: { value: 1 } }
                          ]),
                          vertexShader: Ii.normal_vert,
                          fragmentShader: Ii.normal_frag
                        },
                        cube: {
                          uniforms: {
                            tCube: { value: null },
                            tFlip: { value: -1 },
                            opacity: { value: 1 }
                          },
                          vertexShader: Ii.cube_vert,
                          fragmentShader: Ii.cube_frag
                        },
                        equirect: {
                          uniforms: { tEquirect: { value: null } },
                          vertexShader: Ii.equirect_vert,
                          fragmentShader: Ii.equirect_frag
                        },
                        distanceRGBA: {
                          uniforms: _i.merge([
                            Ci.common,
                            Ci.displacementmap,
                            {
                              referencePosition: { value: new ke() },
                              nearDistance: { value: 1 },
                              farDistance: { value: 1e3 }
                            }
                          ]),
                          vertexShader: Ii.distanceRGBA_vert,
                          fragmentShader: Ii.distanceRGBA_frag
                        },
                        shadow: {
                          uniforms: _i.merge([
                            Ci.lights,
                            {
                              color: { value: new Ni(0) },
                              opacity: { value: 1 }
                            }
                          ]),
                          vertexShader: Ii.shadow_vert,
                          fragmentShader: Ii.shadow_frag
                        }
                      };
                    function Oi(t, e) {
                      (this.min = void 0 !== t ? t : new he(1 / 0, 1 / 0)),
                        (this.max = void 0 !== e ? e : new he(-1 / 0, -1 / 0));
                    }
                    function Ri(t, e, i, n, r) {
                      var o, s, a, c, l, u, h, d;
                      function p() {
                        var t,
                          n,
                          p,
                          f,
                          m,
                          g = new Float32Array([
                            -1,
                            -1,
                            0,
                            0,
                            1,
                            -1,
                            1,
                            0,
                            1,
                            1,
                            1,
                            1,
                            -1,
                            1,
                            0,
                            1
                          ]),
                          v = new Uint16Array([0, 1, 2, 0, 2, 3]);
                        (o = e.createBuffer()),
                          (s = e.createBuffer()),
                          e.bindBuffer(e.ARRAY_BUFFER, o),
                          e.bufferData(e.ARRAY_BUFFER, g, e.STATIC_DRAW),
                          e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, s),
                          e.bufferData(
                            e.ELEMENT_ARRAY_BUFFER,
                            v,
                            e.STATIC_DRAW
                          ),
                          (h = e.createTexture()),
                          (d = e.createTexture()),
                          i.bindTexture(e.TEXTURE_2D, h),
                          e.texImage2D(
                            e.TEXTURE_2D,
                            0,
                            e.RGB,
                            16,
                            16,
                            0,
                            e.RGB,
                            e.UNSIGNED_BYTE,
                            null
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_WRAP_S,
                            e.CLAMP_TO_EDGE
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_WRAP_T,
                            e.CLAMP_TO_EDGE
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_MAG_FILTER,
                            e.NEAREST
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_MIN_FILTER,
                            e.NEAREST
                          ),
                          i.bindTexture(e.TEXTURE_2D, d),
                          e.texImage2D(
                            e.TEXTURE_2D,
                            0,
                            e.RGBA,
                            16,
                            16,
                            0,
                            e.RGBA,
                            e.UNSIGNED_BYTE,
                            null
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_WRAP_S,
                            e.CLAMP_TO_EDGE
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_WRAP_T,
                            e.CLAMP_TO_EDGE
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_MAG_FILTER,
                            e.NEAREST
                          ),
                          e.texParameteri(
                            e.TEXTURE_2D,
                            e.TEXTURE_MIN_FILTER,
                            e.NEAREST
                          ),
                          (a = {
                            vertexShader: [
                              'uniform lowp int renderType;',
                              'uniform vec3 screenPosition;',
                              'uniform vec2 scale;',
                              'uniform float rotation;',
                              'uniform sampler2D occlusionMap;',
                              'attribute vec2 position;',
                              'attribute vec2 uv;',
                              'varying vec2 vUV;',
                              'varying float vVisibility;',
                              'void main() {',
                              'vUV = uv;',
                              'vec2 pos = position;',
                              'if ( renderType == 2 ) {',
                              'vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );',
                              'visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );',
                              'vVisibility =        visibility.r / 9.0;',
                              'vVisibility *= 1.0 - visibility.g / 9.0;',
                              'vVisibility *=       visibility.b / 9.0;',
                              'vVisibility *= 1.0 - visibility.a / 9.0;',
                              'pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;',
                              'pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;',
                              '}',
                              'gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );',
                              '}'
                            ].join('\n'),
                            fragmentShader: [
                              'uniform lowp int renderType;',
                              'uniform sampler2D map;',
                              'uniform float opacity;',
                              'uniform vec3 color;',
                              'varying vec2 vUV;',
                              'varying float vVisibility;',
                              'void main() {',
                              'if ( renderType == 0 ) {',
                              'gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );',
                              '} else if ( renderType == 1 ) {',
                              'gl_FragColor = texture2D( map, vUV );',
                              '} else {',
                              'vec4 texture = texture2D( map, vUV );',
                              'texture.a *= opacity * vVisibility;',
                              'gl_FragColor = texture;',
                              'gl_FragColor.rgb *= color;',
                              '}',
                              '}'
                            ].join('\n')
                          }),
                          (t = a),
                          (n = e.createProgram()),
                          (p = e.createShader(e.FRAGMENT_SHADER)),
                          (f = e.createShader(e.VERTEX_SHADER)),
                          (m = 'precision ' + r.precision + ' float;\n'),
                          e.shaderSource(p, m + t.fragmentShader),
                          e.shaderSource(f, m + t.vertexShader),
                          e.compileShader(p),
                          e.compileShader(f),
                          e.attachShader(n, p),
                          e.attachShader(n, f),
                          e.linkProgram(n),
                          (c = n),
                          (l = {
                            vertex: e.getAttribLocation(c, 'position'),
                            uv: e.getAttribLocation(c, 'uv')
                          }),
                          (u = {
                            renderType: e.getUniformLocation(c, 'renderType'),
                            map: e.getUniformLocation(c, 'map'),
                            occlusionMap: e.getUniformLocation(
                              c,
                              'occlusionMap'
                            ),
                            opacity: e.getUniformLocation(c, 'opacity'),
                            color: e.getUniformLocation(c, 'color'),
                            scale: e.getUniformLocation(c, 'scale'),
                            rotation: e.getUniformLocation(c, 'rotation'),
                            screenPosition: e.getUniformLocation(
                              c,
                              'screenPosition'
                            )
                          });
                      }
                      this.render = function(t, r, a, f) {
                        if (0 !== t.length) {
                          var m = new ke(),
                            g = f.w / f.z,
                            v = 0.5 * f.z,
                            y = 0.5 * f.w,
                            w = 16 / f.w,
                            M = new he(w * g, w),
                            E = new ke(1, 1, 0),
                            b = new he(1, 1),
                            x = new Oi();
                          x.min.set(f.x, f.y),
                            x.max.set(f.x + (f.z - 16), f.y + (f.w - 16)),
                            void 0 === c && p(),
                            i.useProgram(c),
                            i.initAttributes(),
                            i.enableAttribute(l.vertex),
                            i.enableAttribute(l.uv),
                            i.disableUnusedAttributes(),
                            e.uniform1i(u.occlusionMap, 0),
                            e.uniform1i(u.map, 1),
                            e.bindBuffer(e.ARRAY_BUFFER, o),
                            e.vertexAttribPointer(
                              l.vertex,
                              2,
                              e.FLOAT,
                              !1,
                              16,
                              0
                            ),
                            e.vertexAttribPointer(l.uv, 2, e.FLOAT, !1, 16, 8),
                            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, s),
                            i.disable(e.CULL_FACE),
                            i.buffers.depth.setMask(!1);
                          for (var A = 0, T = t.length; A < T; A++) {
                            (w = 16 / f.w), M.set(w * g, w);
                            var L = t[A];
                            if (
                              (m.set(
                                L.matrixWorld.elements[12],
                                L.matrixWorld.elements[13],
                                L.matrixWorld.elements[14]
                              ),
                              m.applyMatrix4(a.matrixWorldInverse),
                              m.applyMatrix4(a.projectionMatrix),
                              E.copy(m),
                              (b.x = f.x + E.x * v + v - 8),
                              (b.y = f.y + E.y * y + y - 8),
                              !0 === x.containsPoint(b))
                            ) {
                              i.activeTexture(e.TEXTURE0),
                                i.bindTexture(e.TEXTURE_2D, null),
                                i.activeTexture(e.TEXTURE1),
                                i.bindTexture(e.TEXTURE_2D, h),
                                e.copyTexImage2D(
                                  e.TEXTURE_2D,
                                  0,
                                  e.RGB,
                                  b.x,
                                  b.y,
                                  16,
                                  16,
                                  0
                                ),
                                e.uniform1i(u.renderType, 0),
                                e.uniform2f(u.scale, M.x, M.y),
                                e.uniform3f(u.screenPosition, E.x, E.y, E.z),
                                i.disable(e.BLEND),
                                i.enable(e.DEPTH_TEST),
                                e.drawElements(
                                  e.TRIANGLES,
                                  6,
                                  e.UNSIGNED_SHORT,
                                  0
                                ),
                                i.activeTexture(e.TEXTURE0),
                                i.bindTexture(e.TEXTURE_2D, d),
                                e.copyTexImage2D(
                                  e.TEXTURE_2D,
                                  0,
                                  e.RGBA,
                                  b.x,
                                  b.y,
                                  16,
                                  16,
                                  0
                                ),
                                e.uniform1i(u.renderType, 1),
                                i.disable(e.DEPTH_TEST),
                                i.activeTexture(e.TEXTURE1),
                                i.bindTexture(e.TEXTURE_2D, h),
                                e.drawElements(
                                  e.TRIANGLES,
                                  6,
                                  e.UNSIGNED_SHORT,
                                  0
                                ),
                                L.positionScreen.copy(E),
                                L.customUpdateCallback
                                  ? L.customUpdateCallback(L)
                                  : L.updateLensFlares(),
                                e.uniform1i(u.renderType, 2),
                                i.enable(e.BLEND);
                              for (
                                var N = 0, D = L.lensFlares.length;
                                N < D;
                                N++
                              ) {
                                var S = L.lensFlares[N];
                                S.opacity > 0.001 &&
                                  S.scale > 0.001 &&
                                  ((E.x = S.x),
                                  (E.y = S.y),
                                  (E.z = S.z),
                                  (w = S.size * S.scale / f.w),
                                  (M.x = w * g),
                                  (M.y = w),
                                  e.uniform3f(u.screenPosition, E.x, E.y, E.z),
                                  e.uniform2f(u.scale, M.x, M.y),
                                  e.uniform1f(u.rotation, S.rotation),
                                  e.uniform1f(u.opacity, S.opacity),
                                  e.uniform3f(
                                    u.color,
                                    S.color.r,
                                    S.color.g,
                                    S.color.b
                                  ),
                                  i.setBlending(
                                    S.blending,
                                    S.blendEquation,
                                    S.blendSrc,
                                    S.blendDst
                                  ),
                                  n.setTexture2D(S.texture, 1),
                                  e.drawElements(
                                    e.TRIANGLES,
                                    6,
                                    e.UNSIGNED_SHORT,
                                    0
                                  ));
                              }
                            }
                          }
                          i.enable(e.CULL_FACE),
                            i.enable(e.DEPTH_TEST),
                            i.buffers.depth.setMask(!0),
                            i.reset();
                        }
                      };
                    }
                    function zi(t, e, i, n, r, o, s, a, c) {
                      Ie.call(this, t, e, i, n, r, o, s, a, c),
                        (this.needsUpdate = !0);
                    }
                    function ki(t, e, i, n, r) {
                      var o,
                        s,
                        a,
                        c,
                        l,
                        u,
                        h = new ke(),
                        d = new ze(),
                        p = new ke();
                      function f() {
                        var t,
                          i,
                          n,
                          h = new Float32Array([
                            -0.5,
                            -0.5,
                            0,
                            0,
                            0.5,
                            -0.5,
                            1,
                            0,
                            0.5,
                            0.5,
                            1,
                            1,
                            -0.5,
                            0.5,
                            0,
                            1
                          ]),
                          d = new Uint16Array([0, 1, 2, 0, 2, 3]);
                        (o = e.createBuffer()),
                          (s = e.createBuffer()),
                          e.bindBuffer(e.ARRAY_BUFFER, o),
                          e.bufferData(e.ARRAY_BUFFER, h, e.STATIC_DRAW),
                          e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, s),
                          e.bufferData(
                            e.ELEMENT_ARRAY_BUFFER,
                            d,
                            e.STATIC_DRAW
                          ),
                          (t = e.createProgram()),
                          (i = e.createShader(e.VERTEX_SHADER)),
                          (n = e.createShader(e.FRAGMENT_SHADER)),
                          e.shaderSource(
                            i,
                            [
                              'precision ' + r.precision + ' float;',
                              '#define SHADER_NAME SpriteMaterial',
                              'uniform mat4 modelViewMatrix;',
                              'uniform mat4 projectionMatrix;',
                              'uniform float rotation;',
                              'uniform vec2 scale;',
                              'uniform vec2 uvOffset;',
                              'uniform vec2 uvScale;',
                              'attribute vec2 position;',
                              'attribute vec2 uv;',
                              'varying vec2 vUV;',
                              'void main() {',
                              'vUV = uvOffset + uv * uvScale;',
                              'vec2 alignedPosition = position * scale;',
                              'vec2 rotatedPosition;',
                              'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
                              'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',
                              'vec4 finalPosition;',
                              'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
                              'finalPosition.xy += rotatedPosition;',
                              'finalPosition = projectionMatrix * finalPosition;',
                              'gl_Position = finalPosition;',
                              '}'
                            ].join('\n')
                          ),
                          e.shaderSource(
                            n,
                            [
                              'precision ' + r.precision + ' float;',
                              '#define SHADER_NAME SpriteMaterial',
                              'uniform vec3 color;',
                              'uniform sampler2D map;',
                              'uniform float opacity;',
                              'uniform int fogType;',
                              'uniform vec3 fogColor;',
                              'uniform float fogDensity;',
                              'uniform float fogNear;',
                              'uniform float fogFar;',
                              'uniform float alphaTest;',
                              'varying vec2 vUV;',
                              'void main() {',
                              'vec4 texture = texture2D( map, vUV );',
                              'if ( texture.a < alphaTest ) discard;',
                              'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',
                              'if ( fogType > 0 ) {',
                              'float depth = gl_FragCoord.z / gl_FragCoord.w;',
                              'float fogFactor = 0.0;',
                              'if ( fogType == 1 ) {',
                              'fogFactor = smoothstep( fogNear, fogFar, depth );',
                              '} else {',
                              'const float LOG2 = 1.442695;',
                              'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
                              'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',
                              '}',
                              'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',
                              '}',
                              '}'
                            ].join('\n')
                          ),
                          e.compileShader(i),
                          e.compileShader(n),
                          e.attachShader(t, i),
                          e.attachShader(t, n),
                          e.linkProgram(t),
                          (a = t),
                          (c = {
                            position: e.getAttribLocation(a, 'position'),
                            uv: e.getAttribLocation(a, 'uv')
                          }),
                          (l = {
                            uvOffset: e.getUniformLocation(a, 'uvOffset'),
                            uvScale: e.getUniformLocation(a, 'uvScale'),
                            rotation: e.getUniformLocation(a, 'rotation'),
                            scale: e.getUniformLocation(a, 'scale'),
                            color: e.getUniformLocation(a, 'color'),
                            map: e.getUniformLocation(a, 'map'),
                            opacity: e.getUniformLocation(a, 'opacity'),
                            modelViewMatrix: e.getUniformLocation(
                              a,
                              'modelViewMatrix'
                            ),
                            projectionMatrix: e.getUniformLocation(
                              a,
                              'projectionMatrix'
                            ),
                            fogType: e.getUniformLocation(a, 'fogType'),
                            fogDensity: e.getUniformLocation(a, 'fogDensity'),
                            fogNear: e.getUniformLocation(a, 'fogNear'),
                            fogFar: e.getUniformLocation(a, 'fogFar'),
                            fogColor: e.getUniformLocation(a, 'fogColor'),
                            alphaTest: e.getUniformLocation(a, 'alphaTest')
                          });
                        var p = document.createElementNS(
                          'http://www.w3.org/1999/xhtml',
                          'canvas'
                        );
                        (p.width = 8), (p.height = 8);
                        var f = p.getContext('2d');
                        (f.fillStyle = 'white'),
                          f.fillRect(0, 0, 8, 8),
                          (u = new zi(p));
                      }
                      function m(t, e) {
                        return t.renderOrder !== e.renderOrder
                          ? t.renderOrder - e.renderOrder
                          : t.z !== e.z ? e.z - t.z : e.id - t.id;
                      }
                      this.render = function(r, g, v) {
                        if (0 !== r.length) {
                          void 0 === a && f(),
                            i.useProgram(a),
                            i.initAttributes(),
                            i.enableAttribute(c.position),
                            i.enableAttribute(c.uv),
                            i.disableUnusedAttributes(),
                            i.disable(e.CULL_FACE),
                            i.enable(e.BLEND),
                            e.bindBuffer(e.ARRAY_BUFFER, o),
                            e.vertexAttribPointer(
                              c.position,
                              2,
                              e.FLOAT,
                              !1,
                              16,
                              0
                            ),
                            e.vertexAttribPointer(c.uv, 2, e.FLOAT, !1, 16, 8),
                            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, s),
                            e.uniformMatrix4fv(
                              l.projectionMatrix,
                              !1,
                              v.projectionMatrix.elements
                            ),
                            i.activeTexture(e.TEXTURE0),
                            e.uniform1i(l.map, 0);
                          var y = 0,
                            w = 0,
                            M = g.fog;
                          M
                            ? (e.uniform3f(
                                l.fogColor,
                                M.color.r,
                                M.color.g,
                                M.color.b
                              ),
                              M.isFog
                                ? (e.uniform1f(l.fogNear, M.near),
                                  e.uniform1f(l.fogFar, M.far),
                                  e.uniform1i(l.fogType, 1),
                                  (y = 1),
                                  (w = 1))
                                : M.isFogExp2 &&
                                  (e.uniform1f(l.fogDensity, M.density),
                                  e.uniform1i(l.fogType, 2),
                                  (y = 2),
                                  (w = 2)))
                            : (e.uniform1i(l.fogType, 0), (y = 0), (w = 0));
                          for (var E = 0, b = r.length; E < b; E++) {
                            (A = r[E]).modelViewMatrix.multiplyMatrices(
                              v.matrixWorldInverse,
                              A.matrixWorld
                            ),
                              (A.z = -A.modelViewMatrix.elements[14]);
                          }
                          r.sort(m);
                          var x = [];
                          for (E = 0, b = r.length; E < b; E++) {
                            var A,
                              T = (A = r[E]).material;
                            if (!1 !== T.visible) {
                              A.onBeforeRender(t, g, v, void 0, T, void 0),
                                e.uniform1f(l.alphaTest, T.alphaTest),
                                e.uniformMatrix4fv(
                                  l.modelViewMatrix,
                                  !1,
                                  A.modelViewMatrix.elements
                                ),
                                A.matrixWorld.decompose(h, d, p),
                                (x[0] = p.x),
                                (x[1] = p.y);
                              var L = 0;
                              g.fog && T.fog && (L = w),
                                y !== L && (e.uniform1i(l.fogType, L), (y = L)),
                                null !== T.map
                                  ? (e.uniform2f(
                                      l.uvOffset,
                                      T.map.offset.x,
                                      T.map.offset.y
                                    ),
                                    e.uniform2f(
                                      l.uvScale,
                                      T.map.repeat.x,
                                      T.map.repeat.y
                                    ))
                                  : (e.uniform2f(l.uvOffset, 0, 0),
                                    e.uniform2f(l.uvScale, 1, 1)),
                                e.uniform1f(l.opacity, T.opacity),
                                e.uniform3f(
                                  l.color,
                                  T.color.r,
                                  T.color.g,
                                  T.color.b
                                ),
                                e.uniform1f(l.rotation, T.rotation),
                                e.uniform2fv(l.scale, x),
                                i.setBlending(
                                  T.blending,
                                  T.blendEquation,
                                  T.blendSrc,
                                  T.blendDst,
                                  T.blendEquationAlpha,
                                  T.blendSrcAlpha,
                                  T.blendDstAlpha,
                                  T.premultipliedAlpha
                                ),
                                i.buffers.depth.setTest(T.depthTest),
                                i.buffers.depth.setMask(T.depthWrite),
                                n.setTexture2D(T.map || u, 0),
                                e.drawElements(
                                  e.TRIANGLES,
                                  6,
                                  e.UNSIGNED_SHORT,
                                  0
                                ),
                                A.onAfterRender(t, g, v, void 0, T, void 0);
                            }
                          }
                          i.enable(e.CULL_FACE), i.reset();
                        }
                      };
                    }
                    (ji.physical = {
                      uniforms: _i.merge([
                        ji.standard.uniforms,
                        {
                          clearCoat: { value: 0 },
                          clearCoatRoughness: { value: 0 }
                        }
                      ]),
                      vertexShader: Ii.meshphysical_vert,
                      fragmentShader: Ii.meshphysical_frag
                    }),
                      Object.assign(Oi.prototype, {
                        set: function(t, e) {
                          return this.min.copy(t), this.max.copy(e), this;
                        },
                        setFromPoints: function(t) {
                          this.makeEmpty();
                          for (var e = 0, i = t.length; e < i; e++)
                            this.expandByPoint(t[e]);
                          return this;
                        },
                        setFromCenterAndSize: ((Si = new he()),
                        function(t, e) {
                          var i = Si.copy(e).multiplyScalar(0.5);
                          return (
                            this.min.copy(t).sub(i),
                            this.max.copy(t).add(i),
                            this
                          );
                        }),
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.min.copy(t.min), this.max.copy(t.max), this
                          );
                        },
                        makeEmpty: function() {
                          return (
                            (this.min.x = this.min.y = 1 / 0),
                            (this.max.x = this.max.y = -1 / 0),
                            this
                          );
                        },
                        isEmpty: function() {
                          return (
                            this.max.x < this.min.x || this.max.y < this.min.y
                          );
                        },
                        getCenter: function(t) {
                          var e = t || new he();
                          return this.isEmpty()
                            ? e.set(0, 0)
                            : e
                                .addVectors(this.min, this.max)
                                .multiplyScalar(0.5);
                        },
                        getSize: function(t) {
                          var e = t || new he();
                          return this.isEmpty()
                            ? e.set(0, 0)
                            : e.subVectors(this.max, this.min);
                        },
                        expandByPoint: function(t) {
                          return this.min.min(t), this.max.max(t), this;
                        },
                        expandByVector: function(t) {
                          return this.min.sub(t), this.max.add(t), this;
                        },
                        expandByScalar: function(t) {
                          return (
                            this.min.addScalar(-t), this.max.addScalar(t), this
                          );
                        },
                        containsPoint: function(t) {
                          return !(
                            t.x < this.min.x ||
                            t.x > this.max.x ||
                            t.y < this.min.y ||
                            t.y > this.max.y
                          );
                        },
                        containsBox: function(t) {
                          return (
                            this.min.x <= t.min.x &&
                            t.max.x <= this.max.x &&
                            this.min.y <= t.min.y &&
                            t.max.y <= this.max.y
                          );
                        },
                        getParameter: function(t, e) {
                          return (e || new he()).set(
                            (t.x - this.min.x) / (this.max.x - this.min.x),
                            (t.y - this.min.y) / (this.max.y - this.min.y)
                          );
                        },
                        intersectsBox: function(t) {
                          return !(
                            t.max.x < this.min.x ||
                            t.min.x > this.max.x ||
                            t.max.y < this.min.y ||
                            t.min.y > this.max.y
                          );
                        },
                        clampPoint: function(t, e) {
                          return (e || new he())
                            .copy(t)
                            .clamp(this.min, this.max);
                        },
                        distanceToPoint: ((Di = new he()),
                        function(t) {
                          return Di.copy(t)
                            .clamp(this.min, this.max)
                            .sub(t)
                            .length();
                        }),
                        intersect: function(t) {
                          return this.min.max(t.min), this.max.min(t.max), this;
                        },
                        union: function(t) {
                          return this.min.min(t.min), this.max.max(t.max), this;
                        },
                        translate: function(t) {
                          return this.min.add(t), this.max.add(t), this;
                        },
                        equals: function(t) {
                          return (
                            t.min.equals(this.min) && t.max.equals(this.max)
                          );
                        }
                      }),
                      (zi.prototype = Object.create(Ie.prototype)),
                      (zi.prototype.constructor = zi);
                    var Bi,
                      Pi,
                      Ui,
                      Fi,
                      Hi,
                      Vi,
                      Gi,
                      Yi,
                      Qi,
                      Wi,
                      qi,
                      Xi,
                      Ki,
                      Zi,
                      Ji,
                      $i,
                      tn,
                      en,
                      nn,
                      rn = 0;
                    function on() {
                      Object.defineProperty(this, 'id', { value: rn++ }),
                        (this.uuid = ue.generateUUID()),
                        (this.name = ''),
                        (this.type = 'Material'),
                        (this.fog = !0),
                        (this.lights = !0),
                        (this.blending = b),
                        (this.side = m),
                        (this.flatShading = !1),
                        (this.vertexColors = y),
                        (this.opacity = 1),
                        (this.transparent = !1),
                        (this.blendSrc = z),
                        (this.blendDst = k),
                        (this.blendEquation = N),
                        (this.blendSrcAlpha = null),
                        (this.blendDstAlpha = null),
                        (this.blendEquationAlpha = null),
                        (this.depthFunc = Q),
                        (this.depthTest = !0),
                        (this.depthWrite = !0),
                        (this.clippingPlanes = null),
                        (this.clipIntersection = !1),
                        (this.clipShadows = !1),
                        (this.colorWrite = !0),
                        (this.precision = null),
                        (this.polygonOffset = !1),
                        (this.polygonOffsetFactor = 0),
                        (this.polygonOffsetUnits = 0),
                        (this.dithering = !1),
                        (this.alphaTest = 0),
                        (this.premultipliedAlpha = !1),
                        (this.overdraw = 0),
                        (this.visible = !0),
                        (this.userData = {}),
                        (this.needsUpdate = !0);
                    }
                    function sn(t) {
                      on.call(this),
                        (this.type = 'ShaderMaterial'),
                        (this.defines = {}),
                        (this.uniforms = {}),
                        (this.vertexShader =
                          'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}'),
                        (this.fragmentShader =
                          'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}'),
                        (this.linewidth = 1),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.fog = !1),
                        (this.lights = !1),
                        (this.clipping = !1),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.morphNormals = !1),
                        (this.extensions = {
                          derivatives: !1,
                          fragDepth: !1,
                          drawBuffers: !1,
                          shaderTextureLOD: !1
                        }),
                        (this.defaultAttributeValues = {
                          color: [1, 1, 1],
                          uv: [0, 0],
                          uv2: [0, 0]
                        }),
                        (this.index0AttributeName = void 0),
                        void 0 !== t &&
                          (void 0 !== t.attributes &&
                            console.error(
                              'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.'
                            ),
                          this.setValues(t));
                    }
                    function an(t) {
                      on.call(this),
                        (this.type = 'MeshDepthMaterial'),
                        (this.depthPacking = ce),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.map = null),
                        (this.alphaMap = null),
                        (this.displacementMap = null),
                        (this.displacementScale = 1),
                        (this.displacementBias = 0),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.fog = !1),
                        (this.lights = !1),
                        this.setValues(t);
                    }
                    function cn(t) {
                      on.call(this),
                        (this.type = 'MeshDistanceMaterial'),
                        (this.referencePosition = new ke()),
                        (this.nearDistance = 1),
                        (this.farDistance = 1e3),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.map = null),
                        (this.alphaMap = null),
                        (this.displacementMap = null),
                        (this.displacementScale = 1),
                        (this.displacementBias = 0),
                        (this.fog = !1),
                        (this.lights = !1),
                        this.setValues(t);
                    }
                    function ln(t, e) {
                      (this.min =
                        void 0 !== t ? t : new ke(1 / 0, 1 / 0, 1 / 0)),
                        (this.max =
                          void 0 !== e ? e : new ke(-1 / 0, -1 / 0, -1 / 0));
                    }
                    function un(t, e) {
                      (this.center = void 0 !== t ? t : new ke()),
                        (this.radius = void 0 !== e ? e : 0);
                    }
                    function hn() {
                      (this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]),
                        arguments.length > 0 &&
                          console.error(
                            'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.'
                          );
                    }
                    function dn(t, e) {
                      (this.normal = void 0 !== t ? t : new ke(1, 0, 0)),
                        (this.constant = void 0 !== e ? e : 0);
                    }
                    function pn(t, e, i, n, r, o) {
                      this.planes = [
                        void 0 !== t ? t : new dn(),
                        void 0 !== e ? e : new dn(),
                        void 0 !== i ? i : new dn(),
                        void 0 !== n ? n : new dn(),
                        void 0 !== r ? r : new dn(),
                        void 0 !== o ? o : new dn()
                      ];
                    }
                    function fn(t, e, i) {
                      for (
                        var n = new pn(),
                          r = new Be(),
                          o = new he(),
                          s = new he(i, i),
                          a = new ke(),
                          c = new ke(),
                          l = 1,
                          u = 2,
                          h = 1 + (l | u),
                          d = new Array(h),
                          f = new Array(h),
                          y = {},
                          w = [
                            new ke(1, 0, 0),
                            new ke(-1, 0, 0),
                            new ke(0, 0, 1),
                            new ke(0, 0, -1),
                            new ke(0, 1, 0),
                            new ke(0, -1, 0)
                          ],
                          M = [
                            new ke(0, 1, 0),
                            new ke(0, 1, 0),
                            new ke(0, 1, 0),
                            new ke(0, 1, 0),
                            new ke(0, 0, 1),
                            new ke(0, 0, -1)
                          ],
                          E = [
                            new je(),
                            new je(),
                            new je(),
                            new je(),
                            new je(),
                            new je()
                          ],
                          b = 0;
                        b !== h;
                        ++b
                      ) {
                        var x = 0 != (b & l),
                          A = 0 != (b & u),
                          T = new an({
                            depthPacking: le,
                            morphTargets: x,
                            skinning: A
                          });
                        d[b] = T;
                        var L = new cn({ morphTargets: x, skinning: A });
                        f[b] = L;
                      }
                      var N = this;
                      function D(e, i, n, r, o, s) {
                        var a = e.geometry,
                          c = null,
                          h = d,
                          p = e.customDepthMaterial;
                        if ((n && ((h = f), (p = e.customDistanceMaterial)), p))
                          c = p;
                        else {
                          var w = !1;
                          i.morphTargets &&
                            (a && a.isBufferGeometry
                              ? (w =
                                  a.morphAttributes &&
                                  a.morphAttributes.position &&
                                  a.morphAttributes.position.length > 0)
                              : a &&
                                a.isGeometry &&
                                (w =
                                  a.morphTargets && a.morphTargets.length > 0)),
                            e.isSkinnedMesh &&
                              !1 === i.skinning &&
                              console.warn(
                                'THREE.WebGLShadowMap: THREE.SkinnedMesh with material.skinning set to false:',
                                e
                              );
                          var M = e.isSkinnedMesh && i.skinning,
                            E = 0;
                          w && (E |= l), M && (E |= u), (c = h[E]);
                        }
                        if (
                          t.localClippingEnabled &&
                          !0 === i.clipShadows &&
                          0 !== i.clippingPlanes.length
                        ) {
                          var b = c.uuid,
                            x = i.uuid,
                            A = y[b];
                          void 0 === A && ((A = {}), (y[b] = A));
                          var T = A[x];
                          void 0 === T && ((T = c.clone()), (A[x] = T)),
                            (c = T);
                        }
                        (c.visible = i.visible), (c.wireframe = i.wireframe);
                        var L = i.side;
                        return (
                          N.renderSingleSided && L == v && (L = m),
                          N.renderReverseSided &&
                            (L === m ? (L = g) : L === g && (L = m)),
                          (c.side = L),
                          (c.clipShadows = i.clipShadows),
                          (c.clippingPlanes = i.clippingPlanes),
                          (c.clipIntersection = i.clipIntersection),
                          (c.wireframeLinewidth = i.wireframeLinewidth),
                          (c.linewidth = i.linewidth),
                          n &&
                            c.isMeshDistanceMaterial &&
                            (c.referencePosition.copy(r),
                            (c.nearDistance = o),
                            (c.farDistance = s)),
                          c
                        );
                      }
                      function S(i, r, o, s) {
                        if (!1 !== i.visible) {
                          if (
                            i.layers.test(r.layers) &&
                            (i.isMesh || i.isLine || i.isPoints) &&
                            i.castShadow &&
                            (!i.frustumCulled || n.intersectsObject(i))
                          ) {
                            i.modelViewMatrix.multiplyMatrices(
                              o.matrixWorldInverse,
                              i.matrixWorld
                            );
                            var a = e.update(i),
                              l = i.material;
                            if (Array.isArray(l))
                              for (
                                var u = a.groups, h = 0, d = u.length;
                                h < d;
                                h++
                              ) {
                                var p = u[h],
                                  f = l[p.materialIndex];
                                if (f && f.visible) {
                                  var m = D(i, f, s, c, o.near, o.far);
                                  t.renderBufferDirect(o, null, a, m, i, p);
                                }
                              }
                            else if (l.visible) {
                              m = D(i, l, s, c, o.near, o.far);
                              t.renderBufferDirect(o, null, a, m, i, null);
                            }
                          }
                          for (
                            var g = i.children, v = 0, y = g.length;
                            v < y;
                            v++
                          )
                            S(g[v], r, o, s);
                        }
                      }
                      (this.enabled = !1),
                        (this.autoUpdate = !0),
                        (this.needsUpdate = !1),
                        (this.type = p),
                        (this.renderReverseSided = !0),
                        (this.renderSingleSided = !0),
                        (this.render = function(e, i, l) {
                          if (
                            !1 !== N.enabled &&
                            (!1 !== N.autoUpdate || !1 !== N.needsUpdate) &&
                            0 !== e.length
                          ) {
                            var u,
                              h = t.context,
                              d = t.state;
                            d.disable(h.BLEND),
                              d.buffers.color.setClear(1, 1, 1, 1),
                              d.buffers.depth.setTest(!0),
                              d.setScissorTest(!1);
                            for (var p = 0, f = e.length; p < f; p++) {
                              var m = e[p],
                                g = m.shadow,
                                v = m && m.isPointLight;
                              if (void 0 !== g) {
                                var y = g.camera;
                                if ((o.copy(g.mapSize), o.min(s), v)) {
                                  var b = o.x,
                                    x = o.y;
                                  E[0].set(2 * b, x, b, x),
                                    E[1].set(0, x, b, x),
                                    E[2].set(3 * b, x, b, x),
                                    E[3].set(b, x, b, x),
                                    E[4].set(3 * b, 0, b, x),
                                    E[5].set(b, 0, b, x),
                                    (o.x *= 4),
                                    (o.y *= 2);
                                }
                                if (null === g.map) {
                                  var A = {
                                    minFilter: mt,
                                    magFilter: mt,
                                    format: Rt
                                  };
                                  (g.map = new Oe(o.x, o.y, A)),
                                    (g.map.texture.name =
                                      m.name + '.shadowMap'),
                                    y.updateProjectionMatrix();
                                }
                                g.isSpotLightShadow && g.update(m);
                                var T = g.map,
                                  L = g.matrix;
                                c.setFromMatrixPosition(m.matrixWorld),
                                  y.position.copy(c),
                                  v
                                    ? ((u = 6),
                                      L.makeTranslation(-c.x, -c.y, -c.z))
                                    : ((u = 1),
                                      a.setFromMatrixPosition(
                                        m.target.matrixWorld
                                      ),
                                      y.lookAt(a),
                                      y.updateMatrixWorld(),
                                      L.set(
                                        0.5,
                                        0,
                                        0,
                                        0.5,
                                        0,
                                        0.5,
                                        0,
                                        0.5,
                                        0,
                                        0,
                                        0.5,
                                        0.5,
                                        0,
                                        0,
                                        0,
                                        1
                                      ),
                                      L.multiply(y.projectionMatrix),
                                      L.multiply(y.matrixWorldInverse)),
                                  t.setRenderTarget(T),
                                  t.clear();
                                for (var D = 0; D < u; D++) {
                                  if (v) {
                                    a.copy(y.position),
                                      a.add(w[D]),
                                      y.up.copy(M[D]),
                                      y.lookAt(a),
                                      y.updateMatrixWorld();
                                    var C = E[D];
                                    d.viewport(C);
                                  }
                                  r.multiplyMatrices(
                                    y.projectionMatrix,
                                    y.matrixWorldInverse
                                  ),
                                    n.setFromMatrix(r),
                                    S(i, l, y, v);
                                }
                              } else
                                console.warn(
                                  'THREE.WebGLShadowMap:',
                                  m,
                                  'has no shadow.'
                                );
                            }
                            N.needsUpdate = !1;
                          }
                        });
                    }
                    function mn(t) {
                      var e = {};
                      return {
                        get: function(t) {
                          return (
                            t.isInterleavedBufferAttribute && (t = t.data),
                            e[t.uuid]
                          );
                        },
                        remove: function(i) {
                          i.isInterleavedBufferAttribute && (i = i.data);
                          var n = e[i.uuid];
                          n && (t.deleteBuffer(n.buffer), delete e[i.uuid]);
                        },
                        update: function(i, n) {
                          i.isInterleavedBufferAttribute && (i = i.data);
                          var r,
                            o,
                            s,
                            a,
                            c,
                            l = e[i.uuid];
                          void 0 === l
                            ? (e[i.uuid] = (function(e, i) {
                                var n = e.array,
                                  r = e.dynamic
                                    ? t.DYNAMIC_DRAW
                                    : t.STATIC_DRAW,
                                  o = t.createBuffer();
                                t.bindBuffer(i, o),
                                  t.bufferData(i, n, r),
                                  e.onUploadCallback();
                                var s = t.FLOAT;
                                return (
                                  n instanceof Float32Array
                                    ? (s = t.FLOAT)
                                    : n instanceof Float64Array
                                      ? console.warn(
                                          'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.'
                                        )
                                      : n instanceof Uint16Array
                                        ? (s = t.UNSIGNED_SHORT)
                                        : n instanceof Int16Array
                                          ? (s = t.SHORT)
                                          : n instanceof Uint32Array
                                            ? (s = t.UNSIGNED_INT)
                                            : n instanceof Int32Array
                                              ? (s = t.INT)
                                              : n instanceof Int8Array
                                                ? (s = t.BYTE)
                                                : n instanceof Uint8Array &&
                                                  (s = t.UNSIGNED_BYTE),
                                  {
                                    buffer: o,
                                    type: s,
                                    bytesPerElement: n.BYTES_PER_ELEMENT,
                                    version: e.version
                                  }
                                );
                              })(i, n))
                            : l.version < i.version &&
                              ((r = l.buffer),
                              (s = n),
                              (a = (o = i).array),
                              (c = o.updateRange),
                              t.bindBuffer(s, r),
                              !1 === o.dynamic
                                ? t.bufferData(s, a, t.STATIC_DRAW)
                                : -1 === c.count
                                  ? t.bufferSubData(s, 0, a)
                                  : 0 === c.count
                                    ? console.error(
                                        'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.'
                                      )
                                    : (t.bufferSubData(
                                        s,
                                        c.offset * a.BYTES_PER_ELEMENT,
                                        a.subarray(c.offset, c.offset + c.count)
                                      ),
                                      (c.count = -1)),
                              (l.version = i.version));
                        }
                      };
                    }
                    function gn(t, e, i, n) {
                      (this._x = t || 0),
                        (this._y = e || 0),
                        (this._z = i || 0),
                        (this._order = n || gn.DefaultOrder);
                    }
                    function vn() {
                      this.mask = 1;
                    }
                    Object.assign(on.prototype, e.prototype, {
                      isMaterial: !0,
                      onBeforeCompile: function() {},
                      setValues: function(t) {
                        if (void 0 !== t)
                          for (var e in t) {
                            var i = t[e];
                            if (void 0 !== i)
                              if ('shading' !== e) {
                                var n = this[e];
                                void 0 !== n
                                  ? n && n.isColor
                                    ? n.set(i)
                                    : n && n.isVector3 && i && i.isVector3
                                      ? n.copy(i)
                                      : (this[e] =
                                          'overdraw' === e ? Number(i) : i)
                                  : console.warn(
                                      'THREE.' +
                                        this.type +
                                        ": '" +
                                        e +
                                        "' is not a property of this material."
                                    );
                              } else
                                console.warn(
                                  'THREE.' +
                                    this.type +
                                    ': .shading has been removed. Use the boolean .flatShading instead.'
                                ),
                                  (this.flatShading = 1 === i);
                            else
                              console.warn(
                                "THREE.Material: '" +
                                  e +
                                  "' parameter is undefined."
                              );
                          }
                      },
                      toJSON: function(t) {
                        var e = void 0 === t;
                        e && (t = { textures: {}, images: {} });
                        var i = {
                          metadata: {
                            version: 4.5,
                            type: 'Material',
                            generator: 'Material.toJSON'
                          }
                        };
                        function n(t) {
                          var e = [];
                          for (var i in t) {
                            var n = t[i];
                            delete n.metadata, e.push(n);
                          }
                          return e;
                        }
                        if (
                          ((i.uuid = this.uuid),
                          (i.type = this.type),
                          '' !== this.name && (i.name = this.name),
                          this.color &&
                            this.color.isColor &&
                            (i.color = this.color.getHex()),
                          void 0 !== this.roughness &&
                            (i.roughness = this.roughness),
                          void 0 !== this.metalness &&
                            (i.metalness = this.metalness),
                          this.emissive &&
                            this.emissive.isColor &&
                            (i.emissive = this.emissive.getHex()),
                          this.specular &&
                            this.specular.isColor &&
                            (i.specular = this.specular.getHex()),
                          void 0 !== this.shininess &&
                            (i.shininess = this.shininess),
                          void 0 !== this.clearCoat &&
                            (i.clearCoat = this.clearCoat),
                          void 0 !== this.clearCoatRoughness &&
                            (i.clearCoatRoughness = this.clearCoatRoughness),
                          this.map &&
                            this.map.isTexture &&
                            (i.map = this.map.toJSON(t).uuid),
                          this.alphaMap &&
                            this.alphaMap.isTexture &&
                            (i.alphaMap = this.alphaMap.toJSON(t).uuid),
                          this.lightMap &&
                            this.lightMap.isTexture &&
                            (i.lightMap = this.lightMap.toJSON(t).uuid),
                          this.bumpMap &&
                            this.bumpMap.isTexture &&
                            ((i.bumpMap = this.bumpMap.toJSON(t).uuid),
                            (i.bumpScale = this.bumpScale)),
                          this.normalMap &&
                            this.normalMap.isTexture &&
                            ((i.normalMap = this.normalMap.toJSON(t).uuid),
                            (i.normalScale = this.normalScale.toArray())),
                          this.displacementMap &&
                            this.displacementMap.isTexture &&
                            ((i.displacementMap = this.displacementMap.toJSON(
                              t
                            ).uuid),
                            (i.displacementScale = this.displacementScale),
                            (i.displacementBias = this.displacementBias)),
                          this.roughnessMap &&
                            this.roughnessMap.isTexture &&
                            (i.roughnessMap = this.roughnessMap.toJSON(t).uuid),
                          this.metalnessMap &&
                            this.metalnessMap.isTexture &&
                            (i.metalnessMap = this.metalnessMap.toJSON(t).uuid),
                          this.emissiveMap &&
                            this.emissiveMap.isTexture &&
                            (i.emissiveMap = this.emissiveMap.toJSON(t).uuid),
                          this.specularMap &&
                            this.specularMap.isTexture &&
                            (i.specularMap = this.specularMap.toJSON(t).uuid),
                          this.envMap &&
                            this.envMap.isTexture &&
                            ((i.envMap = this.envMap.toJSON(t).uuid),
                            (i.reflectivity = this.reflectivity)),
                          this.gradientMap &&
                            this.gradientMap.isTexture &&
                            (i.gradientMap = this.gradientMap.toJSON(t).uuid),
                          void 0 !== this.size && (i.size = this.size),
                          void 0 !== this.sizeAttenuation &&
                            (i.sizeAttenuation = this.sizeAttenuation),
                          this.blending !== b && (i.blending = this.blending),
                          !0 === this.flatShading &&
                            (i.flatShading = this.flatShading),
                          this.side !== m && (i.side = this.side),
                          this.vertexColors !== y &&
                            (i.vertexColors = this.vertexColors),
                          this.opacity < 1 && (i.opacity = this.opacity),
                          !0 === this.transparent &&
                            (i.transparent = this.transparent),
                          (i.depthFunc = this.depthFunc),
                          (i.depthTest = this.depthTest),
                          (i.depthWrite = this.depthWrite),
                          !0 === this.dithering && (i.dithering = !0),
                          this.alphaTest > 0 && (i.alphaTest = this.alphaTest),
                          !0 === this.premultipliedAlpha &&
                            (i.premultipliedAlpha = this.premultipliedAlpha),
                          !0 === this.wireframe &&
                            (i.wireframe = this.wireframe),
                          this.wireframeLinewidth > 1 &&
                            (i.wireframeLinewidth = this.wireframeLinewidth),
                          'round' !== this.wireframeLinecap &&
                            (i.wireframeLinecap = this.wireframeLinecap),
                          'round' !== this.wireframeLinejoin &&
                            (i.wireframeLinejoin = this.wireframeLinejoin),
                          !0 === this.morphTargets && (i.morphTargets = !0),
                          !0 === this.skinning && (i.skinning = !0),
                          !1 === this.visible && (i.visible = !1),
                          '{}' !== JSON.stringify(this.userData) &&
                            (i.userData = this.userData),
                          e)
                        ) {
                          var r = n(t.textures),
                            o = n(t.images);
                          r.length > 0 && (i.textures = r),
                            o.length > 0 && (i.images = o);
                        }
                        return i;
                      },
                      clone: function() {
                        return new this.constructor().copy(this);
                      },
                      copy: function(t) {
                        (this.name = t.name),
                          (this.fog = t.fog),
                          (this.lights = t.lights),
                          (this.blending = t.blending),
                          (this.side = t.side),
                          (this.flatShading = t.flatShading),
                          (this.vertexColors = t.vertexColors),
                          (this.opacity = t.opacity),
                          (this.transparent = t.transparent),
                          (this.blendSrc = t.blendSrc),
                          (this.blendDst = t.blendDst),
                          (this.blendEquation = t.blendEquation),
                          (this.blendSrcAlpha = t.blendSrcAlpha),
                          (this.blendDstAlpha = t.blendDstAlpha),
                          (this.blendEquationAlpha = t.blendEquationAlpha),
                          (this.depthFunc = t.depthFunc),
                          (this.depthTest = t.depthTest),
                          (this.depthWrite = t.depthWrite),
                          (this.colorWrite = t.colorWrite),
                          (this.precision = t.precision),
                          (this.polygonOffset = t.polygonOffset),
                          (this.polygonOffsetFactor = t.polygonOffsetFactor),
                          (this.polygonOffsetUnits = t.polygonOffsetUnits),
                          (this.dithering = t.dithering),
                          (this.alphaTest = t.alphaTest),
                          (this.premultipliedAlpha = t.premultipliedAlpha),
                          (this.overdraw = t.overdraw),
                          (this.visible = t.visible),
                          (this.userData = JSON.parse(
                            JSON.stringify(t.userData)
                          )),
                          (this.clipShadows = t.clipShadows),
                          (this.clipIntersection = t.clipIntersection);
                        var e = t.clippingPlanes,
                          i = null;
                        if (null !== e) {
                          var n = e.length;
                          i = new Array(n);
                          for (var r = 0; r !== n; ++r) i[r] = e[r].clone();
                        }
                        return (this.clippingPlanes = i), this;
                      },
                      dispose: function() {
                        this.dispatchEvent({ type: 'dispose' });
                      }
                    }),
                      (sn.prototype = Object.create(on.prototype)),
                      (sn.prototype.constructor = sn),
                      (sn.prototype.isShaderMaterial = !0),
                      (sn.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          (this.fragmentShader = t.fragmentShader),
                          (this.vertexShader = t.vertexShader),
                          (this.uniforms = _i.clone(t.uniforms)),
                          (this.defines = t.defines),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          (this.lights = t.lights),
                          (this.clipping = t.clipping),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.morphNormals = t.morphNormals),
                          (this.extensions = t.extensions),
                          this
                        );
                      }),
                      (sn.prototype.toJSON = function(t) {
                        var e = on.prototype.toJSON.call(this, t);
                        return (
                          (e.uniforms = this.uniforms),
                          (e.vertexShader = this.vertexShader),
                          (e.fragmentShader = this.fragmentShader),
                          e
                        );
                      }),
                      (an.prototype = Object.create(on.prototype)),
                      (an.prototype.constructor = an),
                      (an.prototype.isMeshDepthMaterial = !0),
                      (an.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          (this.depthPacking = t.depthPacking),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.map = t.map),
                          (this.alphaMap = t.alphaMap),
                          (this.displacementMap = t.displacementMap),
                          (this.displacementScale = t.displacementScale),
                          (this.displacementBias = t.displacementBias),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          this
                        );
                      }),
                      (cn.prototype = Object.create(on.prototype)),
                      (cn.prototype.constructor = cn),
                      (cn.prototype.isMeshDistanceMaterial = !0),
                      (cn.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.referencePosition.copy(t.referencePosition),
                          (this.nearDistance = t.nearDistance),
                          (this.farDistance = t.farDistance),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.map = t.map),
                          (this.alphaMap = t.alphaMap),
                          (this.displacementMap = t.displacementMap),
                          (this.displacementScale = t.displacementScale),
                          (this.displacementBias = t.displacementBias),
                          this
                        );
                      }),
                      Object.assign(ln.prototype, {
                        isBox3: !0,
                        set: function(t, e) {
                          return this.min.copy(t), this.max.copy(e), this;
                        },
                        setFromArray: function(t) {
                          for (
                            var e = 1 / 0,
                              i = 1 / 0,
                              n = 1 / 0,
                              r = -1 / 0,
                              o = -1 / 0,
                              s = -1 / 0,
                              a = 0,
                              c = t.length;
                            a < c;
                            a += 3
                          ) {
                            var l = t[a],
                              u = t[a + 1],
                              h = t[a + 2];
                            l < e && (e = l),
                              u < i && (i = u),
                              h < n && (n = h),
                              l > r && (r = l),
                              u > o && (o = u),
                              h > s && (s = h);
                          }
                          return (
                            this.min.set(e, i, n), this.max.set(r, o, s), this
                          );
                        },
                        setFromBufferAttribute: function(t) {
                          for (
                            var e = 1 / 0,
                              i = 1 / 0,
                              n = 1 / 0,
                              r = -1 / 0,
                              o = -1 / 0,
                              s = -1 / 0,
                              a = 0,
                              c = t.count;
                            a < c;
                            a++
                          ) {
                            var l = t.getX(a),
                              u = t.getY(a),
                              h = t.getZ(a);
                            l < e && (e = l),
                              u < i && (i = u),
                              h < n && (n = h),
                              l > r && (r = l),
                              u > o && (o = u),
                              h > s && (s = h);
                          }
                          return (
                            this.min.set(e, i, n), this.max.set(r, o, s), this
                          );
                        },
                        setFromPoints: function(t) {
                          this.makeEmpty();
                          for (var e = 0, i = t.length; e < i; e++)
                            this.expandByPoint(t[e]);
                          return this;
                        },
                        setFromCenterAndSize: ((Vi = new ke()),
                        function(t, e) {
                          var i = Vi.copy(e).multiplyScalar(0.5);
                          return (
                            this.min.copy(t).sub(i),
                            this.max.copy(t).add(i),
                            this
                          );
                        }),
                        setFromObject: function(t) {
                          return this.makeEmpty(), this.expandByObject(t);
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.min.copy(t.min), this.max.copy(t.max), this
                          );
                        },
                        makeEmpty: function() {
                          return (
                            (this.min.x = this.min.y = this.min.z = 1 / 0),
                            (this.max.x = this.max.y = this.max.z = -1 / 0),
                            this
                          );
                        },
                        isEmpty: function() {
                          return (
                            this.max.x < this.min.x ||
                            this.max.y < this.min.y ||
                            this.max.z < this.min.z
                          );
                        },
                        getCenter: function(t) {
                          var e = t || new ke();
                          return this.isEmpty()
                            ? e.set(0, 0, 0)
                            : e
                                .addVectors(this.min, this.max)
                                .multiplyScalar(0.5);
                        },
                        getSize: function(t) {
                          var e = t || new ke();
                          return this.isEmpty()
                            ? e.set(0, 0, 0)
                            : e.subVectors(this.max, this.min);
                        },
                        expandByPoint: function(t) {
                          return this.min.min(t), this.max.max(t), this;
                        },
                        expandByVector: function(t) {
                          return this.min.sub(t), this.max.add(t), this;
                        },
                        expandByScalar: function(t) {
                          return (
                            this.min.addScalar(-t), this.max.addScalar(t), this
                          );
                        },
                        expandByObject: ((Hi = new ke()),
                        function(t) {
                          var e = this;
                          return (
                            t.updateMatrixWorld(!0),
                            t.traverse(function(t) {
                              var i,
                                n,
                                r = t.geometry;
                              if (void 0 !== r)
                                if (r.isGeometry) {
                                  var o = r.vertices;
                                  for (i = 0, n = o.length; i < n; i++)
                                    Hi.copy(o[i]),
                                      Hi.applyMatrix4(t.matrixWorld),
                                      e.expandByPoint(Hi);
                                } else if (r.isBufferGeometry) {
                                  var s = r.attributes.position;
                                  if (void 0 !== s)
                                    for (i = 0, n = s.count; i < n; i++)
                                      Hi.fromBufferAttribute(s, i).applyMatrix4(
                                        t.matrixWorld
                                      ),
                                        e.expandByPoint(Hi);
                                }
                            }),
                            this
                          );
                        }),
                        containsPoint: function(t) {
                          return !(
                            t.x < this.min.x ||
                            t.x > this.max.x ||
                            t.y < this.min.y ||
                            t.y > this.max.y ||
                            t.z < this.min.z ||
                            t.z > this.max.z
                          );
                        },
                        containsBox: function(t) {
                          return (
                            this.min.x <= t.min.x &&
                            t.max.x <= this.max.x &&
                            this.min.y <= t.min.y &&
                            t.max.y <= this.max.y &&
                            this.min.z <= t.min.z &&
                            t.max.z <= this.max.z
                          );
                        },
                        getParameter: function(t, e) {
                          return (e || new ke()).set(
                            (t.x - this.min.x) / (this.max.x - this.min.x),
                            (t.y - this.min.y) / (this.max.y - this.min.y),
                            (t.z - this.min.z) / (this.max.z - this.min.z)
                          );
                        },
                        intersectsBox: function(t) {
                          return !(
                            t.max.x < this.min.x ||
                            t.min.x > this.max.x ||
                            t.max.y < this.min.y ||
                            t.min.y > this.max.y ||
                            t.max.z < this.min.z ||
                            t.min.z > this.max.z
                          );
                        },
                        intersectsSphere: ((Fi = new ke()),
                        function(t) {
                          return (
                            this.clampPoint(t.center, Fi),
                            Fi.distanceToSquared(t.center) <=
                              t.radius * t.radius
                          );
                        }),
                        intersectsPlane: function(t) {
                          var e, i;
                          return (
                            t.normal.x > 0
                              ? ((e = t.normal.x * this.min.x),
                                (i = t.normal.x * this.max.x))
                              : ((e = t.normal.x * this.max.x),
                                (i = t.normal.x * this.min.x)),
                            t.normal.y > 0
                              ? ((e += t.normal.y * this.min.y),
                                (i += t.normal.y * this.max.y))
                              : ((e += t.normal.y * this.max.y),
                                (i += t.normal.y * this.min.y)),
                            t.normal.z > 0
                              ? ((e += t.normal.z * this.min.z),
                                (i += t.normal.z * this.max.z))
                              : ((e += t.normal.z * this.max.z),
                                (i += t.normal.z * this.min.z)),
                            e <= t.constant && i >= t.constant
                          );
                        },
                        clampPoint: function(t, e) {
                          return (e || new ke())
                            .copy(t)
                            .clamp(this.min, this.max);
                        },
                        distanceToPoint: ((Ui = new ke()),
                        function(t) {
                          return Ui.copy(t)
                            .clamp(this.min, this.max)
                            .sub(t)
                            .length();
                        }),
                        getBoundingSphere: ((Pi = new ke()),
                        function(t) {
                          var e = t || new un();
                          return (
                            this.getCenter(e.center),
                            (e.radius = 0.5 * this.getSize(Pi).length()),
                            e
                          );
                        }),
                        intersect: function(t) {
                          return (
                            this.min.max(t.min),
                            this.max.min(t.max),
                            this.isEmpty() && this.makeEmpty(),
                            this
                          );
                        },
                        union: function(t) {
                          return this.min.min(t.min), this.max.max(t.max), this;
                        },
                        applyMatrix4: ((Bi = [
                          new ke(),
                          new ke(),
                          new ke(),
                          new ke(),
                          new ke(),
                          new ke(),
                          new ke(),
                          new ke()
                        ]),
                        function(t) {
                          return this.isEmpty()
                            ? this
                            : (Bi[0]
                                .set(this.min.x, this.min.y, this.min.z)
                                .applyMatrix4(t),
                              Bi[1]
                                .set(this.min.x, this.min.y, this.max.z)
                                .applyMatrix4(t),
                              Bi[2]
                                .set(this.min.x, this.max.y, this.min.z)
                                .applyMatrix4(t),
                              Bi[3]
                                .set(this.min.x, this.max.y, this.max.z)
                                .applyMatrix4(t),
                              Bi[4]
                                .set(this.max.x, this.min.y, this.min.z)
                                .applyMatrix4(t),
                              Bi[5]
                                .set(this.max.x, this.min.y, this.max.z)
                                .applyMatrix4(t),
                              Bi[6]
                                .set(this.max.x, this.max.y, this.min.z)
                                .applyMatrix4(t),
                              Bi[7]
                                .set(this.max.x, this.max.y, this.max.z)
                                .applyMatrix4(t),
                              this.setFromPoints(Bi),
                              this);
                        }),
                        translate: function(t) {
                          return this.min.add(t), this.max.add(t), this;
                        },
                        equals: function(t) {
                          return (
                            t.min.equals(this.min) && t.max.equals(this.max)
                          );
                        }
                      }),
                      Object.assign(un.prototype, {
                        set: function(t, e) {
                          return this.center.copy(t), (this.radius = e), this;
                        },
                        setFromPoints: ((Gi = new ln()),
                        function(t, e) {
                          var i = this.center;
                          void 0 !== e
                            ? i.copy(e)
                            : Gi.setFromPoints(t).getCenter(i);
                          for (var n = 0, r = 0, o = t.length; r < o; r++)
                            n = Math.max(n, i.distanceToSquared(t[r]));
                          return (this.radius = Math.sqrt(n)), this;
                        }),
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.center.copy(t.center),
                            (this.radius = t.radius),
                            this
                          );
                        },
                        empty: function() {
                          return this.radius <= 0;
                        },
                        containsPoint: function(t) {
                          return (
                            t.distanceToSquared(this.center) <=
                            this.radius * this.radius
                          );
                        },
                        distanceToPoint: function(t) {
                          return t.distanceTo(this.center) - this.radius;
                        },
                        intersectsSphere: function(t) {
                          var e = this.radius + t.radius;
                          return (
                            t.center.distanceToSquared(this.center) <= e * e
                          );
                        },
                        intersectsBox: function(t) {
                          return t.intersectsSphere(this);
                        },
                        intersectsPlane: function(t) {
                          return (
                            Math.abs(t.distanceToPoint(this.center)) <=
                            this.radius
                          );
                        },
                        clampPoint: function(t, e) {
                          var i = this.center.distanceToSquared(t),
                            n = e || new ke();
                          return (
                            n.copy(t),
                            i > this.radius * this.radius &&
                              (n.sub(this.center).normalize(),
                              n.multiplyScalar(this.radius).add(this.center)),
                            n
                          );
                        },
                        getBoundingBox: function(t) {
                          var e = t || new ln();
                          return (
                            e.set(this.center, this.center),
                            e.expandByScalar(this.radius),
                            e
                          );
                        },
                        applyMatrix4: function(t) {
                          return (
                            this.center.applyMatrix4(t),
                            (this.radius = this.radius * t.getMaxScaleOnAxis()),
                            this
                          );
                        },
                        translate: function(t) {
                          return this.center.add(t), this;
                        },
                        equals: function(t) {
                          return (
                            t.center.equals(this.center) &&
                            t.radius === this.radius
                          );
                        }
                      }),
                      Object.assign(hn.prototype, {
                        isMatrix3: !0,
                        set: function(t, e, i, n, r, o, s, a, c) {
                          var l = this.elements;
                          return (
                            (l[0] = t),
                            (l[1] = n),
                            (l[2] = s),
                            (l[3] = e),
                            (l[4] = r),
                            (l[5] = a),
                            (l[6] = i),
                            (l[7] = o),
                            (l[8] = c),
                            this
                          );
                        },
                        identity: function() {
                          return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this;
                        },
                        clone: function() {
                          return new this.constructor().fromArray(
                            this.elements
                          );
                        },
                        copy: function(t) {
                          var e = this.elements,
                            i = t.elements;
                          return (
                            (e[0] = i[0]),
                            (e[1] = i[1]),
                            (e[2] = i[2]),
                            (e[3] = i[3]),
                            (e[4] = i[4]),
                            (e[5] = i[5]),
                            (e[6] = i[6]),
                            (e[7] = i[7]),
                            (e[8] = i[8]),
                            this
                          );
                        },
                        setFromMatrix4: function(t) {
                          var e = t.elements;
                          return (
                            this.set(
                              e[0],
                              e[4],
                              e[8],
                              e[1],
                              e[5],
                              e[9],
                              e[2],
                              e[6],
                              e[10]
                            ),
                            this
                          );
                        },
                        applyToBufferAttribute: ((Yi = new ke()),
                        function(t) {
                          for (var e = 0, i = t.count; e < i; e++)
                            (Yi.x = t.getX(e)),
                              (Yi.y = t.getY(e)),
                              (Yi.z = t.getZ(e)),
                              Yi.applyMatrix3(this),
                              t.setXYZ(e, Yi.x, Yi.y, Yi.z);
                          return t;
                        }),
                        multiply: function(t) {
                          return this.multiplyMatrices(this, t);
                        },
                        premultiply: function(t) {
                          return this.multiplyMatrices(t, this);
                        },
                        multiplyMatrices: function(t, e) {
                          var i = t.elements,
                            n = e.elements,
                            r = this.elements,
                            o = i[0],
                            s = i[3],
                            a = i[6],
                            c = i[1],
                            l = i[4],
                            u = i[7],
                            h = i[2],
                            d = i[5],
                            p = i[8],
                            f = n[0],
                            m = n[3],
                            g = n[6],
                            v = n[1],
                            y = n[4],
                            w = n[7],
                            M = n[2],
                            E = n[5],
                            b = n[8];
                          return (
                            (r[0] = o * f + s * v + a * M),
                            (r[3] = o * m + s * y + a * E),
                            (r[6] = o * g + s * w + a * b),
                            (r[1] = c * f + l * v + u * M),
                            (r[4] = c * m + l * y + u * E),
                            (r[7] = c * g + l * w + u * b),
                            (r[2] = h * f + d * v + p * M),
                            (r[5] = h * m + d * y + p * E),
                            (r[8] = h * g + d * w + p * b),
                            this
                          );
                        },
                        multiplyScalar: function(t) {
                          var e = this.elements;
                          return (
                            (e[0] *= t),
                            (e[3] *= t),
                            (e[6] *= t),
                            (e[1] *= t),
                            (e[4] *= t),
                            (e[7] *= t),
                            (e[2] *= t),
                            (e[5] *= t),
                            (e[8] *= t),
                            this
                          );
                        },
                        determinant: function() {
                          var t = this.elements,
                            e = t[0],
                            i = t[1],
                            n = t[2],
                            r = t[3],
                            o = t[4],
                            s = t[5],
                            a = t[6],
                            c = t[7],
                            l = t[8];
                          return (
                            e * o * l -
                            e * s * c -
                            i * r * l +
                            i * s * a +
                            n * r * c -
                            n * o * a
                          );
                        },
                        getInverse: function(t, e) {
                          t &&
                            t.isMatrix4 &&
                            console.error(
                              'THREE.Matrix3: .getInverse() no longer takes a Matrix4 argument.'
                            );
                          var i = t.elements,
                            n = this.elements,
                            r = i[0],
                            o = i[1],
                            s = i[2],
                            a = i[3],
                            c = i[4],
                            l = i[5],
                            u = i[6],
                            h = i[7],
                            d = i[8],
                            p = d * c - l * h,
                            f = l * u - d * a,
                            m = h * a - c * u,
                            g = r * p + o * f + s * m;
                          if (0 === g) {
                            var v =
                              "THREE.Matrix3: .getInverse() can't invert matrix, determinant is 0";
                            if (!0 === e) throw new Error(v);
                            return console.warn(v), this.identity();
                          }
                          var y = 1 / g;
                          return (
                            (n[0] = p * y),
                            (n[1] = (s * h - d * o) * y),
                            (n[2] = (l * o - s * c) * y),
                            (n[3] = f * y),
                            (n[4] = (d * r - s * u) * y),
                            (n[5] = (s * a - l * r) * y),
                            (n[6] = m * y),
                            (n[7] = (o * u - h * r) * y),
                            (n[8] = (c * r - o * a) * y),
                            this
                          );
                        },
                        transpose: function() {
                          var t,
                            e = this.elements;
                          return (
                            (t = e[1]),
                            (e[1] = e[3]),
                            (e[3] = t),
                            (t = e[2]),
                            (e[2] = e[6]),
                            (e[6] = t),
                            (t = e[5]),
                            (e[5] = e[7]),
                            (e[7] = t),
                            this
                          );
                        },
                        getNormalMatrix: function(t) {
                          return this.setFromMatrix4(t)
                            .getInverse(this)
                            .transpose();
                        },
                        transposeIntoArray: function(t) {
                          var e = this.elements;
                          return (
                            (t[0] = e[0]),
                            (t[1] = e[3]),
                            (t[2] = e[6]),
                            (t[3] = e[1]),
                            (t[4] = e[4]),
                            (t[5] = e[7]),
                            (t[6] = e[2]),
                            (t[7] = e[5]),
                            (t[8] = e[8]),
                            this
                          );
                        },
                        equals: function(t) {
                          for (
                            var e = this.elements, i = t.elements, n = 0;
                            n < 9;
                            n++
                          )
                            if (e[n] !== i[n]) return !1;
                          return !0;
                        },
                        fromArray: function(t, e) {
                          void 0 === e && (e = 0);
                          for (var i = 0; i < 9; i++)
                            this.elements[i] = t[i + e];
                          return this;
                        },
                        toArray: function(t, e) {
                          void 0 === t && (t = []), void 0 === e && (e = 0);
                          var i = this.elements;
                          return (
                            (t[e] = i[0]),
                            (t[e + 1] = i[1]),
                            (t[e + 2] = i[2]),
                            (t[e + 3] = i[3]),
                            (t[e + 4] = i[4]),
                            (t[e + 5] = i[5]),
                            (t[e + 6] = i[6]),
                            (t[e + 7] = i[7]),
                            (t[e + 8] = i[8]),
                            t
                          );
                        }
                      }),
                      Object.assign(dn.prototype, {
                        set: function(t, e) {
                          return this.normal.copy(t), (this.constant = e), this;
                        },
                        setComponents: function(t, e, i, n) {
                          return (
                            this.normal.set(t, e, i), (this.constant = n), this
                          );
                        },
                        setFromNormalAndCoplanarPoint: function(t, e) {
                          return (
                            this.normal.copy(t),
                            (this.constant = -e.dot(this.normal)),
                            this
                          );
                        },
                        setFromCoplanarPoints: ((Xi = new ke()),
                        (Ki = new ke()),
                        function(t, e, i) {
                          var n = Xi.subVectors(i, e)
                            .cross(Ki.subVectors(t, e))
                            .normalize();
                          return this.setFromNormalAndCoplanarPoint(n, t), this;
                        }),
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.normal.copy(t.normal),
                            (this.constant = t.constant),
                            this
                          );
                        },
                        normalize: function() {
                          var t = 1 / this.normal.length();
                          return (
                            this.normal.multiplyScalar(t),
                            (this.constant *= t),
                            this
                          );
                        },
                        negate: function() {
                          return (
                            (this.constant *= -1), this.normal.negate(), this
                          );
                        },
                        distanceToPoint: function(t) {
                          return this.normal.dot(t) + this.constant;
                        },
                        distanceToSphere: function(t) {
                          return this.distanceToPoint(t.center) - t.radius;
                        },
                        projectPoint: function(t, e) {
                          return (e || new ke())
                            .copy(this.normal)
                            .multiplyScalar(-this.distanceToPoint(t))
                            .add(t);
                        },
                        intersectLine: ((qi = new ke()),
                        function(t, e) {
                          var i = e || new ke(),
                            n = t.delta(qi),
                            r = this.normal.dot(n);
                          if (0 === r)
                            return 0 === this.distanceToPoint(t.start)
                              ? i.copy(t.start)
                              : void 0;
                          var o =
                            -(t.start.dot(this.normal) + this.constant) / r;
                          return o < 0 || o > 1
                            ? void 0
                            : i
                                .copy(n)
                                .multiplyScalar(o)
                                .add(t.start);
                        }),
                        intersectsLine: function(t) {
                          var e = this.distanceToPoint(t.start),
                            i = this.distanceToPoint(t.end);
                          return (e < 0 && i > 0) || (i < 0 && e > 0);
                        },
                        intersectsBox: function(t) {
                          return t.intersectsPlane(this);
                        },
                        intersectsSphere: function(t) {
                          return t.intersectsPlane(this);
                        },
                        coplanarPoint: function(t) {
                          return (t || new ke())
                            .copy(this.normal)
                            .multiplyScalar(-this.constant);
                        },
                        applyMatrix4: ((Qi = new ke()),
                        (Wi = new hn()),
                        function(t, e) {
                          var i = e || Wi.getNormalMatrix(t),
                            n = this.coplanarPoint(Qi).applyMatrix4(t),
                            r = this.normal.applyMatrix3(i).normalize();
                          return (this.constant = -n.dot(r)), this;
                        }),
                        translate: function(t) {
                          return (this.constant -= t.dot(this.normal)), this;
                        },
                        equals: function(t) {
                          return (
                            t.normal.equals(this.normal) &&
                            t.constant === this.constant
                          );
                        }
                      }),
                      Object.assign(pn.prototype, {
                        set: function(t, e, i, n, r, o) {
                          var s = this.planes;
                          return (
                            s[0].copy(t),
                            s[1].copy(e),
                            s[2].copy(i),
                            s[3].copy(n),
                            s[4].copy(r),
                            s[5].copy(o),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          for (var e = this.planes, i = 0; i < 6; i++)
                            e[i].copy(t.planes[i]);
                          return this;
                        },
                        setFromMatrix: function(t) {
                          var e = this.planes,
                            i = t.elements,
                            n = i[0],
                            r = i[1],
                            o = i[2],
                            s = i[3],
                            a = i[4],
                            c = i[5],
                            l = i[6],
                            u = i[7],
                            h = i[8],
                            d = i[9],
                            p = i[10],
                            f = i[11],
                            m = i[12],
                            g = i[13],
                            v = i[14],
                            y = i[15];
                          return (
                            e[0]
                              .setComponents(s - n, u - a, f - h, y - m)
                              .normalize(),
                            e[1]
                              .setComponents(s + n, u + a, f + h, y + m)
                              .normalize(),
                            e[2]
                              .setComponents(s + r, u + c, f + d, y + g)
                              .normalize(),
                            e[3]
                              .setComponents(s - r, u - c, f - d, y - g)
                              .normalize(),
                            e[4]
                              .setComponents(s - o, u - l, f - p, y - v)
                              .normalize(),
                            e[5]
                              .setComponents(s + o, u + l, f + p, y + v)
                              .normalize(),
                            this
                          );
                        },
                        intersectsObject: ((tn = new un()),
                        function(t) {
                          var e = t.geometry;
                          return (
                            null === e.boundingSphere &&
                              e.computeBoundingSphere(),
                            tn
                              .copy(e.boundingSphere)
                              .applyMatrix4(t.matrixWorld),
                            this.intersectsSphere(tn)
                          );
                        }),
                        intersectsSprite: (($i = new un()),
                        function(t) {
                          return (
                            $i.center.set(0, 0, 0),
                            ($i.radius = 0.7071067811865476),
                            $i.applyMatrix4(t.matrixWorld),
                            this.intersectsSphere($i)
                          );
                        }),
                        intersectsSphere: function(t) {
                          for (
                            var e = this.planes,
                              i = t.center,
                              n = -t.radius,
                              r = 0;
                            r < 6;
                            r++
                          ) {
                            if (e[r].distanceToPoint(i) < n) return !1;
                          }
                          return !0;
                        },
                        intersectsBox: ((Zi = new ke()),
                        (Ji = new ke()),
                        function(t) {
                          for (var e = this.planes, i = 0; i < 6; i++) {
                            var n = e[i];
                            (Zi.x = n.normal.x > 0 ? t.min.x : t.max.x),
                              (Ji.x = n.normal.x > 0 ? t.max.x : t.min.x),
                              (Zi.y = n.normal.y > 0 ? t.min.y : t.max.y),
                              (Ji.y = n.normal.y > 0 ? t.max.y : t.min.y),
                              (Zi.z = n.normal.z > 0 ? t.min.z : t.max.z),
                              (Ji.z = n.normal.z > 0 ? t.max.z : t.min.z);
                            var r = n.distanceToPoint(Zi),
                              o = n.distanceToPoint(Ji);
                            if (r < 0 && o < 0) return !1;
                          }
                          return !0;
                        }),
                        containsPoint: function(t) {
                          for (var e = this.planes, i = 0; i < 6; i++)
                            if (e[i].distanceToPoint(t) < 0) return !1;
                          return !0;
                        }
                      }),
                      (gn.RotationOrders = [
                        'XYZ',
                        'YZX',
                        'ZXY',
                        'XZY',
                        'YXZ',
                        'ZYX'
                      ]),
                      (gn.DefaultOrder = 'XYZ'),
                      Object.defineProperties(gn.prototype, {
                        x: {
                          get: function() {
                            return this._x;
                          },
                          set: function(t) {
                            (this._x = t), this.onChangeCallback();
                          }
                        },
                        y: {
                          get: function() {
                            return this._y;
                          },
                          set: function(t) {
                            (this._y = t), this.onChangeCallback();
                          }
                        },
                        z: {
                          get: function() {
                            return this._z;
                          },
                          set: function(t) {
                            (this._z = t), this.onChangeCallback();
                          }
                        },
                        order: {
                          get: function() {
                            return this._order;
                          },
                          set: function(t) {
                            (this._order = t), this.onChangeCallback();
                          }
                        }
                      }),
                      Object.assign(gn.prototype, {
                        isEuler: !0,
                        set: function(t, e, i, n) {
                          return (
                            (this._x = t),
                            (this._y = e),
                            (this._z = i),
                            (this._order = n || this._order),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor(
                            this._x,
                            this._y,
                            this._z,
                            this._order
                          );
                        },
                        copy: function(t) {
                          return (
                            (this._x = t._x),
                            (this._y = t._y),
                            (this._z = t._z),
                            (this._order = t._order),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        setFromRotationMatrix: function(t, e, i) {
                          var n = ue.clamp,
                            r = t.elements,
                            o = r[0],
                            s = r[4],
                            a = r[8],
                            c = r[1],
                            l = r[5],
                            u = r[9],
                            h = r[2],
                            d = r[6],
                            p = r[10];
                          return (
                            'XYZ' === (e = e || this._order)
                              ? ((this._y = Math.asin(n(a, -1, 1))),
                                Math.abs(a) < 0.99999
                                  ? ((this._x = Math.atan2(-u, p)),
                                    (this._z = Math.atan2(-s, o)))
                                  : ((this._x = Math.atan2(d, l)),
                                    (this._z = 0)))
                              : 'YXZ' === e
                                ? ((this._x = Math.asin(-n(u, -1, 1))),
                                  Math.abs(u) < 0.99999
                                    ? ((this._y = Math.atan2(a, p)),
                                      (this._z = Math.atan2(c, l)))
                                    : ((this._y = Math.atan2(-h, o)),
                                      (this._z = 0)))
                                : 'ZXY' === e
                                  ? ((this._x = Math.asin(n(d, -1, 1))),
                                    Math.abs(d) < 0.99999
                                      ? ((this._y = Math.atan2(-h, p)),
                                        (this._z = Math.atan2(-s, l)))
                                      : ((this._y = 0),
                                        (this._z = Math.atan2(c, o))))
                                  : 'ZYX' === e
                                    ? ((this._y = Math.asin(-n(h, -1, 1))),
                                      Math.abs(h) < 0.99999
                                        ? ((this._x = Math.atan2(d, p)),
                                          (this._z = Math.atan2(c, o)))
                                        : ((this._x = 0),
                                          (this._z = Math.atan2(-s, l))))
                                    : 'YZX' === e
                                      ? ((this._z = Math.asin(n(c, -1, 1))),
                                        Math.abs(c) < 0.99999
                                          ? ((this._x = Math.atan2(-u, l)),
                                            (this._y = Math.atan2(-h, o)))
                                          : ((this._x = 0),
                                            (this._y = Math.atan2(a, p))))
                                      : 'XZY' === e
                                        ? ((this._z = Math.asin(-n(s, -1, 1))),
                                          Math.abs(s) < 0.99999
                                            ? ((this._x = Math.atan2(d, l)),
                                              (this._y = Math.atan2(a, o)))
                                            : ((this._x = Math.atan2(-u, p)),
                                              (this._y = 0)))
                                        : console.warn(
                                            'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' +
                                              e
                                          ),
                            (this._order = e),
                            !1 !== i && this.onChangeCallback(),
                            this
                          );
                        },
                        setFromQuaternion: ((nn = new Be()),
                        function(t, e, i) {
                          return (
                            nn.makeRotationFromQuaternion(t),
                            this.setFromRotationMatrix(nn, e, i)
                          );
                        }),
                        setFromVector3: function(t, e) {
                          return this.set(t.x, t.y, t.z, e || this._order);
                        },
                        reorder: ((en = new ze()),
                        function(t) {
                          return (
                            en.setFromEuler(this), this.setFromQuaternion(en, t)
                          );
                        }),
                        equals: function(t) {
                          return (
                            t._x === this._x &&
                            t._y === this._y &&
                            t._z === this._z &&
                            t._order === this._order
                          );
                        },
                        fromArray: function(t) {
                          return (
                            (this._x = t[0]),
                            (this._y = t[1]),
                            (this._z = t[2]),
                            void 0 !== t[3] && (this._order = t[3]),
                            this.onChangeCallback(),
                            this
                          );
                        },
                        toArray: function(t, e) {
                          return (
                            void 0 === t && (t = []),
                            void 0 === e && (e = 0),
                            (t[e] = this._x),
                            (t[e + 1] = this._y),
                            (t[e + 2] = this._z),
                            (t[e + 3] = this._order),
                            t
                          );
                        },
                        toVector3: function(t) {
                          return t
                            ? t.set(this._x, this._y, this._z)
                            : new ke(this._x, this._y, this._z);
                        },
                        onChange: function(t) {
                          return (this.onChangeCallback = t), this;
                        },
                        onChangeCallback: function() {}
                      }),
                      Object.assign(vn.prototype, {
                        set: function(t) {
                          this.mask = (1 << t) | 0;
                        },
                        enable: function(t) {
                          this.mask |= (1 << t) | 0;
                        },
                        toggle: function(t) {
                          this.mask ^= (1 << t) | 0;
                        },
                        disable: function(t) {
                          this.mask &= ~((1 << t) | 0);
                        },
                        test: function(t) {
                          return 0 != (this.mask & t.mask);
                        }
                      });
                    var yn,
                      wn,
                      Mn,
                      En,
                      bn,
                      xn,
                      An,
                      Tn,
                      Ln,
                      Nn,
                      Dn,
                      Sn,
                      Cn,
                      _n,
                      In,
                      jn,
                      On,
                      Rn = 0;
                    function zn() {
                      Object.defineProperty(this, 'id', { value: Rn++ }),
                        (this.uuid = ue.generateUUID()),
                        (this.name = ''),
                        (this.type = 'Object3D'),
                        (this.parent = null),
                        (this.children = []),
                        (this.up = zn.DefaultUp.clone());
                      var t = new ke(),
                        e = new gn(),
                        i = new ze(),
                        n = new ke(1, 1, 1);
                      e.onChange(function() {
                        i.setFromEuler(e, !1);
                      }),
                        i.onChange(function() {
                          e.setFromQuaternion(i, void 0, !1);
                        }),
                        Object.defineProperties(this, {
                          position: { enumerable: !0, value: t },
                          rotation: { enumerable: !0, value: e },
                          quaternion: { enumerable: !0, value: i },
                          scale: { enumerable: !0, value: n },
                          modelViewMatrix: { value: new Be() },
                          normalMatrix: { value: new hn() }
                        }),
                        (this.matrix = new Be()),
                        (this.matrixWorld = new Be()),
                        (this.matrixAutoUpdate = zn.DefaultMatrixAutoUpdate),
                        (this.matrixWorldNeedsUpdate = !1),
                        (this.layers = new vn()),
                        (this.visible = !0),
                        (this.castShadow = !1),
                        (this.receiveShadow = !1),
                        (this.frustumCulled = !1),
                        (this.renderOrder = 0),
                        (this.userData = {});
                    }
                    function kn() {
                      zn.call(this),
                        (this.type = 'Camera'),
                        (this.matrixWorldInverse = new Be()),
                        (this.projectionMatrix = new Be());
                    }
                    function Bn(t, e, i, n, r, o) {
                      kn.call(this),
                        (this.type = 'OrthographicCamera'),
                        (this.zoom = 1),
                        (this.view = null),
                        (this.left = t),
                        (this.right = e),
                        (this.top = i),
                        (this.bottom = n),
                        (this.near = void 0 !== r ? r : 0.1),
                        (this.far = void 0 !== o ? o : 2e3),
                        this.updateProjectionMatrix();
                    }
                    function Pn(t, e, i, n) {
                      kn.call(this),
                        (this.type = 'PerspectiveCamera'),
                        (this.fov = void 0 !== t ? t : 50),
                        (this.zoom = 1),
                        (this.near = void 0 !== i ? i : 0.1),
                        (this.far = void 0 !== n ? n : 2e3),
                        (this.focus = 10),
                        (this.aspect = void 0 !== e ? e : 1),
                        (this.view = null),
                        (this.filmGauge = 35),
                        (this.filmOffset = 0),
                        this.updateProjectionMatrix();
                    }
                    function Un(t, e, i, n, r, o) {
                      (this.a = t),
                        (this.b = e),
                        (this.c = i),
                        (this.normal = n && n.isVector3 ? n : new ke()),
                        (this.vertexNormals = Array.isArray(n) ? n : []),
                        (this.color = r && r.isColor ? r : new Ni()),
                        (this.vertexColors = Array.isArray(r) ? r : []),
                        (this.materialIndex = void 0 !== o ? o : 0);
                    }
                    (zn.DefaultUp = new ke(0, 1, 0)),
                      (zn.DefaultMatrixAutoUpdate = !0),
                      Object.assign(zn.prototype, e.prototype, {
                        isObject3D: !0,
                        onBeforeRender: function() {},
                        onAfterRender: function() {},
                        applyMatrix: function(t) {
                          this.matrix.multiplyMatrices(t, this.matrix),
                            this.matrix.decompose(
                              this.position,
                              this.quaternion,
                              this.scale
                            );
                        },
                        applyQuaternion: function(t) {
                          return this.quaternion.premultiply(t), this;
                        },
                        setRotationFromAxisAngle: function(t, e) {
                          this.quaternion.setFromAxisAngle(t, e);
                        },
                        setRotationFromEuler: function(t) {
                          this.quaternion.setFromEuler(t, !0);
                        },
                        setRotationFromMatrix: function(t) {
                          this.quaternion.setFromRotationMatrix(t);
                        },
                        setRotationFromQuaternion: function(t) {
                          this.quaternion.copy(t);
                        },
                        rotateOnAxis: ((jn = new ze()),
                        function(t, e) {
                          return (
                            jn.setFromAxisAngle(t, e),
                            this.quaternion.multiply(jn),
                            this
                          );
                        }),
                        rotateX: ((In = new ke(1, 0, 0)),
                        function(t) {
                          return this.rotateOnAxis(In, t);
                        }),
                        rotateY: ((_n = new ke(0, 1, 0)),
                        function(t) {
                          return this.rotateOnAxis(_n, t);
                        }),
                        rotateZ: ((Cn = new ke(0, 0, 1)),
                        function(t) {
                          return this.rotateOnAxis(Cn, t);
                        }),
                        translateOnAxis: ((Sn = new ke()),
                        function(t, e) {
                          return (
                            Sn.copy(t).applyQuaternion(this.quaternion),
                            this.position.add(Sn.multiplyScalar(e)),
                            this
                          );
                        }),
                        translateX: ((Dn = new ke(1, 0, 0)),
                        function(t) {
                          return this.translateOnAxis(Dn, t);
                        }),
                        translateY: ((Nn = new ke(0, 1, 0)),
                        function(t) {
                          return this.translateOnAxis(Nn, t);
                        }),
                        translateZ: ((Ln = new ke(0, 0, 1)),
                        function(t) {
                          return this.translateOnAxis(Ln, t);
                        }),
                        localToWorld: function(t) {
                          return t.applyMatrix4(this.matrixWorld);
                        },
                        worldToLocal: ((Tn = new Be()),
                        function(t) {
                          return t.applyMatrix4(
                            Tn.getInverse(this.matrixWorld)
                          );
                        }),
                        lookAt: ((An = new Be()),
                        function(t) {
                          this.isCamera
                            ? An.lookAt(this.position, t, this.up)
                            : An.lookAt(t, this.position, this.up),
                            this.quaternion.setFromRotationMatrix(An);
                        }),
                        add: function(t) {
                          if (arguments.length > 1) {
                            for (var e = 0; e < arguments.length; e++)
                              this.add(arguments[e]);
                            return this;
                          }
                          return t === this
                            ? (console.error(
                                "THREE.Object3D.add: object can't be added as a child of itself.",
                                t
                              ),
                              this)
                            : (t && t.isObject3D
                                ? (null !== t.parent && t.parent.remove(t),
                                  (t.parent = this),
                                  t.dispatchEvent({ type: 'added' }),
                                  this.children.push(t))
                                : console.error(
                                    'THREE.Object3D.add: object not an instance of THREE.Object3D.',
                                    t
                                  ),
                              this);
                        },
                        remove: function(t) {
                          if (arguments.length > 1) {
                            for (var e = 0; e < arguments.length; e++)
                              this.remove(arguments[e]);
                            return this;
                          }
                          var i = this.children.indexOf(t);
                          return (
                            -1 !== i &&
                              ((t.parent = null),
                              t.dispatchEvent({ type: 'removed' }),
                              this.children.splice(i, 1)),
                            this
                          );
                        },
                        getObjectById: function(t) {
                          return this.getObjectByProperty('id', t);
                        },
                        getObjectByName: function(t) {
                          return this.getObjectByProperty('name', t);
                        },
                        getObjectByProperty: function(t, e) {
                          if (this[t] === e) return this;
                          for (
                            var i = 0, n = this.children.length;
                            i < n;
                            i++
                          ) {
                            var r = this.children[i].getObjectByProperty(t, e);
                            if (void 0 !== r) return r;
                          }
                        },
                        getWorldPosition: function(t) {
                          var e = t || new ke();
                          return (
                            this.updateMatrixWorld(!0),
                            e.setFromMatrixPosition(this.matrixWorld)
                          );
                        },
                        getWorldQuaternion: ((bn = new ke()),
                        (xn = new ke()),
                        function(t) {
                          var e = t || new ze();
                          return (
                            this.updateMatrixWorld(!0),
                            this.matrixWorld.decompose(bn, e, xn),
                            e
                          );
                        }),
                        getWorldRotation: ((En = new ze()),
                        function(t) {
                          var e = t || new gn();
                          return (
                            this.getWorldQuaternion(En),
                            e.setFromQuaternion(En, this.rotation.order, !1)
                          );
                        }),
                        getWorldScale: ((wn = new ke()),
                        (Mn = new ze()),
                        function(t) {
                          var e = t || new ke();
                          return (
                            this.updateMatrixWorld(!0),
                            this.matrixWorld.decompose(wn, Mn, e),
                            e
                          );
                        }),
                        getWorldDirection: ((yn = new ze()),
                        function(t) {
                          var e = t || new ke();
                          return (
                            this.getWorldQuaternion(yn),
                            e.set(0, 0, 1).applyQuaternion(yn)
                          );
                        }),
                        raycast: function() {},
                        traverse: function(t) {
                          t(this);
                          for (
                            var e = this.children, i = 0, n = e.length;
                            i < n;
                            i++
                          )
                            e[i].traverse(t);
                        },
                        traverseVisible: function(t) {
                          if (!1 !== this.visible) {
                            t(this);
                            for (
                              var e = this.children, i = 0, n = e.length;
                              i < n;
                              i++
                            )
                              e[i].traverseVisible(t);
                          }
                        },
                        traverseAncestors: function(t) {
                          var e = this.parent;
                          null !== e && (t(e), e.traverseAncestors(t));
                        },
                        updateMatrix: function() {
                          this.matrix.compose(
                            this.position,
                            this.quaternion,
                            this.scale
                          ),
                            (this.matrixWorldNeedsUpdate = !0);
                        },
                        updateMatrixWorld: function(t) {
                          this.matrixAutoUpdate && this.updateMatrix(),
                            (this.matrixWorldNeedsUpdate || t) &&
                              (null === this.parent
                                ? this.matrixWorld.copy(this.matrix)
                                : this.matrixWorld.multiplyMatrices(
                                    this.parent.matrixWorld,
                                    this.matrix
                                  ),
                              (this.matrixWorldNeedsUpdate = !1),
                              (t = !0));
                          for (
                            var e = this.children, i = 0, n = e.length;
                            i < n;
                            i++
                          )
                            e[i].updateMatrixWorld(t);
                        },
                        toJSON: function(t) {
                          var e = void 0 === t || '' === t,
                            i = {};
                          e &&
                            ((t = {
                              geometries: {},
                              materials: {},
                              textures: {},
                              images: {}
                            }),
                            (i.metadata = {
                              version: 4.5,
                              type: 'Object',
                              generator: 'Object3D.toJSON'
                            }));
                          var n = {};
                          function r(e, i) {
                            return (
                              void 0 === e[i.uuid] && (e[i.uuid] = i.toJSON(t)),
                              i.uuid
                            );
                          }
                          if (
                            ((n.uuid = this.uuid),
                            (n.type = this.type),
                            '' !== this.name && (n.name = this.name),
                            !0 === this.castShadow && (n.castShadow = !0),
                            !0 === this.receiveShadow && (n.receiveShadow = !0),
                            !1 === this.visible && (n.visible = !1),
                            '{}' !== JSON.stringify(this.userData) &&
                              (n.userData = this.userData),
                            (n.matrix = this.matrix.toArray()),
                            void 0 !== this.geometry &&
                              (n.geometry = r(t.geometries, this.geometry)),
                            void 0 !== this.material)
                          )
                            if (Array.isArray(this.material)) {
                              for (
                                var o = [], s = 0, a = this.material.length;
                                s < a;
                                s++
                              )
                                o.push(r(t.materials, this.material[s]));
                              n.material = o;
                            } else n.material = r(t.materials, this.material);
                          if (this.children.length > 0) {
                            n.children = [];
                            for (s = 0; s < this.children.length; s++)
                              n.children.push(
                                this.children[s].toJSON(t).object
                              );
                          }
                          if (e) {
                            var c = d(t.geometries),
                              l = d(t.materials),
                              u = d(t.textures),
                              h = d(t.images);
                            c.length > 0 && (i.geometries = c),
                              l.length > 0 && (i.materials = l),
                              u.length > 0 && (i.textures = u),
                              h.length > 0 && (i.images = h);
                          }
                          return (i.object = n), i;
                          function d(t) {
                            var e = [];
                            for (var i in t) {
                              var n = t[i];
                              delete n.metadata, e.push(n);
                            }
                            return e;
                          }
                        },
                        clone: function(t) {
                          return new this.constructor().copy(this, t);
                        },
                        copy: function(t, e) {
                          if (
                            (void 0 === e && (e = !0),
                            (this.name = t.name),
                            this.up.copy(t.up),
                            this.position.copy(t.position),
                            this.quaternion.copy(t.quaternion),
                            this.scale.copy(t.scale),
                            this.matrix.copy(t.matrix),
                            this.matrixWorld.copy(t.matrixWorld),
                            (this.matrixAutoUpdate = t.matrixAutoUpdate),
                            (this.matrixWorldNeedsUpdate =
                              t.matrixWorldNeedsUpdate),
                            (this.layers.mask = t.layers.mask),
                            (this.visible = t.visible),
                            (this.castShadow = t.castShadow),
                            (this.receiveShadow = t.receiveShadow),
                            (this.frustumCulled = t.frustumCulled),
                            (this.renderOrder = t.renderOrder),
                            (this.userData = JSON.parse(
                              JSON.stringify(t.userData)
                            )),
                            !0 === e)
                          )
                            for (var i = 0; i < t.children.length; i++) {
                              var n = t.children[i];
                              this.add(n.clone());
                            }
                          return this;
                        }
                      }),
                      (kn.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: kn,
                          isCamera: !0,
                          copy: function(t, e) {
                            return (
                              zn.prototype.copy.call(this, t, e),
                              this.matrixWorldInverse.copy(
                                t.matrixWorldInverse
                              ),
                              this.projectionMatrix.copy(t.projectionMatrix),
                              this
                            );
                          },
                          getWorldDirection: ((On = new ze()),
                          function(t) {
                            var e = t || new ke();
                            return (
                              this.getWorldQuaternion(On),
                              e.set(0, 0, -1).applyQuaternion(On)
                            );
                          }),
                          updateMatrixWorld: function(t) {
                            zn.prototype.updateMatrixWorld.call(this, t),
                              this.matrixWorldInverse.getInverse(
                                this.matrixWorld
                              );
                          },
                          clone: function() {
                            return new this.constructor().copy(this);
                          }
                        }
                      )),
                      (Bn.prototype = Object.assign(
                        Object.create(kn.prototype),
                        {
                          constructor: Bn,
                          isOrthographicCamera: !0,
                          copy: function(t, e) {
                            return (
                              kn.prototype.copy.call(this, t, e),
                              (this.left = t.left),
                              (this.right = t.right),
                              (this.top = t.top),
                              (this.bottom = t.bottom),
                              (this.near = t.near),
                              (this.far = t.far),
                              (this.zoom = t.zoom),
                              (this.view =
                                null === t.view
                                  ? null
                                  : Object.assign({}, t.view)),
                              this
                            );
                          },
                          setViewOffset: function(t, e, i, n, r, o) {
                            (this.view = {
                              fullWidth: t,
                              fullHeight: e,
                              offsetX: i,
                              offsetY: n,
                              width: r,
                              height: o
                            }),
                              this.updateProjectionMatrix();
                          },
                          clearViewOffset: function() {
                            (this.view = null), this.updateProjectionMatrix();
                          },
                          updateProjectionMatrix: function() {
                            var t = (this.right - this.left) / (2 * this.zoom),
                              e = (this.top - this.bottom) / (2 * this.zoom),
                              i = (this.right + this.left) / 2,
                              n = (this.top + this.bottom) / 2,
                              r = i - t,
                              o = i + t,
                              s = n + e,
                              a = n - e;
                            if (null !== this.view) {
                              var c =
                                  this.zoom /
                                  (this.view.width / this.view.fullWidth),
                                l =
                                  this.zoom /
                                  (this.view.height / this.view.fullHeight),
                                u = (this.right - this.left) / this.view.width,
                                h = (this.top - this.bottom) / this.view.height;
                              (o =
                                (r += u * (this.view.offsetX / c)) +
                                u * (this.view.width / c)),
                                (a =
                                  (s -= h * (this.view.offsetY / l)) -
                                  h * (this.view.height / l));
                            }
                            this.projectionMatrix.makeOrthographic(
                              r,
                              o,
                              s,
                              a,
                              this.near,
                              this.far
                            );
                          },
                          toJSON: function(t) {
                            var e = zn.prototype.toJSON.call(this, t);
                            return (
                              (e.object.zoom = this.zoom),
                              (e.object.left = this.left),
                              (e.object.right = this.right),
                              (e.object.top = this.top),
                              (e.object.bottom = this.bottom),
                              (e.object.near = this.near),
                              (e.object.far = this.far),
                              null !== this.view &&
                                (e.object.view = Object.assign({}, this.view)),
                              e
                            );
                          }
                        }
                      )),
                      (Pn.prototype = Object.assign(
                        Object.create(kn.prototype),
                        {
                          constructor: Pn,
                          isPerspectiveCamera: !0,
                          copy: function(t, e) {
                            return (
                              kn.prototype.copy.call(this, t, e),
                              (this.fov = t.fov),
                              (this.zoom = t.zoom),
                              (this.near = t.near),
                              (this.far = t.far),
                              (this.focus = t.focus),
                              (this.aspect = t.aspect),
                              (this.view =
                                null === t.view
                                  ? null
                                  : Object.assign({}, t.view)),
                              (this.filmGauge = t.filmGauge),
                              (this.filmOffset = t.filmOffset),
                              this
                            );
                          },
                          setFocalLength: function(t) {
                            var e = 0.5 * this.getFilmHeight() / t;
                            (this.fov = 2 * ue.RAD2DEG * Math.atan(e)),
                              this.updateProjectionMatrix();
                          },
                          getFocalLength: function() {
                            var t = Math.tan(0.5 * ue.DEG2RAD * this.fov);
                            return 0.5 * this.getFilmHeight() / t;
                          },
                          getEffectiveFOV: function() {
                            return (
                              2 *
                              ue.RAD2DEG *
                              Math.atan(
                                Math.tan(0.5 * ue.DEG2RAD * this.fov) /
                                  this.zoom
                              )
                            );
                          },
                          getFilmWidth: function() {
                            return this.filmGauge * Math.min(this.aspect, 1);
                          },
                          getFilmHeight: function() {
                            return this.filmGauge / Math.max(this.aspect, 1);
                          },
                          setViewOffset: function(t, e, i, n, r, o) {
                            (this.aspect = t / e),
                              (this.view = {
                                fullWidth: t,
                                fullHeight: e,
                                offsetX: i,
                                offsetY: n,
                                width: r,
                                height: o
                              }),
                              this.updateProjectionMatrix();
                          },
                          clearViewOffset: function() {
                            (this.view = null), this.updateProjectionMatrix();
                          },
                          updateProjectionMatrix: function() {
                            var t = this.near,
                              e =
                                t *
                                Math.tan(0.5 * ue.DEG2RAD * this.fov) /
                                this.zoom,
                              i = 2 * e,
                              n = this.aspect * i,
                              r = -0.5 * n,
                              o = this.view;
                            if (null !== o) {
                              var s = o.fullWidth,
                                a = o.fullHeight;
                              (r += o.offsetX * n / s),
                                (e -= o.offsetY * i / a),
                                (n *= o.width / s),
                                (i *= o.height / a);
                            }
                            var c = this.filmOffset;
                            0 !== c && (r += t * c / this.getFilmWidth()),
                              this.projectionMatrix.makePerspective(
                                r,
                                r + n,
                                e,
                                e - i,
                                t,
                                this.far
                              );
                          },
                          toJSON: function(t) {
                            var e = zn.prototype.toJSON.call(this, t);
                            return (
                              (e.object.fov = this.fov),
                              (e.object.zoom = this.zoom),
                              (e.object.near = this.near),
                              (e.object.far = this.far),
                              (e.object.focus = this.focus),
                              (e.object.aspect = this.aspect),
                              null !== this.view &&
                                (e.object.view = Object.assign({}, this.view)),
                              (e.object.filmGauge = this.filmGauge),
                              (e.object.filmOffset = this.filmOffset),
                              e
                            );
                          }
                        }
                      )),
                      Object.assign(Un.prototype, {
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          (this.a = t.a),
                            (this.b = t.b),
                            (this.c = t.c),
                            this.normal.copy(t.normal),
                            this.color.copy(t.color),
                            (this.materialIndex = t.materialIndex);
                          for (
                            var e = 0, i = t.vertexNormals.length;
                            e < i;
                            e++
                          )
                            this.vertexNormals[e] = t.vertexNormals[e].clone();
                          for (e = 0, i = t.vertexColors.length; e < i; e++)
                            this.vertexColors[e] = t.vertexColors[e].clone();
                          return this;
                        }
                      });
                    var Fn,
                      Hn,
                      Vn,
                      Gn,
                      Yn,
                      Qn,
                      Wn,
                      qn,
                      Xn,
                      Kn,
                      Zn,
                      Jn,
                      $n,
                      tr,
                      er,
                      ir,
                      nr,
                      rr,
                      or,
                      sr,
                      ar,
                      cr,
                      lr,
                      ur,
                      hr,
                      dr,
                      pr,
                      fr,
                      mr,
                      gr,
                      vr,
                      yr,
                      wr,
                      Mr,
                      Er,
                      br,
                      xr,
                      Ar,
                      Tr,
                      Lr = 0;
                    function Nr() {
                      return Lr++;
                    }
                    function Dr() {
                      Object.defineProperty(this, 'id', { value: Nr() }),
                        (this.uuid = ue.generateUUID()),
                        (this.name = ''),
                        (this.type = 'Geometry'),
                        (this.vertices = []),
                        (this.colors = []),
                        (this.faces = []),
                        (this.faceVertexUvs = [[]]),
                        (this.morphTargets = []),
                        (this.morphNormals = []),
                        (this.skinWeights = []),
                        (this.skinIndices = []),
                        (this.lineDistances = []),
                        (this.boundingBox = null),
                        (this.boundingSphere = null),
                        (this.elementsNeedUpdate = !1),
                        (this.verticesNeedUpdate = !1),
                        (this.uvsNeedUpdate = !1),
                        (this.normalsNeedUpdate = !1),
                        (this.colorsNeedUpdate = !1),
                        (this.lineDistancesNeedUpdate = !1),
                        (this.groupsNeedUpdate = !1);
                    }
                    function Sr(t, e, i) {
                      if (Array.isArray(t))
                        throw new TypeError(
                          'THREE.BufferAttribute: array should be a Typed Array.'
                        );
                      (this.uuid = ue.generateUUID()),
                        (this.name = ''),
                        (this.array = t),
                        (this.itemSize = e),
                        (this.count = void 0 !== t ? t.length / e : 0),
                        (this.normalized = !0 === i),
                        (this.dynamic = !1),
                        (this.updateRange = { offset: 0, count: -1 }),
                        (this.onUploadCallback = function() {}),
                        (this.version = 0);
                    }
                    function Cr(t, e) {
                      Sr.call(this, new Int8Array(t), e);
                    }
                    function _r(t, e) {
                      Sr.call(this, new Uint8Array(t), e);
                    }
                    function Ir(t, e) {
                      Sr.call(this, new Uint8ClampedArray(t), e);
                    }
                    function jr(t, e) {
                      Sr.call(this, new Int16Array(t), e);
                    }
                    function Or(t, e) {
                      Sr.call(this, new Uint16Array(t), e);
                    }
                    function Rr(t, e) {
                      Sr.call(this, new Int32Array(t), e);
                    }
                    function zr(t, e) {
                      Sr.call(this, new Uint32Array(t), e);
                    }
                    function kr(t, e) {
                      Sr.call(this, new Float32Array(t), e);
                    }
                    function Br(t, e) {
                      Sr.call(this, new Float64Array(t), e);
                    }
                    function Pr() {
                      (this.indices = []),
                        (this.vertices = []),
                        (this.normals = []),
                        (this.colors = []),
                        (this.uvs = []),
                        (this.uvs2 = []),
                        (this.groups = []),
                        (this.morphTargets = {}),
                        (this.skinWeights = []),
                        (this.skinIndices = []),
                        (this.boundingBox = null),
                        (this.boundingSphere = null),
                        (this.verticesNeedUpdate = !1),
                        (this.normalsNeedUpdate = !1),
                        (this.colorsNeedUpdate = !1),
                        (this.uvsNeedUpdate = !1),
                        (this.groupsNeedUpdate = !1);
                    }
                    function Ur(t) {
                      if (0 === t.length) return -1 / 0;
                      for (var e = t[0], i = 1, n = t.length; i < n; ++i)
                        t[i] > e && (e = t[i]);
                      return e;
                    }
                    function Fr() {
                      Object.defineProperty(this, 'id', { value: Nr() }),
                        (this.uuid = ue.generateUUID()),
                        (this.name = ''),
                        (this.type = 'BufferGeometry'),
                        (this.index = null),
                        (this.attributes = {}),
                        (this.morphAttributes = {}),
                        (this.groups = []),
                        (this.boundingBox = null),
                        (this.boundingSphere = null),
                        (this.drawRange = { start: 0, count: 1 / 0 });
                    }
                    function Hr(t, e, i, n, r, o) {
                      Dr.call(this),
                        (this.type = 'BoxGeometry'),
                        (this.parameters = {
                          width: t,
                          height: e,
                          depth: i,
                          widthSegments: n,
                          heightSegments: r,
                          depthSegments: o
                        }),
                        this.fromBufferGeometry(new Vr(t, e, i, n, r, o)),
                        this.mergeVertices();
                    }
                    function Vr(t, e, i, n, r, o) {
                      Fr.call(this),
                        (this.type = 'BoxBufferGeometry'),
                        (this.parameters = {
                          width: t,
                          height: e,
                          depth: i,
                          widthSegments: n,
                          heightSegments: r,
                          depthSegments: o
                        });
                      var s = this;
                      (n = Math.floor(n) || 1), (r = Math.floor(r) || 1);
                      var a = [],
                        c = [],
                        l = [],
                        u = [],
                        h = 0,
                        d = 0;
                      function p(t, e, i, n, r, o, p, f, m, g, v) {
                        var y,
                          w,
                          M = o / m,
                          E = p / g,
                          b = o / 2,
                          x = p / 2,
                          A = f / 2,
                          T = m + 1,
                          L = g + 1,
                          N = 0,
                          D = 0,
                          S = new ke();
                        for (w = 0; w < L; w++) {
                          var C = w * E - x;
                          for (y = 0; y < T; y++) {
                            var _ = y * M - b;
                            (S[t] = _ * n),
                              (S[e] = C * r),
                              (S[i] = A),
                              c.push(S.x, S.y, S.z),
                              (S[t] = 0),
                              (S[e] = 0),
                              (S[i] = f > 0 ? 1 : -1),
                              l.push(S.x, S.y, S.z),
                              u.push(y / m),
                              u.push(1 - w / g),
                              (N += 1);
                          }
                        }
                        for (w = 0; w < g; w++)
                          for (y = 0; y < m; y++) {
                            var I = h + y + T * w,
                              j = h + y + T * (w + 1),
                              O = h + (y + 1) + T * (w + 1),
                              R = h + (y + 1) + T * w;
                            a.push(I, j, R), a.push(j, O, R), (D += 6);
                          }
                        s.addGroup(d, D, v), (d += D), (h += N);
                      }
                      p(
                        'z',
                        'y',
                        'x',
                        -1,
                        -1,
                        i,
                        e,
                        t,
                        (o = Math.floor(o) || 1),
                        r,
                        0
                      ),
                        p('z', 'y', 'x', 1, -1, i, e, -t, o, r, 1),
                        p('x', 'z', 'y', 1, 1, t, i, e, n, o, 2),
                        p('x', 'z', 'y', 1, -1, t, i, -e, n, o, 3),
                        p('x', 'y', 'z', 1, -1, t, e, i, n, r, 4),
                        p('x', 'y', 'z', -1, -1, t, e, -i, n, r, 5),
                        this.setIndex(a),
                        this.addAttribute('position', new kr(c, 3)),
                        this.addAttribute('normal', new kr(l, 3)),
                        this.addAttribute('uv', new kr(u, 2));
                    }
                    function Gr(t, e, i, n) {
                      Dr.call(this),
                        (this.type = 'PlaneGeometry'),
                        (this.parameters = {
                          width: t,
                          height: e,
                          widthSegments: i,
                          heightSegments: n
                        }),
                        this.fromBufferGeometry(new Yr(t, e, i, n)),
                        this.mergeVertices();
                    }
                    function Yr(t, e, i, n) {
                      Fr.call(this),
                        (this.type = 'PlaneBufferGeometry'),
                        (this.parameters = {
                          width: t,
                          height: e,
                          widthSegments: i,
                          heightSegments: n
                        });
                      var r,
                        o,
                        s = t / 2,
                        a = e / 2,
                        c = Math.floor(i) || 1,
                        l = Math.floor(n) || 1,
                        u = c + 1,
                        h = l + 1,
                        d = t / c,
                        p = e / l,
                        f = [],
                        m = [],
                        g = [],
                        v = [];
                      for (o = 0; o < h; o++) {
                        var y = o * p - a;
                        for (r = 0; r < u; r++) {
                          var w = r * d - s;
                          m.push(w, -y, 0),
                            g.push(0, 0, 1),
                            v.push(r / c),
                            v.push(1 - o / l);
                        }
                      }
                      for (o = 0; o < l; o++)
                        for (r = 0; r < c; r++) {
                          var M = r + u * o,
                            E = r + u * (o + 1),
                            b = r + 1 + u * (o + 1),
                            x = r + 1 + u * o;
                          f.push(M, E, x), f.push(E, b, x);
                        }
                      this.setIndex(f),
                        this.addAttribute('position', new kr(m, 3)),
                        this.addAttribute('normal', new kr(g, 3)),
                        this.addAttribute('uv', new kr(v, 2));
                    }
                    function Qr(t) {
                      on.call(this),
                        (this.type = 'MeshBasicMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.map = null),
                        (this.lightMap = null),
                        (this.lightMapIntensity = 1),
                        (this.aoMap = null),
                        (this.aoMapIntensity = 1),
                        (this.specularMap = null),
                        (this.alphaMap = null),
                        (this.envMap = null),
                        (this.combine = Z),
                        (this.reflectivity = 1),
                        (this.refractionRatio = 0.98),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.wireframeLinecap = 'round'),
                        (this.wireframeLinejoin = 'round'),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.lights = !1),
                        this.setValues(t);
                    }
                    function Wr(t, e) {
                      (this.origin = void 0 !== t ? t : new ke()),
                        (this.direction = void 0 !== e ? e : new ke());
                    }
                    function qr(t, e) {
                      (this.start = void 0 !== t ? t : new ke()),
                        (this.end = void 0 !== e ? e : new ke());
                    }
                    function Xr(t, e, i) {
                      (this.a = void 0 !== t ? t : new ke()),
                        (this.b = void 0 !== e ? e : new ke()),
                        (this.c = void 0 !== i ? i : new ke());
                    }
                    function Kr(t, e) {
                      zn.call(this),
                        (this.type = 'Mesh'),
                        (this.geometry = void 0 !== t ? t : new Fr()),
                        (this.material =
                          void 0 !== e
                            ? e
                            : new Qr({ color: 16777215 * Math.random() })),
                        (this.drawMode = Jt),
                        this.updateMorphTargets();
                    }
                    function Zr(t, e) {
                      return t.renderOrder !== e.renderOrder
                        ? t.renderOrder - e.renderOrder
                        : t.program && e.program && t.program !== e.program
                          ? t.program.id - e.program.id
                          : t.material.id !== e.material.id
                            ? t.material.id - e.material.id
                            : t.z !== e.z ? t.z - e.z : t.id - e.id;
                    }
                    function Jr(t, e) {
                      return t.renderOrder !== e.renderOrder
                        ? t.renderOrder - e.renderOrder
                        : t.z !== e.z ? e.z - t.z : t.id - e.id;
                    }
                    function $r() {
                      var t = {};
                      return {
                        get: function(e, i) {
                          var n = e.id + ',' + i.id,
                            r = t[n];
                          return (
                            void 0 === r &&
                              ((r = new function() {
                                var t = [],
                                  e = 0,
                                  i = [],
                                  n = [];
                                return {
                                  opaque: i,
                                  transparent: n,
                                  init: function() {
                                    (e = 0), (i.length = 0), (n.length = 0);
                                  },
                                  push: function(r, o, s, a, c) {
                                    var l = t[e];
                                    void 0 === l
                                      ? ((l = {
                                          id: r.id,
                                          object: r,
                                          geometry: o,
                                          material: s,
                                          program: s.program,
                                          renderOrder: r.renderOrder,
                                          z: a,
                                          group: c
                                        }),
                                        (t[e] = l))
                                      : ((l.id = r.id),
                                        (l.object = r),
                                        (l.geometry = o),
                                        (l.material = s),
                                        (l.program = s.program),
                                        (l.renderOrder = r.renderOrder),
                                        (l.z = a),
                                        (l.group = c)),
                                      (!0 === s.transparent ? n : i).push(l),
                                      e++;
                                  },
                                  sort: function() {
                                    i.length > 1 && i.sort(Zr),
                                      n.length > 1 && n.sort(Jr);
                                  }
                                };
                              }()),
                              (t[n] = r)),
                            r
                          );
                        },
                        dispose: function() {
                          t = {};
                        }
                      };
                    }
                    function to(t, e) {
                      return Math.abs(e[1]) - Math.abs(t[1]);
                    }
                    function eo() {
                      var t = new function() {
                          var t = {};
                          return {
                            get: function(e) {
                              if (void 0 !== t[e.id]) return t[e.id];
                              var i;
                              switch (e.type) {
                                case 'DirectionalLight':
                                  i = {
                                    direction: new ke(),
                                    color: new Ni(),
                                    shadow: !1,
                                    shadowBias: 0,
                                    shadowRadius: 1,
                                    shadowMapSize: new he()
                                  };
                                  break;
                                case 'SpotLight':
                                  i = {
                                    position: new ke(),
                                    direction: new ke(),
                                    color: new Ni(),
                                    distance: 0,
                                    coneCos: 0,
                                    penumbraCos: 0,
                                    decay: 0,
                                    shadow: !1,
                                    shadowBias: 0,
                                    shadowRadius: 1,
                                    shadowMapSize: new he()
                                  };
                                  break;
                                case 'PointLight':
                                  i = {
                                    position: new ke(),
                                    color: new Ni(),
                                    distance: 0,
                                    decay: 0,
                                    shadow: !1,
                                    shadowBias: 0,
                                    shadowRadius: 1,
                                    shadowMapSize: new he(),
                                    shadowCameraNear: 1,
                                    shadowCameraFar: 1e3
                                  };
                                  break;
                                case 'HemisphereLight':
                                  i = {
                                    direction: new ke(),
                                    skyColor: new Ni(),
                                    groundColor: new Ni()
                                  };
                                  break;
                                case 'RectAreaLight':
                                  i = {
                                    color: new Ni(),
                                    position: new ke(),
                                    halfWidth: new ke(),
                                    halfHeight: new ke()
                                  };
                              }
                              return (t[e.id] = i), i;
                            }
                          };
                        }(),
                        e = {
                          hash: '',
                          ambient: [0, 0, 0],
                          directional: [],
                          directionalShadowMap: [],
                          directionalShadowMatrix: [],
                          spot: [],
                          spotShadowMap: [],
                          spotShadowMatrix: [],
                          rectArea: [],
                          point: [],
                          pointShadowMap: [],
                          pointShadowMatrix: [],
                          hemi: []
                        },
                        i = new ke(),
                        n = new Be(),
                        r = new Be();
                      return {
                        setup: function(o, s, a) {
                          for (
                            var c = 0,
                              l = 0,
                              u = 0,
                              h = 0,
                              d = 0,
                              p = 0,
                              f = 0,
                              m = 0,
                              g = a.matrixWorldInverse,
                              v = 0,
                              y = o.length;
                            v < y;
                            v++
                          ) {
                            var w = o[v],
                              M = w.color,
                              E = w.intensity,
                              b = w.distance,
                              x =
                                w.shadow && w.shadow.map
                                  ? w.shadow.map.texture
                                  : null;
                            if (w.isAmbientLight)
                              (c += M.r * E), (l += M.g * E), (u += M.b * E);
                            else if (w.isDirectionalLight) {
                              if (
                                ((T = t.get(w)).color
                                  .copy(w.color)
                                  .multiplyScalar(w.intensity),
                                T.direction.setFromMatrixPosition(
                                  w.matrixWorld
                                ),
                                i.setFromMatrixPosition(w.target.matrixWorld),
                                T.direction.sub(i),
                                T.direction.transformDirection(g),
                                (T.shadow = w.castShadow),
                                w.castShadow)
                              ) {
                                var A = w.shadow;
                                (T.shadowBias = A.bias),
                                  (T.shadowRadius = A.radius),
                                  (T.shadowMapSize = A.mapSize);
                              }
                              (e.directionalShadowMap[h] = x),
                                (e.directionalShadowMatrix[h] =
                                  w.shadow.matrix),
                                (e.directional[h] = T),
                                h++;
                            } else if (w.isSpotLight)
                              (T = t.get(w)).position.setFromMatrixPosition(
                                w.matrixWorld
                              ),
                                T.position.applyMatrix4(g),
                                T.color.copy(M).multiplyScalar(E),
                                (T.distance = b),
                                T.direction.setFromMatrixPosition(
                                  w.matrixWorld
                                ),
                                i.setFromMatrixPosition(w.target.matrixWorld),
                                T.direction.sub(i),
                                T.direction.transformDirection(g),
                                (T.coneCos = Math.cos(w.angle)),
                                (T.penumbraCos = Math.cos(
                                  w.angle * (1 - w.penumbra)
                                )),
                                (T.decay = 0 === w.distance ? 0 : w.decay),
                                (T.shadow = w.castShadow),
                                w.castShadow &&
                                  ((A = w.shadow),
                                  (T.shadowBias = A.bias),
                                  (T.shadowRadius = A.radius),
                                  (T.shadowMapSize = A.mapSize)),
                                (e.spotShadowMap[p] = x),
                                (e.spotShadowMatrix[p] = w.shadow.matrix),
                                (e.spot[p] = T),
                                p++;
                            else if (w.isRectAreaLight)
                              (T = t.get(w)).color
                                .copy(M)
                                .multiplyScalar(E / (w.width * w.height)),
                                T.position.setFromMatrixPosition(w.matrixWorld),
                                T.position.applyMatrix4(g),
                                r.identity(),
                                n.copy(w.matrixWorld),
                                n.premultiply(g),
                                r.extractRotation(n),
                                T.halfWidth.set(0.5 * w.width, 0, 0),
                                T.halfHeight.set(0, 0.5 * w.height, 0),
                                T.halfWidth.applyMatrix4(r),
                                T.halfHeight.applyMatrix4(r),
                                (e.rectArea[f] = T),
                                f++;
                            else if (w.isPointLight)
                              (T = t.get(w)).position.setFromMatrixPosition(
                                w.matrixWorld
                              ),
                                T.position.applyMatrix4(g),
                                T.color
                                  .copy(w.color)
                                  .multiplyScalar(w.intensity),
                                (T.distance = w.distance),
                                (T.decay = 0 === w.distance ? 0 : w.decay),
                                (T.shadow = w.castShadow),
                                w.castShadow &&
                                  ((A = w.shadow),
                                  (T.shadowBias = A.bias),
                                  (T.shadowRadius = A.radius),
                                  (T.shadowMapSize = A.mapSize),
                                  (T.shadowCameraNear = A.camera.near),
                                  (T.shadowCameraFar = A.camera.far)),
                                (e.pointShadowMap[d] = x),
                                (e.pointShadowMatrix[d] = w.shadow.matrix),
                                (e.point[d] = T),
                                d++;
                            else if (w.isHemisphereLight) {
                              var T;
                              (T = t.get(w)).direction.setFromMatrixPosition(
                                w.matrixWorld
                              ),
                                T.direction.transformDirection(g),
                                T.direction.normalize(),
                                T.skyColor.copy(w.color).multiplyScalar(E),
                                T.groundColor
                                  .copy(w.groundColor)
                                  .multiplyScalar(E),
                                (e.hemi[m] = T),
                                m++;
                            }
                          }
                          (e.ambient[0] = c),
                            (e.ambient[1] = l),
                            (e.ambient[2] = u),
                            (e.directional.length = h),
                            (e.spot.length = p),
                            (e.rectArea.length = f),
                            (e.point.length = d),
                            (e.hemi.length = m),
                            (e.hash =
                              h +
                              ',' +
                              d +
                              ',' +
                              p +
                              ',' +
                              f +
                              ',' +
                              m +
                              ',' +
                              s.length);
                        },
                        state: e
                      };
                    }
                    function io(t, e, i) {
                      var n = t.createShader(e);
                      return (
                        t.shaderSource(n, i),
                        t.compileShader(n),
                        !1 === t.getShaderParameter(n, t.COMPILE_STATUS) &&
                          console.error(
                            "THREE.WebGLShader: Shader couldn't compile."
                          ),
                        '' !== t.getShaderInfoLog(n) &&
                          console.warn(
                            'THREE.WebGLShader: gl.getShaderInfoLog()',
                            e === t.VERTEX_SHADER ? 'vertex' : 'fragment',
                            t.getShaderInfoLog(n),
                            (function(t) {
                              for (
                                var e = t.split('\n'), i = 0;
                                i < e.length;
                                i++
                              )
                                e[i] = i + 1 + ': ' + e[i];
                              return e.join('\n');
                            })(i)
                          ),
                        n
                      );
                    }
                    Object.assign(Dr.prototype, e.prototype, {
                      isGeometry: !0,
                      applyMatrix: function(t) {
                        for (
                          var e = new hn().getNormalMatrix(t),
                            i = 0,
                            n = this.vertices.length;
                          i < n;
                          i++
                        ) {
                          this.vertices[i].applyMatrix4(t);
                        }
                        for (i = 0, n = this.faces.length; i < n; i++) {
                          var r = this.faces[i];
                          r.normal.applyMatrix3(e).normalize();
                          for (
                            var o = 0, s = r.vertexNormals.length;
                            o < s;
                            o++
                          )
                            r.vertexNormals[o].applyMatrix3(e).normalize();
                        }
                        return (
                          null !== this.boundingBox &&
                            this.computeBoundingBox(),
                          null !== this.boundingSphere &&
                            this.computeBoundingSphere(),
                          (this.verticesNeedUpdate = !0),
                          (this.normalsNeedUpdate = !0),
                          this
                        );
                      },
                      rotateX: ((Qn = new Be()),
                      function(t) {
                        return Qn.makeRotationX(t), this.applyMatrix(Qn), this;
                      }),
                      rotateY: ((Yn = new Be()),
                      function(t) {
                        return Yn.makeRotationY(t), this.applyMatrix(Yn), this;
                      }),
                      rotateZ: ((Gn = new Be()),
                      function(t) {
                        return Gn.makeRotationZ(t), this.applyMatrix(Gn), this;
                      }),
                      translate: ((Vn = new Be()),
                      function(t, e, i) {
                        return (
                          Vn.makeTranslation(t, e, i),
                          this.applyMatrix(Vn),
                          this
                        );
                      }),
                      scale: ((Hn = new Be()),
                      function(t, e, i) {
                        return (
                          Hn.makeScale(t, e, i), this.applyMatrix(Hn), this
                        );
                      }),
                      lookAt: ((Fn = new zn()),
                      function(t) {
                        Fn.lookAt(t),
                          Fn.updateMatrix(),
                          this.applyMatrix(Fn.matrix);
                      }),
                      fromBufferGeometry: function(t) {
                        var e = this,
                          i = null !== t.index ? t.index.array : void 0,
                          n = t.attributes,
                          r = n.position.array,
                          o = void 0 !== n.normal ? n.normal.array : void 0,
                          s = void 0 !== n.color ? n.color.array : void 0,
                          a = void 0 !== n.uv ? n.uv.array : void 0,
                          c = void 0 !== n.uv2 ? n.uv2.array : void 0;
                        void 0 !== c && (this.faceVertexUvs[1] = []);
                        for (
                          var l = [], u = [], h = [], d = 0, p = 0;
                          d < r.length;
                          d += 3, p += 2
                        )
                          e.vertices.push(new ke(r[d], r[d + 1], r[d + 2])),
                            void 0 !== o &&
                              l.push(new ke(o[d], o[d + 1], o[d + 2])),
                            void 0 !== s &&
                              e.colors.push(new Ni(s[d], s[d + 1], s[d + 2])),
                            void 0 !== a && u.push(new he(a[p], a[p + 1])),
                            void 0 !== c && h.push(new he(c[p], c[p + 1]));
                        function f(t, i, n, r) {
                          var d = new Un(
                            t,
                            i,
                            n,
                            void 0 !== o
                              ? [l[t].clone(), l[i].clone(), l[n].clone()]
                              : [],
                            void 0 !== s
                              ? [
                                  e.colors[t].clone(),
                                  e.colors[i].clone(),
                                  e.colors[n].clone()
                                ]
                              : [],
                            r
                          );
                          e.faces.push(d),
                            void 0 !== a &&
                              e.faceVertexUvs[0].push([
                                u[t].clone(),
                                u[i].clone(),
                                u[n].clone()
                              ]),
                            void 0 !== c &&
                              e.faceVertexUvs[1].push([
                                h[t].clone(),
                                h[i].clone(),
                                h[n].clone()
                              ]);
                        }
                        var m = t.groups;
                        if (m.length > 0)
                          for (d = 0; d < m.length; d++)
                            for (
                              var g = m[d],
                                v = g.start,
                                y = ((p = v), v + g.count);
                              p < y;
                              p += 3
                            )
                              void 0 !== i
                                ? f(i[p], i[p + 1], i[p + 2], g.materialIndex)
                                : f(p, p + 1, p + 2, g.materialIndex);
                        else if (void 0 !== i)
                          for (d = 0; d < i.length; d += 3)
                            f(i[d], i[d + 1], i[d + 2]);
                        else
                          for (d = 0; d < r.length / 3; d += 3)
                            f(d, d + 1, d + 2);
                        return (
                          this.computeFaceNormals(),
                          null !== t.boundingBox &&
                            (this.boundingBox = t.boundingBox.clone()),
                          null !== t.boundingSphere &&
                            (this.boundingSphere = t.boundingSphere.clone()),
                          this
                        );
                      },
                      center: function() {
                        this.computeBoundingBox();
                        var t = this.boundingBox.getCenter().negate();
                        return this.translate(t.x, t.y, t.z), t;
                      },
                      normalize: function() {
                        this.computeBoundingSphere();
                        var t = this.boundingSphere.center,
                          e = this.boundingSphere.radius,
                          i = 0 === e ? 1 : 1 / e,
                          n = new Be();
                        return (
                          n.set(
                            i,
                            0,
                            0,
                            -i * t.x,
                            0,
                            i,
                            0,
                            -i * t.y,
                            0,
                            0,
                            i,
                            -i * t.z,
                            0,
                            0,
                            0,
                            1
                          ),
                          this.applyMatrix(n),
                          this
                        );
                      },
                      computeFaceNormals: function() {
                        for (
                          var t = new ke(),
                            e = new ke(),
                            i = 0,
                            n = this.faces.length;
                          i < n;
                          i++
                        ) {
                          var r = this.faces[i],
                            o = this.vertices[r.a],
                            s = this.vertices[r.b],
                            a = this.vertices[r.c];
                          t.subVectors(a, s),
                            e.subVectors(o, s),
                            t.cross(e),
                            t.normalize(),
                            r.normal.copy(t);
                        }
                      },
                      computeVertexNormals: function(t) {
                        var e, i, n, r, o, s;
                        for (
                          void 0 === t && (t = !0),
                            s = new Array(this.vertices.length),
                            e = 0,
                            i = this.vertices.length;
                          e < i;
                          e++
                        )
                          s[e] = new ke();
                        if (t) {
                          var a,
                            c,
                            l,
                            u = new ke(),
                            h = new ke();
                          for (n = 0, r = this.faces.length; n < r; n++)
                            (o = this.faces[n]),
                              (a = this.vertices[o.a]),
                              (c = this.vertices[o.b]),
                              (l = this.vertices[o.c]),
                              u.subVectors(l, c),
                              h.subVectors(a, c),
                              u.cross(h),
                              s[o.a].add(u),
                              s[o.b].add(u),
                              s[o.c].add(u);
                        } else
                          for (
                            this.computeFaceNormals(),
                              n = 0,
                              r = this.faces.length;
                            n < r;
                            n++
                          )
                            s[(o = this.faces[n]).a].add(o.normal),
                              s[o.b].add(o.normal),
                              s[o.c].add(o.normal);
                        for (e = 0, i = this.vertices.length; e < i; e++)
                          s[e].normalize();
                        for (n = 0, r = this.faces.length; n < r; n++) {
                          var d = (o = this.faces[n]).vertexNormals;
                          3 === d.length
                            ? (d[0].copy(s[o.a]),
                              d[1].copy(s[o.b]),
                              d[2].copy(s[o.c]))
                            : ((d[0] = s[o.a].clone()),
                              (d[1] = s[o.b].clone()),
                              (d[2] = s[o.c].clone()));
                        }
                        this.faces.length > 0 && (this.normalsNeedUpdate = !0);
                      },
                      computeFlatVertexNormals: function() {
                        var t, e, i;
                        for (
                          this.computeFaceNormals(),
                            t = 0,
                            e = this.faces.length;
                          t < e;
                          t++
                        ) {
                          var n = (i = this.faces[t]).vertexNormals;
                          3 === n.length
                            ? (n[0].copy(i.normal),
                              n[1].copy(i.normal),
                              n[2].copy(i.normal))
                            : ((n[0] = i.normal.clone()),
                              (n[1] = i.normal.clone()),
                              (n[2] = i.normal.clone()));
                        }
                        this.faces.length > 0 && (this.normalsNeedUpdate = !0);
                      },
                      computeMorphNormals: function() {
                        var t, e, i, n, r;
                        for (i = 0, n = this.faces.length; i < n; i++)
                          for (
                            (r = this.faces[i]).__originalFaceNormal
                              ? r.__originalFaceNormal.copy(r.normal)
                              : (r.__originalFaceNormal = r.normal.clone()),
                              r.__originalVertexNormals ||
                                (r.__originalVertexNormals = []),
                              t = 0,
                              e = r.vertexNormals.length;
                            t < e;
                            t++
                          )
                            r.__originalVertexNormals[t]
                              ? r.__originalVertexNormals[t].copy(
                                  r.vertexNormals[t]
                                )
                              : (r.__originalVertexNormals[t] = r.vertexNormals[
                                  t
                                ].clone());
                        var o = new Dr();
                        for (
                          o.faces = this.faces,
                            t = 0,
                            e = this.morphTargets.length;
                          t < e;
                          t++
                        ) {
                          if (!this.morphNormals[t]) {
                            (this.morphNormals[t] = {}),
                              (this.morphNormals[t].faceNormals = []),
                              (this.morphNormals[t].vertexNormals = []);
                            var s = this.morphNormals[t].faceNormals,
                              a = this.morphNormals[t].vertexNormals;
                            for (i = 0, n = this.faces.length; i < n; i++)
                              (c = new ke()),
                                (l = { a: new ke(), b: new ke(), c: new ke() }),
                                s.push(c),
                                a.push(l);
                          }
                          var c,
                            l,
                            u = this.morphNormals[t];
                          for (
                            o.vertices = this.morphTargets[t].vertices,
                              o.computeFaceNormals(),
                              o.computeVertexNormals(),
                              i = 0,
                              n = this.faces.length;
                            i < n;
                            i++
                          )
                            (r = this.faces[i]),
                              (c = u.faceNormals[i]),
                              (l = u.vertexNormals[i]),
                              c.copy(r.normal),
                              l.a.copy(r.vertexNormals[0]),
                              l.b.copy(r.vertexNormals[1]),
                              l.c.copy(r.vertexNormals[2]);
                        }
                        for (i = 0, n = this.faces.length; i < n; i++)
                          ((r = this.faces[i]).normal = r.__originalFaceNormal),
                            (r.vertexNormals = r.__originalVertexNormals);
                      },
                      computeLineDistances: function() {
                        for (
                          var t = 0, e = this.vertices, i = 0, n = e.length;
                          i < n;
                          i++
                        )
                          i > 0 && (t += e[i].distanceTo(e[i - 1])),
                            (this.lineDistances[i] = t);
                      },
                      computeBoundingBox: function() {
                        null === this.boundingBox &&
                          (this.boundingBox = new ln()),
                          this.boundingBox.setFromPoints(this.vertices);
                      },
                      computeBoundingSphere: function() {
                        null === this.boundingSphere &&
                          (this.boundingSphere = new un()),
                          this.boundingSphere.setFromPoints(this.vertices);
                      },
                      merge: function(t, e, i) {
                        if (t && t.isGeometry) {
                          var n,
                            r = this.vertices.length,
                            o = this.vertices,
                            s = t.vertices,
                            a = this.faces,
                            c = t.faces,
                            l = this.faceVertexUvs[0],
                            u = t.faceVertexUvs[0],
                            h = this.colors,
                            d = t.colors;
                          void 0 === i && (i = 0),
                            void 0 !== e && (n = new hn().getNormalMatrix(e));
                          for (var p = 0, f = s.length; p < f; p++) {
                            var m = s[p].clone();
                            void 0 !== e && m.applyMatrix4(e), o.push(m);
                          }
                          for (p = 0, f = d.length; p < f; p++)
                            h.push(d[p].clone());
                          for (p = 0, f = c.length; p < f; p++) {
                            var g,
                              v,
                              y,
                              w = c[p],
                              M = w.vertexNormals,
                              E = w.vertexColors;
                            (g = new Un(w.a + r, w.b + r, w.c + r)).normal.copy(
                              w.normal
                            ),
                              void 0 !== n &&
                                g.normal.applyMatrix3(n).normalize();
                            for (var b = 0, x = M.length; b < x; b++)
                              (v = M[b].clone()),
                                void 0 !== n && v.applyMatrix3(n).normalize(),
                                g.vertexNormals.push(v);
                            g.color.copy(w.color);
                            for (b = 0, x = E.length; b < x; b++)
                              (y = E[b]), g.vertexColors.push(y.clone());
                            (g.materialIndex = w.materialIndex + i), a.push(g);
                          }
                          for (p = 0, f = u.length; p < f; p++) {
                            var A = u[p],
                              T = [];
                            if (void 0 !== A) {
                              for (b = 0, x = A.length; b < x; b++)
                                T.push(A[b].clone());
                              l.push(T);
                            }
                          }
                        } else
                          console.error(
                            'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.',
                            t
                          );
                      },
                      mergeMesh: function(t) {
                        t && t.isMesh
                          ? (t.matrixAutoUpdate && t.updateMatrix(),
                            this.merge(t.geometry, t.matrix))
                          : console.error(
                              'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.',
                              t
                            );
                      },
                      mergeVertices: function() {
                        var t,
                          e,
                          i,
                          n,
                          r,
                          o,
                          s,
                          a,
                          c = {},
                          l = [],
                          u = [],
                          h = Math.pow(10, 4);
                        for (i = 0, n = this.vertices.length; i < n; i++)
                          (t = this.vertices[i]),
                            void 0 ===
                            c[
                              (e =
                                Math.round(t.x * h) +
                                '_' +
                                Math.round(t.y * h) +
                                '_' +
                                Math.round(t.z * h))
                            ]
                              ? ((c[e] = i),
                                l.push(this.vertices[i]),
                                (u[i] = l.length - 1))
                              : (u[i] = u[c[e]]);
                        var d = [];
                        for (i = 0, n = this.faces.length; i < n; i++) {
                          ((r = this.faces[i]).a = u[r.a]),
                            (r.b = u[r.b]),
                            (r.c = u[r.c]),
                            (o = [r.a, r.b, r.c]);
                          for (var p = 0; p < 3; p++)
                            if (o[p] === o[(p + 1) % 3]) {
                              d.push(i);
                              break;
                            }
                        }
                        for (i = d.length - 1; i >= 0; i--) {
                          var f = d[i];
                          for (
                            this.faces.splice(f, 1),
                              s = 0,
                              a = this.faceVertexUvs.length;
                            s < a;
                            s++
                          )
                            this.faceVertexUvs[s].splice(f, 1);
                        }
                        var m = this.vertices.length - l.length;
                        return (this.vertices = l), m;
                      },
                      sortFacesByMaterialIndex: function() {
                        for (
                          var t = this.faces, e = t.length, i = 0;
                          i < e;
                          i++
                        )
                          t[i]._id = i;
                        t.sort(function(t, e) {
                          return t.materialIndex - e.materialIndex;
                        });
                        var n,
                          r,
                          o = this.faceVertexUvs[0],
                          s = this.faceVertexUvs[1];
                        o && o.length === e && (n = []),
                          s && s.length === e && (r = []);
                        for (i = 0; i < e; i++) {
                          var a = t[i]._id;
                          n && n.push(o[a]), r && r.push(s[a]);
                        }
                        n && (this.faceVertexUvs[0] = n),
                          r && (this.faceVertexUvs[1] = r);
                      },
                      toJSON: function() {
                        var t = {
                          metadata: {
                            version: 4.5,
                            type: 'Geometry',
                            generator: 'Geometry.toJSON'
                          }
                        };
                        if (
                          ((t.uuid = this.uuid),
                          (t.type = this.type),
                          '' !== this.name && (t.name = this.name),
                          void 0 !== this.parameters)
                        ) {
                          var e = this.parameters;
                          for (var i in e) void 0 !== e[i] && (t[i] = e[i]);
                          return t;
                        }
                        for (var n = [], r = 0; r < this.vertices.length; r++) {
                          var o = this.vertices[r];
                          n.push(o.x, o.y, o.z);
                        }
                        var s = [],
                          a = [],
                          c = {},
                          l = [],
                          u = {},
                          h = [],
                          d = {};
                        for (r = 0; r < this.faces.length; r++) {
                          var p = this.faces[r],
                            f = void 0 !== this.faceVertexUvs[0][r],
                            m = p.normal.length() > 0,
                            g = p.vertexNormals.length > 0,
                            v =
                              1 !== p.color.r ||
                              1 !== p.color.g ||
                              1 !== p.color.b,
                            y = p.vertexColors.length > 0,
                            w = 0;
                          if (
                            ((w = x(
                              (w = x(
                                (w = x(
                                  (w = x(
                                    (w = x(
                                      (w = x(
                                        (w = x((w = x(w, 0, 0)), 1, !0)),
                                        2,
                                        !1
                                      )),
                                      3,
                                      f
                                    )),
                                    4,
                                    m
                                  )),
                                  5,
                                  g
                                )),
                                6,
                                v
                              )),
                              7,
                              y
                            )),
                            s.push(w),
                            s.push(p.a, p.b, p.c),
                            s.push(p.materialIndex),
                            f)
                          ) {
                            var M = this.faceVertexUvs[0][r];
                            s.push(L(M[0]), L(M[1]), L(M[2]));
                          }
                          if ((m && s.push(A(p.normal)), g)) {
                            var E = p.vertexNormals;
                            s.push(A(E[0]), A(E[1]), A(E[2]));
                          }
                          if ((v && s.push(T(p.color)), y)) {
                            var b = p.vertexColors;
                            s.push(T(b[0]), T(b[1]), T(b[2]));
                          }
                        }
                        function x(t, e, i) {
                          return i ? t | (1 << e) : t & ~(1 << e);
                        }
                        function A(t) {
                          var e =
                            t.x.toString() + t.y.toString() + t.z.toString();
                          return void 0 !== c[e]
                            ? c[e]
                            : ((c[e] = a.length / 3),
                              a.push(t.x, t.y, t.z),
                              c[e]);
                        }
                        function T(t) {
                          var e =
                            t.r.toString() + t.g.toString() + t.b.toString();
                          return void 0 !== u[e]
                            ? u[e]
                            : ((u[e] = l.length), l.push(t.getHex()), u[e]);
                        }
                        function L(t) {
                          var e = t.x.toString() + t.y.toString();
                          return void 0 !== d[e]
                            ? d[e]
                            : ((d[e] = h.length / 2), h.push(t.x, t.y), d[e]);
                        }
                        return (
                          (t.data = {}),
                          (t.data.vertices = n),
                          (t.data.normals = a),
                          l.length > 0 && (t.data.colors = l),
                          h.length > 0 && (t.data.uvs = [h]),
                          (t.data.faces = s),
                          t
                        );
                      },
                      clone: function() {
                        return new Dr().copy(this);
                      },
                      copy: function(t) {
                        var e, i, n, r, o, s;
                        (this.vertices = []),
                          (this.colors = []),
                          (this.faces = []),
                          (this.faceVertexUvs = [[]]),
                          (this.morphTargets = []),
                          (this.morphNormals = []),
                          (this.skinWeights = []),
                          (this.skinIndices = []),
                          (this.lineDistances = []),
                          (this.boundingBox = null),
                          (this.boundingSphere = null),
                          (this.name = t.name);
                        var a = t.vertices;
                        for (e = 0, i = a.length; e < i; e++)
                          this.vertices.push(a[e].clone());
                        var c = t.colors;
                        for (e = 0, i = c.length; e < i; e++)
                          this.colors.push(c[e].clone());
                        var l = t.faces;
                        for (e = 0, i = l.length; e < i; e++)
                          this.faces.push(l[e].clone());
                        for (e = 0, i = t.faceVertexUvs.length; e < i; e++) {
                          var u = t.faceVertexUvs[e];
                          for (
                            void 0 === this.faceVertexUvs[e] &&
                              (this.faceVertexUvs[e] = []),
                              n = 0,
                              r = u.length;
                            n < r;
                            n++
                          ) {
                            var h = u[n],
                              d = [];
                            for (o = 0, s = h.length; o < s; o++) {
                              var p = h[o];
                              d.push(p.clone());
                            }
                            this.faceVertexUvs[e].push(d);
                          }
                        }
                        var f = t.morphTargets;
                        for (e = 0, i = f.length; e < i; e++) {
                          var m = {};
                          if (((m.name = f[e].name), void 0 !== f[e].vertices))
                            for (
                              m.vertices = [], n = 0, r = f[e].vertices.length;
                              n < r;
                              n++
                            )
                              m.vertices.push(f[e].vertices[n].clone());
                          if (void 0 !== f[e].normals)
                            for (
                              m.normals = [], n = 0, r = f[e].normals.length;
                              n < r;
                              n++
                            )
                              m.normals.push(f[e].normals[n].clone());
                          this.morphTargets.push(m);
                        }
                        var g = t.morphNormals;
                        for (e = 0, i = g.length; e < i; e++) {
                          var v = {};
                          if (void 0 !== g[e].vertexNormals)
                            for (
                              v.vertexNormals = [],
                                n = 0,
                                r = g[e].vertexNormals.length;
                              n < r;
                              n++
                            ) {
                              var y = g[e].vertexNormals[n],
                                w = {};
                              (w.a = y.a.clone()),
                                (w.b = y.b.clone()),
                                (w.c = y.c.clone()),
                                v.vertexNormals.push(w);
                            }
                          if (void 0 !== g[e].faceNormals)
                            for (
                              v.faceNormals = [],
                                n = 0,
                                r = g[e].faceNormals.length;
                              n < r;
                              n++
                            )
                              v.faceNormals.push(g[e].faceNormals[n].clone());
                          this.morphNormals.push(v);
                        }
                        var M = t.skinWeights;
                        for (e = 0, i = M.length; e < i; e++)
                          this.skinWeights.push(M[e].clone());
                        var E = t.skinIndices;
                        for (e = 0, i = E.length; e < i; e++)
                          this.skinIndices.push(E[e].clone());
                        var b = t.lineDistances;
                        for (e = 0, i = b.length; e < i; e++)
                          this.lineDistances.push(b[e]);
                        var x = t.boundingBox;
                        null !== x && (this.boundingBox = x.clone());
                        var A = t.boundingSphere;
                        return (
                          null !== A && (this.boundingSphere = A.clone()),
                          (this.elementsNeedUpdate = t.elementsNeedUpdate),
                          (this.verticesNeedUpdate = t.verticesNeedUpdate),
                          (this.uvsNeedUpdate = t.uvsNeedUpdate),
                          (this.normalsNeedUpdate = t.normalsNeedUpdate),
                          (this.colorsNeedUpdate = t.colorsNeedUpdate),
                          (this.lineDistancesNeedUpdate =
                            t.lineDistancesNeedUpdate),
                          (this.groupsNeedUpdate = t.groupsNeedUpdate),
                          this
                        );
                      },
                      dispose: function() {
                        this.dispatchEvent({ type: 'dispose' });
                      }
                    }),
                      Object.defineProperty(Sr.prototype, 'needsUpdate', {
                        set: function(t) {
                          !0 === t && this.version++;
                        }
                      }),
                      Object.assign(Sr.prototype, {
                        isBufferAttribute: !0,
                        setArray: function(t) {
                          if (Array.isArray(t))
                            throw new TypeError(
                              'THREE.BufferAttribute: array should be a Typed Array.'
                            );
                          (this.count =
                            void 0 !== t ? t.length / this.itemSize : 0),
                            (this.array = t);
                        },
                        setDynamic: function(t) {
                          return (this.dynamic = t), this;
                        },
                        copy: function(t) {
                          return (
                            (this.array = new t.array.constructor(t.array)),
                            (this.itemSize = t.itemSize),
                            (this.count = t.count),
                            (this.normalized = t.normalized),
                            (this.dynamic = t.dynamic),
                            this
                          );
                        },
                        copyAt: function(t, e, i) {
                          (t *= this.itemSize), (i *= e.itemSize);
                          for (var n = 0, r = this.itemSize; n < r; n++)
                            this.array[t + n] = e.array[i + n];
                          return this;
                        },
                        copyArray: function(t) {
                          return this.array.set(t), this;
                        },
                        copyColorsArray: function(t) {
                          for (
                            var e = this.array, i = 0, n = 0, r = t.length;
                            n < r;
                            n++
                          ) {
                            var o = t[n];
                            void 0 === o &&
                              (console.warn(
                                'THREE.BufferAttribute.copyColorsArray(): color is undefined',
                                n
                              ),
                              (o = new Ni())),
                              (e[i++] = o.r),
                              (e[i++] = o.g),
                              (e[i++] = o.b);
                          }
                          return this;
                        },
                        copyIndicesArray: function(t) {
                          for (
                            var e = this.array, i = 0, n = 0, r = t.length;
                            n < r;
                            n++
                          ) {
                            var o = t[n];
                            (e[i++] = o.a), (e[i++] = o.b), (e[i++] = o.c);
                          }
                          return this;
                        },
                        copyVector2sArray: function(t) {
                          for (
                            var e = this.array, i = 0, n = 0, r = t.length;
                            n < r;
                            n++
                          ) {
                            var o = t[n];
                            void 0 === o &&
                              (console.warn(
                                'THREE.BufferAttribute.copyVector2sArray(): vector is undefined',
                                n
                              ),
                              (o = new he())),
                              (e[i++] = o.x),
                              (e[i++] = o.y);
                          }
                          return this;
                        },
                        copyVector3sArray: function(t) {
                          for (
                            var e = this.array, i = 0, n = 0, r = t.length;
                            n < r;
                            n++
                          ) {
                            var o = t[n];
                            void 0 === o &&
                              (console.warn(
                                'THREE.BufferAttribute.copyVector3sArray(): vector is undefined',
                                n
                              ),
                              (o = new ke())),
                              (e[i++] = o.x),
                              (e[i++] = o.y),
                              (e[i++] = o.z);
                          }
                          return this;
                        },
                        copyVector4sArray: function(t) {
                          for (
                            var e = this.array, i = 0, n = 0, r = t.length;
                            n < r;
                            n++
                          ) {
                            var o = t[n];
                            void 0 === o &&
                              (console.warn(
                                'THREE.BufferAttribute.copyVector4sArray(): vector is undefined',
                                n
                              ),
                              (o = new je())),
                              (e[i++] = o.x),
                              (e[i++] = o.y),
                              (e[i++] = o.z),
                              (e[i++] = o.w);
                          }
                          return this;
                        },
                        set: function(t, e) {
                          return (
                            void 0 === e && (e = 0), this.array.set(t, e), this
                          );
                        },
                        getX: function(t) {
                          return this.array[t * this.itemSize];
                        },
                        setX: function(t, e) {
                          return (this.array[t * this.itemSize] = e), this;
                        },
                        getY: function(t) {
                          return this.array[t * this.itemSize + 1];
                        },
                        setY: function(t, e) {
                          return (this.array[t * this.itemSize + 1] = e), this;
                        },
                        getZ: function(t) {
                          return this.array[t * this.itemSize + 2];
                        },
                        setZ: function(t, e) {
                          return (this.array[t * this.itemSize + 2] = e), this;
                        },
                        getW: function(t) {
                          return this.array[t * this.itemSize + 3];
                        },
                        setW: function(t, e) {
                          return (this.array[t * this.itemSize + 3] = e), this;
                        },
                        setXY: function(t, e, i) {
                          return (
                            (t *= this.itemSize),
                            (this.array[t + 0] = e),
                            (this.array[t + 1] = i),
                            this
                          );
                        },
                        setXYZ: function(t, e, i, n) {
                          return (
                            (t *= this.itemSize),
                            (this.array[t + 0] = e),
                            (this.array[t + 1] = i),
                            (this.array[t + 2] = n),
                            this
                          );
                        },
                        setXYZW: function(t, e, i, n, r) {
                          return (
                            (t *= this.itemSize),
                            (this.array[t + 0] = e),
                            (this.array[t + 1] = i),
                            (this.array[t + 2] = n),
                            (this.array[t + 3] = r),
                            this
                          );
                        },
                        onUpload: function(t) {
                          return (this.onUploadCallback = t), this;
                        },
                        clone: function() {
                          return new this.constructor(
                            this.array,
                            this.itemSize
                          ).copy(this);
                        }
                      }),
                      (Cr.prototype = Object.create(Sr.prototype)),
                      (Cr.prototype.constructor = Cr),
                      (_r.prototype = Object.create(Sr.prototype)),
                      (_r.prototype.constructor = _r),
                      (Ir.prototype = Object.create(Sr.prototype)),
                      (Ir.prototype.constructor = Ir),
                      (jr.prototype = Object.create(Sr.prototype)),
                      (jr.prototype.constructor = jr),
                      (Or.prototype = Object.create(Sr.prototype)),
                      (Or.prototype.constructor = Or),
                      (Rr.prototype = Object.create(Sr.prototype)),
                      (Rr.prototype.constructor = Rr),
                      (zr.prototype = Object.create(Sr.prototype)),
                      (zr.prototype.constructor = zr),
                      (kr.prototype = Object.create(Sr.prototype)),
                      (kr.prototype.constructor = kr),
                      (Br.prototype = Object.create(Sr.prototype)),
                      (Br.prototype.constructor = Br),
                      Object.assign(Pr.prototype, {
                        computeGroups: function(t) {
                          for (
                            var e, i = [], n = void 0, r = t.faces, o = 0;
                            o < r.length;
                            o++
                          ) {
                            var s = r[o];
                            s.materialIndex !== n &&
                              ((n = s.materialIndex),
                              void 0 !== e &&
                                ((e.count = 3 * o - e.start), i.push(e)),
                              (e = { start: 3 * o, materialIndex: n }));
                          }
                          void 0 !== e &&
                            ((e.count = 3 * o - e.start), i.push(e)),
                            (this.groups = i);
                        },
                        fromGeometry: function(t) {
                          var e,
                            i = t.faces,
                            n = t.vertices,
                            r = t.faceVertexUvs,
                            o = r[0] && r[0].length > 0,
                            s = r[1] && r[1].length > 0,
                            a = t.morphTargets,
                            c = a.length;
                          if (c > 0) {
                            e = [];
                            for (var l = 0; l < c; l++) e[l] = [];
                            this.morphTargets.position = e;
                          }
                          var u,
                            h = t.morphNormals,
                            d = h.length;
                          if (d > 0) {
                            u = [];
                            for (l = 0; l < d; l++) u[l] = [];
                            this.morphTargets.normal = u;
                          }
                          var p = t.skinIndices,
                            f = t.skinWeights,
                            m = p.length === n.length,
                            g = f.length === n.length;
                          for (l = 0; l < i.length; l++) {
                            var v = i[l];
                            this.vertices.push(n[v.a], n[v.b], n[v.c]);
                            var y = v.vertexNormals;
                            if (3 === y.length)
                              this.normals.push(y[0], y[1], y[2]);
                            else {
                              var w = v.normal;
                              this.normals.push(w, w, w);
                            }
                            var M,
                              E = v.vertexColors;
                            if (3 === E.length)
                              this.colors.push(E[0], E[1], E[2]);
                            else {
                              var b = v.color;
                              this.colors.push(b, b, b);
                            }
                            if (!0 === o)
                              void 0 !== (M = r[0][l])
                                ? this.uvs.push(M[0], M[1], M[2])
                                : (console.warn(
                                    'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ',
                                    l
                                  ),
                                  this.uvs.push(new he(), new he(), new he()));
                            if (!0 === s)
                              void 0 !== (M = r[1][l])
                                ? this.uvs2.push(M[0], M[1], M[2])
                                : (console.warn(
                                    'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ',
                                    l
                                  ),
                                  this.uvs2.push(new he(), new he(), new he()));
                            for (var x = 0; x < c; x++) {
                              var A = a[x].vertices;
                              e[x].push(A[v.a], A[v.b], A[v.c]);
                            }
                            for (x = 0; x < d; x++) {
                              var T = h[x].vertexNormals[l];
                              u[x].push(T.a, T.b, T.c);
                            }
                            m && this.skinIndices.push(p[v.a], p[v.b], p[v.c]),
                              g &&
                                this.skinWeights.push(f[v.a], f[v.b], f[v.c]);
                          }
                          return (
                            this.computeGroups(t),
                            (this.verticesNeedUpdate = t.verticesNeedUpdate),
                            (this.normalsNeedUpdate = t.normalsNeedUpdate),
                            (this.colorsNeedUpdate = t.colorsNeedUpdate),
                            (this.uvsNeedUpdate = t.uvsNeedUpdate),
                            (this.groupsNeedUpdate = t.groupsNeedUpdate),
                            this
                          );
                        }
                      }),
                      (Fr.MaxIndex = 65535),
                      Object.assign(Fr.prototype, e.prototype, {
                        isBufferGeometry: !0,
                        getIndex: function() {
                          return this.index;
                        },
                        setIndex: function(t) {
                          Array.isArray(t)
                            ? (this.index = new (Ur(t) > 65535 ? zr : Or)(t, 1))
                            : (this.index = t);
                        },
                        addAttribute: function(t, e) {
                          return (e && e.isBufferAttribute) ||
                            (e && e.isInterleavedBufferAttribute)
                            ? 'index' === t
                              ? (console.warn(
                                  'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.'
                                ),
                                void this.setIndex(e))
                              : ((this.attributes[t] = e), this)
                            : (console.warn(
                                'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).'
                              ),
                              void this.addAttribute(
                                t,
                                new Sr(arguments[1], arguments[2])
                              ));
                        },
                        getAttribute: function(t) {
                          return this.attributes[t];
                        },
                        removeAttribute: function(t) {
                          return delete this.attributes[t], this;
                        },
                        addGroup: function(t, e, i) {
                          this.groups.push({
                            start: t,
                            count: e,
                            materialIndex: void 0 !== i ? i : 0
                          });
                        },
                        clearGroups: function() {
                          this.groups = [];
                        },
                        setDrawRange: function(t, e) {
                          (this.drawRange.start = t),
                            (this.drawRange.count = e);
                        },
                        applyMatrix: function(t) {
                          var e = this.attributes.position;
                          void 0 !== e &&
                            (t.applyToBufferAttribute(e), (e.needsUpdate = !0));
                          var i = this.attributes.normal;
                          void 0 !== i &&
                            (new hn()
                              .getNormalMatrix(t)
                              .applyToBufferAttribute(i),
                            (i.needsUpdate = !0));
                          return (
                            null !== this.boundingBox &&
                              this.computeBoundingBox(),
                            null !== this.boundingSphere &&
                              this.computeBoundingSphere(),
                            this
                          );
                        },
                        rotateX: ((er = new Be()),
                        function(t) {
                          return (
                            er.makeRotationX(t), this.applyMatrix(er), this
                          );
                        }),
                        rotateY: ((tr = new Be()),
                        function(t) {
                          return (
                            tr.makeRotationY(t), this.applyMatrix(tr), this
                          );
                        }),
                        rotateZ: (($n = new Be()),
                        function(t) {
                          return (
                            $n.makeRotationZ(t), this.applyMatrix($n), this
                          );
                        }),
                        translate: ((Jn = new Be()),
                        function(t, e, i) {
                          return (
                            Jn.makeTranslation(t, e, i),
                            this.applyMatrix(Jn),
                            this
                          );
                        }),
                        scale: ((Zn = new Be()),
                        function(t, e, i) {
                          return (
                            Zn.makeScale(t, e, i), this.applyMatrix(Zn), this
                          );
                        }),
                        lookAt: ((Kn = new zn()),
                        function(t) {
                          Kn.lookAt(t),
                            Kn.updateMatrix(),
                            this.applyMatrix(Kn.matrix);
                        }),
                        center: function() {
                          this.computeBoundingBox();
                          var t = this.boundingBox.getCenter().negate();
                          return this.translate(t.x, t.y, t.z), t;
                        },
                        setFromObject: function(t) {
                          var e = t.geometry;
                          if (t.isPoints || t.isLine) {
                            var i = new kr(3 * e.vertices.length, 3),
                              n = new kr(3 * e.colors.length, 3);
                            if (
                              (this.addAttribute(
                                'position',
                                i.copyVector3sArray(e.vertices)
                              ),
                              this.addAttribute(
                                'color',
                                n.copyColorsArray(e.colors)
                              ),
                              e.lineDistances &&
                                e.lineDistances.length === e.vertices.length)
                            ) {
                              var r = new kr(e.lineDistances.length, 1);
                              this.addAttribute(
                                'lineDistance',
                                r.copyArray(e.lineDistances)
                              );
                            }
                            null !== e.boundingSphere &&
                              (this.boundingSphere = e.boundingSphere.clone()),
                              null !== e.boundingBox &&
                                (this.boundingBox = e.boundingBox.clone());
                          } else
                            t.isMesh &&
                              e &&
                              e.isGeometry &&
                              this.fromGeometry(e);
                          return this;
                        },
                        updateFromObject: function(t) {
                          var e,
                            i = t.geometry;
                          if (t.isMesh) {
                            var n = i.__directGeometry;
                            if (
                              (!0 === i.elementsNeedUpdate &&
                                ((n = void 0), (i.elementsNeedUpdate = !1)),
                              void 0 === n)
                            )
                              return this.fromGeometry(i);
                            (n.verticesNeedUpdate = i.verticesNeedUpdate),
                              (n.normalsNeedUpdate = i.normalsNeedUpdate),
                              (n.colorsNeedUpdate = i.colorsNeedUpdate),
                              (n.uvsNeedUpdate = i.uvsNeedUpdate),
                              (n.groupsNeedUpdate = i.groupsNeedUpdate),
                              (i.verticesNeedUpdate = !1),
                              (i.normalsNeedUpdate = !1),
                              (i.colorsNeedUpdate = !1),
                              (i.uvsNeedUpdate = !1),
                              (i.groupsNeedUpdate = !1),
                              (i = n);
                          }
                          return (
                            !0 === i.verticesNeedUpdate &&
                              (void 0 !== (e = this.attributes.position) &&
                                (e.copyVector3sArray(i.vertices),
                                (e.needsUpdate = !0)),
                              (i.verticesNeedUpdate = !1)),
                            !0 === i.normalsNeedUpdate &&
                              (void 0 !== (e = this.attributes.normal) &&
                                (e.copyVector3sArray(i.normals),
                                (e.needsUpdate = !0)),
                              (i.normalsNeedUpdate = !1)),
                            !0 === i.colorsNeedUpdate &&
                              (void 0 !== (e = this.attributes.color) &&
                                (e.copyColorsArray(i.colors),
                                (e.needsUpdate = !0)),
                              (i.colorsNeedUpdate = !1)),
                            i.uvsNeedUpdate &&
                              (void 0 !== (e = this.attributes.uv) &&
                                (e.copyVector2sArray(i.uvs),
                                (e.needsUpdate = !0)),
                              (i.uvsNeedUpdate = !1)),
                            i.lineDistancesNeedUpdate &&
                              (void 0 !== (e = this.attributes.lineDistance) &&
                                (e.copyArray(i.lineDistances),
                                (e.needsUpdate = !0)),
                              (i.lineDistancesNeedUpdate = !1)),
                            i.groupsNeedUpdate &&
                              (i.computeGroups(t.geometry),
                              (this.groups = i.groups),
                              (i.groupsNeedUpdate = !1)),
                            this
                          );
                        },
                        fromGeometry: function(t) {
                          return (
                            (t.__directGeometry = new Pr().fromGeometry(t)),
                            this.fromDirectGeometry(t.__directGeometry)
                          );
                        },
                        fromDirectGeometry: function(t) {
                          var e = new Float32Array(3 * t.vertices.length);
                          if (
                            (this.addAttribute(
                              'position',
                              new Sr(e, 3).copyVector3sArray(t.vertices)
                            ),
                            t.normals.length > 0)
                          ) {
                            var i = new Float32Array(3 * t.normals.length);
                            this.addAttribute(
                              'normal',
                              new Sr(i, 3).copyVector3sArray(t.normals)
                            );
                          }
                          if (t.colors.length > 0) {
                            var n = new Float32Array(3 * t.colors.length);
                            this.addAttribute(
                              'color',
                              new Sr(n, 3).copyColorsArray(t.colors)
                            );
                          }
                          if (t.uvs.length > 0) {
                            var r = new Float32Array(2 * t.uvs.length);
                            this.addAttribute(
                              'uv',
                              new Sr(r, 2).copyVector2sArray(t.uvs)
                            );
                          }
                          if (t.uvs2.length > 0) {
                            var o = new Float32Array(2 * t.uvs2.length);
                            this.addAttribute(
                              'uv2',
                              new Sr(o, 2).copyVector2sArray(t.uvs2)
                            );
                          }
                          if (t.indices.length > 0) {
                            var s = new (Ur(t.indices) > 65535
                              ? Uint32Array
                              : Uint16Array)(3 * t.indices.length);
                            this.setIndex(
                              new Sr(s, 1).copyIndicesArray(t.indices)
                            );
                          }
                          this.groups = t.groups;
                          for (var a in t.morphTargets) {
                            for (
                              var c = [],
                                l = t.morphTargets[a],
                                u = 0,
                                h = l.length;
                              u < h;
                              u++
                            ) {
                              var d = l[u],
                                p = new kr(3 * d.length, 3);
                              c.push(p.copyVector3sArray(d));
                            }
                            this.morphAttributes[a] = c;
                          }
                          if (t.skinIndices.length > 0) {
                            var f = new kr(4 * t.skinIndices.length, 4);
                            this.addAttribute(
                              'skinIndex',
                              f.copyVector4sArray(t.skinIndices)
                            );
                          }
                          if (t.skinWeights.length > 0) {
                            var m = new kr(4 * t.skinWeights.length, 4);
                            this.addAttribute(
                              'skinWeight',
                              m.copyVector4sArray(t.skinWeights)
                            );
                          }
                          return (
                            null !== t.boundingSphere &&
                              (this.boundingSphere = t.boundingSphere.clone()),
                            null !== t.boundingBox &&
                              (this.boundingBox = t.boundingBox.clone()),
                            this
                          );
                        },
                        computeBoundingBox: function() {
                          null === this.boundingBox &&
                            (this.boundingBox = new ln());
                          var t = this.attributes.position;
                          void 0 !== t
                            ? this.boundingBox.setFromBufferAttribute(t)
                            : this.boundingBox.makeEmpty(),
                            (isNaN(this.boundingBox.min.x) ||
                              isNaN(this.boundingBox.min.y) ||
                              isNaN(this.boundingBox.min.z)) &&
                              console.error(
                                'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
                                this
                              );
                        },
                        computeBoundingSphere: ((qn = new ln()),
                        (Xn = new ke()),
                        function() {
                          null === this.boundingSphere &&
                            (this.boundingSphere = new un());
                          var t = this.attributes.position;
                          if (t) {
                            var e = this.boundingSphere.center;
                            qn.setFromBufferAttribute(t), qn.getCenter(e);
                            for (var i = 0, n = 0, r = t.count; n < r; n++)
                              (Xn.x = t.getX(n)),
                                (Xn.y = t.getY(n)),
                                (Xn.z = t.getZ(n)),
                                (i = Math.max(i, e.distanceToSquared(Xn)));
                            (this.boundingSphere.radius = Math.sqrt(i)),
                              isNaN(this.boundingSphere.radius) &&
                                console.error(
                                  'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
                                  this
                                );
                          }
                        }),
                        computeFaceNormals: function() {},
                        computeVertexNormals: function() {
                          var t = this.index,
                            e = this.attributes,
                            i = this.groups;
                          if (e.position) {
                            var n = e.position.array;
                            if (void 0 === e.normal)
                              this.addAttribute(
                                'normal',
                                new Sr(new Float32Array(n.length), 3)
                              );
                            else
                              for (
                                var r = e.normal.array, o = 0, s = r.length;
                                o < s;
                                o++
                              )
                                r[o] = 0;
                            var a,
                              c,
                              l,
                              u = e.normal.array,
                              h = new ke(),
                              d = new ke(),
                              p = new ke(),
                              f = new ke(),
                              m = new ke();
                            if (t) {
                              var g = t.array;
                              0 === i.length && this.addGroup(0, g.length);
                              for (var v = 0, y = i.length; v < y; ++v) {
                                var w = i[v],
                                  M = w.start;
                                for (o = M, s = M + w.count; o < s; o += 3)
                                  (a = 3 * g[o + 0]),
                                    (c = 3 * g[o + 1]),
                                    (l = 3 * g[o + 2]),
                                    h.fromArray(n, a),
                                    d.fromArray(n, c),
                                    p.fromArray(n, l),
                                    f.subVectors(p, d),
                                    m.subVectors(h, d),
                                    f.cross(m),
                                    (u[a] += f.x),
                                    (u[a + 1] += f.y),
                                    (u[a + 2] += f.z),
                                    (u[c] += f.x),
                                    (u[c + 1] += f.y),
                                    (u[c + 2] += f.z),
                                    (u[l] += f.x),
                                    (u[l + 1] += f.y),
                                    (u[l + 2] += f.z);
                              }
                            } else
                              for (o = 0, s = n.length; o < s; o += 9)
                                h.fromArray(n, o),
                                  d.fromArray(n, o + 3),
                                  p.fromArray(n, o + 6),
                                  f.subVectors(p, d),
                                  m.subVectors(h, d),
                                  f.cross(m),
                                  (u[o] = f.x),
                                  (u[o + 1] = f.y),
                                  (u[o + 2] = f.z),
                                  (u[o + 3] = f.x),
                                  (u[o + 4] = f.y),
                                  (u[o + 5] = f.z),
                                  (u[o + 6] = f.x),
                                  (u[o + 7] = f.y),
                                  (u[o + 8] = f.z);
                            this.normalizeNormals(),
                              (e.normal.needsUpdate = !0);
                          }
                        },
                        merge: function(t, e) {
                          if (t && t.isBufferGeometry) {
                            void 0 === e && (e = 0);
                            var i = this.attributes;
                            for (var n in i)
                              if (void 0 !== t.attributes[n])
                                for (
                                  var r = i[n].array,
                                    o = t.attributes[n],
                                    s = o.array,
                                    a = 0,
                                    c = o.itemSize * e;
                                  a < s.length;
                                  a++, c++
                                )
                                  r[c] = s[a];
                            return this;
                          }
                          console.error(
                            'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.',
                            t
                          );
                        },
                        normalizeNormals: ((Wn = new ke()),
                        function() {
                          for (
                            var t = this.attributes.normal, e = 0, i = t.count;
                            e < i;
                            e++
                          )
                            (Wn.x = t.getX(e)),
                              (Wn.y = t.getY(e)),
                              (Wn.z = t.getZ(e)),
                              Wn.normalize(),
                              t.setXYZ(e, Wn.x, Wn.y, Wn.z);
                        }),
                        toNonIndexed: function() {
                          if (null === this.index)
                            return (
                              console.warn(
                                'THREE.BufferGeometry.toNonIndexed(): Geometry is already non-indexed.'
                              ),
                              this
                            );
                          var t = new Fr(),
                            e = this.index.array,
                            i = this.attributes;
                          for (var n in i) {
                            for (
                              var r = i[n],
                                o = r.array,
                                s = r.itemSize,
                                a = new o.constructor(e.length * s),
                                c = 0,
                                l = 0,
                                u = 0,
                                h = e.length;
                              u < h;
                              u++
                            ) {
                              c = e[u] * s;
                              for (var d = 0; d < s; d++) a[l++] = o[c++];
                            }
                            t.addAttribute(n, new Sr(a, s));
                          }
                          return t;
                        },
                        toJSON: function() {
                          var t = {
                            metadata: {
                              version: 4.5,
                              type: 'BufferGeometry',
                              generator: 'BufferGeometry.toJSON'
                            }
                          };
                          if (
                            ((t.uuid = this.uuid),
                            (t.type = this.type),
                            '' !== this.name && (t.name = this.name),
                            void 0 !== this.parameters)
                          ) {
                            var e = this.parameters;
                            for (var i in e) void 0 !== e[i] && (t[i] = e[i]);
                            return t;
                          }
                          t.data = { attributes: {} };
                          var n = this.index;
                          if (null !== n) {
                            var r = Array.prototype.slice.call(n.array);
                            t.data.index = {
                              type: n.array.constructor.name,
                              array: r
                            };
                          }
                          var o = this.attributes;
                          for (var i in o) {
                            var s = o[i];
                            r = Array.prototype.slice.call(s.array);
                            t.data.attributes[i] = {
                              itemSize: s.itemSize,
                              type: s.array.constructor.name,
                              array: r,
                              normalized: s.normalized
                            };
                          }
                          var a = this.groups;
                          a.length > 0 &&
                            (t.data.groups = JSON.parse(JSON.stringify(a)));
                          var c = this.boundingSphere;
                          return (
                            null !== c &&
                              (t.data.boundingSphere = {
                                center: c.center.toArray(),
                                radius: c.radius
                              }),
                            t
                          );
                        },
                        clone: function() {
                          return new Fr().copy(this);
                        },
                        copy: function(t) {
                          var e, i, n;
                          (this.index = null),
                            (this.attributes = {}),
                            (this.morphAttributes = {}),
                            (this.groups = []),
                            (this.boundingBox = null),
                            (this.boundingSphere = null),
                            (this.name = t.name);
                          var r = t.index;
                          null !== r && this.setIndex(r.clone());
                          var o = t.attributes;
                          for (e in o) {
                            var s = o[e];
                            this.addAttribute(e, s.clone());
                          }
                          var a = t.morphAttributes;
                          for (e in a) {
                            var c = [],
                              l = a[e];
                            for (i = 0, n = l.length; i < n; i++)
                              c.push(l[i].clone());
                            this.morphAttributes[e] = c;
                          }
                          var u = t.groups;
                          for (i = 0, n = u.length; i < n; i++) {
                            var h = u[i];
                            this.addGroup(h.start, h.count, h.materialIndex);
                          }
                          var d = t.boundingBox;
                          null !== d && (this.boundingBox = d.clone());
                          var p = t.boundingSphere;
                          return (
                            null !== p && (this.boundingSphere = p.clone()),
                            (this.drawRange.start = t.drawRange.start),
                            (this.drawRange.count = t.drawRange.count),
                            this
                          );
                        },
                        dispose: function() {
                          this.dispatchEvent({ type: 'dispose' });
                        }
                      }),
                      (Hr.prototype = Object.create(Dr.prototype)),
                      (Hr.prototype.constructor = Hr),
                      (Vr.prototype = Object.create(Fr.prototype)),
                      (Vr.prototype.constructor = Vr),
                      (Gr.prototype = Object.create(Dr.prototype)),
                      (Gr.prototype.constructor = Gr),
                      (Yr.prototype = Object.create(Fr.prototype)),
                      (Yr.prototype.constructor = Yr),
                      (Qr.prototype = Object.create(on.prototype)),
                      (Qr.prototype.constructor = Qr),
                      (Qr.prototype.isMeshBasicMaterial = !0),
                      (Qr.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.color.copy(t.color),
                          (this.map = t.map),
                          (this.lightMap = t.lightMap),
                          (this.lightMapIntensity = t.lightMapIntensity),
                          (this.aoMap = t.aoMap),
                          (this.aoMapIntensity = t.aoMapIntensity),
                          (this.specularMap = t.specularMap),
                          (this.alphaMap = t.alphaMap),
                          (this.envMap = t.envMap),
                          (this.combine = t.combine),
                          (this.reflectivity = t.reflectivity),
                          (this.refractionRatio = t.refractionRatio),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          (this.wireframeLinecap = t.wireframeLinecap),
                          (this.wireframeLinejoin = t.wireframeLinejoin),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          this
                        );
                      }),
                      Object.assign(Wr.prototype, {
                        set: function(t, e) {
                          return (
                            this.origin.copy(t), this.direction.copy(e), this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.origin.copy(t.origin),
                            this.direction.copy(t.direction),
                            this
                          );
                        },
                        at: function(t, e) {
                          return (e || new ke())
                            .copy(this.direction)
                            .multiplyScalar(t)
                            .add(this.origin);
                        },
                        lookAt: function(t) {
                          return (
                            this.direction
                              .copy(t)
                              .sub(this.origin)
                              .normalize(),
                            this
                          );
                        },
                        recast: ((dr = new ke()),
                        function(t) {
                          return this.origin.copy(this.at(t, dr)), this;
                        }),
                        closestPointToPoint: function(t, e) {
                          var i = e || new ke();
                          i.subVectors(t, this.origin);
                          var n = i.dot(this.direction);
                          return n < 0
                            ? i.copy(this.origin)
                            : i
                                .copy(this.direction)
                                .multiplyScalar(n)
                                .add(this.origin);
                        },
                        distanceToPoint: function(t) {
                          return Math.sqrt(this.distanceSqToPoint(t));
                        },
                        distanceSqToPoint: ((hr = new ke()),
                        function(t) {
                          var e = hr
                            .subVectors(t, this.origin)
                            .dot(this.direction);
                          return e < 0
                            ? this.origin.distanceToSquared(t)
                            : (hr
                                .copy(this.direction)
                                .multiplyScalar(e)
                                .add(this.origin),
                              hr.distanceToSquared(t));
                        }),
                        distanceSqToSegment: ((cr = new ke()),
                        (lr = new ke()),
                        (ur = new ke()),
                        function(t, e, i, n) {
                          cr
                            .copy(t)
                            .add(e)
                            .multiplyScalar(0.5),
                            lr
                              .copy(e)
                              .sub(t)
                              .normalize(),
                            ur.copy(this.origin).sub(cr);
                          var r,
                            o,
                            s,
                            a,
                            c = 0.5 * t.distanceTo(e),
                            l = -this.direction.dot(lr),
                            u = ur.dot(this.direction),
                            h = -ur.dot(lr),
                            d = ur.lengthSq(),
                            p = Math.abs(1 - l * l);
                          if (p > 0)
                            if (
                              ((o = l * u - h),
                              (a = c * p),
                              (r = l * h - u) >= 0)
                            )
                              if (o >= -a)
                                if (o <= a) {
                                  var f = 1 / p;
                                  s =
                                    (r *= f) * (r + l * (o *= f) + 2 * u) +
                                    o * (l * r + o + 2 * h) +
                                    d;
                                } else
                                  (o = c),
                                    (s =
                                      -(r = Math.max(0, -(l * o + u))) * r +
                                      o * (o + 2 * h) +
                                      d);
                              else
                                (o = -c),
                                  (s =
                                    -(r = Math.max(0, -(l * o + u))) * r +
                                    o * (o + 2 * h) +
                                    d);
                            else
                              o <= -a
                                ? (s =
                                    -(r = Math.max(0, -(-l * c + u))) * r +
                                    (o =
                                      r > 0
                                        ? -c
                                        : Math.min(Math.max(-c, -h), c)) *
                                      (o + 2 * h) +
                                    d)
                                : o <= a
                                  ? ((r = 0),
                                    (s =
                                      (o = Math.min(Math.max(-c, -h), c)) *
                                        (o + 2 * h) +
                                      d))
                                  : (s =
                                      -(r = Math.max(0, -(l * c + u))) * r +
                                      (o =
                                        r > 0
                                          ? c
                                          : Math.min(Math.max(-c, -h), c)) *
                                        (o + 2 * h) +
                                      d);
                          else
                            (o = l > 0 ? -c : c),
                              (s =
                                -(r = Math.max(0, -(l * o + u))) * r +
                                o * (o + 2 * h) +
                                d);
                          return (
                            i &&
                              i
                                .copy(this.direction)
                                .multiplyScalar(r)
                                .add(this.origin),
                            n &&
                              n
                                .copy(lr)
                                .multiplyScalar(o)
                                .add(cr),
                            s
                          );
                        }),
                        intersectSphere: ((ar = new ke()),
                        function(t, e) {
                          ar.subVectors(t.center, this.origin);
                          var i = ar.dot(this.direction),
                            n = ar.dot(ar) - i * i,
                            r = t.radius * t.radius;
                          if (n > r) return null;
                          var o = Math.sqrt(r - n),
                            s = i - o,
                            a = i + o;
                          return s < 0 && a < 0
                            ? null
                            : s < 0 ? this.at(a, e) : this.at(s, e);
                        }),
                        intersectsSphere: function(t) {
                          return this.distanceToPoint(t.center) <= t.radius;
                        },
                        distanceToPlane: function(t) {
                          var e = t.normal.dot(this.direction);
                          if (0 === e)
                            return 0 === t.distanceToPoint(this.origin)
                              ? 0
                              : null;
                          var i = -(this.origin.dot(t.normal) + t.constant) / e;
                          return i >= 0 ? i : null;
                        },
                        intersectPlane: function(t, e) {
                          var i = this.distanceToPlane(t);
                          return null === i ? null : this.at(i, e);
                        },
                        intersectsPlane: function(t) {
                          var e = t.distanceToPoint(this.origin);
                          return (
                            0 === e || t.normal.dot(this.direction) * e < 0
                          );
                        },
                        intersectBox: function(t, e) {
                          var i,
                            n,
                            r,
                            o,
                            s,
                            a,
                            c = 1 / this.direction.x,
                            l = 1 / this.direction.y,
                            u = 1 / this.direction.z,
                            h = this.origin;
                          return (
                            c >= 0
                              ? ((i = (t.min.x - h.x) * c),
                                (n = (t.max.x - h.x) * c))
                              : ((i = (t.max.x - h.x) * c),
                                (n = (t.min.x - h.x) * c)),
                            l >= 0
                              ? ((r = (t.min.y - h.y) * l),
                                (o = (t.max.y - h.y) * l))
                              : ((r = (t.max.y - h.y) * l),
                                (o = (t.min.y - h.y) * l)),
                            i > o || r > n
                              ? null
                              : ((r > i || i != i) && (i = r),
                                (o < n || n != n) && (n = o),
                                u >= 0
                                  ? ((s = (t.min.z - h.z) * u),
                                    (a = (t.max.z - h.z) * u))
                                  : ((s = (t.max.z - h.z) * u),
                                    (a = (t.min.z - h.z) * u)),
                                i > a || s > n
                                  ? null
                                  : ((s > i || i != i) && (i = s),
                                    (a < n || n != n) && (n = a),
                                    n < 0 ? null : this.at(i >= 0 ? i : n, e)))
                          );
                        },
                        intersectsBox: ((sr = new ke()),
                        function(t) {
                          return null !== this.intersectBox(t, sr);
                        }),
                        intersectTriangle: ((ir = new ke()),
                        (nr = new ke()),
                        (rr = new ke()),
                        (or = new ke()),
                        function(t, e, i, n, r) {
                          nr.subVectors(e, t),
                            rr.subVectors(i, t),
                            or.crossVectors(nr, rr);
                          var o,
                            s = this.direction.dot(or);
                          if (s > 0) {
                            if (n) return null;
                            o = 1;
                          } else {
                            if (!(s < 0)) return null;
                            (o = -1), (s = -s);
                          }
                          ir.subVectors(this.origin, t);
                          var a =
                            o * this.direction.dot(rr.crossVectors(ir, rr));
                          if (a < 0) return null;
                          var c = o * this.direction.dot(nr.cross(ir));
                          if (c < 0) return null;
                          if (a + c > s) return null;
                          var l = -o * ir.dot(or);
                          return l < 0 ? null : this.at(l / s, r);
                        }),
                        applyMatrix4: function(t) {
                          return (
                            this.origin.applyMatrix4(t),
                            this.direction.transformDirection(t),
                            this
                          );
                        },
                        equals: function(t) {
                          return (
                            t.origin.equals(this.origin) &&
                            t.direction.equals(this.direction)
                          );
                        }
                      }),
                      Object.assign(qr.prototype, {
                        set: function(t, e) {
                          return this.start.copy(t), this.end.copy(e), this;
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.start.copy(t.start), this.end.copy(t.end), this
                          );
                        },
                        getCenter: function(t) {
                          return (t || new ke())
                            .addVectors(this.start, this.end)
                            .multiplyScalar(0.5);
                        },
                        delta: function(t) {
                          return (t || new ke()).subVectors(
                            this.end,
                            this.start
                          );
                        },
                        distanceSq: function() {
                          return this.start.distanceToSquared(this.end);
                        },
                        distance: function() {
                          return this.start.distanceTo(this.end);
                        },
                        at: function(t, e) {
                          var i = e || new ke();
                          return this.delta(i)
                            .multiplyScalar(t)
                            .add(this.start);
                        },
                        closestPointToPointParameter: ((pr = new ke()),
                        (fr = new ke()),
                        function(t, e) {
                          pr.subVectors(t, this.start),
                            fr.subVectors(this.end, this.start);
                          var i = fr.dot(fr),
                            n = fr.dot(pr) / i;
                          return e && (n = ue.clamp(n, 0, 1)), n;
                        }),
                        closestPointToPoint: function(t, e, i) {
                          var n = this.closestPointToPointParameter(t, e),
                            r = i || new ke();
                          return this.delta(r)
                            .multiplyScalar(n)
                            .add(this.start);
                        },
                        applyMatrix4: function(t) {
                          return (
                            this.start.applyMatrix4(t),
                            this.end.applyMatrix4(t),
                            this
                          );
                        },
                        equals: function(t) {
                          return (
                            t.start.equals(this.start) && t.end.equals(this.end)
                          );
                        }
                      }),
                      Object.assign(Xr, {
                        normal: ((wr = new ke()),
                        function(t, e, i, n) {
                          var r = n || new ke();
                          r.subVectors(i, e), wr.subVectors(t, e), r.cross(wr);
                          var o = r.lengthSq();
                          return o > 0
                            ? r.multiplyScalar(1 / Math.sqrt(o))
                            : r.set(0, 0, 0);
                        }),
                        barycoordFromPoint: ((gr = new ke()),
                        (vr = new ke()),
                        (yr = new ke()),
                        function(t, e, i, n, r) {
                          gr.subVectors(n, e),
                            vr.subVectors(i, e),
                            yr.subVectors(t, e);
                          var o = gr.dot(gr),
                            s = gr.dot(vr),
                            a = gr.dot(yr),
                            c = vr.dot(vr),
                            l = vr.dot(yr),
                            u = o * c - s * s,
                            h = r || new ke();
                          if (0 === u) return h.set(-2, -1, -1);
                          var d = 1 / u,
                            p = (c * a - s * l) * d,
                            f = (o * l - s * a) * d;
                          return h.set(1 - p - f, f, p);
                        }),
                        containsPoint: ((mr = new ke()),
                        function(t, e, i, n) {
                          var r = Xr.barycoordFromPoint(t, e, i, n, mr);
                          return r.x >= 0 && r.y >= 0 && r.x + r.y <= 1;
                        })
                      }),
                      Object.assign(Xr.prototype, {
                        set: function(t, e, i) {
                          return (
                            this.a.copy(t), this.b.copy(e), this.c.copy(i), this
                          );
                        },
                        setFromPointsAndIndices: function(t, e, i, n) {
                          return (
                            this.a.copy(t[e]),
                            this.b.copy(t[i]),
                            this.c.copy(t[n]),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            this.a.copy(t.a),
                            this.b.copy(t.b),
                            this.c.copy(t.c),
                            this
                          );
                        },
                        area: ((Ar = new ke()),
                        (Tr = new ke()),
                        function() {
                          return (
                            Ar.subVectors(this.c, this.b),
                            Tr.subVectors(this.a, this.b),
                            0.5 * Ar.cross(Tr).length()
                          );
                        }),
                        midpoint: function(t) {
                          return (t || new ke())
                            .addVectors(this.a, this.b)
                            .add(this.c)
                            .multiplyScalar(1 / 3);
                        },
                        normal: function(t) {
                          return Xr.normal(this.a, this.b, this.c, t);
                        },
                        plane: function(t) {
                          return (t || new dn()).setFromCoplanarPoints(
                            this.a,
                            this.b,
                            this.c
                          );
                        },
                        barycoordFromPoint: function(t, e) {
                          return Xr.barycoordFromPoint(
                            t,
                            this.a,
                            this.b,
                            this.c,
                            e
                          );
                        },
                        containsPoint: function(t) {
                          return Xr.containsPoint(t, this.a, this.b, this.c);
                        },
                        closestPointToPoint: ((Mr = new dn()),
                        (Er = [new qr(), new qr(), new qr()]),
                        (br = new ke()),
                        (xr = new ke()),
                        function(t, e) {
                          var i = e || new ke(),
                            n = 1 / 0;
                          if (
                            (Mr.setFromCoplanarPoints(this.a, this.b, this.c),
                            Mr.projectPoint(t, br),
                            !0 === this.containsPoint(br))
                          )
                            i.copy(br);
                          else {
                            Er[0].set(this.a, this.b),
                              Er[1].set(this.b, this.c),
                              Er[2].set(this.c, this.a);
                            for (var r = 0; r < Er.length; r++) {
                              Er[r].closestPointToPoint(br, !0, xr);
                              var o = br.distanceToSquared(xr);
                              o < n && ((n = o), i.copy(xr));
                            }
                          }
                          return i;
                        }),
                        equals: function(t) {
                          return (
                            t.a.equals(this.a) &&
                            t.b.equals(this.b) &&
                            t.c.equals(this.c)
                          );
                        }
                      }),
                      (Kr.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: Kr,
                          isMesh: !0,
                          setDrawMode: function(t) {
                            this.drawMode = t;
                          },
                          copy: function(t) {
                            return (
                              zn.prototype.copy.call(this, t),
                              (this.drawMode = t.drawMode),
                              this
                            );
                          },
                          updateMorphTargets: function() {
                            var t,
                              e,
                              i,
                              n = this.geometry;
                            if (n.isBufferGeometry) {
                              var r = n.morphAttributes,
                                o = Object.keys(r);
                              if (o.length > 0) {
                                var s = r[o[0]];
                                if (void 0 !== s)
                                  for (
                                    this.morphTargetInfluences = [],
                                      this.morphTargetDictionary = {},
                                      t = 0,
                                      e = s.length;
                                    t < e;
                                    t++
                                  )
                                    (i = s[t].name || String(t)),
                                      this.morphTargetInfluences.push(0),
                                      (this.morphTargetDictionary[i] = t);
                              }
                            } else {
                              var a = n.morphTargets;
                              if (void 0 !== a && a.length > 0)
                                for (
                                  this.morphTargetInfluences = [],
                                    this.morphTargetDictionary = {},
                                    t = 0,
                                    e = a.length;
                                  t < e;
                                  t++
                                )
                                  (i = a[t].name || String(t)),
                                    this.morphTargetInfluences.push(0),
                                    (this.morphTargetDictionary[i] = t);
                            }
                          },
                          raycast: (function() {
                            var t = new Be(),
                              e = new Wr(),
                              i = new un(),
                              n = new ke(),
                              r = new ke(),
                              o = new ke(),
                              s = new ke(),
                              a = new ke(),
                              c = new ke(),
                              l = new he(),
                              u = new he(),
                              h = new he(),
                              d = new ke(),
                              p = new ke(),
                              f = new ke();
                            function m(t, e, i, n, r, o, s) {
                              return (
                                Xr.barycoordFromPoint(t, e, i, n, d),
                                r.multiplyScalar(d.x),
                                o.multiplyScalar(d.y),
                                s.multiplyScalar(d.z),
                                r.add(o).add(s),
                                r.clone()
                              );
                            }
                            function y(t, e, i, n, r, o, s, a) {
                              if (
                                null ===
                                (e.side === g
                                  ? n.intersectTriangle(s, o, r, !0, a)
                                  : n.intersectTriangle(
                                      r,
                                      o,
                                      s,
                                      e.side !== v,
                                      a
                                    ))
                              )
                                return null;
                              f.copy(a), f.applyMatrix4(t.matrixWorld);
                              var c = i.ray.origin.distanceTo(f);
                              return c < i.near || c > i.far
                                ? null
                                : { distance: c, point: f.clone(), object: t };
                            }
                            function w(t, e, i, s, a, c, d, f) {
                              n.fromBufferAttribute(s, c),
                                r.fromBufferAttribute(s, d),
                                o.fromBufferAttribute(s, f);
                              var g = y(t, t.material, e, i, n, r, o, p);
                              return (
                                g &&
                                  (a &&
                                    (l.fromBufferAttribute(a, c),
                                    u.fromBufferAttribute(a, d),
                                    h.fromBufferAttribute(a, f),
                                    (g.uv = m(p, n, r, o, l, u, h))),
                                  (g.face = new Un(
                                    c,
                                    d,
                                    f,
                                    Xr.normal(n, r, o)
                                  )),
                                  (g.faceIndex = c)),
                                g
                              );
                            }
                            return function(d, f) {
                              var g,
                                v = this.geometry,
                                M = this.material,
                                E = this.matrixWorld;
                              if (
                                void 0 !== M &&
                                (null === v.boundingSphere &&
                                  v.computeBoundingSphere(),
                                i.copy(v.boundingSphere),
                                i.applyMatrix4(E),
                                !1 !== d.ray.intersectsSphere(i) &&
                                  (t.getInverse(E),
                                  e.copy(d.ray).applyMatrix4(t),
                                  null === v.boundingBox ||
                                    !1 !== e.intersectsBox(v.boundingBox)))
                              )
                                if (v.isBufferGeometry) {
                                  var b,
                                    x,
                                    A,
                                    T,
                                    L,
                                    N = v.index,
                                    D = v.attributes.position,
                                    S = v.attributes.uv;
                                  if (null !== N)
                                    for (T = 0, L = N.count; T < L; T += 3)
                                      (b = N.getX(T)),
                                        (x = N.getX(T + 1)),
                                        (A = N.getX(T + 2)),
                                        (g = w(this, d, e, D, S, b, x, A)) &&
                                          ((g.faceIndex = Math.floor(T / 3)),
                                          f.push(g));
                                  else
                                    for (T = 0, L = D.count; T < L; T += 3)
                                      (g = w(
                                        this,
                                        d,
                                        e,
                                        D,
                                        S,
                                        (b = T),
                                        (x = T + 1),
                                        (A = T + 2)
                                      )) && ((g.index = b), f.push(g));
                                } else if (v.isGeometry) {
                                  var C,
                                    _,
                                    I,
                                    j,
                                    O = Array.isArray(M),
                                    R = v.vertices,
                                    z = v.faces,
                                    k = v.faceVertexUvs[0];
                                  k.length > 0 && (j = k);
                                  for (var B = 0, P = z.length; B < P; B++) {
                                    var U = z[B],
                                      F = O ? M[U.materialIndex] : M;
                                    if (void 0 !== F) {
                                      if (
                                        ((C = R[U.a]),
                                        (_ = R[U.b]),
                                        (I = R[U.c]),
                                        !0 === F.morphTargets)
                                      ) {
                                        var H = v.morphTargets,
                                          V = this.morphTargetInfluences;
                                        n.set(0, 0, 0),
                                          r.set(0, 0, 0),
                                          o.set(0, 0, 0);
                                        for (
                                          var G = 0, Y = H.length;
                                          G < Y;
                                          G++
                                        ) {
                                          var Q = V[G];
                                          if (0 !== Q) {
                                            var W = H[G].vertices;
                                            n.addScaledVector(
                                              s.subVectors(W[U.a], C),
                                              Q
                                            ),
                                              r.addScaledVector(
                                                a.subVectors(W[U.b], _),
                                                Q
                                              ),
                                              o.addScaledVector(
                                                c.subVectors(W[U.c], I),
                                                Q
                                              );
                                          }
                                        }
                                        n.add(C),
                                          r.add(_),
                                          o.add(I),
                                          (C = n),
                                          (_ = r),
                                          (I = o);
                                      }
                                      if ((g = y(this, F, d, e, C, _, I, p))) {
                                        if (j && j[B]) {
                                          var q = j[B];
                                          l.copy(q[0]),
                                            u.copy(q[1]),
                                            h.copy(q[2]),
                                            (g.uv = m(p, C, _, I, l, u, h));
                                        }
                                        (g.face = U),
                                          (g.faceIndex = B),
                                          f.push(g);
                                      }
                                    }
                                  }
                                }
                            };
                          })(),
                          clone: function() {
                            return new this.constructor(
                              this.geometry,
                              this.material
                            ).copy(this);
                          }
                        }
                      ));
                    var no,
                      ro,
                      oo,
                      so,
                      ao,
                      co,
                      lo,
                      uo,
                      ho,
                      po,
                      fo,
                      mo,
                      go,
                      vo,
                      yo = 0;
                    function wo(t) {
                      switch (t) {
                        case ee:
                          return ['Linear', '( value )'];
                        case ie:
                          return ['sRGB', '( value )'];
                        case re:
                          return ['RGBE', '( value )'];
                        case oe:
                          return ['RGBM', '( value, 7.0 )'];
                        case se:
                          return ['RGBM', '( value, 16.0 )'];
                        case ae:
                          return ['RGBD', '( value, 256.0 )'];
                        case ne:
                          return ['Gamma', '( value, float( GAMMA_FACTOR ) )'];
                        default:
                          throw new Error('unsupported encoding: ' + t);
                      }
                    }
                    function Mo(t, e) {
                      var i = wo(e);
                      return (
                        'vec4 ' +
                        t +
                        '( vec4 value ) { return ' +
                        i[0] +
                        'ToLinear' +
                        i[1] +
                        '; }'
                      );
                    }
                    function Eo(t) {
                      return '' !== t;
                    }
                    function bo(t, e) {
                      return t
                        .replace(/NUM_DIR_LIGHTS/g, e.numDirLights)
                        .replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights)
                        .replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights)
                        .replace(/NUM_POINT_LIGHTS/g, e.numPointLights)
                        .replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights);
                    }
                    function xo(t) {
                      return t.replace(
                        /^[ \t]*#include +<([\w\d.]+)>/gm,
                        function(t, e) {
                          var i = Ii[e];
                          if (void 0 === i)
                            throw new Error(
                              'Can not resolve #include <' + e + '>'
                            );
                          return xo(i);
                        }
                      );
                    }
                    function Ao(t) {
                      return t.replace(
                        /for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
                        function(t, e, i, n) {
                          for (
                            var r = '', o = parseInt(e);
                            o < parseInt(i);
                            o++
                          )
                            r += n.replace(/\[ i \]/g, '[ ' + o + ' ]');
                          return r;
                        }
                      );
                    }
                    function To(t, e, i, n, r, o) {
                      var s = t.context,
                        a = n.defines,
                        c = r.vertexShader,
                        l = r.fragmentShader,
                        u = 'SHADOWMAP_TYPE_BASIC';
                      o.shadowMapType === p
                        ? (u = 'SHADOWMAP_TYPE_PCF')
                        : o.shadowMapType === f &&
                          (u = 'SHADOWMAP_TYPE_PCF_SOFT');
                      var h = 'ENVMAP_TYPE_CUBE',
                        d = 'ENVMAP_MODE_REFLECTION',
                        m = 'ENVMAP_BLENDING_MULTIPLY';
                      if (o.envMap) {
                        switch (n.envMap.mapping) {
                          case ot:
                          case st:
                            h = 'ENVMAP_TYPE_CUBE';
                            break;
                          case ut:
                          case ht:
                            h = 'ENVMAP_TYPE_CUBE_UV';
                            break;
                          case at:
                          case ct:
                            h = 'ENVMAP_TYPE_EQUIREC';
                            break;
                          case lt:
                            h = 'ENVMAP_TYPE_SPHERE';
                        }
                        switch (n.envMap.mapping) {
                          case st:
                          case ct:
                            d = 'ENVMAP_MODE_REFRACTION';
                        }
                        switch (n.combine) {
                          case Z:
                            m = 'ENVMAP_BLENDING_MULTIPLY';
                            break;
                          case J:
                            m = 'ENVMAP_BLENDING_MIX';
                            break;
                          case $:
                            m = 'ENVMAP_BLENDING_ADD';
                        }
                      }
                      var g,
                        v,
                        y,
                        w,
                        M,
                        E,
                        b,
                        x,
                        A = t.gammaFactor > 0 ? t.gammaFactor : 1,
                        T = ((g = n.extensions),
                        (v = o),
                        (y = e),
                        [
                          (g = g || {}).derivatives ||
                          v.envMapCubeUV ||
                          v.bumpMap ||
                          v.normalMap ||
                          v.flatShading
                            ? '#extension GL_OES_standard_derivatives : enable'
                            : '',
                          (g.fragDepth || v.logarithmicDepthBuffer) &&
                          y.get('EXT_frag_depth')
                            ? '#extension GL_EXT_frag_depth : enable'
                            : '',
                          g.drawBuffers && y.get('WEBGL_draw_buffers')
                            ? '#extension GL_EXT_draw_buffers : require'
                            : '',
                          (g.shaderTextureLOD || v.envMap) &&
                          y.get('EXT_shader_texture_lod')
                            ? '#extension GL_EXT_shader_texture_lod : enable'
                            : ''
                        ]
                          .filter(Eo)
                          .join('\n')),
                        L = (function(t) {
                          var e = [];
                          for (var i in t) {
                            var n = t[i];
                            !1 !== n && e.push('#define ' + i + ' ' + n);
                          }
                          return e.join('\n');
                        })(a),
                        N = s.createProgram();
                      n.isRawShaderMaterial
                        ? ((w = [L, '\n'].filter(Eo).join('\n')),
                          (M = [T, L, '\n'].filter(Eo).join('\n')))
                        : ((w = [
                            'precision ' + o.precision + ' float;',
                            'precision ' + o.precision + ' int;',
                            '#define SHADER_NAME ' + r.name,
                            L,
                            o.supportsVertexTextures
                              ? '#define VERTEX_TEXTURES'
                              : '',
                            '#define GAMMA_FACTOR ' + A,
                            '#define MAX_BONES ' + o.maxBones,
                            o.useFog && o.fog ? '#define USE_FOG' : '',
                            o.useFog && o.fogExp ? '#define FOG_EXP2' : '',
                            o.map ? '#define USE_MAP' : '',
                            o.envMap ? '#define USE_ENVMAP' : '',
                            o.envMap ? '#define ' + d : '',
                            o.lightMap ? '#define USE_LIGHTMAP' : '',
                            o.aoMap ? '#define USE_AOMAP' : '',
                            o.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                            o.bumpMap ? '#define USE_BUMPMAP' : '',
                            o.normalMap ? '#define USE_NORMALMAP' : '',
                            o.displacementMap && o.supportsVertexTextures
                              ? '#define USE_DISPLACEMENTMAP'
                              : '',
                            o.specularMap ? '#define USE_SPECULARMAP' : '',
                            o.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                            o.metalnessMap ? '#define USE_METALNESSMAP' : '',
                            o.alphaMap ? '#define USE_ALPHAMAP' : '',
                            o.vertexColors ? '#define USE_COLOR' : '',
                            o.flatShading ? '#define FLAT_SHADED' : '',
                            o.skinning ? '#define USE_SKINNING' : '',
                            o.useVertexTexture ? '#define BONE_TEXTURE' : '',
                            o.morphTargets ? '#define USE_MORPHTARGETS' : '',
                            o.morphNormals && !1 === o.flatShading
                              ? '#define USE_MORPHNORMALS'
                              : '',
                            o.doubleSided ? '#define DOUBLE_SIDED' : '',
                            o.flipSided ? '#define FLIP_SIDED' : '',
                            '#define NUM_CLIPPING_PLANES ' +
                              o.numClippingPlanes,
                            o.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                            o.shadowMapEnabled ? '#define ' + u : '',
                            o.sizeAttenuation
                              ? '#define USE_SIZEATTENUATION'
                              : '',
                            o.logarithmicDepthBuffer
                              ? '#define USE_LOGDEPTHBUF'
                              : '',
                            o.logarithmicDepthBuffer && e.get('EXT_frag_depth')
                              ? '#define USE_LOGDEPTHBUF_EXT'
                              : '',
                            'uniform mat4 modelMatrix;',
                            'uniform mat4 modelViewMatrix;',
                            'uniform mat4 projectionMatrix;',
                            'uniform mat4 viewMatrix;',
                            'uniform mat3 normalMatrix;',
                            'uniform vec3 cameraPosition;',
                            'attribute vec3 position;',
                            'attribute vec3 normal;',
                            'attribute vec2 uv;',
                            '#ifdef USE_COLOR',
                            '\tattribute vec3 color;',
                            '#endif',
                            '#ifdef USE_MORPHTARGETS',
                            '\tattribute vec3 morphTarget0;',
                            '\tattribute vec3 morphTarget1;',
                            '\tattribute vec3 morphTarget2;',
                            '\tattribute vec3 morphTarget3;',
                            '\t#ifdef USE_MORPHNORMALS',
                            '\t\tattribute vec3 morphNormal0;',
                            '\t\tattribute vec3 morphNormal1;',
                            '\t\tattribute vec3 morphNormal2;',
                            '\t\tattribute vec3 morphNormal3;',
                            '\t#else',
                            '\t\tattribute vec3 morphTarget4;',
                            '\t\tattribute vec3 morphTarget5;',
                            '\t\tattribute vec3 morphTarget6;',
                            '\t\tattribute vec3 morphTarget7;',
                            '\t#endif',
                            '#endif',
                            '#ifdef USE_SKINNING',
                            '\tattribute vec4 skinIndex;',
                            '\tattribute vec4 skinWeight;',
                            '#endif',
                            '\n'
                          ]
                            .filter(Eo)
                            .join('\n')),
                          (M = [
                            T,
                            'precision ' + o.precision + ' float;',
                            'precision ' + o.precision + ' int;',
                            '#define SHADER_NAME ' + r.name,
                            L,
                            o.alphaTest
                              ? '#define ALPHATEST ' + o.alphaTest
                              : '',
                            '#define GAMMA_FACTOR ' + A,
                            o.useFog && o.fog ? '#define USE_FOG' : '',
                            o.useFog && o.fogExp ? '#define FOG_EXP2' : '',
                            o.map ? '#define USE_MAP' : '',
                            o.envMap ? '#define USE_ENVMAP' : '',
                            o.envMap ? '#define ' + h : '',
                            o.envMap ? '#define ' + d : '',
                            o.envMap ? '#define ' + m : '',
                            o.lightMap ? '#define USE_LIGHTMAP' : '',
                            o.aoMap ? '#define USE_AOMAP' : '',
                            o.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
                            o.bumpMap ? '#define USE_BUMPMAP' : '',
                            o.normalMap ? '#define USE_NORMALMAP' : '',
                            o.specularMap ? '#define USE_SPECULARMAP' : '',
                            o.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
                            o.metalnessMap ? '#define USE_METALNESSMAP' : '',
                            o.alphaMap ? '#define USE_ALPHAMAP' : '',
                            o.vertexColors ? '#define USE_COLOR' : '',
                            o.gradientMap ? '#define USE_GRADIENTMAP' : '',
                            o.flatShading ? '#define FLAT_SHADED' : '',
                            o.doubleSided ? '#define DOUBLE_SIDED' : '',
                            o.flipSided ? '#define FLIP_SIDED' : '',
                            '#define NUM_CLIPPING_PLANES ' +
                              o.numClippingPlanes,
                            '#define UNION_CLIPPING_PLANES ' +
                              (o.numClippingPlanes - o.numClipIntersection),
                            o.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
                            o.shadowMapEnabled ? '#define ' + u : '',
                            o.premultipliedAlpha
                              ? '#define PREMULTIPLIED_ALPHA'
                              : '',
                            o.physicallyCorrectLights
                              ? '#define PHYSICALLY_CORRECT_LIGHTS'
                              : '',
                            o.logarithmicDepthBuffer
                              ? '#define USE_LOGDEPTHBUF'
                              : '',
                            o.logarithmicDepthBuffer && e.get('EXT_frag_depth')
                              ? '#define USE_LOGDEPTHBUF_EXT'
                              : '',
                            o.envMap && e.get('EXT_shader_texture_lod')
                              ? '#define TEXTURE_LOD_EXT'
                              : '',
                            'uniform mat4 viewMatrix;',
                            'uniform vec3 cameraPosition;',
                            o.toneMapping !== tt ? '#define TONE_MAPPING' : '',
                            o.toneMapping !== tt
                              ? Ii.tonemapping_pars_fragment
                              : '',
                            o.toneMapping !== tt
                              ? (function(t, e) {
                                  var i;
                                  switch (e) {
                                    case et:
                                      i = 'Linear';
                                      break;
                                    case it:
                                      i = 'Reinhard';
                                      break;
                                    case nt:
                                      i = 'Uncharted2';
                                      break;
                                    case rt:
                                      i = 'OptimizedCineon';
                                      break;
                                    default:
                                      throw new Error(
                                        'unsupported toneMapping: ' + e
                                      );
                                  }
                                  return (
                                    'vec3 ' +
                                    t +
                                    '( vec3 color ) { return ' +
                                    i +
                                    'ToneMapping( color ); }'
                                  );
                                })('toneMapping', o.toneMapping)
                              : '',
                            o.dithering ? '#define DITHERING' : '',
                            o.outputEncoding ||
                            o.mapEncoding ||
                            o.envMapEncoding ||
                            o.emissiveMapEncoding
                              ? Ii.encodings_pars_fragment
                              : '',
                            o.mapEncoding
                              ? Mo('mapTexelToLinear', o.mapEncoding)
                              : '',
                            o.envMapEncoding
                              ? Mo('envMapTexelToLinear', o.envMapEncoding)
                              : '',
                            o.emissiveMapEncoding
                              ? Mo(
                                  'emissiveMapTexelToLinear',
                                  o.emissiveMapEncoding
                                )
                              : '',
                            o.outputEncoding
                              ? ((E = 'linearToOutputTexel'),
                                (b = o.outputEncoding),
                                (x = wo(b)),
                                'vec4 ' +
                                  E +
                                  '( vec4 value ) { return LinearTo' +
                                  x[0] +
                                  x[1] +
                                  '; }')
                              : '',
                            o.depthPacking
                              ? '#define DEPTH_PACKING ' + n.depthPacking
                              : '',
                            '\n'
                          ]
                            .filter(Eo)
                            .join('\n'))),
                        (c = bo((c = xo(c)), o)),
                        (l = bo((l = xo(l)), o)),
                        n.isShaderMaterial || ((c = Ao(c)), (l = Ao(l)));
                      var D = w + c,
                        S = M + l,
                        C = io(s, s.VERTEX_SHADER, D),
                        _ = io(s, s.FRAGMENT_SHADER, S);
                      s.attachShader(N, C),
                        s.attachShader(N, _),
                        void 0 !== n.index0AttributeName
                          ? s.bindAttribLocation(N, 0, n.index0AttributeName)
                          : !0 === o.morphTargets &&
                            s.bindAttribLocation(N, 0, 'position'),
                        s.linkProgram(N);
                      var I,
                        j,
                        O = s.getProgramInfoLog(N),
                        R = s.getShaderInfoLog(C),
                        z = s.getShaderInfoLog(_),
                        k = !0,
                        B = !0;
                      return (
                        !1 === s.getProgramParameter(N, s.LINK_STATUS)
                          ? ((k = !1),
                            console.error(
                              'THREE.WebGLProgram: shader error: ',
                              s.getError(),
                              'gl.VALIDATE_STATUS',
                              s.getProgramParameter(N, s.VALIDATE_STATUS),
                              'gl.getProgramInfoLog',
                              O,
                              R,
                              z
                            ))
                          : '' !== O
                            ? console.warn(
                                'THREE.WebGLProgram: gl.getProgramInfoLog()',
                                O
                              )
                            : ('' !== R && '' !== z) || (B = !1),
                        B &&
                          (this.diagnostics = {
                            runnable: k,
                            material: n,
                            programLog: O,
                            vertexShader: { log: R, prefix: w },
                            fragmentShader: { log: z, prefix: M }
                          }),
                        s.deleteShader(C),
                        s.deleteShader(_),
                        (this.getUniforms = function() {
                          return void 0 === I && (I = new Ti(s, N, t)), I;
                        }),
                        (this.getAttributes = function() {
                          return (
                            void 0 === j &&
                              (j = (function(t, e, i) {
                                for (
                                  var n = {},
                                    r = t.getProgramParameter(
                                      e,
                                      t.ACTIVE_ATTRIBUTES
                                    ),
                                    o = 0;
                                  o < r;
                                  o++
                                ) {
                                  var s = t.getActiveAttrib(e, o).name;
                                  n[s] = t.getAttribLocation(e, s);
                                }
                                return n;
                              })(s, N)),
                            j
                          );
                        }),
                        (this.destroy = function() {
                          s.deleteProgram(N), (this.program = void 0);
                        }),
                        Object.defineProperties(this, {
                          uniforms: {
                            get: function() {
                              return (
                                console.warn(
                                  'THREE.WebGLProgram: .uniforms is now .getUniforms().'
                                ),
                                this.getUniforms()
                              );
                            }
                          },
                          attributes: {
                            get: function() {
                              return (
                                console.warn(
                                  'THREE.WebGLProgram: .attributes is now .getAttributes().'
                                ),
                                this.getAttributes()
                              );
                            }
                          }
                        }),
                        (this.id = yo++),
                        (this.code = i),
                        (this.usedTimes = 1),
                        (this.program = N),
                        (this.vertexShader = C),
                        (this.fragmentShader = _),
                        this
                      );
                    }
                    function Lo(t, e, i) {
                      var n = [],
                        r = {
                          MeshDepthMaterial: 'depth',
                          MeshDistanceMaterial: 'distanceRGBA',
                          MeshNormalMaterial: 'normal',
                          MeshBasicMaterial: 'basic',
                          MeshLambertMaterial: 'lambert',
                          MeshPhongMaterial: 'phong',
                          MeshToonMaterial: 'phong',
                          MeshStandardMaterial: 'physical',
                          MeshPhysicalMaterial: 'physical',
                          LineBasicMaterial: 'basic',
                          LineDashedMaterial: 'dashed',
                          PointsMaterial: 'points',
                          ShadowMaterial: 'shadow'
                        },
                        o = [
                          'precision',
                          'supportsVertexTextures',
                          'map',
                          'mapEncoding',
                          'envMap',
                          'envMapMode',
                          'envMapEncoding',
                          'lightMap',
                          'aoMap',
                          'emissiveMap',
                          'emissiveMapEncoding',
                          'bumpMap',
                          'normalMap',
                          'displacementMap',
                          'specularMap',
                          'roughnessMap',
                          'metalnessMap',
                          'gradientMap',
                          'alphaMap',
                          'combine',
                          'vertexColors',
                          'fog',
                          'useFog',
                          'fogExp',
                          'flatShading',
                          'sizeAttenuation',
                          'logarithmicDepthBuffer',
                          'skinning',
                          'maxBones',
                          'useVertexTexture',
                          'morphTargets',
                          'morphNormals',
                          'maxMorphTargets',
                          'maxMorphNormals',
                          'premultipliedAlpha',
                          'numDirLights',
                          'numPointLights',
                          'numSpotLights',
                          'numHemiLights',
                          'numRectAreaLights',
                          'shadowMapEnabled',
                          'shadowMapType',
                          'toneMapping',
                          'physicallyCorrectLights',
                          'alphaTest',
                          'doubleSided',
                          'flipSided',
                          'numClippingPlanes',
                          'numClipIntersection',
                          'depthPacking',
                          'dithering'
                        ];
                      function s(t, e) {
                        var i;
                        return (
                          t
                            ? t.isTexture
                              ? (i = t.encoding)
                              : t.isWebGLRenderTarget &&
                                (console.warn(
                                  "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."
                                ),
                                (i = t.texture.encoding))
                            : (i = ee),
                          i === ee && e && (i = ne),
                          i
                        );
                      }
                      (this.getParameters = function(e, n, o, a, c, l, u) {
                        var h = r[e.type],
                          d = u.isSkinnedMesh
                            ? (function(t) {
                                var e = t.skeleton.bones;
                                if (i.floatVertexTextures) return 1024;
                                var n = i.maxVertexUniforms,
                                  r = Math.floor((n - 20) / 4),
                                  o = Math.min(r, e.length);
                                return o < e.length
                                  ? (console.warn(
                                      'THREE.WebGLRenderer: Skeleton has ' +
                                        e.length +
                                        ' bones. This GPU supports ' +
                                        o +
                                        '.'
                                    ),
                                    0)
                                  : o;
                              })(u)
                            : 0,
                          p = i.precision;
                        null !== e.precision &&
                          (p = i.getMaxPrecision(e.precision)) !==
                            e.precision &&
                          console.warn(
                            'THREE.WebGLProgram.getParameters:',
                            e.precision,
                            'not supported, using',
                            p,
                            'instead.'
                          );
                        var f = t.getRenderTarget();
                        return {
                          shaderID: h,
                          precision: p,
                          supportsVertexTextures: i.vertexTextures,
                          outputEncoding: s(
                            f ? f.texture : null,
                            t.gammaOutput
                          ),
                          map: !!e.map,
                          mapEncoding: s(e.map, t.gammaInput),
                          envMap: !!e.envMap,
                          envMapMode: e.envMap && e.envMap.mapping,
                          envMapEncoding: s(e.envMap, t.gammaInput),
                          envMapCubeUV:
                            !!e.envMap &&
                            (e.envMap.mapping === ut ||
                              e.envMap.mapping === ht),
                          lightMap: !!e.lightMap,
                          aoMap: !!e.aoMap,
                          emissiveMap: !!e.emissiveMap,
                          emissiveMapEncoding: s(e.emissiveMap, t.gammaInput),
                          bumpMap: !!e.bumpMap,
                          normalMap: !!e.normalMap,
                          displacementMap: !!e.displacementMap,
                          roughnessMap: !!e.roughnessMap,
                          metalnessMap: !!e.metalnessMap,
                          specularMap: !!e.specularMap,
                          alphaMap: !!e.alphaMap,
                          gradientMap: !!e.gradientMap,
                          combine: e.combine,
                          vertexColors: e.vertexColors,
                          fog: !!a,
                          useFog: e.fog,
                          fogExp: a && a.isFogExp2,
                          flatShading: e.flatShading,
                          sizeAttenuation: e.sizeAttenuation,
                          logarithmicDepthBuffer: i.logarithmicDepthBuffer,
                          skinning: e.skinning && d > 0,
                          maxBones: d,
                          useVertexTexture: i.floatVertexTextures,
                          morphTargets: e.morphTargets,
                          morphNormals: e.morphNormals,
                          maxMorphTargets: t.maxMorphTargets,
                          maxMorphNormals: t.maxMorphNormals,
                          numDirLights: n.directional.length,
                          numPointLights: n.point.length,
                          numSpotLights: n.spot.length,
                          numRectAreaLights: n.rectArea.length,
                          numHemiLights: n.hemi.length,
                          numClippingPlanes: c,
                          numClipIntersection: l,
                          dithering: e.dithering,
                          shadowMapEnabled:
                            t.shadowMap.enabled &&
                            u.receiveShadow &&
                            o.length > 0,
                          shadowMapType: t.shadowMap.type,
                          toneMapping: t.toneMapping,
                          physicallyCorrectLights: t.physicallyCorrectLights,
                          premultipliedAlpha: e.premultipliedAlpha,
                          alphaTest: e.alphaTest,
                          doubleSided: e.side === v,
                          flipSided: e.side === g,
                          depthPacking:
                            void 0 !== e.depthPacking && e.depthPacking
                        };
                      }),
                        (this.getProgramCode = function(e, i) {
                          var n = [];
                          if (
                            (i.shaderID
                              ? n.push(i.shaderID)
                              : (n.push(e.fragmentShader),
                                n.push(e.vertexShader)),
                            void 0 !== e.defines)
                          )
                            for (var r in e.defines)
                              n.push(r), n.push(e.defines[r]);
                          for (var s = 0; s < o.length; s++) n.push(i[o[s]]);
                          return (
                            n.push(e.onBeforeCompile.toString()),
                            n.push(t.gammaOutput),
                            n.join()
                          );
                        }),
                        (this.acquireProgram = function(i, r, o, s) {
                          for (var a, c = 0, l = n.length; c < l; c++) {
                            var u = n[c];
                            if (u.code === s) {
                              ++(a = u).usedTimes;
                              break;
                            }
                          }
                          return (
                            void 0 === a &&
                              ((a = new To(t, e, s, i, r, o)), n.push(a)),
                            a
                          );
                        }),
                        (this.releaseProgram = function(t) {
                          if (0 == --t.usedTimes) {
                            var e = n.indexOf(t);
                            (n[e] = n[n.length - 1]), n.pop(), t.destroy();
                          }
                        }),
                        (this.programs = n);
                    }
                    function No(t, e, i, n, r, o, s) {
                      var a =
                        'undefined' != typeof WebGL2RenderingContext &&
                        t instanceof WebGL2RenderingContext;
                      function c(t, e) {
                        if (t.width > e || t.height > e) {
                          var i = e / Math.max(t.width, t.height),
                            n = document.createElementNS(
                              'http://www.w3.org/1999/xhtml',
                              'canvas'
                            );
                          return (
                            (n.width = Math.floor(t.width * i)),
                            (n.height = Math.floor(t.height * i)),
                            n
                              .getContext('2d')
                              .drawImage(
                                t,
                                0,
                                0,
                                t.width,
                                t.height,
                                0,
                                0,
                                n.width,
                                n.height
                              ),
                            console.warn(
                              'THREE.WebGLRenderer: image is too big (' +
                                t.width +
                                'x' +
                                t.height +
                                '). Resized to ' +
                                n.width +
                                'x' +
                                n.height,
                              t
                            ),
                            n
                          );
                        }
                        return t;
                      }
                      function l(t) {
                        return (
                          ue.isPowerOfTwo(t.width) && ue.isPowerOfTwo(t.height)
                        );
                      }
                      function u(t, e) {
                        return (
                          t.generateMipmaps &&
                          e &&
                          t.minFilter !== mt &&
                          t.minFilter !== yt
                        );
                      }
                      function h(e) {
                        return e === mt || e === gt || e === vt
                          ? t.NEAREST
                          : t.LINEAR;
                      }
                      function d(e) {
                        var i = e.target;
                        i.removeEventListener('dispose', d),
                          (function(e) {
                            var i = n.get(e);
                            if (e.image && i.__image__webglTextureCube)
                              t.deleteTexture(i.__image__webglTextureCube);
                            else {
                              if (void 0 === i.__webglInit) return;
                              t.deleteTexture(i.__webglTexture);
                            }
                            n.remove(e);
                          })(i),
                          s.textures--;
                      }
                      function p(e) {
                        var i = e.target;
                        i.removeEventListener('dispose', p),
                          (function(e) {
                            var i = n.get(e),
                              r = n.get(e.texture);
                            if (!e) return;
                            void 0 !== r.__webglTexture &&
                              t.deleteTexture(r.__webglTexture);
                            e.depthTexture && e.depthTexture.dispose();
                            if (e.isWebGLRenderTargetCube)
                              for (var o = 0; o < 6; o++)
                                t.deleteFramebuffer(i.__webglFramebuffer[o]),
                                  i.__webglDepthbuffer &&
                                    t.deleteRenderbuffer(
                                      i.__webglDepthbuffer[o]
                                    );
                            else
                              t.deleteFramebuffer(i.__webglFramebuffer),
                                i.__webglDepthbuffer &&
                                  t.deleteRenderbuffer(i.__webglDepthbuffer);
                            n.remove(e.texture), n.remove(e);
                          })(i),
                          s.textures--;
                      }
                      function f(e, h) {
                        var p = n.get(e);
                        if (e.version > 0 && p.__version !== e.version) {
                          var f = e.image;
                          if (void 0 === f)
                            console.warn(
                              'THREE.WebGLRenderer: Texture marked for update but image is undefined',
                              e
                            );
                          else {
                            if (!1 !== f.complete)
                              return void (function(e, n, h) {
                                void 0 === e.__webglInit &&
                                  ((e.__webglInit = !0),
                                  n.addEventListener('dispose', d),
                                  (e.__webglTexture = t.createTexture()),
                                  s.textures++);
                                i.activeTexture(t.TEXTURE0 + h),
                                  i.bindTexture(t.TEXTURE_2D, e.__webglTexture),
                                  t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, n.flipY),
                                  t.pixelStorei(
                                    t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,
                                    n.premultiplyAlpha
                                  ),
                                  t.pixelStorei(
                                    t.UNPACK_ALIGNMENT,
                                    n.unpackAlignment
                                  );
                                var p = c(n.image, r.maxTextureSize);
                                (f = n),
                                  (f.wrapS !== pt ||
                                    f.wrapT !== pt ||
                                    (f.minFilter !== mt &&
                                      f.minFilter !== yt)) &&
                                    !1 === l(p) &&
                                    (p = (function(t) {
                                      if (
                                        t instanceof HTMLImageElement ||
                                        t instanceof HTMLCanvasElement
                                      ) {
                                        var e = document.createElementNS(
                                          'http://www.w3.org/1999/xhtml',
                                          'canvas'
                                        );
                                        return (
                                          (e.width = ue.nearestPowerOfTwo(
                                            t.width
                                          )),
                                          (e.height = ue.nearestPowerOfTwo(
                                            t.height
                                          )),
                                          e
                                            .getContext('2d')
                                            .drawImage(
                                              t,
                                              0,
                                              0,
                                              e.width,
                                              e.height
                                            ),
                                          console.warn(
                                            'THREE.WebGLRenderer: image is not power of two (' +
                                              t.width +
                                              'x' +
                                              t.height +
                                              '). Resized to ' +
                                              e.width +
                                              'x' +
                                              e.height,
                                            t
                                          ),
                                          e
                                        );
                                      }
                                      return t;
                                    })(p));
                                var f;
                                var g = l(p),
                                  v = o.convert(n.format),
                                  y = o.convert(n.type);
                                m(t.TEXTURE_2D, n, g);
                                var w,
                                  M = n.mipmaps;
                                if (n.isDepthTexture) {
                                  var E = t.DEPTH_COMPONENT;
                                  if (n.type === Nt) {
                                    if (!a)
                                      throw new Error(
                                        'Float Depth Texture only supported in WebGL2.0'
                                      );
                                    E = t.DEPTH_COMPONENT32F;
                                  } else a && (E = t.DEPTH_COMPONENT16);
                                  n.format === Pt &&
                                    E === t.DEPTH_COMPONENT &&
                                    n.type !== At &&
                                    n.type !== Lt &&
                                    (console.warn(
                                      'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.'
                                    ),
                                    (n.type = At),
                                    (y = o.convert(n.type))),
                                    n.format === Ut &&
                                      ((E = t.DEPTH_STENCIL),
                                      n.type !== It &&
                                        (console.warn(
                                          'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.'
                                        ),
                                        (n.type = It),
                                        (y = o.convert(n.type)))),
                                    i.texImage2D(
                                      t.TEXTURE_2D,
                                      0,
                                      E,
                                      p.width,
                                      p.height,
                                      0,
                                      v,
                                      y,
                                      null
                                    );
                                } else if (n.isDataTexture)
                                  if (M.length > 0 && g) {
                                    for (var b = 0, x = M.length; b < x; b++)
                                      (w = M[b]),
                                        i.texImage2D(
                                          t.TEXTURE_2D,
                                          b,
                                          v,
                                          w.width,
                                          w.height,
                                          0,
                                          v,
                                          y,
                                          w.data
                                        );
                                    n.generateMipmaps = !1;
                                  } else
                                    i.texImage2D(
                                      t.TEXTURE_2D,
                                      0,
                                      v,
                                      p.width,
                                      p.height,
                                      0,
                                      v,
                                      y,
                                      p.data
                                    );
                                else if (n.isCompressedTexture)
                                  for (var b = 0, x = M.length; b < x; b++)
                                    (w = M[b]),
                                      n.format !== Rt && n.format !== Ot
                                        ? i
                                            .getCompressedTextureFormats()
                                            .indexOf(v) > -1
                                          ? i.compressedTexImage2D(
                                              t.TEXTURE_2D,
                                              b,
                                              v,
                                              w.width,
                                              w.height,
                                              0,
                                              w.data
                                            )
                                          : console.warn(
                                              'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()'
                                            )
                                        : i.texImage2D(
                                            t.TEXTURE_2D,
                                            b,
                                            v,
                                            w.width,
                                            w.height,
                                            0,
                                            v,
                                            y,
                                            w.data
                                          );
                                else if (M.length > 0 && g) {
                                  for (var b = 0, x = M.length; b < x; b++)
                                    (w = M[b]),
                                      i.texImage2D(t.TEXTURE_2D, b, v, v, y, w);
                                  n.generateMipmaps = !1;
                                } else
                                  i.texImage2D(t.TEXTURE_2D, 0, v, v, y, p);
                                u(n, g) && t.generateMipmap(t.TEXTURE_2D);
                                (e.__version = n.version),
                                  n.onUpdate && n.onUpdate(n);
                              })(p, e, h);
                            console.warn(
                              'THREE.WebGLRenderer: Texture marked for update but image is incomplete',
                              e
                            );
                          }
                        }
                        i.activeTexture(t.TEXTURE0 + h),
                          i.bindTexture(t.TEXTURE_2D, p.__webglTexture);
                      }
                      function m(i, s, a) {
                        var c;
                        if (
                          (a
                            ? (t.texParameteri(
                                i,
                                t.TEXTURE_WRAP_S,
                                o.convert(s.wrapS)
                              ),
                              t.texParameteri(
                                i,
                                t.TEXTURE_WRAP_T,
                                o.convert(s.wrapT)
                              ),
                              t.texParameteri(
                                i,
                                t.TEXTURE_MAG_FILTER,
                                o.convert(s.magFilter)
                              ),
                              t.texParameteri(
                                i,
                                t.TEXTURE_MIN_FILTER,
                                o.convert(s.minFilter)
                              ))
                            : (t.texParameteri(
                                i,
                                t.TEXTURE_WRAP_S,
                                t.CLAMP_TO_EDGE
                              ),
                              t.texParameteri(
                                i,
                                t.TEXTURE_WRAP_T,
                                t.CLAMP_TO_EDGE
                              ),
                              (s.wrapS === pt && s.wrapT === pt) ||
                                console.warn(
                                  'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.',
                                  s
                                ),
                              t.texParameteri(
                                i,
                                t.TEXTURE_MAG_FILTER,
                                h(s.magFilter)
                              ),
                              t.texParameteri(
                                i,
                                t.TEXTURE_MIN_FILTER,
                                h(s.minFilter)
                              ),
                              s.minFilter !== mt &&
                                s.minFilter !== yt &&
                                console.warn(
                                  'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.',
                                  s
                                )),
                          (c = e.get('EXT_texture_filter_anisotropic')))
                        ) {
                          if (
                            s.type === Nt &&
                            null === e.get('OES_texture_float_linear')
                          )
                            return;
                          if (
                            s.type === Dt &&
                            null === e.get('OES_texture_half_float_linear')
                          )
                            return;
                          (s.anisotropy > 1 || n.get(s).__currentAnisotropy) &&
                            (t.texParameterf(
                              i,
                              c.TEXTURE_MAX_ANISOTROPY_EXT,
                              Math.min(s.anisotropy, r.getMaxAnisotropy())
                            ),
                            (n.get(s).__currentAnisotropy = s.anisotropy));
                        }
                      }
                      function g(e, r, s, a) {
                        var c = o.convert(r.texture.format),
                          l = o.convert(r.texture.type);
                        i.texImage2D(a, 0, c, r.width, r.height, 0, c, l, null),
                          t.bindFramebuffer(t.FRAMEBUFFER, e),
                          t.framebufferTexture2D(
                            t.FRAMEBUFFER,
                            s,
                            a,
                            n.get(r.texture).__webglTexture,
                            0
                          ),
                          t.bindFramebuffer(t.FRAMEBUFFER, null);
                      }
                      function v(e, i) {
                        t.bindRenderbuffer(t.RENDERBUFFER, e),
                          i.depthBuffer && !i.stencilBuffer
                            ? (t.renderbufferStorage(
                                t.RENDERBUFFER,
                                t.DEPTH_COMPONENT16,
                                i.width,
                                i.height
                              ),
                              t.framebufferRenderbuffer(
                                t.FRAMEBUFFER,
                                t.DEPTH_ATTACHMENT,
                                t.RENDERBUFFER,
                                e
                              ))
                            : i.depthBuffer && i.stencilBuffer
                              ? (t.renderbufferStorage(
                                  t.RENDERBUFFER,
                                  t.DEPTH_STENCIL,
                                  i.width,
                                  i.height
                                ),
                                t.framebufferRenderbuffer(
                                  t.FRAMEBUFFER,
                                  t.DEPTH_STENCIL_ATTACHMENT,
                                  t.RENDERBUFFER,
                                  e
                                ))
                              : t.renderbufferStorage(
                                  t.RENDERBUFFER,
                                  t.RGBA4,
                                  i.width,
                                  i.height
                                ),
                          t.bindRenderbuffer(t.RENDERBUFFER, null);
                      }
                      function y(e) {
                        var i = n.get(e),
                          r = !0 === e.isWebGLRenderTargetCube;
                        if (e.depthTexture) {
                          if (r)
                            throw new Error(
                              'target.depthTexture not supported in Cube render targets'
                            );
                          !(function(e, i) {
                            if (i && i.isWebGLRenderTargetCube)
                              throw new Error(
                                'Depth Texture with cube render targets is not supported'
                              );
                            if (
                              (t.bindFramebuffer(t.FRAMEBUFFER, e),
                              !i.depthTexture || !i.depthTexture.isDepthTexture)
                            )
                              throw new Error(
                                'renderTarget.depthTexture must be an instance of THREE.DepthTexture'
                              );
                            (n.get(i.depthTexture).__webglTexture &&
                              i.depthTexture.image.width === i.width &&
                              i.depthTexture.image.height === i.height) ||
                              ((i.depthTexture.image.width = i.width),
                              (i.depthTexture.image.height = i.height),
                              (i.depthTexture.needsUpdate = !0)),
                              f(i.depthTexture, 0);
                            var r = n.get(i.depthTexture).__webglTexture;
                            if (i.depthTexture.format === Pt)
                              t.framebufferTexture2D(
                                t.FRAMEBUFFER,
                                t.DEPTH_ATTACHMENT,
                                t.TEXTURE_2D,
                                r,
                                0
                              );
                            else {
                              if (i.depthTexture.format !== Ut)
                                throw new Error('Unknown depthTexture format');
                              t.framebufferTexture2D(
                                t.FRAMEBUFFER,
                                t.DEPTH_STENCIL_ATTACHMENT,
                                t.TEXTURE_2D,
                                r,
                                0
                              );
                            }
                          })(i.__webglFramebuffer, e);
                        } else if (r) {
                          i.__webglDepthbuffer = [];
                          for (var o = 0; o < 6; o++)
                            t.bindFramebuffer(
                              t.FRAMEBUFFER,
                              i.__webglFramebuffer[o]
                            ),
                              (i.__webglDepthbuffer[
                                o
                              ] = t.createRenderbuffer()),
                              v(i.__webglDepthbuffer[o], e);
                        } else
                          t.bindFramebuffer(
                            t.FRAMEBUFFER,
                            i.__webglFramebuffer
                          ),
                            (i.__webglDepthbuffer = t.createRenderbuffer()),
                            v(i.__webglDepthbuffer, e);
                        t.bindFramebuffer(t.FRAMEBUFFER, null);
                      }
                      (this.setTexture2D = f),
                        (this.setTextureCube = function(e, a) {
                          var h = n.get(e);
                          if (6 === e.image.length)
                            if (e.version > 0 && h.__version !== e.version) {
                              h.__image__webglTextureCube ||
                                (e.addEventListener('dispose', d),
                                (h.__image__webglTextureCube = t.createTexture()),
                                s.textures++),
                                i.activeTexture(t.TEXTURE0 + a),
                                i.bindTexture(
                                  t.TEXTURE_CUBE_MAP,
                                  h.__image__webglTextureCube
                                ),
                                t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL, e.flipY);
                              for (
                                var p = e && e.isCompressedTexture,
                                  f = e.image[0] && e.image[0].isDataTexture,
                                  g = [],
                                  v = 0;
                                v < 6;
                                v++
                              )
                                g[v] =
                                  p || f
                                    ? f ? e.image[v].image : e.image[v]
                                    : c(e.image[v], r.maxCubemapSize);
                              var y = l(g[0]),
                                w = o.convert(e.format),
                                M = o.convert(e.type);
                              for (
                                m(t.TEXTURE_CUBE_MAP, e, y), v = 0;
                                v < 6;
                                v++
                              )
                                if (p)
                                  for (
                                    var E,
                                      b = g[v].mipmaps,
                                      x = 0,
                                      A = b.length;
                                    x < A;
                                    x++
                                  )
                                    (E = b[x]),
                                      e.format !== Rt && e.format !== Ot
                                        ? i
                                            .getCompressedTextureFormats()
                                            .indexOf(w) > -1
                                          ? i.compressedTexImage2D(
                                              t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                              x,
                                              w,
                                              E.width,
                                              E.height,
                                              0,
                                              E.data
                                            )
                                          : console.warn(
                                              'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()'
                                            )
                                        : i.texImage2D(
                                            t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                            x,
                                            w,
                                            E.width,
                                            E.height,
                                            0,
                                            w,
                                            M,
                                            E.data
                                          );
                                else
                                  f
                                    ? i.texImage2D(
                                        t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                        0,
                                        w,
                                        g[v].width,
                                        g[v].height,
                                        0,
                                        w,
                                        M,
                                        g[v].data
                                      )
                                    : i.texImage2D(
                                        t.TEXTURE_CUBE_MAP_POSITIVE_X + v,
                                        0,
                                        w,
                                        w,
                                        M,
                                        g[v]
                                      );
                              u(e, y) && t.generateMipmap(t.TEXTURE_CUBE_MAP),
                                (h.__version = e.version),
                                e.onUpdate && e.onUpdate(e);
                            } else
                              i.activeTexture(t.TEXTURE0 + a),
                                i.bindTexture(
                                  t.TEXTURE_CUBE_MAP,
                                  h.__image__webglTextureCube
                                );
                        }),
                        (this.setTextureCubeDynamic = function(e, r) {
                          i.activeTexture(t.TEXTURE0 + r),
                            i.bindTexture(
                              t.TEXTURE_CUBE_MAP,
                              n.get(e).__webglTexture
                            );
                        }),
                        (this.setupRenderTarget = function(e) {
                          var r = n.get(e),
                            o = n.get(e.texture);
                          e.addEventListener('dispose', p),
                            (o.__webglTexture = t.createTexture()),
                            s.textures++;
                          var a = !0 === e.isWebGLRenderTargetCube,
                            c = l(e);
                          if (a) {
                            r.__webglFramebuffer = [];
                            for (var h = 0; h < 6; h++)
                              r.__webglFramebuffer[h] = t.createFramebuffer();
                          } else r.__webglFramebuffer = t.createFramebuffer();
                          if (a) {
                            for (
                              i.bindTexture(
                                t.TEXTURE_CUBE_MAP,
                                o.__webglTexture
                              ),
                                m(t.TEXTURE_CUBE_MAP, e.texture, c),
                                h = 0;
                              h < 6;
                              h++
                            )
                              g(
                                r.__webglFramebuffer[h],
                                e,
                                t.COLOR_ATTACHMENT0,
                                t.TEXTURE_CUBE_MAP_POSITIVE_X + h
                              );
                            u(e.texture, c) &&
                              t.generateMipmap(t.TEXTURE_CUBE_MAP),
                              i.bindTexture(t.TEXTURE_CUBE_MAP, null);
                          } else
                            i.bindTexture(t.TEXTURE_2D, o.__webglTexture),
                              m(t.TEXTURE_2D, e.texture, c),
                              g(
                                r.__webglFramebuffer,
                                e,
                                t.COLOR_ATTACHMENT0,
                                t.TEXTURE_2D
                              ),
                              u(e.texture, c) && t.generateMipmap(t.TEXTURE_2D),
                              i.bindTexture(t.TEXTURE_2D, null);
                          e.depthBuffer && y(e);
                        }),
                        (this.updateRenderTargetMipmap = function(e) {
                          var r = e.texture;
                          if (u(r, l(e))) {
                            var o = e.isWebGLRenderTargetCube
                                ? t.TEXTURE_CUBE_MAP
                                : t.TEXTURE_2D,
                              s = n.get(r).__webglTexture;
                            i.bindTexture(o, s),
                              t.generateMipmap(o),
                              i.bindTexture(o, null);
                          }
                        });
                    }
                    function Do(t) {
                      Pn.call(this), (this.cameras = t || []);
                    }
                    function So(t, e) {
                      return {
                        convert: function(i) {
                          var n;
                          if (i === dt) return t.REPEAT;
                          if (i === pt) return t.CLAMP_TO_EDGE;
                          if (i === ft) return t.MIRRORED_REPEAT;
                          if (i === mt) return t.NEAREST;
                          if (i === gt) return t.NEAREST_MIPMAP_NEAREST;
                          if (i === vt) return t.NEAREST_MIPMAP_LINEAR;
                          if (i === yt) return t.LINEAR;
                          if (i === wt) return t.LINEAR_MIPMAP_NEAREST;
                          if (i === Mt) return t.LINEAR_MIPMAP_LINEAR;
                          if (i === Et) return t.UNSIGNED_BYTE;
                          if (i === St) return t.UNSIGNED_SHORT_4_4_4_4;
                          if (i === Ct) return t.UNSIGNED_SHORT_5_5_5_1;
                          if (i === _t) return t.UNSIGNED_SHORT_5_6_5;
                          if (i === bt) return t.BYTE;
                          if (i === xt) return t.SHORT;
                          if (i === At) return t.UNSIGNED_SHORT;
                          if (i === Tt) return t.INT;
                          if (i === Lt) return t.UNSIGNED_INT;
                          if (i === Nt) return t.FLOAT;
                          if (
                            i === Dt &&
                            null !== (n = e.get('OES_texture_half_float'))
                          )
                            return n.HALF_FLOAT_OES;
                          if (i === jt) return t.ALPHA;
                          if (i === Ot) return t.RGB;
                          if (i === Rt) return t.RGBA;
                          if (i === zt) return t.LUMINANCE;
                          if (i === kt) return t.LUMINANCE_ALPHA;
                          if (i === Pt) return t.DEPTH_COMPONENT;
                          if (i === Ut) return t.DEPTH_STENCIL;
                          if (i === N) return t.FUNC_ADD;
                          if (i === D) return t.FUNC_SUBTRACT;
                          if (i === S) return t.FUNC_REVERSE_SUBTRACT;
                          if (i === I) return t.ZERO;
                          if (i === j) return t.ONE;
                          if (i === O) return t.SRC_COLOR;
                          if (i === R) return t.ONE_MINUS_SRC_COLOR;
                          if (i === z) return t.SRC_ALPHA;
                          if (i === k) return t.ONE_MINUS_SRC_ALPHA;
                          if (i === B) return t.DST_ALPHA;
                          if (i === P) return t.ONE_MINUS_DST_ALPHA;
                          if (i === U) return t.DST_COLOR;
                          if (i === F) return t.ONE_MINUS_DST_COLOR;
                          if (i === H) return t.SRC_ALPHA_SATURATE;
                          if (
                            (i === Ft || i === Ht || i === Vt || i === Gt) &&
                            null !==
                              (n = e.get('WEBGL_compressed_texture_s3tc'))
                          ) {
                            if (i === Ft) return n.COMPRESSED_RGB_S3TC_DXT1_EXT;
                            if (i === Ht)
                              return n.COMPRESSED_RGBA_S3TC_DXT1_EXT;
                            if (i === Vt)
                              return n.COMPRESSED_RGBA_S3TC_DXT3_EXT;
                            if (i === Gt)
                              return n.COMPRESSED_RGBA_S3TC_DXT5_EXT;
                          }
                          if (
                            (i === Yt || i === Qt || i === Wt || i === qt) &&
                            null !==
                              (n = e.get('WEBGL_compressed_texture_pvrtc'))
                          ) {
                            if (i === Yt)
                              return n.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
                            if (i === Qt)
                              return n.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
                            if (i === Wt)
                              return n.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
                            if (i === qt)
                              return n.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
                          }
                          if (
                            i === Xt &&
                            null !==
                              (n = e.get('WEBGL_compressed_texture_etc1'))
                          )
                            return n.COMPRESSED_RGB_ETC1_WEBGL;
                          if (
                            (i === C || i === _) &&
                            null !== (n = e.get('EXT_blend_minmax'))
                          ) {
                            if (i === C) return n.MIN_EXT;
                            if (i === _) return n.MAX_EXT;
                          }
                          return i === It &&
                            null !== (n = e.get('WEBGL_depth_texture'))
                            ? n.UNSIGNED_INT_24_8_WEBGL
                            : 0;
                        }
                      };
                    }
                    function Co(t) {
                      console.log('THREE.WebGLRenderer', c);
                      var e =
                          void 0 !== (t = t || {}).canvas
                            ? t.canvas
                            : document.createElementNS(
                                'http://www.w3.org/1999/xhtml',
                                'canvas'
                              ),
                        i = void 0 !== t.context ? t.context : null,
                        n = void 0 !== t.alpha && t.alpha,
                        r = void 0 === t.depth || t.depth,
                        o = void 0 === t.stencil || t.stencil,
                        s = void 0 !== t.antialias && t.antialias,
                        a =
                          void 0 === t.premultipliedAlpha ||
                          t.premultipliedAlpha,
                        p =
                          void 0 !== t.preserveDrawingBuffer &&
                          t.preserveDrawingBuffer,
                        f = [],
                        m = [],
                        w = null,
                        M = [],
                        N = [];
                      (this.domElement = e),
                        (this.context = null),
                        (this.autoClear = !0),
                        (this.autoClearColor = !0),
                        (this.autoClearDepth = !0),
                        (this.autoClearStencil = !0),
                        (this.sortObjects = !0),
                        (this.clippingPlanes = []),
                        (this.localClippingEnabled = !1),
                        (this.gammaFactor = 2),
                        (this.gammaInput = !1),
                        (this.gammaOutput = !1),
                        (this.physicallyCorrectLights = !1),
                        (this.toneMapping = et),
                        (this.toneMappingExposure = 1),
                        (this.toneMappingWhitePoint = 1),
                        (this.maxMorphTargets = 8),
                        (this.maxMorphNormals = 4);
                      var D,
                        S,
                        C,
                        _,
                        I,
                        j,
                        O,
                        R,
                        z,
                        k,
                        B,
                        P,
                        U,
                        F,
                        H,
                        Z,
                        J,
                        $,
                        tt,
                        it = this,
                        nt = !1,
                        rt = null,
                        ot = null,
                        st = -1,
                        at = '',
                        ct = null,
                        lt = null,
                        ut = new je(),
                        ht = new je(),
                        dt = null,
                        pt = 0,
                        ft = e.width,
                        mt = e.height,
                        gt = 1,
                        vt = new je(0, 0, ft, mt),
                        yt = new je(0, 0, ft, mt),
                        wt = !1,
                        Mt = new pn(),
                        bt = new function() {
                          var t = this,
                            e = null,
                            i = 0,
                            n = !1,
                            r = !1,
                            o = new dn(),
                            s = new hn(),
                            a = { value: null, needsUpdate: !1 };
                          function c() {
                            a.value !== e &&
                              ((a.value = e), (a.needsUpdate = i > 0)),
                              (t.numPlanes = i),
                              (t.numIntersection = 0);
                          }
                          function l(e, i, n, r) {
                            var c = null !== e ? e.length : 0,
                              l = null;
                            if (0 !== c) {
                              if (((l = a.value), !0 !== r || null === l)) {
                                var u = n + 4 * c,
                                  h = i.matrixWorldInverse;
                                s.getNormalMatrix(h),
                                  (null === l || l.length < u) &&
                                    (l = new Float32Array(u));
                                for (var d = 0, p = n; d !== c; ++d, p += 4)
                                  o.copy(e[d]).applyMatrix4(h, s),
                                    o.normal.toArray(l, p),
                                    (l[p + 3] = o.constant);
                              }
                              (a.value = l), (a.needsUpdate = !0);
                            }
                            return (t.numPlanes = c), l;
                          }
                          (this.uniform = a),
                            (this.numPlanes = 0),
                            (this.numIntersection = 0),
                            (this.init = function(t, r, o) {
                              var s = 0 !== t.length || r || 0 !== i || n;
                              return (
                                (n = r), (e = l(t, o, 0)), (i = t.length), s
                              );
                            }),
                            (this.beginShadows = function() {
                              (r = !0), l(null);
                            }),
                            (this.endShadows = function() {
                              (r = !1), c();
                            }),
                            (this.setState = function(t, o, s, u, h, d) {
                              if (
                                !n ||
                                null === t ||
                                0 === t.length ||
                                (r && !s)
                              )
                                r ? l(null) : c();
                              else {
                                var p = r ? 0 : i,
                                  f = 4 * p,
                                  m = h.clippingState || null;
                                (a.value = m), (m = l(t, u, f, d));
                                for (var g = 0; g !== f; ++g) m[g] = e[g];
                                (h.clippingState = m),
                                  (this.numIntersection = o
                                    ? this.numPlanes
                                    : 0),
                                  (this.numPlanes += p);
                              }
                            });
                        }(),
                        xt = !1,
                        At = !1,
                        Tt = new Be(),
                        Lt = new ke(),
                        St = { geometries: 0, textures: 0 },
                        Ct = {
                          frame: 0,
                          calls: 0,
                          vertices: 0,
                          faces: 0,
                          points: 0
                        };
                      function _t() {
                        return null === rt ? gt : 1;
                      }
                      this.info = { render: Ct, memory: St, programs: null };
                      try {
                        var It = {
                          alpha: n,
                          depth: r,
                          stencil: o,
                          antialias: s,
                          premultipliedAlpha: a,
                          preserveDrawingBuffer: p
                        };
                        if (
                          null ===
                          (D =
                            i ||
                            e.getContext('webgl', It) ||
                            e.getContext('experimental-webgl', It))
                        )
                          throw null !== e.getContext('webgl')
                            ? 'Error creating WebGL context with your selected attributes.'
                            : 'Error creating WebGL context.';
                        void 0 === D.getShaderPrecisionFormat &&
                          (D.getShaderPrecisionFormat = function() {
                            return { rangeMin: 1, rangeMax: 1, precision: 1 };
                          }),
                          e.addEventListener('webglcontextlost', kt, !1),
                          e.addEventListener('webglcontextrestored', Bt, !1);
                      } catch (t) {
                        console.error('THREE.WebGLRenderer: ' + t);
                      }
                      function jt() {
                        (S = new function(t) {
                          var e = {};
                          return {
                            get: function(i) {
                              if (void 0 !== e[i]) return e[i];
                              var n;
                              switch (i) {
                                case 'WEBGL_depth_texture':
                                  n =
                                    t.getExtension('WEBGL_depth_texture') ||
                                    t.getExtension('MOZ_WEBGL_depth_texture') ||
                                    t.getExtension(
                                      'WEBKIT_WEBGL_depth_texture'
                                    );
                                  break;
                                case 'EXT_texture_filter_anisotropic':
                                  n =
                                    t.getExtension(
                                      'EXT_texture_filter_anisotropic'
                                    ) ||
                                    t.getExtension(
                                      'MOZ_EXT_texture_filter_anisotropic'
                                    ) ||
                                    t.getExtension(
                                      'WEBKIT_EXT_texture_filter_anisotropic'
                                    );
                                  break;
                                case 'WEBGL_compressed_texture_s3tc':
                                  n =
                                    t.getExtension(
                                      'WEBGL_compressed_texture_s3tc'
                                    ) ||
                                    t.getExtension(
                                      'MOZ_WEBGL_compressed_texture_s3tc'
                                    ) ||
                                    t.getExtension(
                                      'WEBKIT_WEBGL_compressed_texture_s3tc'
                                    );
                                  break;
                                case 'WEBGL_compressed_texture_pvrtc':
                                  n =
                                    t.getExtension(
                                      'WEBGL_compressed_texture_pvrtc'
                                    ) ||
                                    t.getExtension(
                                      'WEBKIT_WEBGL_compressed_texture_pvrtc'
                                    );
                                  break;
                                case 'WEBGL_compressed_texture_etc1':
                                  n = t.getExtension(
                                    'WEBGL_compressed_texture_etc1'
                                  );
                                  break;
                                default:
                                  n = t.getExtension(i);
                              }
                              return (
                                null === n &&
                                  console.warn(
                                    'THREE.WebGLRenderer: ' +
                                      i +
                                      ' extension not supported.'
                                  ),
                                (e[i] = n),
                                n
                              );
                            }
                          };
                        }(D)).get('WEBGL_depth_texture'),
                          S.get('OES_texture_float'),
                          S.get('OES_texture_float_linear'),
                          S.get('OES_texture_half_float'),
                          S.get('OES_texture_half_float_linear'),
                          S.get('OES_standard_derivatives'),
                          S.get('ANGLE_instanced_arrays'),
                          S.get('OES_element_index_uint') &&
                            (Fr.MaxIndex = 4294967296),
                          (tt = new So(D, S)),
                          (C = new function(t, e, i) {
                            var n;
                            function r(e) {
                              if ('highp' === e) {
                                if (
                                  t.getShaderPrecisionFormat(
                                    t.VERTEX_SHADER,
                                    t.HIGH_FLOAT
                                  ).precision > 0 &&
                                  t.getShaderPrecisionFormat(
                                    t.FRAGMENT_SHADER,
                                    t.HIGH_FLOAT
                                  ).precision > 0
                                )
                                  return 'highp';
                                e = 'mediump';
                              }
                              return 'mediump' === e &&
                                t.getShaderPrecisionFormat(
                                  t.VERTEX_SHADER,
                                  t.MEDIUM_FLOAT
                                ).precision > 0 &&
                                t.getShaderPrecisionFormat(
                                  t.FRAGMENT_SHADER,
                                  t.MEDIUM_FLOAT
                                ).precision > 0
                                ? 'mediump'
                                : 'lowp';
                            }
                            var o =
                                void 0 !== i.precision ? i.precision : 'highp',
                              s = r(o);
                            s !== o &&
                              (console.warn(
                                'THREE.WebGLRenderer:',
                                o,
                                'not supported, using',
                                s,
                                'instead.'
                              ),
                              (o = s));
                            var a =
                                !0 === i.logarithmicDepthBuffer &&
                                !!e.get('EXT_frag_depth'),
                              c = t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),
                              l = t.getParameter(
                                t.MAX_VERTEX_TEXTURE_IMAGE_UNITS
                              ),
                              u = t.getParameter(t.MAX_TEXTURE_SIZE),
                              h = t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),
                              d = t.getParameter(t.MAX_VERTEX_ATTRIBS),
                              p = t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),
                              f = t.getParameter(t.MAX_VARYING_VECTORS),
                              m = t.getParameter(
                                t.MAX_FRAGMENT_UNIFORM_VECTORS
                              ),
                              g = l > 0,
                              v = !!e.get('OES_texture_float');
                            return {
                              getMaxAnisotropy: function() {
                                if (void 0 !== n) return n;
                                var i = e.get('EXT_texture_filter_anisotropic');
                                return (n =
                                  null !== i
                                    ? t.getParameter(
                                        i.MAX_TEXTURE_MAX_ANISOTROPY_EXT
                                      )
                                    : 0);
                              },
                              getMaxPrecision: r,
                              precision: o,
                              logarithmicDepthBuffer: a,
                              maxTextures: c,
                              maxVertexTextures: l,
                              maxTextureSize: u,
                              maxCubemapSize: h,
                              maxAttributes: d,
                              maxVertexUniforms: p,
                              maxVaryings: f,
                              maxFragmentUniforms: m,
                              vertexTextures: g,
                              floatFragmentTextures: v,
                              floatVertexTextures: g && v
                            };
                          }(D, S, t)),
                          (_ = new function(t, e, i) {
                            var n = new function() {
                                var e = !1,
                                  i = new je(),
                                  n = null,
                                  r = new je(0, 0, 0, 0);
                                return {
                                  setMask: function(i) {
                                    n === i ||
                                      e ||
                                      (t.colorMask(i, i, i, i), (n = i));
                                  },
                                  setLocked: function(t) {
                                    e = t;
                                  },
                                  setClear: function(e, n, o, s, a) {
                                    !0 === a && ((e *= s), (n *= s), (o *= s)),
                                      i.set(e, n, o, s),
                                      !1 === r.equals(i) &&
                                        (t.clearColor(e, n, o, s), r.copy(i));
                                  },
                                  reset: function() {
                                    (e = !1), (n = null), r.set(-1, 0, 0, 0);
                                  }
                                };
                              }(),
                              r = new function() {
                                var e = !1,
                                  i = null,
                                  n = null,
                                  r = null;
                                return {
                                  setTest: function(e) {
                                    e ? tt(t.DEPTH_TEST) : et(t.DEPTH_TEST);
                                  },
                                  setMask: function(n) {
                                    i === n || e || (t.depthMask(n), (i = n));
                                  },
                                  setFunc: function(e) {
                                    if (n !== e) {
                                      if (e)
                                        switch (e) {
                                          case V:
                                            t.depthFunc(t.NEVER);
                                            break;
                                          case G:
                                            t.depthFunc(t.ALWAYS);
                                            break;
                                          case Y:
                                            t.depthFunc(t.LESS);
                                            break;
                                          case Q:
                                            t.depthFunc(t.LEQUAL);
                                            break;
                                          case W:
                                            t.depthFunc(t.EQUAL);
                                            break;
                                          case q:
                                            t.depthFunc(t.GEQUAL);
                                            break;
                                          case X:
                                            t.depthFunc(t.GREATER);
                                            break;
                                          case K:
                                            t.depthFunc(t.NOTEQUAL);
                                            break;
                                          default:
                                            t.depthFunc(t.LEQUAL);
                                        }
                                      else t.depthFunc(t.LEQUAL);
                                      n = e;
                                    }
                                  },
                                  setLocked: function(t) {
                                    e = t;
                                  },
                                  setClear: function(e) {
                                    r !== e && (t.clearDepth(e), (r = e));
                                  },
                                  reset: function() {
                                    (e = !1),
                                      (i = null),
                                      (n = null),
                                      (r = null);
                                  }
                                };
                              }(),
                              o = new function() {
                                var e = !1,
                                  i = null,
                                  n = null,
                                  r = null,
                                  o = null,
                                  s = null,
                                  a = null,
                                  c = null,
                                  l = null;
                                return {
                                  setTest: function(e) {
                                    e ? tt(t.STENCIL_TEST) : et(t.STENCIL_TEST);
                                  },
                                  setMask: function(n) {
                                    i === n || e || (t.stencilMask(n), (i = n));
                                  },
                                  setFunc: function(e, i, s) {
                                    (n === e && r === i && o === s) ||
                                      (t.stencilFunc(e, i, s),
                                      (n = e),
                                      (r = i),
                                      (o = s));
                                  },
                                  setOp: function(e, i, n) {
                                    (s === e && a === i && c === n) ||
                                      (t.stencilOp(e, i, n),
                                      (s = e),
                                      (a = i),
                                      (c = n));
                                  },
                                  setLocked: function(t) {
                                    e = t;
                                  },
                                  setClear: function(e) {
                                    l !== e && (t.clearStencil(e), (l = e));
                                  },
                                  reset: function() {
                                    (e = !1),
                                      (i = null),
                                      (n = null),
                                      (r = null),
                                      (o = null),
                                      (s = null),
                                      (a = null),
                                      (c = null),
                                      (l = null);
                                  }
                                };
                              }(),
                              s = t.getParameter(t.MAX_VERTEX_ATTRIBS),
                              a = new Uint8Array(s),
                              c = new Uint8Array(s),
                              d = new Uint8Array(s),
                              p = {},
                              f = null,
                              m = null,
                              y = null,
                              w = null,
                              M = null,
                              N = null,
                              D = null,
                              S = null,
                              C = null,
                              _ = !1,
                              I = null,
                              j = null,
                              O = null,
                              R = null,
                              z = null,
                              k = t.getParameter(
                                t.MAX_COMBINED_TEXTURE_IMAGE_UNITS
                              ),
                              B = parseFloat(
                                /^WebGL\ ([0-9])/.exec(
                                  t.getParameter(t.VERSION)
                                )[1]
                              ),
                              P = parseFloat(B) >= 1,
                              U = null,
                              F = {},
                              H = new je(),
                              Z = new je();
                            function J(e, i, n) {
                              var r = new Uint8Array(4),
                                o = t.createTexture();
                              t.bindTexture(e, o),
                                t.texParameteri(
                                  e,
                                  t.TEXTURE_MIN_FILTER,
                                  t.NEAREST
                                ),
                                t.texParameteri(
                                  e,
                                  t.TEXTURE_MAG_FILTER,
                                  t.NEAREST
                                );
                              for (var s = 0; s < n; s++)
                                t.texImage2D(
                                  i + s,
                                  0,
                                  t.RGBA,
                                  1,
                                  1,
                                  0,
                                  t.RGBA,
                                  t.UNSIGNED_BYTE,
                                  r
                                );
                              return o;
                            }
                            var $ = {};
                            function tt(e) {
                              !0 !== p[e] && (t.enable(e), (p[e] = !0));
                            }
                            function et(e) {
                              !1 !== p[e] && (t.disable(e), (p[e] = !1));
                            }
                            function it(e, n, r, o, s, a, c, l) {
                              if (
                                (e !== E ? tt(t.BLEND) : et(t.BLEND), e !== L)
                              ) {
                                if (e !== y || l !== _)
                                  switch (e) {
                                    case x:
                                      l
                                        ? (t.blendEquationSeparate(
                                            t.FUNC_ADD,
                                            t.FUNC_ADD
                                          ),
                                          t.blendFuncSeparate(
                                            t.ONE,
                                            t.ONE,
                                            t.ONE,
                                            t.ONE
                                          ))
                                        : (t.blendEquation(t.FUNC_ADD),
                                          t.blendFunc(t.SRC_ALPHA, t.ONE));
                                      break;
                                    case A:
                                      l
                                        ? (t.blendEquationSeparate(
                                            t.FUNC_ADD,
                                            t.FUNC_ADD
                                          ),
                                          t.blendFuncSeparate(
                                            t.ZERO,
                                            t.ZERO,
                                            t.ONE_MINUS_SRC_COLOR,
                                            t.ONE_MINUS_SRC_ALPHA
                                          ))
                                        : (t.blendEquation(t.FUNC_ADD),
                                          t.blendFunc(
                                            t.ZERO,
                                            t.ONE_MINUS_SRC_COLOR
                                          ));
                                      break;
                                    case T:
                                      l
                                        ? (t.blendEquationSeparate(
                                            t.FUNC_ADD,
                                            t.FUNC_ADD
                                          ),
                                          t.blendFuncSeparate(
                                            t.ZERO,
                                            t.SRC_COLOR,
                                            t.ZERO,
                                            t.SRC_ALPHA
                                          ))
                                        : (t.blendEquation(t.FUNC_ADD),
                                          t.blendFunc(t.ZERO, t.SRC_COLOR));
                                      break;
                                    default:
                                      l
                                        ? (t.blendEquationSeparate(
                                            t.FUNC_ADD,
                                            t.FUNC_ADD
                                          ),
                                          t.blendFuncSeparate(
                                            t.ONE,
                                            t.ONE_MINUS_SRC_ALPHA,
                                            t.ONE,
                                            t.ONE_MINUS_SRC_ALPHA
                                          ))
                                        : (t.blendEquationSeparate(
                                            t.FUNC_ADD,
                                            t.FUNC_ADD
                                          ),
                                          t.blendFuncSeparate(
                                            t.SRC_ALPHA,
                                            t.ONE_MINUS_SRC_ALPHA,
                                            t.ONE,
                                            t.ONE_MINUS_SRC_ALPHA
                                          ));
                                  }
                                (w = null),
                                  (M = null),
                                  (N = null),
                                  (D = null),
                                  (S = null),
                                  (C = null);
                              } else
                                (s = s || n),
                                  (a = a || r),
                                  (c = c || o),
                                  (n === w && s === D) ||
                                    (t.blendEquationSeparate(
                                      i.convert(n),
                                      i.convert(s)
                                    ),
                                    (w = n),
                                    (D = s)),
                                  (r === M && o === N && a === S && c === C) ||
                                    (t.blendFuncSeparate(
                                      i.convert(r),
                                      i.convert(o),
                                      i.convert(a),
                                      i.convert(c)
                                    ),
                                    (M = r),
                                    (N = o),
                                    (S = a),
                                    (C = c));
                              (y = e), (_ = l);
                            }
                            function nt(e) {
                              I !== e &&
                                (e ? t.frontFace(t.CW) : t.frontFace(t.CCW),
                                (I = e));
                            }
                            function rt(e) {
                              e !== l
                                ? (tt(t.CULL_FACE),
                                  e !== j &&
                                    (e === u
                                      ? t.cullFace(t.BACK)
                                      : e === h
                                        ? t.cullFace(t.FRONT)
                                        : t.cullFace(t.FRONT_AND_BACK)))
                                : et(t.CULL_FACE),
                                (j = e);
                            }
                            function ot(e, i, n) {
                              e
                                ? (tt(t.POLYGON_OFFSET_FILL),
                                  (R === i && z === n) ||
                                    (t.polygonOffset(i, n), (R = i), (z = n)))
                                : et(t.POLYGON_OFFSET_FILL);
                            }
                            function st(e) {
                              void 0 === e && (e = t.TEXTURE0 + k - 1),
                                U !== e && (t.activeTexture(e), (U = e));
                            }
                            return (
                              ($[t.TEXTURE_2D] = J(
                                t.TEXTURE_2D,
                                t.TEXTURE_2D,
                                1
                              )),
                              ($[t.TEXTURE_CUBE_MAP] = J(
                                t.TEXTURE_CUBE_MAP,
                                t.TEXTURE_CUBE_MAP_POSITIVE_X,
                                6
                              )),
                              n.setClear(0, 0, 0, 1),
                              r.setClear(1),
                              o.setClear(0),
                              tt(t.DEPTH_TEST),
                              r.setFunc(Q),
                              nt(!1),
                              rt(u),
                              tt(t.CULL_FACE),
                              tt(t.BLEND),
                              it(b),
                              {
                                buffers: { color: n, depth: r, stencil: o },
                                initAttributes: function() {
                                  for (var t = 0, e = a.length; t < e; t++)
                                    a[t] = 0;
                                },
                                enableAttribute: function(i) {
                                  (a[i] = 1),
                                    0 === c[i] &&
                                      (t.enableVertexAttribArray(i),
                                      (c[i] = 1)),
                                    0 !== d[i] &&
                                      (e
                                        .get('ANGLE_instanced_arrays')
                                        .vertexAttribDivisorANGLE(i, 0),
                                      (d[i] = 0));
                                },
                                enableAttributeAndDivisor: function(i, n) {
                                  (a[i] = 1),
                                    0 === c[i] &&
                                      (t.enableVertexAttribArray(i),
                                      (c[i] = 1)),
                                    d[i] !== n &&
                                      (e
                                        .get('ANGLE_instanced_arrays')
                                        .vertexAttribDivisorANGLE(i, n),
                                      (d[i] = n));
                                },
                                disableUnusedAttributes: function() {
                                  for (var e = 0, i = c.length; e !== i; ++e)
                                    c[e] !== a[e] &&
                                      (t.disableVertexAttribArray(e),
                                      (c[e] = 0));
                                },
                                enable: tt,
                                disable: et,
                                getCompressedTextureFormats: function() {
                                  if (
                                    null === f &&
                                    ((f = []),
                                    e.get('WEBGL_compressed_texture_pvrtc') ||
                                      e.get('WEBGL_compressed_texture_s3tc') ||
                                      e.get('WEBGL_compressed_texture_etc1'))
                                  )
                                    for (
                                      var i = t.getParameter(
                                          t.COMPRESSED_TEXTURE_FORMATS
                                        ),
                                        n = 0;
                                      n < i.length;
                                      n++
                                    )
                                      f.push(i[n]);
                                  return f;
                                },
                                useProgram: function(e) {
                                  return (
                                    m !== e && (t.useProgram(e), (m = e), !0)
                                  );
                                },
                                setBlending: it,
                                setMaterial: function(e) {
                                  e.side === v
                                    ? et(t.CULL_FACE)
                                    : tt(t.CULL_FACE),
                                    nt(e.side === g),
                                    !0 === e.transparent
                                      ? it(
                                          e.blending,
                                          e.blendEquation,
                                          e.blendSrc,
                                          e.blendDst,
                                          e.blendEquationAlpha,
                                          e.blendSrcAlpha,
                                          e.blendDstAlpha,
                                          e.premultipliedAlpha
                                        )
                                      : it(E),
                                    r.setFunc(e.depthFunc),
                                    r.setTest(e.depthTest),
                                    r.setMask(e.depthWrite),
                                    n.setMask(e.colorWrite),
                                    ot(
                                      e.polygonOffset,
                                      e.polygonOffsetFactor,
                                      e.polygonOffsetUnits
                                    );
                                },
                                setFlipSided: nt,
                                setCullFace: rt,
                                setLineWidth: function(e) {
                                  e !== O && (P && t.lineWidth(e), (O = e));
                                },
                                setPolygonOffset: ot,
                                setScissorTest: function(e) {
                                  e ? tt(t.SCISSOR_TEST) : et(t.SCISSOR_TEST);
                                },
                                activeTexture: st,
                                bindTexture: function(e, i) {
                                  null === U && st();
                                  var n = F[U];
                                  void 0 === n &&
                                    ((n = { type: void 0, texture: void 0 }),
                                    (F[U] = n)),
                                    (n.type === e && n.texture === i) ||
                                      (t.bindTexture(e, i || $[e]),
                                      (n.type = e),
                                      (n.texture = i));
                                },
                                compressedTexImage2D: function() {
                                  try {
                                    t.compressedTexImage2D.apply(t, arguments);
                                  } catch (t) {
                                    console.error('THREE.WebGLState:', t);
                                  }
                                },
                                texImage2D: function() {
                                  try {
                                    t.texImage2D.apply(t, arguments);
                                  } catch (t) {
                                    console.error('THREE.WebGLState:', t);
                                  }
                                },
                                scissor: function(e) {
                                  !1 === H.equals(e) &&
                                    (t.scissor(e.x, e.y, e.z, e.w), H.copy(e));
                                },
                                viewport: function(e) {
                                  !1 === Z.equals(e) &&
                                    (t.viewport(e.x, e.y, e.z, e.w), Z.copy(e));
                                },
                                reset: function() {
                                  for (var e = 0; e < c.length; e++)
                                    1 === c[e] &&
                                      (t.disableVertexAttribArray(e),
                                      (c[e] = 0));
                                  (p = {}),
                                    (f = null),
                                    (U = null),
                                    (F = {}),
                                    (m = null),
                                    (y = null),
                                    (I = null),
                                    (j = null),
                                    n.reset(),
                                    r.reset(),
                                    o.reset();
                                }
                              }
                            );
                          }(D, S, tt)).scissor(ht.copy(yt).multiplyScalar(gt)),
                          _.viewport(ut.copy(vt).multiplyScalar(gt)),
                          (I = new function() {
                            var t = {};
                            return {
                              get: function(e) {
                                var i = e.uuid,
                                  n = t[i];
                                return (
                                  void 0 === n && ((n = {}), (t[i] = n)), n
                                );
                              },
                              remove: function(e) {
                                delete t[e.uuid];
                              },
                              clear: function() {
                                t = {};
                              }
                            };
                          }()),
                          (j = new No(D, S, _, I, C, tt, St)),
                          (O = new mn(D)),
                          (R = new function(t, e, i) {
                            var n = {},
                              r = {};
                            function o(t) {
                              var s = t.target,
                                a = n[s.id];
                              null !== a.index && e.remove(a.index);
                              for (var c in a.attributes)
                                e.remove(a.attributes[c]);
                              s.removeEventListener('dispose', o),
                                delete n[s.id];
                              var l = r[s.id];
                              l && (e.remove(l), delete r[s.id]),
                                (l = r[a.id]) && (e.remove(l), delete r[a.id]),
                                i.geometries--;
                            }
                            return {
                              get: function(t, e) {
                                var r = n[e.id];
                                return (
                                  r ||
                                  (e.addEventListener('dispose', o),
                                  e.isBufferGeometry
                                    ? (r = e)
                                    : e.isGeometry &&
                                      (void 0 === e._bufferGeometry &&
                                        (e._bufferGeometry = new Fr().setFromObject(
                                          t
                                        )),
                                      (r = e._bufferGeometry)),
                                  (n[e.id] = r),
                                  i.geometries++,
                                  r)
                                );
                              },
                              update: function(i) {
                                var n = i.index,
                                  r = i.attributes;
                                null !== n &&
                                  e.update(n, t.ELEMENT_ARRAY_BUFFER);
                                for (var o in r) e.update(r[o], t.ARRAY_BUFFER);
                                var s = i.morphAttributes;
                                for (var o in s)
                                  for (
                                    var a = s[o], c = 0, l = a.length;
                                    c < l;
                                    c++
                                  )
                                    e.update(a[c], t.ARRAY_BUFFER);
                              },
                              getWireframeAttribute: function(i) {
                                var n = r[i.id];
                                if (n) return n;
                                var o,
                                  s = [],
                                  a = i.index,
                                  c = i.attributes;
                                if (null !== a)
                                  for (
                                    var l = 0, u = (o = a.array).length;
                                    l < u;
                                    l += 3
                                  ) {
                                    var h = o[l + 0],
                                      d = o[l + 1],
                                      p = o[l + 2];
                                    s.push(h, d, d, p, p, h);
                                  }
                                else
                                  for (
                                    l = 0,
                                      u = (o = c.position.array).length / 3 - 1;
                                    l < u;
                                    l += 3
                                  )
                                    (h = l + 0),
                                      (d = l + 1),
                                      (p = l + 2),
                                      s.push(h, d, d, p, p, h);
                                return (
                                  (n = new (Ur(s) > 65535 ? zr : Or)(s, 1)),
                                  e.update(n, t.ELEMENT_ARRAY_BUFFER),
                                  (r[i.id] = n),
                                  n
                                );
                              }
                            };
                          }(D, O, St)),
                          (z = new function(t, e) {
                            var i = {};
                            return {
                              update: function(n) {
                                var r = e.frame,
                                  o = n.geometry,
                                  s = t.get(n, o);
                                return (
                                  i[s.id] !== r &&
                                    (o.isGeometry && s.updateFromObject(n),
                                    t.update(s),
                                    (i[s.id] = r)),
                                  s
                                );
                              },
                              clear: function() {
                                i = {};
                              }
                            };
                          }(R, Ct)),
                          (F = new function(t) {
                            var e = {},
                              i = new Float32Array(8);
                            return {
                              update: function(n, r, o, s) {
                                var a = n.morphTargetInfluences,
                                  c = a.length,
                                  l = e[r.id];
                                if (void 0 === l) {
                                  l = [];
                                  for (var u = 0; u < c; u++) l[u] = [u, 0];
                                  e[r.id] = l;
                                }
                                var h =
                                    o.morphTargets &&
                                    r.morphAttributes.position,
                                  d =
                                    o.morphNormals && r.morphAttributes.normal;
                                for (u = 0; u < c; u++)
                                  0 !== (p = l[u])[1] &&
                                    (h && r.removeAttribute('morphTarget' + u),
                                    d && r.removeAttribute('morphNormal' + u));
                                for (u = 0; u < c; u++)
                                  ((p = l[u])[0] = u), (p[1] = a[u]);
                                for (l.sort(to), u = 0; u < 8; u++) {
                                  var p;
                                  if ((p = l[u])) {
                                    var f = p[0],
                                      m = p[1];
                                    if (m) {
                                      h &&
                                        r.addAttribute('morphTarget' + u, h[f]),
                                        d &&
                                          r.addAttribute(
                                            'morphNormal' + u,
                                            d[f]
                                          ),
                                        (i[u] = m);
                                      continue;
                                    }
                                  }
                                  i[u] = 0;
                                }
                                s
                                  .getUniforms()
                                  .setValue(t, 'morphTargetInfluences', i);
                              }
                            };
                          }(D)),
                          (B = new Lo(it, S, C)),
                          (k = new eo()),
                          (P = new $r()),
                          (U = new function(t, e, i, n) {
                            var r,
                              o,
                              s,
                              a = new Ni(0),
                              c = 0;
                            function l(t, i) {
                              e.buffers.color.setClear(t.r, t.g, t.b, i, n);
                            }
                            return {
                              getClearColor: function() {
                                return a;
                              },
                              setClearColor: function(t, e) {
                                a.set(t), l(a, (c = void 0 !== e ? e : 1));
                              },
                              getClearAlpha: function() {
                                return c;
                              },
                              setClearAlpha: function(t) {
                                l(a, (c = t));
                              },
                              render: function(e, n, u, h) {
                                var d = n.background;
                                null === d
                                  ? l(a, c)
                                  : d && d.isColor && (l(d, 1), (h = !0)),
                                  (t.autoClear || h) &&
                                    t.clear(
                                      t.autoClearColor,
                                      t.autoClearDepth,
                                      t.autoClearStencil
                                    ),
                                  d && d.isCubeTexture
                                    ? (void 0 === s &&
                                        ((s = new Kr(
                                          new Vr(1, 1, 1),
                                          new sn({
                                            uniforms: ji.cube.uniforms,
                                            vertexShader: ji.cube.vertexShader,
                                            fragmentShader:
                                              ji.cube.fragmentShader,
                                            side: g,
                                            depthTest: !0,
                                            depthWrite: !1,
                                            polygonOffset: !0,
                                            fog: !1
                                          })
                                        )).geometry.removeAttribute('normal'),
                                        s.geometry.removeAttribute('uv'),
                                        (s.onBeforeRender = function(t, e, i) {
                                          var n = i.far;
                                          this.matrixWorld.makeScale(n, n, n),
                                            this.matrixWorld.copyPosition(
                                              i.matrixWorld
                                            ),
                                            (this.material.polygonOffsetUnits =
                                              10 * n);
                                        }),
                                        i.update(s.geometry)),
                                      (s.material.uniforms.tCube.value = d),
                                      e.push(
                                        s,
                                        s.geometry,
                                        s.material,
                                        0,
                                        null
                                      ))
                                    : d &&
                                      d.isTexture &&
                                      (void 0 === r &&
                                        ((r = new Bn(-1, 1, 1, -1, 0, 1)),
                                        (o = new Kr(
                                          new Yr(2, 2),
                                          new Qr({
                                            depthTest: !1,
                                            depthWrite: !1,
                                            fog: !1
                                          })
                                        )),
                                        i.update(o.geometry)),
                                      (o.material.map = d),
                                      t.renderBufferDirect(
                                        r,
                                        null,
                                        o.geometry,
                                        o.material,
                                        o,
                                        null
                                      ));
                              }
                            };
                          }(it, _, R, a)),
                          (H = new function(t, e, i) {
                            var n;
                            (this.setMode = function(t) {
                              n = t;
                            }),
                              (this.render = function(e, r) {
                                t.drawArrays(n, e, r),
                                  i.calls++,
                                  (i.vertices += r),
                                  n === t.TRIANGLES
                                    ? (i.faces += r / 3)
                                    : n === t.POINTS && (i.points += r);
                              }),
                              (this.renderInstances = function(r, o, s) {
                                var a = e.get('ANGLE_instanced_arrays');
                                if (null !== a) {
                                  var c = r.attributes.position;
                                  c.isInterleavedBufferAttribute
                                    ? ((s = c.data.count),
                                      a.drawArraysInstancedANGLE(
                                        n,
                                        0,
                                        s,
                                        r.maxInstancedCount
                                      ))
                                    : a.drawArraysInstancedANGLE(
                                        n,
                                        o,
                                        s,
                                        r.maxInstancedCount
                                      ),
                                    i.calls++,
                                    (i.vertices += s * r.maxInstancedCount),
                                    n === t.TRIANGLES
                                      ? (i.faces += r.maxInstancedCount * s / 3)
                                      : n === t.POINTS &&
                                        (i.points += r.maxInstancedCount * s);
                                } else
                                  console.error(
                                    'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
                                  );
                              });
                          }(D, S, Ct)),
                          (Z = new function(t, e, i) {
                            var n, r, o;
                            (this.setMode = function(t) {
                              n = t;
                            }),
                              (this.setIndex = function(t) {
                                (r = t.type), (o = t.bytesPerElement);
                              }),
                              (this.render = function(e, s) {
                                t.drawElements(n, s, r, e * o),
                                  i.calls++,
                                  (i.vertices += s),
                                  n === t.TRIANGLES
                                    ? (i.faces += s / 3)
                                    : n === t.POINTS && (i.points += s);
                              }),
                              (this.renderInstances = function(s, a, c) {
                                var l = e.get('ANGLE_instanced_arrays');
                                null !== l
                                  ? (l.drawElementsInstancedANGLE(
                                      n,
                                      c,
                                      r,
                                      a * o,
                                      s.maxInstancedCount
                                    ),
                                    i.calls++,
                                    (i.vertices += c * s.maxInstancedCount),
                                    n === t.TRIANGLES
                                      ? (i.faces += s.maxInstancedCount * c / 3)
                                      : n === t.POINTS &&
                                        (i.points += s.maxInstancedCount * c))
                                  : console.error(
                                      'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
                                    );
                              });
                          }(D, S, Ct)),
                          (J = new Ri(it, D, _, j, C)),
                          ($ = new ki(it, D, _, j, C)),
                          (it.info.programs = B.programs),
                          (it.context = D),
                          (it.capabilities = C),
                          (it.extensions = S),
                          (it.properties = I),
                          (it.renderLists = P),
                          (it.state = _);
                      }
                      jt();
                      var Ot = new function(t) {
                        var e = this,
                          i = null,
                          n = null;
                        'VRFrameData' in window &&
                          (n = new window.VRFrameData());
                        var r = new Be(),
                          o = new Be(),
                          s = new Be(),
                          a = new Pn();
                        (a.bounds = new je(0, 0, 0.5, 1)), a.layers.enable(1);
                        var c = new Pn();
                        (c.bounds = new je(0.5, 0, 0.5, 1)), c.layers.enable(2);
                        var l,
                          u,
                          h = new Do([a, c]);
                        function d() {
                          if (null !== i && i.isPresenting) {
                            var n = i.getEyeParameters('left'),
                              r = n.renderWidth,
                              o = n.renderHeight;
                            (u = t.getPixelRatio()),
                              (l = t.getSize()),
                              t.setDrawingBufferSize(2 * r, o, 1);
                          } else
                            e.enabled &&
                              t.setDrawingBufferSize(l.width, l.height, u);
                        }
                        h.layers.enable(1),
                          h.layers.enable(2),
                          window.addEventListener(
                            'vrdisplaypresentchange',
                            d,
                            !1
                          ),
                          (this.enabled = !1),
                          (this.standing = !1),
                          (this.getDevice = function() {
                            return i;
                          }),
                          (this.setDevice = function(t) {
                            void 0 !== t && (i = t);
                          }),
                          (this.getCamera = function(t) {
                            if (null === i) return t;
                            (i.depthNear = t.near),
                              (i.depthFar = t.far),
                              i.getFrameData(n);
                            var e = n.pose;
                            null !== e.position
                              ? t.position.fromArray(e.position)
                              : t.position.set(0, 0, 0),
                              null !== e.orientation &&
                                t.quaternion.fromArray(e.orientation),
                              t.updateMatrixWorld();
                            var l = i.stageParameters;
                            if (
                              (this.standing &&
                                l &&
                                (o.fromArray(l.sittingToStandingTransform),
                                s.getInverse(o),
                                t.matrixWorld.multiply(o),
                                t.matrixWorldInverse.multiply(s)),
                              !1 === i.isPresenting)
                            )
                              return t;
                            (a.near = t.near),
                              (c.near = t.near),
                              (a.far = t.far),
                              (c.far = t.far),
                              h.matrixWorld.copy(t.matrixWorld),
                              h.matrixWorldInverse.copy(t.matrixWorldInverse),
                              a.matrixWorldInverse.fromArray(n.leftViewMatrix),
                              c.matrixWorldInverse.fromArray(n.rightViewMatrix),
                              this.standing &&
                                l &&
                                (a.matrixWorldInverse.multiply(s),
                                c.matrixWorldInverse.multiply(s));
                            var u = t.parent;
                            null !== u &&
                              (r.getInverse(u.matrixWorld),
                              a.matrixWorldInverse.multiply(r),
                              c.matrixWorldInverse.multiply(r)),
                              a.matrixWorld.getInverse(a.matrixWorldInverse),
                              c.matrixWorld.getInverse(c.matrixWorldInverse),
                              a.projectionMatrix.fromArray(
                                n.leftProjectionMatrix
                              ),
                              c.projectionMatrix.fromArray(
                                n.rightProjectionMatrix
                              ),
                              h.projectionMatrix.copy(a.projectionMatrix);
                            var d = i.getLayers();
                            if (d.length) {
                              var p = d[0];
                              null !== p.leftBounds &&
                                4 === p.leftBounds.length &&
                                a.bounds.fromArray(p.leftBounds),
                                null !== p.rightBounds &&
                                  4 === p.rightBounds.length &&
                                  c.bounds.fromArray(p.rightBounds);
                            }
                            return h;
                          }),
                          (this.getStandingMatrix = function() {
                            return o;
                          }),
                          (this.submitFrame = function() {
                            i && i.isPresenting && i.submitFrame();
                          }),
                          (this.dispose = function() {
                            window.removeEventListener(
                              'vrdisplaypresentchange',
                              d
                            );
                          });
                      }(it);
                      this.vr = Ot;
                      var zt = new fn(it, z, C.maxTextureSize);
                      function kt(t) {
                        t.preventDefault(),
                          console.log('THREE.WebGLRenderer: Context Lost.'),
                          (nt = !0);
                      }
                      function Bt(t) {
                        console.log('THREE.WebGLRenderer: Context Restored.'),
                          (nt = !1),
                          jt();
                      }
                      function Pt(t) {
                        var e,
                          i = t.target;
                        i.removeEventListener('dispose', Pt),
                          Ut((e = i)),
                          I.remove(e);
                      }
                      function Ut(t) {
                        var e = I.get(t).program;
                        (t.program = void 0),
                          void 0 !== e && B.releaseProgram(e);
                      }
                      (this.shadowMap = zt),
                        (this.getContext = function() {
                          return D;
                        }),
                        (this.getContextAttributes = function() {
                          return D.getContextAttributes();
                        }),
                        (this.forceContextLoss = function() {
                          var t = S.get('WEBGL_lose_context');
                          t && t.loseContext();
                        }),
                        (this.forceContextRestore = function() {
                          var t = S.get('WEBGL_lose_context');
                          t && t.restoreContext();
                        }),
                        (this.getPixelRatio = function() {
                          return gt;
                        }),
                        (this.setPixelRatio = function(t) {
                          void 0 !== t && ((gt = t), this.setSize(ft, mt, !1));
                        }),
                        (this.getSize = function() {
                          return { width: ft, height: mt };
                        }),
                        (this.setSize = function(t, i, n) {
                          var r = Ot.getDevice();
                          r && r.isPresenting
                            ? console.warn(
                                "THREE.WebGLRenderer: Can't change size while VR device is presenting."
                              )
                            : ((ft = t),
                              (mt = i),
                              (e.width = t * gt),
                              (e.height = i * gt),
                              !1 !== n &&
                                ((e.style.width = t + 'px'),
                                (e.style.height = i + 'px')),
                              this.setViewport(0, 0, t, i));
                        }),
                        (this.getDrawingBufferSize = function() {
                          return { width: ft * gt, height: mt * gt };
                        }),
                        (this.setDrawingBufferSize = function(t, i, n) {
                          (ft = t),
                            (mt = i),
                            (gt = n),
                            (e.width = t * n),
                            (e.height = i * n),
                            this.setViewport(0, 0, t, i);
                        }),
                        (this.setViewport = function(t, e, i, n) {
                          vt.set(t, mt - e - n, i, n),
                            _.viewport(ut.copy(vt).multiplyScalar(gt));
                        }),
                        (this.setScissor = function(t, e, i, n) {
                          yt.set(t, mt - e - n, i, n),
                            _.scissor(ht.copy(yt).multiplyScalar(gt));
                        }),
                        (this.setScissorTest = function(t) {
                          _.setScissorTest((wt = t));
                        }),
                        (this.getClearColor = U.getClearColor),
                        (this.setClearColor = U.setClearColor),
                        (this.getClearAlpha = U.getClearAlpha),
                        (this.setClearAlpha = U.setClearAlpha),
                        (this.clear = function(t, e, i) {
                          var n = 0;
                          (void 0 === t || t) && (n |= D.COLOR_BUFFER_BIT),
                            (void 0 === e || e) && (n |= D.DEPTH_BUFFER_BIT),
                            (void 0 === i || i) && (n |= D.STENCIL_BUFFER_BIT),
                            D.clear(n);
                        }),
                        (this.clearColor = function() {
                          this.clear(!0, !1, !1);
                        }),
                        (this.clearDepth = function() {
                          this.clear(!1, !0, !1);
                        }),
                        (this.clearStencil = function() {
                          this.clear(!1, !1, !0);
                        }),
                        (this.clearTarget = function(t, e, i, n) {
                          this.setRenderTarget(t), this.clear(e, i, n);
                        }),
                        (this.dispose = function() {
                          e.removeEventListener('webglcontextlost', kt, !1),
                            e.removeEventListener(
                              'webglcontextrestored',
                              Bt,
                              !1
                            ),
                            P.dispose(),
                            Ot.dispose();
                        }),
                        (this.renderBufferImmediate = function(t, e, i) {
                          _.initAttributes();
                          var n = I.get(t);
                          t.hasPositions &&
                            !n.position &&
                            (n.position = D.createBuffer()),
                            t.hasNormals &&
                              !n.normal &&
                              (n.normal = D.createBuffer()),
                            t.hasUvs && !n.uv && (n.uv = D.createBuffer()),
                            t.hasColors &&
                              !n.color &&
                              (n.color = D.createBuffer());
                          var r = e.getAttributes();
                          if (
                            (t.hasPositions &&
                              (D.bindBuffer(D.ARRAY_BUFFER, n.position),
                              D.bufferData(
                                D.ARRAY_BUFFER,
                                t.positionArray,
                                D.DYNAMIC_DRAW
                              ),
                              _.enableAttribute(r.position),
                              D.vertexAttribPointer(
                                r.position,
                                3,
                                D.FLOAT,
                                !1,
                                0,
                                0
                              )),
                            t.hasNormals)
                          ) {
                            if (
                              (D.bindBuffer(D.ARRAY_BUFFER, n.normal),
                              !i.isMeshPhongMaterial &&
                                !i.isMeshStandardMaterial &&
                                !i.isMeshNormalMaterial &&
                                !0 === i.flatShading)
                            )
                              for (var o = 0, s = 3 * t.count; o < s; o += 9) {
                                var a = t.normalArray,
                                  c = (a[o + 0] + a[o + 3] + a[o + 6]) / 3,
                                  l = (a[o + 1] + a[o + 4] + a[o + 7]) / 3,
                                  u = (a[o + 2] + a[o + 5] + a[o + 8]) / 3;
                                (a[o + 0] = c),
                                  (a[o + 1] = l),
                                  (a[o + 2] = u),
                                  (a[o + 3] = c),
                                  (a[o + 4] = l),
                                  (a[o + 5] = u),
                                  (a[o + 6] = c),
                                  (a[o + 7] = l),
                                  (a[o + 8] = u);
                              }
                            D.bufferData(
                              D.ARRAY_BUFFER,
                              t.normalArray,
                              D.DYNAMIC_DRAW
                            ),
                              _.enableAttribute(r.normal),
                              D.vertexAttribPointer(
                                r.normal,
                                3,
                                D.FLOAT,
                                !1,
                                0,
                                0
                              );
                          }
                          t.hasUvs &&
                            i.map &&
                            (D.bindBuffer(D.ARRAY_BUFFER, n.uv),
                            D.bufferData(
                              D.ARRAY_BUFFER,
                              t.uvArray,
                              D.DYNAMIC_DRAW
                            ),
                            _.enableAttribute(r.uv),
                            D.vertexAttribPointer(r.uv, 2, D.FLOAT, !1, 0, 0)),
                            t.hasColors &&
                              i.vertexColors !== y &&
                              (D.bindBuffer(D.ARRAY_BUFFER, n.color),
                              D.bufferData(
                                D.ARRAY_BUFFER,
                                t.colorArray,
                                D.DYNAMIC_DRAW
                              ),
                              _.enableAttribute(r.color),
                              D.vertexAttribPointer(
                                r.color,
                                3,
                                D.FLOAT,
                                !1,
                                0,
                                0
                              )),
                            _.disableUnusedAttributes(),
                            D.drawArrays(D.TRIANGLES, 0, t.count),
                            (t.count = 0);
                        }),
                        (this.renderBufferDirect = function(t, e, i, n, r, o) {
                          _.setMaterial(n);
                          var s = Kt(t, e, n, r),
                            a = i.id + '_' + s.id + '_' + (!0 === n.wireframe),
                            c = !1;
                          a !== at && ((at = a), (c = !0)),
                            r.morphTargetInfluences &&
                              (F.update(r, i, n, s), (c = !0));
                          var l,
                            u = i.index,
                            h = i.attributes.position,
                            d = 1;
                          !0 === n.wireframe &&
                            ((u = R.getWireframeAttribute(i)), (d = 2));
                          var p = H;
                          null !== u && ((l = O.get(u)), (p = Z).setIndex(l)),
                            c &&
                              (!(function(t, e, i, n) {
                                if (
                                  i &&
                                  i.isInstancedBufferGeometry &&
                                  null === S.get('ANGLE_instanced_arrays')
                                )
                                  return void console.error(
                                    'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.'
                                  );
                                void 0 === n && (n = 0);
                                _.initAttributes();
                                var r = i.attributes,
                                  o = e.getAttributes(),
                                  s = t.defaultAttributeValues;
                                for (var a in o) {
                                  var c = o[a];
                                  if (c >= 0) {
                                    var l = r[a];
                                    if (void 0 !== l) {
                                      var u = l.normalized,
                                        h = l.itemSize,
                                        d = O.get(l);
                                      if (void 0 === d) continue;
                                      var p = d.buffer,
                                        f = d.type,
                                        m = d.bytesPerElement;
                                      if (l.isInterleavedBufferAttribute) {
                                        var g = l.data,
                                          v = g.stride,
                                          y = l.offset;
                                        g && g.isInstancedInterleavedBuffer
                                          ? (_.enableAttributeAndDivisor(
                                              c,
                                              g.meshPerAttribute
                                            ),
                                            void 0 === i.maxInstancedCount &&
                                              (i.maxInstancedCount =
                                                g.meshPerAttribute * g.count))
                                          : _.enableAttribute(c),
                                          D.bindBuffer(D.ARRAY_BUFFER, p),
                                          D.vertexAttribPointer(
                                            c,
                                            h,
                                            f,
                                            u,
                                            v * m,
                                            (n * v + y) * m
                                          );
                                      } else
                                        l.isInstancedBufferAttribute
                                          ? (_.enableAttributeAndDivisor(
                                              c,
                                              l.meshPerAttribute
                                            ),
                                            void 0 === i.maxInstancedCount &&
                                              (i.maxInstancedCount =
                                                l.meshPerAttribute * l.count))
                                          : _.enableAttribute(c),
                                          D.bindBuffer(D.ARRAY_BUFFER, p),
                                          D.vertexAttribPointer(
                                            c,
                                            h,
                                            f,
                                            u,
                                            0,
                                            n * h * m
                                          );
                                    } else if (void 0 !== s) {
                                      var w = s[a];
                                      if (void 0 !== w)
                                        switch (w.length) {
                                          case 2:
                                            D.vertexAttrib2fv(c, w);
                                            break;
                                          case 3:
                                            D.vertexAttrib3fv(c, w);
                                            break;
                                          case 4:
                                            D.vertexAttrib4fv(c, w);
                                            break;
                                          default:
                                            D.vertexAttrib1fv(c, w);
                                        }
                                    }
                                  }
                                }
                                _.disableUnusedAttributes();
                              })(n, s, i),
                              null !== u &&
                                D.bindBuffer(D.ELEMENT_ARRAY_BUFFER, l.buffer));
                          var f = 0;
                          null !== u
                            ? (f = u.count)
                            : void 0 !== h && (f = h.count);
                          var m = i.drawRange.start * d,
                            g = i.drawRange.count * d,
                            v = null !== o ? o.start * d : 0,
                            y = null !== o ? o.count * d : 1 / 0,
                            w = Math.max(m, v),
                            M = Math.min(f, m + g, v + y) - 1,
                            E = Math.max(0, M - w + 1);
                          if (0 !== E) {
                            if (r.isMesh)
                              if (!0 === n.wireframe)
                                _.setLineWidth(n.wireframeLinewidth * _t()),
                                  p.setMode(D.LINES);
                              else
                                switch (r.drawMode) {
                                  case Jt:
                                    p.setMode(D.TRIANGLES);
                                    break;
                                  case $t:
                                    p.setMode(D.TRIANGLE_STRIP);
                                    break;
                                  case te:
                                    p.setMode(D.TRIANGLE_FAN);
                                }
                            else if (r.isLine) {
                              var b = n.linewidth;
                              void 0 === b && (b = 1),
                                _.setLineWidth(b * _t()),
                                r.isLineSegments
                                  ? p.setMode(D.LINES)
                                  : r.isLineLoop
                                    ? p.setMode(D.LINE_LOOP)
                                    : p.setMode(D.LINE_STRIP);
                            } else r.isPoints && p.setMode(D.POINTS);
                            i && i.isInstancedBufferGeometry
                              ? i.maxInstancedCount > 0 &&
                                p.renderInstances(i, w, E)
                              : p.render(w, E);
                          }
                        }),
                        (this.compile = function(t, e) {
                          (f.length = 0),
                            (m.length = 0),
                            t.traverse(function(t) {
                              t.isLight &&
                                (f.push(t), t.castShadow && m.push(t));
                            }),
                            k.setup(f, m, e),
                            t.traverse(function(i) {
                              if (i.material)
                                if (Array.isArray(i.material))
                                  for (var n = 0; n < i.material.length; n++)
                                    Xt(i.material[n], t.fog, i);
                                else
                                  Xt(i.material, t.fog, i),
                                    Kt(e, t.fog, i.material, i);
                            });
                        });
                      var Ft,
                        Ht,
                        Vt,
                        Gt = !1,
                        Yt = null;
                      function Qt(t) {
                        null !== Yt && Yt(t),
                          (Ot.getDevice() || window).requestAnimationFrame(Qt);
                      }
                      function Wt(t, e, i, n) {
                        for (var r = 0, o = t.length; r < o; r++) {
                          var s = t[r],
                            a = s.object,
                            c = s.geometry,
                            l = void 0 === n ? s.material : n,
                            u = s.group;
                          if (i.isArrayCamera) {
                            lt = i;
                            for (
                              var h = i.cameras, d = 0, p = h.length;
                              d < p;
                              d++
                            ) {
                              var f = h[d];
                              if (a.layers.test(f.layers)) {
                                var m = f.bounds,
                                  g = m.x * ft,
                                  v = m.y * mt,
                                  y = m.z * ft,
                                  w = m.w * mt;
                                _.viewport(
                                  ut.set(g, v, y, w).multiplyScalar(gt)
                                ),
                                  qt(a, e, f, c, l, u);
                              }
                            }
                          } else (lt = null), qt(a, e, i, c, l, u);
                        }
                      }
                      function qt(t, e, i, n, r, o) {
                        if (
                          (t.onBeforeRender(it, e, i, n, r, o),
                          t.modelViewMatrix.multiplyMatrices(
                            i.matrixWorldInverse,
                            t.matrixWorld
                          ),
                          t.normalMatrix.getNormalMatrix(t.modelViewMatrix),
                          t.isImmediateRenderObject)
                        ) {
                          _.setMaterial(r);
                          var s = Kt(i, e.fog, r, t);
                          (at = ''),
                            (a = s),
                            (c = r),
                            t.render(function(t) {
                              it.renderBufferImmediate(t, a, c);
                            });
                        } else it.renderBufferDirect(i, e.fog, n, r, t, o);
                        var a, c;
                        t.onAfterRender(it, e, i, n, r, o);
                      }
                      function Xt(t, e, i) {
                        var n = I.get(t),
                          r = B.getParameters(
                            t,
                            k.state,
                            m,
                            e,
                            bt.numPlanes,
                            bt.numIntersection,
                            i
                          ),
                          o = B.getProgramCode(t, r),
                          s = n.program,
                          a = !0;
                        if (void 0 === s) t.addEventListener('dispose', Pt);
                        else if (s.code !== o) Ut(t);
                        else {
                          if (void 0 !== r.shaderID) return;
                          a = !1;
                        }
                        if (a) {
                          if (r.shaderID) {
                            var c = ji[r.shaderID];
                            n.shader = {
                              name: t.type,
                              uniforms: _i.clone(c.uniforms),
                              vertexShader: c.vertexShader,
                              fragmentShader: c.fragmentShader
                            };
                          } else
                            n.shader = {
                              name: t.type,
                              uniforms: t.uniforms,
                              vertexShader: t.vertexShader,
                              fragmentShader: t.fragmentShader
                            };
                          t.onBeforeCompile(n.shader),
                            (s = B.acquireProgram(t, n.shader, r, o)),
                            (n.program = s),
                            (t.program = s);
                        }
                        var l = s.getAttributes();
                        if (t.morphTargets) {
                          t.numSupportedMorphTargets = 0;
                          for (var u = 0; u < it.maxMorphTargets; u++)
                            l['morphTarget' + u] >= 0 &&
                              t.numSupportedMorphTargets++;
                        }
                        if (t.morphNormals) {
                          t.numSupportedMorphNormals = 0;
                          for (u = 0; u < it.maxMorphNormals; u++)
                            l['morphNormal' + u] >= 0 &&
                              t.numSupportedMorphNormals++;
                        }
                        var h = n.shader.uniforms;
                        ((t.isShaderMaterial || t.isRawShaderMaterial) &&
                          !0 !== t.clipping) ||
                          ((n.numClippingPlanes = bt.numPlanes),
                          (n.numIntersection = bt.numIntersection),
                          (h.clippingPlanes = bt.uniform)),
                          (n.fog = e),
                          (n.lightsHash = k.state.hash),
                          t.lights &&
                            ((h.ambientLightColor.value = k.state.ambient),
                            (h.directionalLights.value = k.state.directional),
                            (h.spotLights.value = k.state.spot),
                            (h.rectAreaLights.value = k.state.rectArea),
                            (h.pointLights.value = k.state.point),
                            (h.hemisphereLights.value = k.state.hemi),
                            (h.directionalShadowMap.value =
                              k.state.directionalShadowMap),
                            (h.directionalShadowMatrix.value =
                              k.state.directionalShadowMatrix),
                            (h.spotShadowMap.value = k.state.spotShadowMap),
                            (h.spotShadowMatrix.value =
                              k.state.spotShadowMatrix),
                            (h.pointShadowMap.value = k.state.pointShadowMap),
                            (h.pointShadowMatrix.value =
                              k.state.pointShadowMatrix));
                        var d = n.program.getUniforms(),
                          p = Ti.seqWithValue(d.seq, h);
                        n.uniformsList = p;
                      }
                      function Kt(t, e, i, n) {
                        pt = 0;
                        var r = I.get(i);
                        if (xt && (At || t !== ct)) {
                          var o = t === ct && i.id === st;
                          bt.setState(
                            i.clippingPlanes,
                            i.clipIntersection,
                            i.clipShadows,
                            t,
                            r,
                            o
                          );
                        }
                        !1 === i.needsUpdate &&
                          (void 0 === r.program
                            ? (i.needsUpdate = !0)
                            : i.fog && r.fog !== e
                              ? (i.needsUpdate = !0)
                              : i.lights && r.lightsHash !== k.state.hash
                                ? (i.needsUpdate = !0)
                                : void 0 === r.numClippingPlanes ||
                                  (r.numClippingPlanes === bt.numPlanes &&
                                    r.numIntersection === bt.numIntersection) ||
                                  (i.needsUpdate = !0)),
                          i.needsUpdate && (Xt(i, e, n), (i.needsUpdate = !1));
                        var s,
                          a,
                          c,
                          l,
                          u,
                          h,
                          d,
                          p,
                          f,
                          m,
                          g,
                          v,
                          y,
                          w,
                          M,
                          E,
                          b = !1,
                          x = !1,
                          A = !1,
                          T = r.program,
                          L = T.getUniforms(),
                          N = r.shader.uniforms;
                        if (
                          (_.useProgram(T.program) &&
                            ((b = !0), (x = !0), (A = !0)),
                          i.id !== st && ((st = i.id), (x = !0)),
                          b || t !== ct)
                        ) {
                          if (
                            (L.setValue(
                              D,
                              'projectionMatrix',
                              t.projectionMatrix
                            ),
                            C.logarithmicDepthBuffer &&
                              L.setValue(
                                D,
                                'logDepthBufFC',
                                2 / (Math.log(t.far + 1) / Math.LN2)
                              ),
                            ct !== (lt || t) &&
                              ((ct = lt || t), (x = !0), (A = !0)),
                            i.isShaderMaterial ||
                              i.isMeshPhongMaterial ||
                              i.isMeshStandardMaterial ||
                              i.envMap)
                          ) {
                            var S = L.map.cameraPosition;
                            void 0 !== S &&
                              S.setValue(
                                D,
                                Lt.setFromMatrixPosition(t.matrixWorld)
                              );
                          }
                          (i.isMeshPhongMaterial ||
                            i.isMeshLambertMaterial ||
                            i.isMeshBasicMaterial ||
                            i.isMeshStandardMaterial ||
                            i.isShaderMaterial ||
                            i.skinning) &&
                            L.setValue(D, 'viewMatrix', t.matrixWorldInverse);
                        }
                        if (i.skinning) {
                          L.setOptional(D, n, 'bindMatrix'),
                            L.setOptional(D, n, 'bindMatrixInverse');
                          var j = n.skeleton;
                          if (j) {
                            var O = j.bones;
                            if (C.floatVertexTextures) {
                              if (void 0 === j.boneTexture) {
                                var R = Math.sqrt(4 * O.length);
                                (R = ue.nextPowerOfTwo(Math.ceil(R))),
                                  (R = Math.max(R, 4));
                                var z = new Float32Array(R * R * 4);
                                z.set(j.boneMatrices);
                                var B = new Pe(z, R, R, Rt, Nt);
                                (j.boneMatrices = z),
                                  (j.boneTexture = B),
                                  (j.boneTextureSize = R);
                              }
                              L.setValue(D, 'boneTexture', j.boneTexture),
                                L.setValue(
                                  D,
                                  'boneTextureSize',
                                  j.boneTextureSize
                                );
                            } else L.setOptional(D, j, 'boneMatrices');
                          }
                        }
                        return (
                          x &&
                            (L.setValue(
                              D,
                              'toneMappingExposure',
                              it.toneMappingExposure
                            ),
                            L.setValue(
                              D,
                              'toneMappingWhitePoint',
                              it.toneMappingWhitePoint
                            ),
                            i.lights &&
                              ((E = A),
                              ((M = N).ambientLightColor.needsUpdate = E),
                              (M.directionalLights.needsUpdate = E),
                              (M.pointLights.needsUpdate = E),
                              (M.spotLights.needsUpdate = E),
                              (M.rectAreaLights.needsUpdate = E),
                              (M.hemisphereLights.needsUpdate = E)),
                            e &&
                              i.fog &&
                              ((w = e),
                              ((y = N).fogColor.value = w.color),
                              w.isFog
                                ? ((y.fogNear.value = w.near),
                                  (y.fogFar.value = w.far))
                                : w.isFogExp2 &&
                                  (y.fogDensity.value = w.density)),
                            i.isMeshBasicMaterial
                              ? Zt(N, i)
                              : i.isMeshLambertMaterial
                                ? (Zt(N, i),
                                  (g = N),
                                  (v = i).emissiveMap &&
                                    (g.emissiveMap.value = v.emissiveMap))
                                : i.isMeshPhongMaterial
                                  ? (Zt(N, i),
                                    i.isMeshToonMaterial
                                      ? (ee((f = N), (m = i)),
                                        m.gradientMap &&
                                          (f.gradientMap.value = m.gradientMap))
                                      : ee(N, i))
                                  : i.isMeshStandardMaterial
                                    ? (Zt(N, i),
                                      i.isMeshPhysicalMaterial
                                        ? ((p = i),
                                          ((d = N).clearCoat.value =
                                            p.clearCoat),
                                          (d.clearCoatRoughness.value =
                                            p.clearCoatRoughness),
                                          ie(d, p))
                                        : ie(N, i))
                                    : i.isMeshDepthMaterial
                                      ? (Zt(N, i),
                                        (u = N),
                                        (h = i).displacementMap &&
                                          ((u.displacementMap.value =
                                            h.displacementMap),
                                          (u.displacementScale.value =
                                            h.displacementScale),
                                          (u.displacementBias.value =
                                            h.displacementBias)))
                                      : i.isMeshDistanceMaterial
                                        ? (Zt(N, i),
                                          (function(t, e) {
                                            e.displacementMap &&
                                              ((t.displacementMap.value =
                                                e.displacementMap),
                                              (t.displacementScale.value =
                                                e.displacementScale),
                                              (t.displacementBias.value =
                                                e.displacementBias));
                                            t.referencePosition.value.copy(
                                              e.referencePosition
                                            ),
                                              (t.nearDistance.value =
                                                e.nearDistance),
                                              (t.farDistance.value =
                                                e.farDistance);
                                          })(N, i))
                                        : i.isMeshNormalMaterial
                                          ? (Zt(N, i),
                                            (function(t, e) {
                                              e.bumpMap &&
                                                ((t.bumpMap.value = e.bumpMap),
                                                (t.bumpScale.value =
                                                  e.bumpScale));
                                              e.normalMap &&
                                                ((t.normalMap.value =
                                                  e.normalMap),
                                                t.normalScale.value.copy(
                                                  e.normalScale
                                                ));
                                              e.displacementMap &&
                                                ((t.displacementMap.value =
                                                  e.displacementMap),
                                                (t.displacementScale.value =
                                                  e.displacementScale),
                                                (t.displacementBias.value =
                                                  e.displacementBias));
                                            })(N, i))
                                          : i.isLineBasicMaterial
                                            ? ((l = i),
                                              ((c = N).diffuse.value = l.color),
                                              (c.opacity.value = l.opacity),
                                              i.isLineDashedMaterial &&
                                                ((a = i),
                                                ((s = N).dashSize.value =
                                                  a.dashSize),
                                                (s.totalSize.value =
                                                  a.dashSize + a.gapSize),
                                                (s.scale.value = a.scale)))
                                            : i.isPointsMaterial
                                              ? (function(t, e) {
                                                  if (
                                                    ((t.diffuse.value =
                                                      e.color),
                                                    (t.opacity.value =
                                                      e.opacity),
                                                    (t.size.value =
                                                      e.size * gt),
                                                    (t.scale.value = 0.5 * mt),
                                                    (t.map.value = e.map),
                                                    null !== e.map)
                                                  ) {
                                                    var i = e.map.offset,
                                                      n = e.map.repeat;
                                                    t.offsetRepeat.value.set(
                                                      i.x,
                                                      i.y,
                                                      n.x,
                                                      n.y
                                                    );
                                                  }
                                                })(N, i)
                                              : i.isShadowMaterial &&
                                                ((N.color.value = i.color),
                                                (N.opacity.value = i.opacity)),
                            void 0 !== N.ltcMat &&
                              (N.ltcMat.value = Ci.LTC_MAT_TEXTURE),
                            void 0 !== N.ltcMag &&
                              (N.ltcMag.value = Ci.LTC_MAG_TEXTURE),
                            Ti.upload(D, r.uniformsList, N, it)),
                          L.setValue(D, 'modelViewMatrix', n.modelViewMatrix),
                          L.setValue(D, 'normalMatrix', n.normalMatrix),
                          L.setValue(D, 'modelMatrix', n.matrixWorld),
                          T
                        );
                      }
                      function Zt(t, e) {
                        var i;
                        if (
                          ((t.opacity.value = e.opacity),
                          e.color && (t.diffuse.value = e.color),
                          e.emissive &&
                            t.emissive.value
                              .copy(e.emissive)
                              .multiplyScalar(e.emissiveIntensity),
                          e.map && (t.map.value = e.map),
                          e.alphaMap && (t.alphaMap.value = e.alphaMap),
                          e.specularMap &&
                            (t.specularMap.value = e.specularMap),
                          e.envMap &&
                            ((t.envMap.value = e.envMap),
                            (t.flipEnvMap.value =
                              e.envMap && e.envMap.isCubeTexture ? -1 : 1),
                            (t.reflectivity.value = e.reflectivity),
                            (t.refractionRatio.value = e.refractionRatio)),
                          e.lightMap &&
                            ((t.lightMap.value = e.lightMap),
                            (t.lightMapIntensity.value = e.lightMapIntensity)),
                          e.aoMap &&
                            ((t.aoMap.value = e.aoMap),
                            (t.aoMapIntensity.value = e.aoMapIntensity)),
                          e.map
                            ? (i = e.map)
                            : e.specularMap
                              ? (i = e.specularMap)
                              : e.displacementMap
                                ? (i = e.displacementMap)
                                : e.normalMap
                                  ? (i = e.normalMap)
                                  : e.bumpMap
                                    ? (i = e.bumpMap)
                                    : e.roughnessMap
                                      ? (i = e.roughnessMap)
                                      : e.metalnessMap
                                        ? (i = e.metalnessMap)
                                        : e.alphaMap
                                          ? (i = e.alphaMap)
                                          : e.emissiveMap &&
                                            (i = e.emissiveMap),
                          void 0 !== i)
                        ) {
                          i.isWebGLRenderTarget && (i = i.texture);
                          var n = i.offset,
                            r = i.repeat;
                          t.offsetRepeat.value.set(n.x, n.y, r.x, r.y);
                        }
                      }
                      function ee(t, e) {
                        (t.specular.value = e.specular),
                          (t.shininess.value = Math.max(e.shininess, 1e-4)),
                          e.emissiveMap &&
                            (t.emissiveMap.value = e.emissiveMap),
                          e.bumpMap &&
                            ((t.bumpMap.value = e.bumpMap),
                            (t.bumpScale.value = e.bumpScale)),
                          e.normalMap &&
                            ((t.normalMap.value = e.normalMap),
                            t.normalScale.value.copy(e.normalScale)),
                          e.displacementMap &&
                            ((t.displacementMap.value = e.displacementMap),
                            (t.displacementScale.value = e.displacementScale),
                            (t.displacementBias.value = e.displacementBias));
                      }
                      function ie(t, e) {
                        (t.roughness.value = e.roughness),
                          (t.metalness.value = e.metalness),
                          e.roughnessMap &&
                            (t.roughnessMap.value = e.roughnessMap),
                          e.metalnessMap &&
                            (t.metalnessMap.value = e.metalnessMap),
                          e.emissiveMap &&
                            (t.emissiveMap.value = e.emissiveMap),
                          e.bumpMap &&
                            ((t.bumpMap.value = e.bumpMap),
                            (t.bumpScale.value = e.bumpScale)),
                          e.normalMap &&
                            ((t.normalMap.value = e.normalMap),
                            t.normalScale.value.copy(e.normalScale)),
                          e.displacementMap &&
                            ((t.displacementMap.value = e.displacementMap),
                            (t.displacementScale.value = e.displacementScale),
                            (t.displacementBias.value = e.displacementBias)),
                          e.envMap &&
                            (t.envMapIntensity.value = e.envMapIntensity);
                      }
                      (this.animate = function(t) {
                        (Yt = t),
                          Gt ||
                            ((Ot.getDevice() || window).requestAnimationFrame(
                              Qt
                            ),
                            (Gt = !0));
                      }),
                        (this.render = function(t, e, i, n) {
                          if (e && e.isCamera) {
                            if (!nt) {
                              (at = ''),
                                (st = -1),
                                (ct = null),
                                !0 === t.autoUpdate && t.updateMatrixWorld(),
                                null === e.parent && e.updateMatrixWorld(),
                                Ot.enabled && (e = Ot.getCamera(e)),
                                Tt.multiplyMatrices(
                                  e.projectionMatrix,
                                  e.matrixWorldInverse
                                ),
                                Mt.setFromMatrix(Tt),
                                (f.length = 0),
                                (m.length = 0),
                                (M.length = 0),
                                (N.length = 0),
                                (At = this.localClippingEnabled),
                                (xt = bt.init(this.clippingPlanes, At, e)),
                                (w = P.get(t, e)).init(),
                                (function t(e, i, n) {
                                  if (!e.visible) return;
                                  var r = e.layers.test(i.layers);
                                  if (r)
                                    if (e.isLight)
                                      f.push(e), e.castShadow && m.push(e);
                                    else if (e.isSprite)
                                      (e.frustumCulled &&
                                        !Mt.intersectsSprite(e)) ||
                                        M.push(e);
                                    else if (e.isLensFlare) N.push(e);
                                    else if (e.isImmediateRenderObject)
                                      n &&
                                        Lt.setFromMatrixPosition(
                                          e.matrixWorld
                                        ).applyMatrix4(Tt),
                                        w.push(e, null, e.material, Lt.z, null);
                                    else if (
                                      (e.isMesh || e.isLine || e.isPoints) &&
                                      (e.isSkinnedMesh && e.skeleton.update(),
                                      !e.frustumCulled ||
                                        Mt.intersectsObject(e))
                                    ) {
                                      n &&
                                        Lt.setFromMatrixPosition(
                                          e.matrixWorld
                                        ).applyMatrix4(Tt);
                                      var o = z.update(e),
                                        s = e.material;
                                      if (Array.isArray(s))
                                        for (
                                          var a = o.groups, c = 0, l = a.length;
                                          c < l;
                                          c++
                                        ) {
                                          var u = a[c],
                                            h = s[u.materialIndex];
                                          h &&
                                            h.visible &&
                                            w.push(e, o, h, Lt.z, u);
                                        }
                                      else
                                        s.visible &&
                                          w.push(e, o, s, Lt.z, null);
                                    }
                                  var d = e.children;
                                  for (var c = 0, l = d.length; c < l; c++)
                                    t(d[c], i, n);
                                })(t, e, it.sortObjects),
                                !0 === it.sortObjects && w.sort(),
                                xt && bt.beginShadows(),
                                zt.render(m, t, e),
                                k.setup(f, m, e),
                                xt && bt.endShadows(),
                                Ct.frame++,
                                (Ct.calls = 0),
                                (Ct.vertices = 0),
                                (Ct.faces = 0),
                                (Ct.points = 0),
                                void 0 === i && (i = null),
                                this.setRenderTarget(i),
                                U.render(w, t, e, n);
                              var r = w.opaque,
                                o = w.transparent;
                              if (t.overrideMaterial) {
                                var s = t.overrideMaterial;
                                r.length && Wt(r, t, e, s),
                                  o.length && Wt(o, t, e, s);
                              } else
                                r.length && Wt(r, t, e),
                                  o.length && Wt(o, t, e);
                              $.render(M, t, e),
                                J.render(N, t, e, ut),
                                i && j.updateRenderTargetMipmap(i),
                                _.buffers.depth.setTest(!0),
                                _.buffers.depth.setMask(!0),
                                _.buffers.color.setMask(!0),
                                _.setPolygonOffset(!1),
                                Ot.enabled && Ot.submitFrame();
                            }
                          } else
                            console.error(
                              'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.'
                            );
                        }),
                        (this.setFaceCulling = function(t, e) {
                          _.setCullFace(t), _.setFlipSided(e === d);
                        }),
                        (this.allocTextureUnit = function() {
                          var t = pt;
                          return (
                            t >= C.maxTextures &&
                              console.warn(
                                'THREE.WebGLRenderer: Trying to use ' +
                                  t +
                                  ' texture units while this GPU supports only ' +
                                  C.maxTextures
                              ),
                            (pt += 1),
                            t
                          );
                        }),
                        (this.setTexture2D = ((Ft = !1),
                        function(t, e) {
                          t &&
                            t.isWebGLRenderTarget &&
                            (Ft ||
                              (console.warn(
                                "THREE.WebGLRenderer.setTexture2D: don't use render targets as textures. Use their .texture property instead."
                              ),
                              (Ft = !0)),
                            (t = t.texture)),
                            j.setTexture2D(t, e);
                        })),
                        (this.setTexture = ((Ht = !1),
                        function(t, e) {
                          Ht ||
                            (console.warn(
                              'THREE.WebGLRenderer: .setTexture is deprecated, use setTexture2D instead.'
                            ),
                            (Ht = !0)),
                            j.setTexture2D(t, e);
                        })),
                        (this.setTextureCube = ((Vt = !1),
                        function(t, e) {
                          t &&
                            t.isWebGLRenderTargetCube &&
                            (Vt ||
                              (console.warn(
                                "THREE.WebGLRenderer.setTextureCube: don't use cube render targets as textures. Use their .texture property instead."
                              ),
                              (Vt = !0)),
                            (t = t.texture)),
                            (t && t.isCubeTexture) ||
                            (Array.isArray(t.image) && 6 === t.image.length)
                              ? j.setTextureCube(t, e)
                              : j.setTextureCubeDynamic(t, e);
                        })),
                        (this.getRenderTarget = function() {
                          return rt;
                        }),
                        (this.setRenderTarget = function(t) {
                          (rt = t),
                            t &&
                              void 0 === I.get(t).__webglFramebuffer &&
                              j.setupRenderTarget(t);
                          var e = null,
                            i = !1;
                          if (t) {
                            var n = I.get(t).__webglFramebuffer;
                            t.isWebGLRenderTargetCube
                              ? ((e = n[t.activeCubeFace]), (i = !0))
                              : (e = n),
                              ut.copy(t.viewport),
                              ht.copy(t.scissor),
                              (dt = t.scissorTest);
                          } else
                            ut.copy(vt).multiplyScalar(gt),
                              ht.copy(yt).multiplyScalar(gt),
                              (dt = wt);
                          if (
                            (ot !== e &&
                              (D.bindFramebuffer(D.FRAMEBUFFER, e), (ot = e)),
                            _.viewport(ut),
                            _.scissor(ht),
                            _.setScissorTest(dt),
                            i)
                          ) {
                            var r = I.get(t.texture);
                            D.framebufferTexture2D(
                              D.FRAMEBUFFER,
                              D.COLOR_ATTACHMENT0,
                              D.TEXTURE_CUBE_MAP_POSITIVE_X + t.activeCubeFace,
                              r.__webglTexture,
                              t.activeMipMapLevel
                            );
                          }
                        }),
                        (this.readRenderTargetPixels = function(
                          t,
                          e,
                          i,
                          n,
                          r,
                          o
                        ) {
                          if (t && t.isWebGLRenderTarget) {
                            var s = I.get(t).__webglFramebuffer;
                            if (s) {
                              var a = !1;
                              s !== ot &&
                                (D.bindFramebuffer(D.FRAMEBUFFER, s), (a = !0));
                              try {
                                var c = t.texture,
                                  l = c.format,
                                  u = c.type;
                                if (
                                  l !== Rt &&
                                  tt.convert(l) !==
                                    D.getParameter(
                                      D.IMPLEMENTATION_COLOR_READ_FORMAT
                                    )
                                )
                                  return void console.error(
                                    'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.'
                                  );
                                if (
                                  !(
                                    u === Et ||
                                    tt.convert(u) ===
                                      D.getParameter(
                                        D.IMPLEMENTATION_COLOR_READ_TYPE
                                      ) ||
                                    (u === Nt &&
                                      (S.get('OES_texture_float') ||
                                        S.get('WEBGL_color_buffer_float'))) ||
                                    (u === Dt &&
                                      S.get('EXT_color_buffer_half_float'))
                                  )
                                )
                                  return void console.error(
                                    'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.'
                                  );
                                D.checkFramebufferStatus(D.FRAMEBUFFER) ===
                                D.FRAMEBUFFER_COMPLETE
                                  ? e >= 0 &&
                                    e <= t.width - n &&
                                    i >= 0 &&
                                    i <= t.height - r &&
                                    D.readPixels(
                                      e,
                                      i,
                                      n,
                                      r,
                                      tt.convert(l),
                                      tt.convert(u),
                                      o
                                    )
                                  : console.error(
                                      'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.'
                                    );
                              } finally {
                                a && D.bindFramebuffer(D.FRAMEBUFFER, ot);
                              }
                            }
                          } else
                            console.error(
                              'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.'
                            );
                        });
                    }
                    function _o(t, e) {
                      (this.name = ''),
                        (this.color = new Ni(t)),
                        (this.density = void 0 !== e ? e : 25e-5);
                    }
                    function Io(t, e, i) {
                      (this.name = ''),
                        (this.color = new Ni(t)),
                        (this.near = void 0 !== e ? e : 1),
                        (this.far = void 0 !== i ? i : 1e3);
                    }
                    function jo() {
                      zn.call(this),
                        (this.type = 'Scene'),
                        (this.background = null),
                        (this.fog = null),
                        (this.overrideMaterial = null),
                        (this.autoUpdate = !0);
                    }
                    function Oo(t, e, i, n, r) {
                      zn.call(this),
                        (this.lensFlares = []),
                        (this.positionScreen = new ke()),
                        (this.customUpdateCallback = void 0),
                        void 0 !== t && this.add(t, e, i, n, r);
                    }
                    function Ro(t) {
                      on.call(this),
                        (this.type = 'SpriteMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.map = null),
                        (this.rotation = 0),
                        (this.fog = !1),
                        (this.lights = !1),
                        this.setValues(t);
                    }
                    function zo(t) {
                      zn.call(this),
                        (this.type = 'Sprite'),
                        (this.material = void 0 !== t ? t : new Ro());
                    }
                    function ko() {
                      zn.call(this),
                        (this.type = 'LOD'),
                        Object.defineProperties(this, {
                          levels: { enumerable: !0, value: [] }
                        });
                    }
                    function Bo(t, e) {
                      if (
                        ((t = t || []),
                        (this.bones = t.slice(0)),
                        (this.boneMatrices = new Float32Array(
                          16 * this.bones.length
                        )),
                        void 0 === e)
                      )
                        this.calculateInverses();
                      else if (this.bones.length === e.length)
                        this.boneInverses = e.slice(0);
                      else {
                        console.warn(
                          'THREE.Skeleton boneInverses is the wrong length.'
                        ),
                          (this.boneInverses = []);
                        for (var i = 0, n = this.bones.length; i < n; i++)
                          this.boneInverses.push(new Be());
                      }
                    }
                    function Po() {
                      zn.call(this), (this.type = 'Bone');
                    }
                    function Uo(t, e) {
                      Kr.call(this, t, e),
                        (this.type = 'SkinnedMesh'),
                        (this.bindMode = 'attached'),
                        (this.bindMatrix = new Be()),
                        (this.bindMatrixInverse = new Be());
                      var i = new Bo(this.initBones());
                      this.bind(i, this.matrixWorld),
                        this.normalizeSkinWeights();
                    }
                    function Fo(t) {
                      on.call(this),
                        (this.type = 'LineBasicMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.linewidth = 1),
                        (this.linecap = 'round'),
                        (this.linejoin = 'round'),
                        (this.lights = !1),
                        this.setValues(t);
                    }
                    function Ho(t, e, i) {
                      if (1 === i)
                        return (
                          console.warn(
                            'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.'
                          ),
                          new Vo(t, e)
                        );
                      zn.call(this),
                        (this.type = 'Line'),
                        (this.geometry = void 0 !== t ? t : new Fr()),
                        (this.material =
                          void 0 !== e
                            ? e
                            : new Fo({ color: 16777215 * Math.random() }));
                    }
                    function Vo(t, e) {
                      Ho.call(this, t, e), (this.type = 'LineSegments');
                    }
                    function Go(t, e) {
                      Ho.call(this, t, e), (this.type = 'LineLoop');
                    }
                    function Yo(t) {
                      on.call(this),
                        (this.type = 'PointsMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.map = null),
                        (this.size = 1),
                        (this.sizeAttenuation = !0),
                        (this.lights = !1),
                        this.setValues(t);
                    }
                    function Qo(t, e) {
                      zn.call(this),
                        (this.type = 'Points'),
                        (this.geometry = void 0 !== t ? t : new Fr()),
                        (this.material =
                          void 0 !== e
                            ? e
                            : new Yo({ color: 16777215 * Math.random() }));
                    }
                    function Wo() {
                      zn.call(this), (this.type = 'Group');
                    }
                    function qo(t, e, i, n, r, o, s, a, c) {
                      Ie.call(this, t, e, i, n, r, o, s, a, c),
                        (this.generateMipmaps = !1);
                      var l = this;
                      !(function e() {
                        requestAnimationFrame(e),
                          t.readyState >= t.HAVE_CURRENT_DATA &&
                            (l.needsUpdate = !0);
                      })();
                    }
                    function Xo(t, e, i, n, r, o, s, a, c, l, u, h) {
                      Ie.call(this, null, o, s, a, c, l, n, r, u, h),
                        (this.image = { width: e, height: i }),
                        (this.mipmaps = t),
                        (this.flipY = !1),
                        (this.generateMipmaps = !1);
                    }
                    function Ko(t, e, i, n, r, o, s, a, c, l) {
                      if ((l = void 0 !== l ? l : Pt) !== Pt && l !== Ut)
                        throw new Error(
                          'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat'
                        );
                      void 0 === i && l === Pt && (i = At),
                        void 0 === i && l === Ut && (i = It),
                        Ie.call(this, null, n, r, o, s, a, l, i, c),
                        (this.image = { width: t, height: e }),
                        (this.magFilter = void 0 !== s ? s : mt),
                        (this.minFilter = void 0 !== a ? a : mt),
                        (this.flipY = !1),
                        (this.generateMipmaps = !1);
                    }
                    function Zo(t) {
                      Fr.call(this), (this.type = 'WireframeGeometry');
                      var e,
                        i,
                        n,
                        r,
                        o,
                        s,
                        a,
                        c,
                        l,
                        u,
                        h = [],
                        d = [0, 0],
                        p = {},
                        f = ['a', 'b', 'c'];
                      if (t && t.isGeometry) {
                        var m = t.faces;
                        for (e = 0, n = m.length; e < n; e++) {
                          var g = m[e];
                          for (i = 0; i < 3; i++)
                            (a = g[f[i]]),
                              (c = g[f[(i + 1) % 3]]),
                              (d[0] = Math.min(a, c)),
                              (d[1] = Math.max(a, c)),
                              void 0 === p[(l = d[0] + ',' + d[1])] &&
                                (p[l] = { index1: d[0], index2: d[1] });
                        }
                        for (l in p)
                          (s = p[l]),
                            (u = t.vertices[s.index1]),
                            h.push(u.x, u.y, u.z),
                            (u = t.vertices[s.index2]),
                            h.push(u.x, u.y, u.z);
                      } else if (t && t.isBufferGeometry) {
                        var v, y, w, M, E, b, x;
                        if (((u = new ke()), null !== t.index)) {
                          for (
                            v = t.attributes.position,
                              y = t.index,
                              0 === (w = t.groups).length &&
                                (w = [
                                  { start: 0, count: y.count, materialIndex: 0 }
                                ]),
                              r = 0,
                              o = w.length;
                            r < o;
                            ++r
                          )
                            for (
                              e = E = (M = w[r]).start, n = E + M.count;
                              e < n;
                              e += 3
                            )
                              for (i = 0; i < 3; i++)
                                (a = y.getX(e + i)),
                                  (c = y.getX(e + (i + 1) % 3)),
                                  (d[0] = Math.min(a, c)),
                                  (d[1] = Math.max(a, c)),
                                  void 0 === p[(l = d[0] + ',' + d[1])] &&
                                    (p[l] = { index1: d[0], index2: d[1] });
                          for (l in p)
                            (s = p[l]),
                              u.fromBufferAttribute(v, s.index1),
                              h.push(u.x, u.y, u.z),
                              u.fromBufferAttribute(v, s.index2),
                              h.push(u.x, u.y, u.z);
                        } else
                          for (
                            e = 0, n = (v = t.attributes.position).count / 3;
                            e < n;
                            e++
                          )
                            for (i = 0; i < 3; i++)
                              (b = 3 * e + i),
                                u.fromBufferAttribute(v, b),
                                h.push(u.x, u.y, u.z),
                                (x = 3 * e + (i + 1) % 3),
                                u.fromBufferAttribute(v, x),
                                h.push(u.x, u.y, u.z);
                      }
                      this.addAttribute('position', new kr(h, 3));
                    }
                    function Jo(t, e, i) {
                      Dr.call(this),
                        (this.type = 'ParametricGeometry'),
                        (this.parameters = { func: t, slices: e, stacks: i }),
                        this.fromBufferGeometry(new $o(t, e, i)),
                        this.mergeVertices();
                    }
                    function $o(t, e, i) {
                      Fr.call(this),
                        (this.type = 'ParametricBufferGeometry'),
                        (this.parameters = { func: t, slices: e, stacks: i });
                      var n,
                        r,
                        o = [],
                        s = [],
                        a = [],
                        c = [],
                        l = new ke(),
                        u = new ke(),
                        h = new ke(),
                        d = new ke(),
                        p = new ke(),
                        f = e + 1;
                      for (n = 0; n <= i; n++) {
                        var m = n / i;
                        for (r = 0; r <= e; r++) {
                          var g = r / e;
                          (u = t(g, m, u)),
                            s.push(u.x, u.y, u.z),
                            g - 1e-5 >= 0
                              ? ((h = t(g - 1e-5, m, h)), d.subVectors(u, h))
                              : ((h = t(g + 1e-5, m, h)), d.subVectors(h, u)),
                            m - 1e-5 >= 0
                              ? ((h = t(g, m - 1e-5, h)), p.subVectors(u, h))
                              : ((h = t(g, m + 1e-5, h)), p.subVectors(h, u)),
                            l.crossVectors(d, p).normalize(),
                            a.push(l.x, l.y, l.z),
                            c.push(g, m);
                        }
                      }
                      for (n = 0; n < i; n++)
                        for (r = 0; r < e; r++) {
                          var v = n * f + r,
                            y = n * f + r + 1,
                            w = (n + 1) * f + r + 1,
                            M = (n + 1) * f + r;
                          o.push(v, y, M), o.push(y, w, M);
                        }
                      this.setIndex(o),
                        this.addAttribute('position', new kr(s, 3)),
                        this.addAttribute('normal', new kr(a, 3)),
                        this.addAttribute('uv', new kr(c, 2));
                    }
                    function ts(t, e, i, n) {
                      Dr.call(this),
                        (this.type = 'PolyhedronGeometry'),
                        (this.parameters = {
                          vertices: t,
                          indices: e,
                          radius: i,
                          detail: n
                        }),
                        this.fromBufferGeometry(new es(t, e, i, n)),
                        this.mergeVertices();
                    }
                    function es(t, e, i, n) {
                      Fr.call(this),
                        (this.type = 'PolyhedronBufferGeometry'),
                        (this.parameters = {
                          vertices: t,
                          indices: e,
                          radius: i,
                          detail: n
                        }),
                        (i = i || 1);
                      var r = [],
                        o = [];
                      function s(t, e, i, n) {
                        var r,
                          o,
                          s = Math.pow(2, n),
                          c = [];
                        for (r = 0; r <= s; r++) {
                          c[r] = [];
                          var l = t.clone().lerp(i, r / s),
                            u = e.clone().lerp(i, r / s),
                            h = s - r;
                          for (o = 0; o <= h; o++)
                            c[r][o] =
                              0 === o && r === s ? l : l.clone().lerp(u, o / h);
                        }
                        for (r = 0; r < s; r++)
                          for (o = 0; o < 2 * (s - r) - 1; o++) {
                            var d = Math.floor(o / 2);
                            o % 2 == 0
                              ? (a(c[r][d + 1]), a(c[r + 1][d]), a(c[r][d]))
                              : (a(c[r][d + 1]),
                                a(c[r + 1][d + 1]),
                                a(c[r + 1][d]));
                          }
                      }
                      function a(t) {
                        r.push(t.x, t.y, t.z);
                      }
                      function c(e, i) {
                        var n = 3 * e;
                        (i.x = t[n + 0]), (i.y = t[n + 1]), (i.z = t[n + 2]);
                      }
                      function l(t, e, i, n) {
                        n < 0 && 1 === t.x && (o[e] = t.x - 1),
                          0 === i.x &&
                            0 === i.z &&
                            (o[e] = n / 2 / Math.PI + 0.5);
                      }
                      function u(t) {
                        return Math.atan2(t.z, -t.x);
                      }
                      !(function(t) {
                        for (
                          var i = new ke(), n = new ke(), r = new ke(), o = 0;
                          o < e.length;
                          o += 3
                        )
                          c(e[o + 0], i),
                            c(e[o + 1], n),
                            c(e[o + 2], r),
                            s(i, n, r, t);
                      })((n = n || 0)),
                        (function(t) {
                          for (var e = new ke(), i = 0; i < r.length; i += 3)
                            (e.x = r[i + 0]),
                              (e.y = r[i + 1]),
                              (e.z = r[i + 2]),
                              e.normalize().multiplyScalar(t),
                              (r[i + 0] = e.x),
                              (r[i + 1] = e.y),
                              (r[i + 2] = e.z);
                        })(i),
                        (function() {
                          for (var t = new ke(), e = 0; e < r.length; e += 3) {
                            (t.x = r[e + 0]),
                              (t.y = r[e + 1]),
                              (t.z = r[e + 2]);
                            var i = u(t) / 2 / Math.PI + 0.5,
                              n = ((s = t),
                              Math.atan2(
                                -s.y,
                                Math.sqrt(s.x * s.x + s.z * s.z)
                              ) /
                                Math.PI +
                                0.5);
                            o.push(i, 1 - n);
                          }
                          var s;
                          (function() {
                            for (
                              var t = new ke(),
                                e = new ke(),
                                i = new ke(),
                                n = new ke(),
                                s = new he(),
                                a = new he(),
                                c = new he(),
                                h = 0,
                                d = 0;
                              h < r.length;
                              h += 9, d += 6
                            ) {
                              t.set(r[h + 0], r[h + 1], r[h + 2]),
                                e.set(r[h + 3], r[h + 4], r[h + 5]),
                                i.set(r[h + 6], r[h + 7], r[h + 8]),
                                s.set(o[d + 0], o[d + 1]),
                                a.set(o[d + 2], o[d + 3]),
                                c.set(o[d + 4], o[d + 5]),
                                n
                                  .copy(t)
                                  .add(e)
                                  .add(i)
                                  .divideScalar(3);
                              var p = u(n);
                              l(s, d + 0, t, p),
                                l(a, d + 2, e, p),
                                l(c, d + 4, i, p);
                            }
                          })(),
                            (function() {
                              for (var t = 0; t < o.length; t += 6) {
                                var e = o[t + 0],
                                  i = o[t + 2],
                                  n = o[t + 4],
                                  r = Math.max(e, i, n),
                                  s = Math.min(e, i, n);
                                r > 0.9 &&
                                  s < 0.1 &&
                                  (e < 0.2 && (o[t + 0] += 1),
                                  i < 0.2 && (o[t + 2] += 1),
                                  n < 0.2 && (o[t + 4] += 1));
                              }
                            })();
                        })(),
                        this.addAttribute('position', new kr(r, 3)),
                        this.addAttribute('normal', new kr(r.slice(), 3)),
                        this.addAttribute('uv', new kr(o, 2)),
                        0 === n
                          ? this.computeVertexNormals()
                          : this.normalizeNormals();
                    }
                    function is(t, e) {
                      Dr.call(this),
                        (this.type = 'TetrahedronGeometry'),
                        (this.parameters = { radius: t, detail: e }),
                        this.fromBufferGeometry(new ns(t, e)),
                        this.mergeVertices();
                    }
                    function ns(t, e) {
                      es.call(
                        this,
                        [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1],
                        [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1],
                        t,
                        e
                      ),
                        (this.type = 'TetrahedronBufferGeometry'),
                        (this.parameters = { radius: t, detail: e });
                    }
                    function rs(t, e) {
                      Dr.call(this),
                        (this.type = 'OctahedronGeometry'),
                        (this.parameters = { radius: t, detail: e }),
                        this.fromBufferGeometry(new os(t, e)),
                        this.mergeVertices();
                    }
                    function os(t, e) {
                      es.call(
                        this,
                        [
                          1,
                          0,
                          0,
                          -1,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          -1,
                          0,
                          0,
                          0,
                          1,
                          0,
                          0,
                          -1
                        ],
                        [
                          0,
                          2,
                          4,
                          0,
                          4,
                          3,
                          0,
                          3,
                          5,
                          0,
                          5,
                          2,
                          1,
                          2,
                          5,
                          1,
                          5,
                          3,
                          1,
                          3,
                          4,
                          1,
                          4,
                          2
                        ],
                        t,
                        e
                      ),
                        (this.type = 'OctahedronBufferGeometry'),
                        (this.parameters = { radius: t, detail: e });
                    }
                    function ss(t, e) {
                      Dr.call(this),
                        (this.type = 'IcosahedronGeometry'),
                        (this.parameters = { radius: t, detail: e }),
                        this.fromBufferGeometry(new as(t, e)),
                        this.mergeVertices();
                    }
                    function as(t, e) {
                      var i = (1 + Math.sqrt(5)) / 2,
                        n = [
                          -1,
                          i,
                          0,
                          1,
                          i,
                          0,
                          -1,
                          -i,
                          0,
                          1,
                          -i,
                          0,
                          0,
                          -1,
                          i,
                          0,
                          1,
                          i,
                          0,
                          -1,
                          -i,
                          0,
                          1,
                          -i,
                          i,
                          0,
                          -1,
                          i,
                          0,
                          1,
                          -i,
                          0,
                          -1,
                          -i,
                          0,
                          1
                        ];
                      es.call(
                        this,
                        n,
                        [
                          0,
                          11,
                          5,
                          0,
                          5,
                          1,
                          0,
                          1,
                          7,
                          0,
                          7,
                          10,
                          0,
                          10,
                          11,
                          1,
                          5,
                          9,
                          5,
                          11,
                          4,
                          11,
                          10,
                          2,
                          10,
                          7,
                          6,
                          7,
                          1,
                          8,
                          3,
                          9,
                          4,
                          3,
                          4,
                          2,
                          3,
                          2,
                          6,
                          3,
                          6,
                          8,
                          3,
                          8,
                          9,
                          4,
                          9,
                          5,
                          2,
                          4,
                          11,
                          6,
                          2,
                          10,
                          8,
                          6,
                          7,
                          9,
                          8,
                          1
                        ],
                        t,
                        e
                      ),
                        (this.type = 'IcosahedronBufferGeometry'),
                        (this.parameters = { radius: t, detail: e });
                    }
                    function cs(t, e) {
                      Dr.call(this),
                        (this.type = 'DodecahedronGeometry'),
                        (this.parameters = { radius: t, detail: e }),
                        this.fromBufferGeometry(new ls(t, e)),
                        this.mergeVertices();
                    }
                    function ls(t, e) {
                      var i = (1 + Math.sqrt(5)) / 2,
                        n = 1 / i,
                        r = [
                          -1,
                          -1,
                          -1,
                          -1,
                          -1,
                          1,
                          -1,
                          1,
                          -1,
                          -1,
                          1,
                          1,
                          1,
                          -1,
                          -1,
                          1,
                          -1,
                          1,
                          1,
                          1,
                          -1,
                          1,
                          1,
                          1,
                          0,
                          -n,
                          -i,
                          0,
                          -n,
                          i,
                          0,
                          n,
                          -i,
                          0,
                          n,
                          i,
                          -n,
                          -i,
                          0,
                          -n,
                          i,
                          0,
                          n,
                          -i,
                          0,
                          n,
                          i,
                          0,
                          -i,
                          0,
                          -n,
                          i,
                          0,
                          -n,
                          -i,
                          0,
                          n,
                          i,
                          0,
                          n
                        ];
                      es.call(
                        this,
                        r,
                        [
                          3,
                          11,
                          7,
                          3,
                          7,
                          15,
                          3,
                          15,
                          13,
                          7,
                          19,
                          17,
                          7,
                          17,
                          6,
                          7,
                          6,
                          15,
                          17,
                          4,
                          8,
                          17,
                          8,
                          10,
                          17,
                          10,
                          6,
                          8,
                          0,
                          16,
                          8,
                          16,
                          2,
                          8,
                          2,
                          10,
                          0,
                          12,
                          1,
                          0,
                          1,
                          18,
                          0,
                          18,
                          16,
                          6,
                          10,
                          2,
                          6,
                          2,
                          13,
                          6,
                          13,
                          15,
                          2,
                          16,
                          18,
                          2,
                          18,
                          3,
                          2,
                          3,
                          13,
                          18,
                          1,
                          9,
                          18,
                          9,
                          11,
                          18,
                          11,
                          3,
                          4,
                          14,
                          12,
                          4,
                          12,
                          0,
                          4,
                          0,
                          8,
                          11,
                          9,
                          5,
                          11,
                          5,
                          19,
                          11,
                          19,
                          7,
                          19,
                          5,
                          14,
                          19,
                          14,
                          4,
                          19,
                          4,
                          17,
                          1,
                          12,
                          14,
                          1,
                          14,
                          5,
                          1,
                          5,
                          9
                        ],
                        t,
                        e
                      ),
                        (this.type = 'DodecahedronBufferGeometry'),
                        (this.parameters = { radius: t, detail: e });
                    }
                    function us(t, e, i, n, r, o) {
                      Dr.call(this),
                        (this.type = 'TubeGeometry'),
                        (this.parameters = {
                          path: t,
                          tubularSegments: e,
                          radius: i,
                          radialSegments: n,
                          closed: r
                        }),
                        void 0 !== o &&
                          console.warn(
                            'THREE.TubeGeometry: taper has been removed.'
                          );
                      var s = new hs(t, e, i, n, r);
                      (this.tangents = s.tangents),
                        (this.normals = s.normals),
                        (this.binormals = s.binormals),
                        this.fromBufferGeometry(s),
                        this.mergeVertices();
                    }
                    function hs(t, e, i, n, r) {
                      Fr.call(this),
                        (this.type = 'TubeBufferGeometry'),
                        (this.parameters = {
                          path: t,
                          tubularSegments: e,
                          radius: i,
                          radialSegments: n,
                          closed: r
                        }),
                        (e = e || 64),
                        (i = i || 1),
                        (n = n || 8),
                        (r = r || !1);
                      var o = t.computeFrenetFrames(e, r);
                      (this.tangents = o.tangents),
                        (this.normals = o.normals),
                        (this.binormals = o.binormals);
                      var s,
                        a,
                        c = new ke(),
                        l = new ke(),
                        u = new he(),
                        h = [],
                        d = [],
                        p = [],
                        f = [];
                      function m(r) {
                        var s = t.getPointAt(r / e),
                          u = o.normals[r],
                          p = o.binormals[r];
                        for (a = 0; a <= n; a++) {
                          var f = a / n * Math.PI * 2,
                            m = Math.sin(f),
                            g = -Math.cos(f);
                          (l.x = g * u.x + m * p.x),
                            (l.y = g * u.y + m * p.y),
                            (l.z = g * u.z + m * p.z),
                            l.normalize(),
                            d.push(l.x, l.y, l.z),
                            (c.x = s.x + i * l.x),
                            (c.y = s.y + i * l.y),
                            (c.z = s.z + i * l.z),
                            h.push(c.x, c.y, c.z);
                        }
                      }
                      !(function() {
                        for (s = 0; s < e; s++) m(s);
                        m(!1 === r ? e : 0),
                          (function() {
                            for (s = 0; s <= e; s++)
                              for (a = 0; a <= n; a++)
                                (u.x = s / e), (u.y = a / n), p.push(u.x, u.y);
                          })(),
                          (function() {
                            for (a = 1; a <= e; a++)
                              for (s = 1; s <= n; s++) {
                                var t = (n + 1) * (a - 1) + (s - 1),
                                  i = (n + 1) * a + (s - 1),
                                  r = (n + 1) * a + s,
                                  o = (n + 1) * (a - 1) + s;
                                f.push(t, i, o), f.push(i, r, o);
                              }
                          })();
                      })(),
                        this.setIndex(f),
                        this.addAttribute('position', new kr(h, 3)),
                        this.addAttribute('normal', new kr(d, 3)),
                        this.addAttribute('uv', new kr(p, 2));
                    }
                    function ds(t, e, i, n, r, o, s) {
                      Dr.call(this),
                        (this.type = 'TorusKnotGeometry'),
                        (this.parameters = {
                          radius: t,
                          tube: e,
                          tubularSegments: i,
                          radialSegments: n,
                          p: r,
                          q: o
                        }),
                        void 0 !== s &&
                          console.warn(
                            'THREE.TorusKnotGeometry: heightScale has been deprecated. Use .scale( x, y, z ) instead.'
                          ),
                        this.fromBufferGeometry(new ps(t, e, i, n, r, o)),
                        this.mergeVertices();
                    }
                    function ps(t, e, i, n, r, o) {
                      Fr.call(this),
                        (this.type = 'TorusKnotBufferGeometry'),
                        (this.parameters = {
                          radius: t,
                          tube: e,
                          tubularSegments: i,
                          radialSegments: n,
                          p: r,
                          q: o
                        }),
                        (t = t || 100),
                        (e = e || 40),
                        (i = Math.floor(i) || 64),
                        (n = Math.floor(n) || 8),
                        (r = r || 2),
                        (o = o || 3);
                      var s,
                        a,
                        c = [],
                        l = [],
                        u = [],
                        h = [],
                        d = new ke(),
                        p = new ke(),
                        f = new ke(),
                        m = new ke(),
                        g = new ke(),
                        v = new ke(),
                        y = new ke();
                      for (s = 0; s <= i; ++s) {
                        var w = s / i * r * Math.PI * 2;
                        for (
                          N(w, r, o, t, f),
                            N(w + 0.01, r, o, t, m),
                            v.subVectors(m, f),
                            y.addVectors(m, f),
                            g.crossVectors(v, y),
                            y.crossVectors(g, v),
                            g.normalize(),
                            y.normalize(),
                            a = 0;
                          a <= n;
                          ++a
                        ) {
                          var M = a / n * Math.PI * 2,
                            E = -e * Math.cos(M),
                            b = e * Math.sin(M);
                          (d.x = f.x + (E * y.x + b * g.x)),
                            (d.y = f.y + (E * y.y + b * g.y)),
                            (d.z = f.z + (E * y.z + b * g.z)),
                            l.push(d.x, d.y, d.z),
                            p.subVectors(d, f).normalize(),
                            u.push(p.x, p.y, p.z),
                            h.push(s / i),
                            h.push(a / n);
                        }
                      }
                      for (a = 1; a <= i; a++)
                        for (s = 1; s <= n; s++) {
                          var x = (n + 1) * (a - 1) + (s - 1),
                            A = (n + 1) * a + (s - 1),
                            T = (n + 1) * a + s,
                            L = (n + 1) * (a - 1) + s;
                          c.push(x, A, L), c.push(A, T, L);
                        }
                      function N(t, e, i, n, r) {
                        var o = Math.cos(t),
                          s = Math.sin(t),
                          a = i / e * t,
                          c = Math.cos(a);
                        (r.x = n * (2 + c) * 0.5 * o),
                          (r.y = n * (2 + c) * s * 0.5),
                          (r.z = n * Math.sin(a) * 0.5);
                      }
                      this.setIndex(c),
                        this.addAttribute('position', new kr(l, 3)),
                        this.addAttribute('normal', new kr(u, 3)),
                        this.addAttribute('uv', new kr(h, 2));
                    }
                    function fs(t, e, i, n, r) {
                      Dr.call(this),
                        (this.type = 'TorusGeometry'),
                        (this.parameters = {
                          radius: t,
                          tube: e,
                          radialSegments: i,
                          tubularSegments: n,
                          arc: r
                        }),
                        this.fromBufferGeometry(new ms(t, e, i, n, r)),
                        this.mergeVertices();
                    }
                    function ms(t, e, i, n, r) {
                      Fr.call(this),
                        (this.type = 'TorusBufferGeometry'),
                        (this.parameters = {
                          radius: t,
                          tube: e,
                          radialSegments: i,
                          tubularSegments: n,
                          arc: r
                        }),
                        (t = t || 100),
                        (e = e || 40),
                        (i = Math.floor(i) || 8),
                        (n = Math.floor(n) || 6),
                        (r = r || 2 * Math.PI);
                      var o,
                        s,
                        a = [],
                        c = [],
                        l = [],
                        u = [],
                        h = new ke(),
                        d = new ke(),
                        p = new ke();
                      for (o = 0; o <= i; o++)
                        for (s = 0; s <= n; s++) {
                          var f = s / n * r,
                            m = o / i * Math.PI * 2;
                          (d.x = (t + e * Math.cos(m)) * Math.cos(f)),
                            (d.y = (t + e * Math.cos(m)) * Math.sin(f)),
                            (d.z = e * Math.sin(m)),
                            c.push(d.x, d.y, d.z),
                            (h.x = t * Math.cos(f)),
                            (h.y = t * Math.sin(f)),
                            p.subVectors(d, h).normalize(),
                            l.push(p.x, p.y, p.z),
                            u.push(s / n),
                            u.push(o / i);
                        }
                      for (o = 1; o <= i; o++)
                        for (s = 1; s <= n; s++) {
                          var g = (n + 1) * o + s - 1,
                            v = (n + 1) * (o - 1) + s - 1,
                            y = (n + 1) * (o - 1) + s,
                            w = (n + 1) * o + s;
                          a.push(g, v, w), a.push(v, y, w);
                        }
                      this.setIndex(a),
                        this.addAttribute('position', new kr(c, 3)),
                        this.addAttribute('normal', new kr(l, 3)),
                        this.addAttribute('uv', new kr(u, 2));
                    }
                    (Do.prototype = Object.assign(Object.create(Pn.prototype), {
                      constructor: Do,
                      isArrayCamera: !0
                    })),
                      (_o.prototype.isFogExp2 = !0),
                      (_o.prototype.clone = function() {
                        return new _o(this.color.getHex(), this.density);
                      }),
                      (_o.prototype.toJSON = function(t) {
                        return {
                          type: 'FogExp2',
                          color: this.color.getHex(),
                          density: this.density
                        };
                      }),
                      (Io.prototype.isFog = !0),
                      (Io.prototype.clone = function() {
                        return new Io(this.color.getHex(), this.near, this.far);
                      }),
                      (Io.prototype.toJSON = function(t) {
                        return {
                          type: 'Fog',
                          color: this.color.getHex(),
                          near: this.near,
                          far: this.far
                        };
                      }),
                      (jo.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: jo,
                          copy: function(t, e) {
                            return (
                              zn.prototype.copy.call(this, t, e),
                              null !== t.background &&
                                (this.background = t.background.clone()),
                              null !== t.fog && (this.fog = t.fog.clone()),
                              null !== t.overrideMaterial &&
                                (this.overrideMaterial = t.overrideMaterial.clone()),
                              (this.autoUpdate = t.autoUpdate),
                              (this.matrixAutoUpdate = t.matrixAutoUpdate),
                              this
                            );
                          },
                          toJSON: function(t) {
                            var e = zn.prototype.toJSON.call(this, t);
                            return (
                              null !== this.background &&
                                (e.object.background = this.background.toJSON(
                                  t
                                )),
                              null !== this.fog &&
                                (e.object.fog = this.fog.toJSON()),
                              e
                            );
                          }
                        }
                      )),
                      (Oo.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: Oo,
                          isLensFlare: !0,
                          copy: function(t) {
                            zn.prototype.copy.call(this, t),
                              this.positionScreen.copy(t.positionScreen),
                              (this.customUpdateCallback =
                                t.customUpdateCallback);
                            for (var e = 0, i = t.lensFlares.length; e < i; e++)
                              this.lensFlares.push(t.lensFlares[e]);
                            return this;
                          },
                          add: function(t, e, i, n, r, o) {
                            void 0 === e && (e = -1),
                              void 0 === i && (i = 0),
                              void 0 === o && (o = 1),
                              void 0 === r && (r = new Ni(16777215)),
                              void 0 === n && (n = b),
                              (i = Math.min(i, Math.max(0, i))),
                              this.lensFlares.push({
                                texture: t,
                                size: e,
                                distance: i,
                                x: 0,
                                y: 0,
                                z: 0,
                                scale: 1,
                                rotation: 0,
                                opacity: o,
                                color: r,
                                blending: n
                              });
                          },
                          updateLensFlares: function() {
                            var t,
                              e,
                              i = this.lensFlares.length,
                              n = 2 * -this.positionScreen.x,
                              r = 2 * -this.positionScreen.y;
                            for (t = 0; t < i; t++)
                              ((e = this.lensFlares[t]).x =
                                this.positionScreen.x + n * e.distance),
                                (e.y = this.positionScreen.y + r * e.distance),
                                (e.wantedRotation = e.x * Math.PI * 0.25),
                                (e.rotation +=
                                  0.25 * (e.wantedRotation - e.rotation));
                          }
                        }
                      )),
                      (Ro.prototype = Object.create(on.prototype)),
                      (Ro.prototype.constructor = Ro),
                      (Ro.prototype.isSpriteMaterial = !0),
                      (Ro.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.color.copy(t.color),
                          (this.map = t.map),
                          (this.rotation = t.rotation),
                          this
                        );
                      }),
                      (zo.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: zo,
                          isSprite: !0,
                          raycast: ((no = new ke()),
                          (ro = new ke()),
                          (oo = new ke()),
                          function(t, e) {
                            ro.setFromMatrixPosition(this.matrixWorld),
                              t.ray.closestPointToPoint(ro, no),
                              oo.setFromMatrixScale(this.matrixWorld);
                            var i = oo.x * oo.y / 4;
                            if (!(ro.distanceToSquared(no) > i)) {
                              var n = t.ray.origin.distanceTo(no);
                              n < t.near ||
                                n > t.far ||
                                e.push({
                                  distance: n,
                                  point: no.clone(),
                                  face: null,
                                  object: this
                                });
                            }
                          }),
                          clone: function() {
                            return new this.constructor(this.material).copy(
                              this
                            );
                          }
                        }
                      )),
                      (ko.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: ko,
                          copy: function(t) {
                            zn.prototype.copy.call(this, t, !1);
                            for (
                              var e = t.levels, i = 0, n = e.length;
                              i < n;
                              i++
                            ) {
                              var r = e[i];
                              this.addLevel(r.object.clone(), r.distance);
                            }
                            return this;
                          },
                          addLevel: function(t, e) {
                            void 0 === e && (e = 0), (e = Math.abs(e));
                            for (
                              var i = this.levels, n = 0;
                              n < i.length && !(e < i[n].distance);
                              n++
                            );
                            i.splice(n, 0, { distance: e, object: t }),
                              this.add(t);
                          },
                          getObjectForDistance: function(t) {
                            for (
                              var e = this.levels, i = 1, n = e.length;
                              i < n && !(t < e[i].distance);
                              i++
                            );
                            return e[i - 1].object;
                          },
                          raycast: ((co = new ke()),
                          function(t, e) {
                            co.setFromMatrixPosition(this.matrixWorld);
                            var i = t.ray.origin.distanceTo(co);
                            this.getObjectForDistance(i).raycast(t, e);
                          }),
                          update: ((so = new ke()),
                          (ao = new ke()),
                          function(t) {
                            var e = this.levels;
                            if (e.length > 1) {
                              so.setFromMatrixPosition(t.matrixWorld),
                                ao.setFromMatrixPosition(this.matrixWorld);
                              var i = so.distanceTo(ao);
                              e[0].object.visible = !0;
                              for (
                                var n = 1, r = e.length;
                                n < r && i >= e[n].distance;
                                n++
                              )
                                (e[n - 1].object.visible = !1),
                                  (e[n].object.visible = !0);
                              for (; n < r; n++) e[n].object.visible = !1;
                            }
                          }),
                          toJSON: function(t) {
                            var e = zn.prototype.toJSON.call(this, t);
                            e.object.levels = [];
                            for (
                              var i = this.levels, n = 0, r = i.length;
                              n < r;
                              n++
                            ) {
                              var o = i[n];
                              e.object.levels.push({
                                object: o.object.uuid,
                                distance: o.distance
                              });
                            }
                            return e;
                          }
                        }
                      )),
                      Object.assign(Bo.prototype, {
                        calculateInverses: function() {
                          this.boneInverses = [];
                          for (var t = 0, e = this.bones.length; t < e; t++) {
                            var i = new Be();
                            this.bones[t] &&
                              i.getInverse(this.bones[t].matrixWorld),
                              this.boneInverses.push(i);
                          }
                        },
                        pose: function() {
                          var t, e, i;
                          for (e = 0, i = this.bones.length; e < i; e++)
                            (t = this.bones[e]) &&
                              t.matrixWorld.getInverse(this.boneInverses[e]);
                          for (e = 0, i = this.bones.length; e < i; e++)
                            (t = this.bones[e]) &&
                              (t.parent && t.parent.isBone
                                ? (t.matrix.getInverse(t.parent.matrixWorld),
                                  t.matrix.multiply(t.matrixWorld))
                                : t.matrix.copy(t.matrixWorld),
                              t.matrix.decompose(
                                t.position,
                                t.quaternion,
                                t.scale
                              ));
                        },
                        update: ((lo = new Be()),
                        (uo = new Be()),
                        function() {
                          for (
                            var t = this.bones,
                              e = this.boneInverses,
                              i = this.boneMatrices,
                              n = this.boneTexture,
                              r = 0,
                              o = t.length;
                            r < o;
                            r++
                          ) {
                            var s = t[r] ? t[r].matrixWorld : uo;
                            lo.multiplyMatrices(s, e[r]), lo.toArray(i, 16 * r);
                          }
                          void 0 !== n && (n.needsUpdate = !0);
                        }),
                        clone: function() {
                          return new Bo(this.bones, this.boneInverses);
                        }
                      }),
                      (Po.prototype = Object.assign(
                        Object.create(zn.prototype),
                        { constructor: Po, isBone: !0 }
                      )),
                      (Uo.prototype = Object.assign(
                        Object.create(Kr.prototype),
                        {
                          constructor: Uo,
                          isSkinnedMesh: !0,
                          initBones: function() {
                            var t,
                              e,
                              i,
                              n,
                              r = [];
                            if (
                              this.geometry &&
                              void 0 !== this.geometry.bones
                            ) {
                              for (
                                i = 0, n = this.geometry.bones.length;
                                i < n;
                                i++
                              )
                                (e = this.geometry.bones[i]),
                                  (t = new Po()),
                                  r.push(t),
                                  (t.name = e.name),
                                  t.position.fromArray(e.pos),
                                  t.quaternion.fromArray(e.rotq),
                                  void 0 !== e.scl && t.scale.fromArray(e.scl);
                              for (
                                i = 0, n = this.geometry.bones.length;
                                i < n;
                                i++
                              )
                                -1 !== (e = this.geometry.bones[i]).parent &&
                                null !== e.parent &&
                                void 0 !== r[e.parent]
                                  ? r[e.parent].add(r[i])
                                  : this.add(r[i]);
                            }
                            return this.updateMatrixWorld(!0), r;
                          },
                          bind: function(t, e) {
                            (this.skeleton = t),
                              void 0 === e &&
                                (this.updateMatrixWorld(!0),
                                this.skeleton.calculateInverses(),
                                (e = this.matrixWorld)),
                              this.bindMatrix.copy(e),
                              this.bindMatrixInverse.getInverse(e);
                          },
                          pose: function() {
                            this.skeleton.pose();
                          },
                          normalizeSkinWeights: function() {
                            var t, e;
                            if (this.geometry && this.geometry.isGeometry)
                              for (
                                e = 0;
                                e < this.geometry.skinWeights.length;
                                e++
                              ) {
                                var i = this.geometry.skinWeights[e];
                                (t = 1 / i.lengthManhattan()) !== 1 / 0
                                  ? i.multiplyScalar(t)
                                  : i.set(1, 0, 0, 0);
                              }
                            else if (
                              this.geometry &&
                              this.geometry.isBufferGeometry
                            ) {
                              var n = new je(),
                                r = this.geometry.attributes.skinWeight;
                              for (e = 0; e < r.count; e++)
                                (n.x = r.getX(e)),
                                  (n.y = r.getY(e)),
                                  (n.z = r.getZ(e)),
                                  (n.w = r.getW(e)),
                                  (t = 1 / n.lengthManhattan()) !== 1 / 0
                                    ? n.multiplyScalar(t)
                                    : n.set(1, 0, 0, 0),
                                  r.setXYZW(e, n.x, n.y, n.z, n.w);
                            }
                          },
                          updateMatrixWorld: function(t) {
                            Kr.prototype.updateMatrixWorld.call(this, t),
                              'attached' === this.bindMode
                                ? this.bindMatrixInverse.getInverse(
                                    this.matrixWorld
                                  )
                                : 'detached' === this.bindMode
                                  ? this.bindMatrixInverse.getInverse(
                                      this.bindMatrix
                                    )
                                  : console.warn(
                                      'THREE.SkinnedMesh: Unrecognized bindMode: ' +
                                        this.bindMode
                                    );
                          },
                          clone: function() {
                            return new this.constructor(
                              this.geometry,
                              this.material
                            ).copy(this);
                          }
                        }
                      )),
                      (Fo.prototype = Object.create(on.prototype)),
                      (Fo.prototype.constructor = Fo),
                      (Fo.prototype.isLineBasicMaterial = !0),
                      (Fo.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.color.copy(t.color),
                          (this.linewidth = t.linewidth),
                          (this.linecap = t.linecap),
                          (this.linejoin = t.linejoin),
                          this
                        );
                      }),
                      (Ho.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: Ho,
                          isLine: !0,
                          raycast: ((ho = new Be()),
                          (po = new Wr()),
                          (fo = new un()),
                          function(t, e) {
                            var i = t.linePrecision,
                              n = i * i,
                              r = this.geometry,
                              o = this.matrixWorld;
                            if (
                              (null === r.boundingSphere &&
                                r.computeBoundingSphere(),
                              fo.copy(r.boundingSphere),
                              fo.applyMatrix4(o),
                              !1 !== t.ray.intersectsSphere(fo))
                            ) {
                              ho.getInverse(o), po.copy(t.ray).applyMatrix4(ho);
                              var s = new ke(),
                                a = new ke(),
                                c = new ke(),
                                l = new ke(),
                                u = this && this.isLineSegments ? 2 : 1;
                              if (r.isBufferGeometry) {
                                var h = r.index,
                                  d = r.attributes.position.array;
                                if (null !== h)
                                  for (
                                    var p = h.array, f = 0, m = p.length - 1;
                                    f < m;
                                    f += u
                                  ) {
                                    var g = p[f],
                                      v = p[f + 1];
                                    s.fromArray(d, 3 * g),
                                      a.fromArray(d, 3 * v),
                                      po.distanceSqToSegment(s, a, l, c) > n ||
                                        (l.applyMatrix4(this.matrixWorld),
                                        (M = t.ray.origin.distanceTo(l)) <
                                          t.near ||
                                          M > t.far ||
                                          e.push({
                                            distance: M,
                                            point: c
                                              .clone()
                                              .applyMatrix4(this.matrixWorld),
                                            index: f,
                                            face: null,
                                            faceIndex: null,
                                            object: this
                                          }));
                                  }
                                else
                                  for (
                                    f = 0, m = d.length / 3 - 1;
                                    f < m;
                                    f += u
                                  )
                                    s.fromArray(d, 3 * f),
                                      a.fromArray(d, 3 * f + 3),
                                      po.distanceSqToSegment(s, a, l, c) > n ||
                                        (l.applyMatrix4(this.matrixWorld),
                                        (M = t.ray.origin.distanceTo(l)) <
                                          t.near ||
                                          M > t.far ||
                                          e.push({
                                            distance: M,
                                            point: c
                                              .clone()
                                              .applyMatrix4(this.matrixWorld),
                                            index: f,
                                            face: null,
                                            faceIndex: null,
                                            object: this
                                          }));
                              } else if (r.isGeometry) {
                                var y = r.vertices,
                                  w = y.length;
                                for (f = 0; f < w - 1; f += u) {
                                  var M;
                                  po.distanceSqToSegment(y[f], y[f + 1], l, c) >
                                    n ||
                                    (l.applyMatrix4(this.matrixWorld),
                                    (M = t.ray.origin.distanceTo(l)) < t.near ||
                                      M > t.far ||
                                      e.push({
                                        distance: M,
                                        point: c
                                          .clone()
                                          .applyMatrix4(this.matrixWorld),
                                        index: f,
                                        face: null,
                                        faceIndex: null,
                                        object: this
                                      }));
                                }
                              }
                            }
                          }),
                          clone: function() {
                            return new this.constructor(
                              this.geometry,
                              this.material
                            ).copy(this);
                          }
                        }
                      )),
                      (Vo.prototype = Object.assign(
                        Object.create(Ho.prototype),
                        { constructor: Vo, isLineSegments: !0 }
                      )),
                      (Go.prototype = Object.assign(
                        Object.create(Ho.prototype),
                        { constructor: Go, isLineLoop: !0 }
                      )),
                      (Yo.prototype = Object.create(on.prototype)),
                      (Yo.prototype.constructor = Yo),
                      (Yo.prototype.isPointsMaterial = !0),
                      (Yo.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.color.copy(t.color),
                          (this.map = t.map),
                          (this.size = t.size),
                          (this.sizeAttenuation = t.sizeAttenuation),
                          this
                        );
                      }),
                      (Qo.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: Qo,
                          isPoints: !0,
                          raycast: ((mo = new Be()),
                          (go = new Wr()),
                          (vo = new un()),
                          function(t, e) {
                            var i = this,
                              n = this.geometry,
                              r = this.matrixWorld,
                              o = t.params.Points.threshold;
                            if (
                              (null === n.boundingSphere &&
                                n.computeBoundingSphere(),
                              vo.copy(n.boundingSphere),
                              vo.applyMatrix4(r),
                              (vo.radius += o),
                              !1 !== t.ray.intersectsSphere(vo))
                            ) {
                              mo.getInverse(r), go.copy(t.ray).applyMatrix4(mo);
                              var s =
                                  o /
                                  ((this.scale.x +
                                    this.scale.y +
                                    this.scale.z) /
                                    3),
                                a = s * s,
                                c = new ke();
                              if (n.isBufferGeometry) {
                                var l = n.index,
                                  u = n.attributes.position.array;
                                if (null !== l)
                                  for (
                                    var h = l.array, d = 0, p = h.length;
                                    d < p;
                                    d++
                                  ) {
                                    var f = h[d];
                                    c.fromArray(u, 3 * f), v(c, f);
                                  }
                                else {
                                  d = 0;
                                  for (var m = u.length / 3; d < m; d++)
                                    c.fromArray(u, 3 * d), v(c, d);
                                }
                              } else {
                                var g = n.vertices;
                                for (d = 0, m = g.length; d < m; d++)
                                  v(g[d], d);
                              }
                            }
                            function v(n, o) {
                              var s = go.distanceSqToPoint(n);
                              if (s < a) {
                                var c = go.closestPointToPoint(n);
                                c.applyMatrix4(r);
                                var l = t.ray.origin.distanceTo(c);
                                if (l < t.near || l > t.far) return;
                                e.push({
                                  distance: l,
                                  distanceToRay: Math.sqrt(s),
                                  point: c.clone(),
                                  index: o,
                                  face: null,
                                  object: i
                                });
                              }
                            }
                          }),
                          clone: function() {
                            return new this.constructor(
                              this.geometry,
                              this.material
                            ).copy(this);
                          }
                        }
                      )),
                      (Wo.prototype = Object.assign(
                        Object.create(zn.prototype),
                        { constructor: Wo }
                      )),
                      (qo.prototype = Object.create(Ie.prototype)),
                      (qo.prototype.constructor = qo),
                      (Xo.prototype = Object.create(Ie.prototype)),
                      (Xo.prototype.constructor = Xo),
                      (Xo.prototype.isCompressedTexture = !0),
                      (Ko.prototype = Object.create(Ie.prototype)),
                      (Ko.prototype.constructor = Ko),
                      (Ko.prototype.isDepthTexture = !0),
                      (Zo.prototype = Object.create(Fr.prototype)),
                      (Zo.prototype.constructor = Zo),
                      (Jo.prototype = Object.create(Dr.prototype)),
                      (Jo.prototype.constructor = Jo),
                      ($o.prototype = Object.create(Fr.prototype)),
                      ($o.prototype.constructor = $o),
                      (ts.prototype = Object.create(Dr.prototype)),
                      (ts.prototype.constructor = ts),
                      (es.prototype = Object.create(Fr.prototype)),
                      (es.prototype.constructor = es),
                      (is.prototype = Object.create(Dr.prototype)),
                      (is.prototype.constructor = is),
                      (ns.prototype = Object.create(es.prototype)),
                      (ns.prototype.constructor = ns),
                      (rs.prototype = Object.create(Dr.prototype)),
                      (rs.prototype.constructor = rs),
                      (os.prototype = Object.create(es.prototype)),
                      (os.prototype.constructor = os),
                      (ss.prototype = Object.create(Dr.prototype)),
                      (ss.prototype.constructor = ss),
                      (as.prototype = Object.create(es.prototype)),
                      (as.prototype.constructor = as),
                      (cs.prototype = Object.create(Dr.prototype)),
                      (cs.prototype.constructor = cs),
                      (ls.prototype = Object.create(es.prototype)),
                      (ls.prototype.constructor = ls),
                      (us.prototype = Object.create(Dr.prototype)),
                      (us.prototype.constructor = us),
                      (hs.prototype = Object.create(Fr.prototype)),
                      (hs.prototype.constructor = hs),
                      (ds.prototype = Object.create(Dr.prototype)),
                      (ds.prototype.constructor = ds),
                      (ps.prototype = Object.create(Fr.prototype)),
                      (ps.prototype.constructor = ps),
                      (fs.prototype = Object.create(Dr.prototype)),
                      (fs.prototype.constructor = fs),
                      (ms.prototype = Object.create(Fr.prototype)),
                      (ms.prototype.constructor = ms);
                    var gs = {
                      area: function(t) {
                        for (
                          var e = t.length, i = 0, n = e - 1, r = 0;
                          r < e;
                          n = r++
                        )
                          i += t[n].x * t[r].y - t[r].x * t[n].y;
                        return 0.5 * i;
                      },
                      triangulate: (function() {
                        function t(t, e, i, n, r, o) {
                          var s, a, c, l, u, h, d, p, f, m, g, v, y, w, M, E, b;
                          if (
                            ((a = t[o[e]].x),
                            (c = t[o[e]].y),
                            (l = t[o[i]].x),
                            (u = t[o[i]].y),
                            (h = t[o[n]].x),
                            (l - a) * ((d = t[o[n]].y) - c) -
                              (u - c) * (h - a) <=
                              0)
                          )
                            return !1;
                          for (
                            m = h - l,
                              g = d - u,
                              v = a - h,
                              y = c - d,
                              w = l - a,
                              M = u - c,
                              s = 0;
                            s < r;
                            s++
                          )
                            if (
                              ((p = t[o[s]].x),
                              (f = t[o[s]].y),
                              !(
                                (p === a && f === c) ||
                                (p === l && f === u) ||
                                (p === h && f === d)
                              ) &&
                                ((E = w * (f - c) - M * (p - a)),
                                (b = v * (f - d) - y * (p - h)),
                                m * (f - u) - g * (p - l) >= -Number.EPSILON &&
                                  b >= -Number.EPSILON &&
                                  E >= -Number.EPSILON))
                            )
                              return !1;
                          return !0;
                        }
                        return function(e, i) {
                          var n = e.length;
                          if (n < 3) return null;
                          var r,
                            o,
                            s,
                            a = [],
                            c = [],
                            l = [];
                          if (gs.area(e) > 0) for (o = 0; o < n; o++) c[o] = o;
                          else for (o = 0; o < n; o++) c[o] = n - 1 - o;
                          var u = n,
                            h = 2 * u;
                          for (o = u - 1; u > 2; ) {
                            if (h-- <= 0)
                              return (
                                console.warn(
                                  'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()'
                                ),
                                i ? l : a
                              );
                            if (
                              (u <= (r = o) && (r = 0),
                              u <= (o = r + 1) && (o = 0),
                              u <= (s = o + 1) && (s = 0),
                              t(e, r, o, s, u, c))
                            ) {
                              var d, p, f, m, g;
                              for (
                                d = c[r],
                                  p = c[o],
                                  f = c[s],
                                  a.push([e[d], e[p], e[f]]),
                                  l.push([c[r], c[o], c[s]]),
                                  m = o,
                                  g = o + 1;
                                g < u;
                                m++, g++
                              )
                                c[m] = c[g];
                              h = 2 * --u;
                            }
                          }
                          return i ? l : a;
                        };
                      })(),
                      triangulateShape: function(t, e) {
                        function i(t) {
                          var e = t.length;
                          e > 2 && t[e - 1].equals(t[0]) && t.pop();
                        }
                        function n(t, e, i) {
                          return t.x !== e.x
                            ? t.x < e.x
                              ? t.x <= i.x && i.x <= e.x
                              : e.x <= i.x && i.x <= t.x
                            : t.y < e.y
                              ? t.y <= i.y && i.y <= e.y
                              : e.y <= i.y && i.y <= t.y;
                        }
                        function r(t, e, i, r, o) {
                          var s = e.x - t.x,
                            a = e.y - t.y,
                            c = r.x - i.x,
                            l = r.y - i.y,
                            u = t.x - i.x,
                            h = t.y - i.y,
                            d = a * c - s * l,
                            p = a * u - s * h;
                          if (Math.abs(d) > Number.EPSILON) {
                            var f;
                            if (d > 0) {
                              if (p < 0 || p > d) return [];
                              if ((f = l * u - c * h) < 0 || f > d) return [];
                            } else {
                              if (p > 0 || p < d) return [];
                              if ((f = l * u - c * h) > 0 || f < d) return [];
                            }
                            if (0 === f)
                              return !o || (0 !== p && p !== d) ? [t] : [];
                            if (f === d)
                              return !o || (0 !== p && p !== d) ? [e] : [];
                            if (0 === p) return [i];
                            if (p === d) return [r];
                            var m = f / d;
                            return [{ x: t.x + m * s, y: t.y + m * a }];
                          }
                          if (0 !== p || l * u != c * h) return [];
                          var g,
                            v,
                            y,
                            w,
                            M,
                            E,
                            b,
                            x,
                            A = 0 === s && 0 === a,
                            T = 0 === c && 0 === l;
                          return A && T
                            ? t.x !== i.x || t.y !== i.y ? [] : [t]
                            : A
                              ? n(i, r, t) ? [t] : []
                              : T
                                ? n(t, e, i) ? [i] : []
                                : (0 !== s
                                    ? (t.x < e.x
                                        ? ((g = t),
                                          (y = t.x),
                                          (v = e),
                                          (w = e.x))
                                        : ((g = e),
                                          (y = e.x),
                                          (v = t),
                                          (w = t.x)),
                                      i.x < r.x
                                        ? ((M = i),
                                          (b = i.x),
                                          (E = r),
                                          (x = r.x))
                                        : ((M = r),
                                          (b = r.x),
                                          (E = i),
                                          (x = i.x)))
                                    : (t.y < e.y
                                        ? ((g = t),
                                          (y = t.y),
                                          (v = e),
                                          (w = e.y))
                                        : ((g = e),
                                          (y = e.y),
                                          (v = t),
                                          (w = t.y)),
                                      i.y < r.y
                                        ? ((M = i),
                                          (b = i.y),
                                          (E = r),
                                          (x = r.y))
                                        : ((M = r),
                                          (b = r.y),
                                          (E = i),
                                          (x = i.y))),
                                  y <= b
                                    ? w < b
                                      ? []
                                      : w === b
                                        ? o ? [] : [M]
                                        : w <= x ? [M, v] : [M, E]
                                    : y > x
                                      ? []
                                      : y === x
                                        ? o ? [] : [g]
                                        : w <= x ? [g, v] : [g, E]);
                        }
                        function o(t, e, i, n) {
                          var r = e.x - t.x,
                            o = e.y - t.y,
                            s = i.x - t.x,
                            a = i.y - t.y,
                            c = n.x - t.x,
                            l = n.y - t.y,
                            u = r * a - o * s,
                            h = r * l - o * c;
                          if (Math.abs(u) > Number.EPSILON) {
                            var d = c * a - l * s;
                            return u > 0 ? h >= 0 && d >= 0 : h >= 0 || d >= 0;
                          }
                          return h > 0;
                        }
                        i(t), e.forEach(i);
                        for (
                          var s,
                            a,
                            c,
                            l,
                            u,
                            h,
                            d = {},
                            p = t.concat(),
                            f = 0,
                            m = e.length;
                          f < m;
                          f++
                        )
                          Array.prototype.push.apply(p, e[f]);
                        for (s = 0, a = p.length; s < a; s++)
                          void 0 !== d[(u = p[s].x + ':' + p[s].y)] &&
                            console.warn(
                              'THREE.ShapeUtils: Duplicate point',
                              u,
                              s
                            ),
                            (d[u] = s);
                        var g = (function(t, e) {
                            var i,
                              n = t.concat();
                            function s(t, e) {
                              var r = n.length - 1,
                                s = t - 1;
                              s < 0 && (s = r);
                              var a = t + 1;
                              a > r && (a = 0);
                              var c = o(n[t], n[s], n[a], i[e]);
                              if (!c) return !1;
                              var l = i.length - 1,
                                u = e - 1;
                              u < 0 && (u = l);
                              var h = e + 1;
                              return (
                                h > l && (h = 0),
                                !!(c = o(i[e], i[u], i[h], n[t]))
                              );
                            }
                            function a(t, e) {
                              var i, o;
                              for (i = 0; i < n.length; i++)
                                if (
                                  ((o = i + 1),
                                  (o %= n.length),
                                  r(t, e, n[i], n[o], !0).length > 0)
                                )
                                  return !0;
                              return !1;
                            }
                            var c = [];
                            function l(t, i) {
                              var n, o, s, a;
                              for (n = 0; n < c.length; n++)
                                for (o = e[c[n]], s = 0; s < o.length; s++)
                                  if (
                                    ((a = s + 1),
                                    (a %= o.length),
                                    r(t, i, o[s], o[a], !0).length > 0)
                                  )
                                    return !0;
                              return !1;
                            }
                            for (
                              var u,
                                h,
                                d,
                                p,
                                f,
                                m,
                                g,
                                v,
                                y,
                                w,
                                M = [],
                                E = 0,
                                b = e.length;
                              E < b;
                              E++
                            )
                              c.push(E);
                            for (var x = 0, A = 2 * c.length; c.length > 0; ) {
                              if (--A < 0) {
                                console.log(
                                  'THREE.ShapeUtils: Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!'
                                );
                                break;
                              }
                              for (h = x; h < n.length; h++) {
                                for (d = n[h], u = -1, E = 0; E < c.length; E++)
                                  if (
                                    ((f = c[E]),
                                    void 0 ===
                                      M[(m = d.x + ':' + d.y + ':' + f)])
                                  ) {
                                    i = e[f];
                                    for (var T = 0; T < i.length; T++)
                                      if (
                                        ((p = i[T]),
                                        s(h, T) && !a(d, p) && !l(d, p))
                                      ) {
                                        (u = T),
                                          c.splice(E, 1),
                                          (g = n.slice(0, h + 1)),
                                          (v = n.slice(h)),
                                          (y = i.slice(u)),
                                          (w = i.slice(0, u + 1)),
                                          (n = g
                                            .concat(y)
                                            .concat(w)
                                            .concat(v)),
                                          (x = h);
                                        break;
                                      }
                                    if (u >= 0) break;
                                    M[m] = !0;
                                  }
                                if (u >= 0) break;
                              }
                            }
                            return n;
                          })(t, e),
                          v = gs.triangulate(g, !1);
                        for (s = 0, a = v.length; s < a; s++)
                          for (l = v[s], c = 0; c < 3; c++)
                            void 0 !== (h = d[(u = l[c].x + ':' + l[c].y)]) &&
                              (l[c] = h);
                        return v.concat();
                      },
                      isClockWise: function(t) {
                        return gs.area(t) < 0;
                      }
                    };
                    function vs(t, e) {
                      Dr.call(this),
                        (this.type = 'ExtrudeGeometry'),
                        (this.parameters = { shapes: t, options: e }),
                        this.fromBufferGeometry(new ys(t, e)),
                        this.mergeVertices();
                    }
                    function ys(t, e) {
                      void 0 !== t &&
                        (Fr.call(this),
                        (this.type = 'ExtrudeBufferGeometry'),
                        (t = Array.isArray(t) ? t : [t]),
                        this.addShapeList(t, e),
                        this.computeVertexNormals());
                    }
                    function ws(t, e) {
                      Dr.call(this),
                        (this.type = 'TextGeometry'),
                        (this.parameters = { text: t, parameters: e }),
                        this.fromBufferGeometry(new Ms(t, e)),
                        this.mergeVertices();
                    }
                    function Ms(t, e) {
                      var i = (e = e || {}).font;
                      if (!i || !i.isFont)
                        return (
                          console.error(
                            'THREE.TextGeometry: font parameter is not an instance of THREE.Font.'
                          ),
                          new Dr()
                        );
                      var n = i.generateShapes(t, e.size, e.curveSegments);
                      (e.amount = void 0 !== e.height ? e.height : 50),
                        void 0 === e.bevelThickness && (e.bevelThickness = 10),
                        void 0 === e.bevelSize && (e.bevelSize = 8),
                        void 0 === e.bevelEnabled && (e.bevelEnabled = !1),
                        ys.call(this, n, e),
                        (this.type = 'TextBufferGeometry');
                    }
                    function Es(t, e, i, n, r, o, s) {
                      Dr.call(this),
                        (this.type = 'SphereGeometry'),
                        (this.parameters = {
                          radius: t,
                          widthSegments: e,
                          heightSegments: i,
                          phiStart: n,
                          phiLength: r,
                          thetaStart: o,
                          thetaLength: s
                        }),
                        this.fromBufferGeometry(new bs(t, e, i, n, r, o, s)),
                        this.mergeVertices();
                    }
                    function bs(t, e, i, n, r, o, s) {
                      Fr.call(this),
                        (this.type = 'SphereBufferGeometry'),
                        (this.parameters = {
                          radius: t,
                          widthSegments: e,
                          heightSegments: i,
                          phiStart: n,
                          phiLength: r,
                          thetaStart: o,
                          thetaLength: s
                        }),
                        (t = t || 50),
                        (e = Math.max(3, Math.floor(e) || 8)),
                        (i = Math.max(2, Math.floor(i) || 6)),
                        (n = void 0 !== n ? n : 0),
                        (r = void 0 !== r ? r : 2 * Math.PI);
                      var a,
                        c,
                        l =
                          (o = void 0 !== o ? o : 0) +
                          (s = void 0 !== s ? s : Math.PI),
                        u = 0,
                        h = [],
                        d = new ke(),
                        p = new ke(),
                        f = [],
                        m = [],
                        g = [],
                        v = [];
                      for (c = 0; c <= i; c++) {
                        var y = [],
                          w = c / i;
                        for (a = 0; a <= e; a++) {
                          var M = a / e;
                          (d.x =
                            -t * Math.cos(n + M * r) * Math.sin(o + w * s)),
                            (d.y = t * Math.cos(o + w * s)),
                            (d.z =
                              t * Math.sin(n + M * r) * Math.sin(o + w * s)),
                            m.push(d.x, d.y, d.z),
                            p.set(d.x, d.y, d.z).normalize(),
                            g.push(p.x, p.y, p.z),
                            v.push(M, 1 - w),
                            y.push(u++);
                        }
                        h.push(y);
                      }
                      for (c = 0; c < i; c++)
                        for (a = 0; a < e; a++) {
                          var E = h[c][a + 1],
                            b = h[c][a],
                            x = h[c + 1][a],
                            A = h[c + 1][a + 1];
                          (0 !== c || o > 0) && f.push(E, b, A),
                            (c !== i - 1 || l < Math.PI) && f.push(b, x, A);
                        }
                      this.setIndex(f),
                        this.addAttribute('position', new kr(m, 3)),
                        this.addAttribute('normal', new kr(g, 3)),
                        this.addAttribute('uv', new kr(v, 2));
                    }
                    function xs(t, e, i, n, r, o) {
                      Dr.call(this),
                        (this.type = 'RingGeometry'),
                        (this.parameters = {
                          innerRadius: t,
                          outerRadius: e,
                          thetaSegments: i,
                          phiSegments: n,
                          thetaStart: r,
                          thetaLength: o
                        }),
                        this.fromBufferGeometry(new As(t, e, i, n, r, o)),
                        this.mergeVertices();
                    }
                    function As(t, e, i, n, r, o) {
                      Fr.call(this),
                        (this.type = 'RingBufferGeometry'),
                        (this.parameters = {
                          innerRadius: t,
                          outerRadius: e,
                          thetaSegments: i,
                          phiSegments: n,
                          thetaStart: r,
                          thetaLength: o
                        }),
                        (t = t || 20),
                        (e = e || 50),
                        (r = void 0 !== r ? r : 0),
                        (o = void 0 !== o ? o : 2 * Math.PI),
                        (i = void 0 !== i ? Math.max(3, i) : 8);
                      var s,
                        a,
                        c,
                        l = [],
                        u = [],
                        h = [],
                        d = [],
                        p = t,
                        f = (e - t) / (n = void 0 !== n ? Math.max(1, n) : 1),
                        m = new ke(),
                        g = new he();
                      for (a = 0; a <= n; a++) {
                        for (c = 0; c <= i; c++)
                          (s = r + c / i * o),
                            (m.x = p * Math.cos(s)),
                            (m.y = p * Math.sin(s)),
                            u.push(m.x, m.y, m.z),
                            h.push(0, 0, 1),
                            (g.x = (m.x / e + 1) / 2),
                            (g.y = (m.y / e + 1) / 2),
                            d.push(g.x, g.y);
                        p += f;
                      }
                      for (a = 0; a < n; a++) {
                        var v = a * (i + 1);
                        for (c = 0; c < i; c++) {
                          var y = (s = c + v),
                            w = s + i + 1,
                            M = s + i + 2,
                            E = s + 1;
                          l.push(y, w, E), l.push(w, M, E);
                        }
                      }
                      this.setIndex(l),
                        this.addAttribute('position', new kr(u, 3)),
                        this.addAttribute('normal', new kr(h, 3)),
                        this.addAttribute('uv', new kr(d, 2));
                    }
                    function Ts(t, e, i, n) {
                      Dr.call(this),
                        (this.type = 'LatheGeometry'),
                        (this.parameters = {
                          points: t,
                          segments: e,
                          phiStart: i,
                          phiLength: n
                        }),
                        this.fromBufferGeometry(new Ls(t, e, i, n)),
                        this.mergeVertices();
                    }
                    function Ls(t, e, i, n) {
                      Fr.call(this),
                        (this.type = 'LatheBufferGeometry'),
                        (this.parameters = {
                          points: t,
                          segments: e,
                          phiStart: i,
                          phiLength: n
                        }),
                        (e = Math.floor(e) || 12),
                        (i = i || 0),
                        (n = n || 2 * Math.PI),
                        (n = ue.clamp(n, 0, 2 * Math.PI));
                      var r,
                        o,
                        s,
                        a = [],
                        c = [],
                        l = [],
                        u = 1 / e,
                        h = new ke(),
                        d = new he();
                      for (o = 0; o <= e; o++) {
                        var p = i + o * u * n,
                          f = Math.sin(p),
                          m = Math.cos(p);
                        for (s = 0; s <= t.length - 1; s++)
                          (h.x = t[s].x * f),
                            (h.y = t[s].y),
                            (h.z = t[s].x * m),
                            c.push(h.x, h.y, h.z),
                            (d.x = o / e),
                            (d.y = s / (t.length - 1)),
                            l.push(d.x, d.y);
                      }
                      for (o = 0; o < e; o++)
                        for (s = 0; s < t.length - 1; s++) {
                          var g = (r = s + o * t.length),
                            v = r + t.length,
                            y = r + t.length + 1,
                            w = r + 1;
                          a.push(g, v, w), a.push(v, y, w);
                        }
                      if (
                        (this.setIndex(a),
                        this.addAttribute('position', new kr(c, 3)),
                        this.addAttribute('uv', new kr(l, 2)),
                        this.computeVertexNormals(),
                        n === 2 * Math.PI)
                      ) {
                        var M = this.attributes.normal.array,
                          E = new ke(),
                          b = new ke(),
                          x = new ke();
                        for (
                          r = e * t.length * 3, o = 0, s = 0;
                          o < t.length;
                          o++, s += 3
                        )
                          (E.x = M[s + 0]),
                            (E.y = M[s + 1]),
                            (E.z = M[s + 2]),
                            (b.x = M[r + s + 0]),
                            (b.y = M[r + s + 1]),
                            (b.z = M[r + s + 2]),
                            x.addVectors(E, b).normalize(),
                            (M[s + 0] = M[r + s + 0] = x.x),
                            (M[s + 1] = M[r + s + 1] = x.y),
                            (M[s + 2] = M[r + s + 2] = x.z);
                      }
                    }
                    function Ns(t, e) {
                      Dr.call(this),
                        (this.type = 'ShapeGeometry'),
                        'object' == typeof e &&
                          (console.warn(
                            'THREE.ShapeGeometry: Options parameter has been removed.'
                          ),
                          (e = e.curveSegments)),
                        (this.parameters = { shapes: t, curveSegments: e }),
                        this.fromBufferGeometry(new Ds(t, e)),
                        this.mergeVertices();
                    }
                    function Ds(t, e) {
                      Fr.call(this),
                        (this.type = 'ShapeBufferGeometry'),
                        (this.parameters = { shapes: t, curveSegments: e }),
                        (e = e || 12);
                      var i = [],
                        n = [],
                        r = [],
                        o = [],
                        s = 0,
                        a = 0;
                      if (!1 === Array.isArray(t)) l(t);
                      else
                        for (var c = 0; c < t.length; c++)
                          l(t[c]), this.addGroup(s, a, c), (s += a), (a = 0);
                      function l(t) {
                        var s,
                          c,
                          l,
                          u = n.length / 3,
                          h = t.extractPoints(e),
                          d = h.shape,
                          p = h.holes;
                        if (!1 === gs.isClockWise(d))
                          for (d = d.reverse(), s = 0, c = p.length; s < c; s++)
                            (l = p[s]),
                              !0 === gs.isClockWise(l) && (p[s] = l.reverse());
                        var f = gs.triangulateShape(d, p);
                        for (s = 0, c = p.length; s < c; s++)
                          (l = p[s]), (d = d.concat(l));
                        for (s = 0, c = d.length; s < c; s++) {
                          var m = d[s];
                          n.push(m.x, m.y, 0),
                            r.push(0, 0, 1),
                            o.push(m.x, m.y);
                        }
                        for (s = 0, c = f.length; s < c; s++) {
                          var g = f[s],
                            v = g[0] + u,
                            y = g[1] + u,
                            w = g[2] + u;
                          i.push(v, y, w), (a += 3);
                        }
                      }
                      this.setIndex(i),
                        this.addAttribute('position', new kr(n, 3)),
                        this.addAttribute('normal', new kr(r, 3)),
                        this.addAttribute('uv', new kr(o, 2));
                    }
                    function Ss(t, e) {
                      Fr.call(this),
                        (this.type = 'EdgesGeometry'),
                        (this.parameters = { thresholdAngle: e }),
                        (e = void 0 !== e ? e : 1);
                      var i,
                        n,
                        r,
                        o,
                        s = [],
                        a = Math.cos(ue.DEG2RAD * e),
                        c = [0, 0],
                        l = {},
                        u = ['a', 'b', 'c'];
                      t.isBufferGeometry
                        ? (o = new Dr()).fromBufferGeometry(t)
                        : (o = t.clone()),
                        o.mergeVertices(),
                        o.computeFaceNormals();
                      for (
                        var h = o.vertices, d = o.faces, p = 0, f = d.length;
                        p < f;
                        p++
                      )
                        for (var m = d[p], g = 0; g < 3; g++)
                          (i = m[u[g]]),
                            (n = m[u[(g + 1) % 3]]),
                            (c[0] = Math.min(i, n)),
                            (c[1] = Math.max(i, n)),
                            void 0 === l[(r = c[0] + ',' + c[1])]
                              ? (l[r] = {
                                  index1: c[0],
                                  index2: c[1],
                                  face1: p,
                                  face2: void 0
                                })
                              : (l[r].face2 = p);
                      for (r in l) {
                        var v = l[r];
                        if (
                          void 0 === v.face2 ||
                          d[v.face1].normal.dot(d[v.face2].normal) <= a
                        ) {
                          var y = h[v.index1];
                          s.push(y.x, y.y, y.z),
                            (y = h[v.index2]),
                            s.push(y.x, y.y, y.z);
                        }
                      }
                      this.addAttribute('position', new kr(s, 3));
                    }
                    function Cs(t, e, i, n, r, o, s, a) {
                      Dr.call(this),
                        (this.type = 'CylinderGeometry'),
                        (this.parameters = {
                          radiusTop: t,
                          radiusBottom: e,
                          height: i,
                          radialSegments: n,
                          heightSegments: r,
                          openEnded: o,
                          thetaStart: s,
                          thetaLength: a
                        }),
                        this.fromBufferGeometry(new _s(t, e, i, n, r, o, s, a)),
                        this.mergeVertices();
                    }
                    function _s(t, e, i, n, r, o, s, a) {
                      Fr.call(this),
                        (this.type = 'CylinderBufferGeometry'),
                        (this.parameters = {
                          radiusTop: t,
                          radiusBottom: e,
                          height: i,
                          radialSegments: n,
                          heightSegments: r,
                          openEnded: o,
                          thetaStart: s,
                          thetaLength: a
                        });
                      var c = this;
                      (t = void 0 !== t ? t : 20),
                        (e = void 0 !== e ? e : 20),
                        (i = void 0 !== i ? i : 100),
                        (n = Math.floor(n) || 8),
                        (r = Math.floor(r) || 1),
                        (o = void 0 !== o && o),
                        (s = void 0 !== s ? s : 0),
                        (a = void 0 !== a ? a : 2 * Math.PI);
                      var l = [],
                        u = [],
                        h = [],
                        d = [],
                        p = 0,
                        f = [],
                        m = i / 2,
                        g = 0;
                      function v(i) {
                        var r,
                          o,
                          f,
                          v = new he(),
                          y = new ke(),
                          w = 0,
                          M = !0 === i ? t : e,
                          E = !0 === i ? 1 : -1;
                        for (o = p, r = 1; r <= n; r++)
                          u.push(0, m * E, 0),
                            h.push(0, E, 0),
                            d.push(0.5, 0.5),
                            p++;
                        for (f = p, r = 0; r <= n; r++) {
                          var b = r / n * a + s,
                            x = Math.cos(b),
                            A = Math.sin(b);
                          (y.x = M * A),
                            (y.y = m * E),
                            (y.z = M * x),
                            u.push(y.x, y.y, y.z),
                            h.push(0, E, 0),
                            (v.x = 0.5 * x + 0.5),
                            (v.y = 0.5 * A * E + 0.5),
                            d.push(v.x, v.y),
                            p++;
                        }
                        for (r = 0; r < n; r++) {
                          var T = o + r,
                            L = f + r;
                          !0 === i ? l.push(L, L + 1, T) : l.push(L + 1, L, T),
                            (w += 3);
                        }
                        c.addGroup(g, w, !0 === i ? 1 : 2), (g += w);
                      }
                      !(function() {
                        var o,
                          v,
                          y = new ke(),
                          w = new ke(),
                          M = 0,
                          E = (e - t) / i;
                        for (v = 0; v <= r; v++) {
                          var b = [],
                            x = v / r,
                            A = x * (e - t) + t;
                          for (o = 0; o <= n; o++) {
                            var T = o / n,
                              L = T * a + s,
                              N = Math.sin(L),
                              D = Math.cos(L);
                            (w.x = A * N),
                              (w.y = -x * i + m),
                              (w.z = A * D),
                              u.push(w.x, w.y, w.z),
                              y.set(N, E, D).normalize(),
                              h.push(y.x, y.y, y.z),
                              d.push(T, 1 - x),
                              b.push(p++);
                          }
                          f.push(b);
                        }
                        for (o = 0; o < n; o++)
                          for (v = 0; v < r; v++) {
                            var S = f[v][o],
                              C = f[v + 1][o],
                              _ = f[v + 1][o + 1],
                              I = f[v][o + 1];
                            l.push(S, C, I), l.push(C, _, I), (M += 6);
                          }
                        c.addGroup(g, M, 0), (g += M);
                      })(),
                        !1 === o && (t > 0 && v(!0), e > 0 && v(!1)),
                        this.setIndex(l),
                        this.addAttribute('position', new kr(u, 3)),
                        this.addAttribute('normal', new kr(h, 3)),
                        this.addAttribute('uv', new kr(d, 2));
                    }
                    function Is(t, e, i, n, r, o, s) {
                      Cs.call(this, 0, t, e, i, n, r, o, s),
                        (this.type = 'ConeGeometry'),
                        (this.parameters = {
                          radius: t,
                          height: e,
                          radialSegments: i,
                          heightSegments: n,
                          openEnded: r,
                          thetaStart: o,
                          thetaLength: s
                        });
                    }
                    function js(t, e, i, n, r, o, s) {
                      _s.call(this, 0, t, e, i, n, r, o, s),
                        (this.type = 'ConeBufferGeometry'),
                        (this.parameters = {
                          radius: t,
                          height: e,
                          radialSegments: i,
                          heightSegments: n,
                          openEnded: r,
                          thetaStart: o,
                          thetaLength: s
                        });
                    }
                    function Os(t, e, i, n) {
                      Dr.call(this),
                        (this.type = 'CircleGeometry'),
                        (this.parameters = {
                          radius: t,
                          segments: e,
                          thetaStart: i,
                          thetaLength: n
                        }),
                        this.fromBufferGeometry(new Rs(t, e, i, n)),
                        this.mergeVertices();
                    }
                    function Rs(t, e, i, n) {
                      Fr.call(this),
                        (this.type = 'CircleBufferGeometry'),
                        (this.parameters = {
                          radius: t,
                          segments: e,
                          thetaStart: i,
                          thetaLength: n
                        }),
                        (t = t || 50),
                        (e = void 0 !== e ? Math.max(3, e) : 8),
                        (i = void 0 !== i ? i : 0),
                        (n = void 0 !== n ? n : 2 * Math.PI);
                      var r,
                        o,
                        s = [],
                        a = [],
                        c = [],
                        l = [],
                        u = new ke(),
                        h = new he();
                      for (
                        a.push(0, 0, 0),
                          c.push(0, 0, 1),
                          l.push(0.5, 0.5),
                          o = 0,
                          r = 3;
                        o <= e;
                        o++, r += 3
                      ) {
                        var d = i + o / e * n;
                        (u.x = t * Math.cos(d)),
                          (u.y = t * Math.sin(d)),
                          a.push(u.x, u.y, u.z),
                          c.push(0, 0, 1),
                          (h.x = (a[r] / t + 1) / 2),
                          (h.y = (a[r + 1] / t + 1) / 2),
                          l.push(h.x, h.y);
                      }
                      for (r = 1; r <= e; r++) s.push(r, r + 1, 0);
                      this.setIndex(s),
                        this.addAttribute('position', new kr(a, 3)),
                        this.addAttribute('normal', new kr(c, 3)),
                        this.addAttribute('uv', new kr(l, 2));
                    }
                    (vs.prototype = Object.create(Dr.prototype)),
                      (vs.prototype.constructor = vs),
                      (ys.prototype = Object.create(Fr.prototype)),
                      (ys.prototype.constructor = ys),
                      (ys.prototype.getArrays = function() {
                        var t = this.getAttribute('position'),
                          e = t ? Array.prototype.slice.call(t.array) : [],
                          i = this.getAttribute('uv'),
                          n = i ? Array.prototype.slice.call(i.array) : [],
                          r = this.index;
                        return {
                          position: e,
                          uv: n,
                          index: r ? Array.prototype.slice.call(r.array) : []
                        };
                      }),
                      (ys.prototype.addShapeList = function(t, e) {
                        var i = t.length;
                        e.arrays = this.getArrays();
                        for (var n = 0; n < i; n++) {
                          var r = t[n];
                          this.addShape(r, e);
                        }
                        this.setIndex(e.arrays.index),
                          this.addAttribute(
                            'position',
                            new kr(e.arrays.position, 3)
                          ),
                          this.addAttribute('uv', new kr(e.arrays.uv, 2));
                      }),
                      (ys.prototype.addShape = function(t, e) {
                        var i,
                          n,
                          r,
                          o,
                          s,
                          a,
                          c,
                          l,
                          u = e.arrays ? e.arrays : this.getArrays(),
                          h = u.position,
                          d = u.index,
                          p = u.uv,
                          f = [],
                          m = void 0 !== e.amount ? e.amount : 100,
                          g =
                            void 0 !== e.bevelThickness ? e.bevelThickness : 6,
                          v = void 0 !== e.bevelSize ? e.bevelSize : g - 2,
                          y = void 0 !== e.bevelSegments ? e.bevelSegments : 3,
                          w = void 0 === e.bevelEnabled || e.bevelEnabled,
                          M = void 0 !== e.curveSegments ? e.curveSegments : 12,
                          E = void 0 !== e.steps ? e.steps : 1,
                          b = e.extrudePath,
                          x = !1,
                          A =
                            void 0 !== e.UVGenerator
                              ? e.UVGenerator
                              : vs.WorldUVGenerator;
                        b &&
                          ((i = b.getSpacedPoints(E)),
                          (x = !0),
                          (w = !1),
                          (n =
                            void 0 !== e.frames
                              ? e.frames
                              : b.computeFrenetFrames(E, !1)),
                          (r = new ke()),
                          (o = new ke()),
                          (s = new ke())),
                          w || ((y = 0), (g = 0), (v = 0));
                        var T = this,
                          L = t.extractPoints(M),
                          N = L.shape,
                          D = L.holes;
                        if (!gs.isClockWise(N))
                          for (N = N.reverse(), c = 0, l = D.length; c < l; c++)
                            (a = D[c]),
                              gs.isClockWise(a) && (D[c] = a.reverse());
                        var S = gs.triangulateShape(N, D),
                          C = N;
                        for (c = 0, l = D.length; c < l; c++)
                          (a = D[c]), (N = N.concat(a));
                        function _(t, e, i) {
                          return (
                            e ||
                              console.error(
                                'THREE.ExtrudeGeometry: vec does not exist'
                              ),
                            e
                              .clone()
                              .multiplyScalar(i)
                              .add(t)
                          );
                        }
                        var I,
                          j,
                          O,
                          R,
                          z,
                          k,
                          B = N.length,
                          P = S.length;
                        function U(t, e, i) {
                          var n,
                            r,
                            o,
                            s = t.x - e.x,
                            a = t.y - e.y,
                            c = i.x - t.x,
                            l = i.y - t.y,
                            u = s * s + a * a,
                            h = s * l - a * c;
                          if (Math.abs(h) > Number.EPSILON) {
                            var d = Math.sqrt(u),
                              p = Math.sqrt(c * c + l * l),
                              f = e.x - a / d,
                              m = e.y + s / d,
                              g =
                                ((i.x - l / p - f) * l -
                                  (i.y + c / p - m) * c) /
                                (s * l - a * c),
                              v =
                                (n = f + s * g - t.x) * n +
                                (r = m + a * g - t.y) * r;
                            if (v <= 2) return new he(n, r);
                            o = Math.sqrt(v / 2);
                          } else {
                            var y = !1;
                            s > Number.EPSILON
                              ? c > Number.EPSILON && (y = !0)
                              : s < -Number.EPSILON
                                ? c < -Number.EPSILON && (y = !0)
                                : Math.sign(a) === Math.sign(l) && (y = !0),
                              y
                                ? ((n = -a), (r = s), (o = Math.sqrt(u)))
                                : ((n = s), (r = a), (o = Math.sqrt(u / 2)));
                          }
                          return new he(n / o, r / o);
                        }
                        for (
                          var F = [], H = 0, V = C.length, G = V - 1, Y = H + 1;
                          H < V;
                          H++, G++, Y++
                        )
                          G === V && (G = 0),
                            Y === V && (Y = 0),
                            (F[H] = U(C[H], C[G], C[Y]));
                        var Q,
                          W,
                          q = [],
                          X = F.concat();
                        for (c = 0, l = D.length; c < l; c++) {
                          for (
                            a = D[c],
                              Q = [],
                              H = 0,
                              G = (V = a.length) - 1,
                              Y = H + 1;
                            H < V;
                            H++, G++, Y++
                          )
                            G === V && (G = 0),
                              Y === V && (Y = 0),
                              (Q[H] = U(a[H], a[G], a[Y]));
                          q.push(Q), (X = X.concat(Q));
                        }
                        for (I = 0; I < y; I++) {
                          for (
                            O = I / y,
                              R = g * Math.cos(O * Math.PI / 2),
                              j = v * Math.sin(O * Math.PI / 2),
                              H = 0,
                              V = C.length;
                            H < V;
                            H++
                          )
                            Z((z = _(C[H], F[H], j)).x, z.y, -R);
                          for (c = 0, l = D.length; c < l; c++)
                            for (
                              a = D[c], Q = q[c], H = 0, V = a.length;
                              H < V;
                              H++
                            )
                              Z((z = _(a[H], Q[H], j)).x, z.y, -R);
                        }
                        for (j = v, H = 0; H < B; H++)
                          (z = w ? _(N[H], X[H], j) : N[H]),
                            x
                              ? (o.copy(n.normals[0]).multiplyScalar(z.x),
                                r.copy(n.binormals[0]).multiplyScalar(z.y),
                                s
                                  .copy(i[0])
                                  .add(o)
                                  .add(r),
                                Z(s.x, s.y, s.z))
                              : Z(z.x, z.y, 0);
                        for (W = 1; W <= E; W++)
                          for (H = 0; H < B; H++)
                            (z = w ? _(N[H], X[H], j) : N[H]),
                              x
                                ? (o.copy(n.normals[W]).multiplyScalar(z.x),
                                  r.copy(n.binormals[W]).multiplyScalar(z.y),
                                  s
                                    .copy(i[W])
                                    .add(o)
                                    .add(r),
                                  Z(s.x, s.y, s.z))
                                : Z(z.x, z.y, m / E * W);
                        for (I = y - 1; I >= 0; I--) {
                          for (
                            O = I / y,
                              R = g * Math.cos(O * Math.PI / 2),
                              j = v * Math.sin(O * Math.PI / 2),
                              H = 0,
                              V = C.length;
                            H < V;
                            H++
                          )
                            Z((z = _(C[H], F[H], j)).x, z.y, m + R);
                          for (c = 0, l = D.length; c < l; c++)
                            for (
                              a = D[c], Q = q[c], H = 0, V = a.length;
                              H < V;
                              H++
                            )
                              (z = _(a[H], Q[H], j)),
                                x
                                  ? Z(z.x, z.y + i[E - 1].y, i[E - 1].x + R)
                                  : Z(z.x, z.y, m + R);
                        }
                        function K(t, e) {
                          var i, n;
                          for (H = t.length; --H >= 0; ) {
                            (i = H), (n = H - 1) < 0 && (n = t.length - 1);
                            var r = 0,
                              o = E + 2 * y;
                            for (r = 0; r < o; r++) {
                              var s = B * r,
                                a = B * (r + 1);
                              $(
                                e + i + s,
                                e + n + s,
                                e + n + a,
                                e + i + a,
                                t,
                                r,
                                o,
                                i,
                                n
                              );
                            }
                          }
                        }
                        function Z(t, e, i) {
                          f.push(t), f.push(e), f.push(i);
                        }
                        function J(t, e, i) {
                          tt(t), tt(e), tt(i);
                          var n = h.length / 3,
                            r = A.generateTopUV(T, h, n - 3, n - 2, n - 1);
                          et(r[0]), et(r[1]), et(r[2]);
                        }
                        function $(t, e, i, n, r, o, s, a, c) {
                          tt(t), tt(e), tt(n), tt(e), tt(i), tt(n);
                          var l = h.length / 3,
                            u = A.generateSideWallUV(
                              T,
                              h,
                              l - 6,
                              l - 3,
                              l - 2,
                              l - 1
                            );
                          et(u[0]),
                            et(u[1]),
                            et(u[3]),
                            et(u[1]),
                            et(u[2]),
                            et(u[3]);
                        }
                        function tt(t) {
                          d.push(h.length / 3),
                            h.push(f[3 * t + 0]),
                            h.push(f[3 * t + 1]),
                            h.push(f[3 * t + 2]);
                        }
                        function et(t) {
                          p.push(t.x), p.push(t.y);
                        }
                        !(function() {
                          var t = h.length / 3;
                          if (w) {
                            var i = 0,
                              n = B * i;
                            for (H = 0; H < P; H++)
                              J((k = S[H])[2] + n, k[1] + n, k[0] + n);
                            for (n = B * (i = E + 2 * y), H = 0; H < P; H++)
                              J((k = S[H])[0] + n, k[1] + n, k[2] + n);
                          } else {
                            for (H = 0; H < P; H++)
                              J((k = S[H])[2], k[1], k[0]);
                            for (H = 0; H < P; H++)
                              J(
                                (k = S[H])[0] + B * E,
                                k[1] + B * E,
                                k[2] + B * E
                              );
                          }
                          T.addGroup(
                            t,
                            h.length / 3 - t,
                            void 0 !== e.material ? e.material : 0
                          );
                        })(),
                          (function() {
                            var t = h.length / 3,
                              i = 0;
                            for (
                              K(C, i), i += C.length, c = 0, l = D.length;
                              c < l;
                              c++
                            )
                              K((a = D[c]), i), (i += a.length);
                            T.addGroup(
                              t,
                              h.length / 3 - t,
                              void 0 !== e.extrudeMaterial
                                ? e.extrudeMaterial
                                : 1
                            );
                          })(),
                          e.arrays ||
                            (this.setIndex(d),
                            this.addAttribute('position', new kr(h, 3)),
                            this.addAttribute('uv', new kr(e.arrays.uv, 2)));
                      }),
                      (vs.WorldUVGenerator = {
                        generateTopUV: function(t, e, i, n, r) {
                          var o = e[3 * i],
                            s = e[3 * i + 1],
                            a = e[3 * n],
                            c = e[3 * n + 1],
                            l = e[3 * r],
                            u = e[3 * r + 1];
                          return [new he(o, s), new he(a, c), new he(l, u)];
                        },
                        generateSideWallUV: function(t, e, i, n, r, o) {
                          var s = e[3 * i],
                            a = e[3 * i + 1],
                            c = e[3 * i + 2],
                            l = e[3 * n],
                            u = e[3 * n + 1],
                            h = e[3 * n + 2],
                            d = e[3 * r],
                            p = e[3 * r + 1],
                            f = e[3 * r + 2],
                            m = e[3 * o],
                            g = e[3 * o + 1],
                            v = e[3 * o + 2];
                          return Math.abs(a - u) < 0.01
                            ? [
                                new he(s, 1 - c),
                                new he(l, 1 - h),
                                new he(d, 1 - f),
                                new he(m, 1 - v)
                              ]
                            : [
                                new he(a, 1 - c),
                                new he(u, 1 - h),
                                new he(p, 1 - f),
                                new he(g, 1 - v)
                              ];
                        }
                      }),
                      (ws.prototype = Object.create(Dr.prototype)),
                      (ws.prototype.constructor = ws),
                      (Ms.prototype = Object.create(ys.prototype)),
                      (Ms.prototype.constructor = Ms),
                      (Es.prototype = Object.create(Dr.prototype)),
                      (Es.prototype.constructor = Es),
                      (bs.prototype = Object.create(Fr.prototype)),
                      (bs.prototype.constructor = bs),
                      (xs.prototype = Object.create(Dr.prototype)),
                      (xs.prototype.constructor = xs),
                      (As.prototype = Object.create(Fr.prototype)),
                      (As.prototype.constructor = As),
                      (Ts.prototype = Object.create(Dr.prototype)),
                      (Ts.prototype.constructor = Ts),
                      (Ls.prototype = Object.create(Fr.prototype)),
                      (Ls.prototype.constructor = Ls),
                      (Ns.prototype = Object.create(Dr.prototype)),
                      (Ns.prototype.constructor = Ns),
                      (Ds.prototype = Object.create(Fr.prototype)),
                      (Ds.prototype.constructor = Ds),
                      (Ss.prototype = Object.create(Fr.prototype)),
                      (Ss.prototype.constructor = Ss),
                      (Cs.prototype = Object.create(Dr.prototype)),
                      (Cs.prototype.constructor = Cs),
                      (_s.prototype = Object.create(Fr.prototype)),
                      (_s.prototype.constructor = _s),
                      (Is.prototype = Object.create(Cs.prototype)),
                      (Is.prototype.constructor = Is),
                      (js.prototype = Object.create(_s.prototype)),
                      (js.prototype.constructor = js),
                      (Os.prototype = Object.create(Dr.prototype)),
                      (Os.prototype.constructor = Os),
                      (Rs.prototype = Object.create(Fr.prototype)),
                      (Rs.prototype.constructor = Rs);
                    var zs = Object.freeze({
                      WireframeGeometry: Zo,
                      ParametricGeometry: Jo,
                      ParametricBufferGeometry: $o,
                      TetrahedronGeometry: is,
                      TetrahedronBufferGeometry: ns,
                      OctahedronGeometry: rs,
                      OctahedronBufferGeometry: os,
                      IcosahedronGeometry: ss,
                      IcosahedronBufferGeometry: as,
                      DodecahedronGeometry: cs,
                      DodecahedronBufferGeometry: ls,
                      PolyhedronGeometry: ts,
                      PolyhedronBufferGeometry: es,
                      TubeGeometry: us,
                      TubeBufferGeometry: hs,
                      TorusKnotGeometry: ds,
                      TorusKnotBufferGeometry: ps,
                      TorusGeometry: fs,
                      TorusBufferGeometry: ms,
                      TextGeometry: ws,
                      TextBufferGeometry: Ms,
                      SphereGeometry: Es,
                      SphereBufferGeometry: bs,
                      RingGeometry: xs,
                      RingBufferGeometry: As,
                      PlaneGeometry: Gr,
                      PlaneBufferGeometry: Yr,
                      LatheGeometry: Ts,
                      LatheBufferGeometry: Ls,
                      ShapeGeometry: Ns,
                      ShapeBufferGeometry: Ds,
                      ExtrudeGeometry: vs,
                      ExtrudeBufferGeometry: ys,
                      EdgesGeometry: Ss,
                      ConeGeometry: Is,
                      ConeBufferGeometry: js,
                      CylinderGeometry: Cs,
                      CylinderBufferGeometry: _s,
                      CircleGeometry: Os,
                      CircleBufferGeometry: Rs,
                      BoxGeometry: Hr,
                      BoxBufferGeometry: Vr
                    });
                    function ks(t) {
                      on.call(this),
                        (this.type = 'ShadowMaterial'),
                        (this.color = new Ni(0)),
                        (this.opacity = 1),
                        (this.lights = !0),
                        (this.transparent = !0),
                        this.setValues(t);
                    }
                    function Bs(t) {
                      sn.call(this, t), (this.type = 'RawShaderMaterial');
                    }
                    function Ps(t) {
                      on.call(this),
                        (this.defines = { STANDARD: '' }),
                        (this.type = 'MeshStandardMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.roughness = 0.5),
                        (this.metalness = 0.5),
                        (this.map = null),
                        (this.lightMap = null),
                        (this.lightMapIntensity = 1),
                        (this.aoMap = null),
                        (this.aoMapIntensity = 1),
                        (this.emissive = new Ni(0)),
                        (this.emissiveIntensity = 1),
                        (this.emissiveMap = null),
                        (this.bumpMap = null),
                        (this.bumpScale = 1),
                        (this.normalMap = null),
                        (this.normalScale = new he(1, 1)),
                        (this.displacementMap = null),
                        (this.displacementScale = 1),
                        (this.displacementBias = 0),
                        (this.roughnessMap = null),
                        (this.metalnessMap = null),
                        (this.alphaMap = null),
                        (this.envMap = null),
                        (this.envMapIntensity = 1),
                        (this.refractionRatio = 0.98),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.wireframeLinecap = 'round'),
                        (this.wireframeLinejoin = 'round'),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.morphNormals = !1),
                        this.setValues(t);
                    }
                    function Us(t) {
                      Ps.call(this),
                        (this.defines = { PHYSICAL: '' }),
                        (this.type = 'MeshPhysicalMaterial'),
                        (this.reflectivity = 0.5),
                        (this.clearCoat = 0),
                        (this.clearCoatRoughness = 0),
                        this.setValues(t);
                    }
                    function Fs(t) {
                      on.call(this),
                        (this.type = 'MeshPhongMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.specular = new Ni(1118481)),
                        (this.shininess = 30),
                        (this.map = null),
                        (this.lightMap = null),
                        (this.lightMapIntensity = 1),
                        (this.aoMap = null),
                        (this.aoMapIntensity = 1),
                        (this.emissive = new Ni(0)),
                        (this.emissiveIntensity = 1),
                        (this.emissiveMap = null),
                        (this.bumpMap = null),
                        (this.bumpScale = 1),
                        (this.normalMap = null),
                        (this.normalScale = new he(1, 1)),
                        (this.displacementMap = null),
                        (this.displacementScale = 1),
                        (this.displacementBias = 0),
                        (this.specularMap = null),
                        (this.alphaMap = null),
                        (this.envMap = null),
                        (this.combine = Z),
                        (this.reflectivity = 1),
                        (this.refractionRatio = 0.98),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.wireframeLinecap = 'round'),
                        (this.wireframeLinejoin = 'round'),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.morphNormals = !1),
                        this.setValues(t);
                    }
                    function Hs(t) {
                      Fs.call(this),
                        (this.defines = { TOON: '' }),
                        (this.type = 'MeshToonMaterial'),
                        (this.gradientMap = null),
                        this.setValues(t);
                    }
                    function Vs(t) {
                      on.call(this),
                        (this.type = 'MeshNormalMaterial'),
                        (this.bumpMap = null),
                        (this.bumpScale = 1),
                        (this.normalMap = null),
                        (this.normalScale = new he(1, 1)),
                        (this.displacementMap = null),
                        (this.displacementScale = 1),
                        (this.displacementBias = 0),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.fog = !1),
                        (this.lights = !1),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.morphNormals = !1),
                        this.setValues(t);
                    }
                    function Gs(t) {
                      on.call(this),
                        (this.type = 'MeshLambertMaterial'),
                        (this.color = new Ni(16777215)),
                        (this.map = null),
                        (this.lightMap = null),
                        (this.lightMapIntensity = 1),
                        (this.aoMap = null),
                        (this.aoMapIntensity = 1),
                        (this.emissive = new Ni(0)),
                        (this.emissiveIntensity = 1),
                        (this.emissiveMap = null),
                        (this.specularMap = null),
                        (this.alphaMap = null),
                        (this.envMap = null),
                        (this.combine = Z),
                        (this.reflectivity = 1),
                        (this.refractionRatio = 0.98),
                        (this.wireframe = !1),
                        (this.wireframeLinewidth = 1),
                        (this.wireframeLinecap = 'round'),
                        (this.wireframeLinejoin = 'round'),
                        (this.skinning = !1),
                        (this.morphTargets = !1),
                        (this.morphNormals = !1),
                        this.setValues(t);
                    }
                    function Ys(t) {
                      Fo.call(this),
                        (this.type = 'LineDashedMaterial'),
                        (this.scale = 1),
                        (this.dashSize = 3),
                        (this.gapSize = 1),
                        this.setValues(t);
                    }
                    (ks.prototype = Object.create(on.prototype)),
                      (ks.prototype.constructor = ks),
                      (ks.prototype.isShadowMaterial = !0),
                      (Bs.prototype = Object.create(sn.prototype)),
                      (Bs.prototype.constructor = Bs),
                      (Bs.prototype.isRawShaderMaterial = !0),
                      (Ps.prototype = Object.create(on.prototype)),
                      (Ps.prototype.constructor = Ps),
                      (Ps.prototype.isMeshStandardMaterial = !0),
                      (Ps.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          (this.defines = { STANDARD: '' }),
                          this.color.copy(t.color),
                          (this.roughness = t.roughness),
                          (this.metalness = t.metalness),
                          (this.map = t.map),
                          (this.lightMap = t.lightMap),
                          (this.lightMapIntensity = t.lightMapIntensity),
                          (this.aoMap = t.aoMap),
                          (this.aoMapIntensity = t.aoMapIntensity),
                          this.emissive.copy(t.emissive),
                          (this.emissiveMap = t.emissiveMap),
                          (this.emissiveIntensity = t.emissiveIntensity),
                          (this.bumpMap = t.bumpMap),
                          (this.bumpScale = t.bumpScale),
                          (this.normalMap = t.normalMap),
                          this.normalScale.copy(t.normalScale),
                          (this.displacementMap = t.displacementMap),
                          (this.displacementScale = t.displacementScale),
                          (this.displacementBias = t.displacementBias),
                          (this.roughnessMap = t.roughnessMap),
                          (this.metalnessMap = t.metalnessMap),
                          (this.alphaMap = t.alphaMap),
                          (this.envMap = t.envMap),
                          (this.envMapIntensity = t.envMapIntensity),
                          (this.refractionRatio = t.refractionRatio),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          (this.wireframeLinecap = t.wireframeLinecap),
                          (this.wireframeLinejoin = t.wireframeLinejoin),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.morphNormals = t.morphNormals),
                          this
                        );
                      }),
                      (Us.prototype = Object.create(Ps.prototype)),
                      (Us.prototype.constructor = Us),
                      (Us.prototype.isMeshPhysicalMaterial = !0),
                      (Us.prototype.copy = function(t) {
                        return (
                          Ps.prototype.copy.call(this, t),
                          (this.defines = { PHYSICAL: '' }),
                          (this.reflectivity = t.reflectivity),
                          (this.clearCoat = t.clearCoat),
                          (this.clearCoatRoughness = t.clearCoatRoughness),
                          this
                        );
                      }),
                      (Fs.prototype = Object.create(on.prototype)),
                      (Fs.prototype.constructor = Fs),
                      (Fs.prototype.isMeshPhongMaterial = !0),
                      (Fs.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.color.copy(t.color),
                          this.specular.copy(t.specular),
                          (this.shininess = t.shininess),
                          (this.map = t.map),
                          (this.lightMap = t.lightMap),
                          (this.lightMapIntensity = t.lightMapIntensity),
                          (this.aoMap = t.aoMap),
                          (this.aoMapIntensity = t.aoMapIntensity),
                          this.emissive.copy(t.emissive),
                          (this.emissiveMap = t.emissiveMap),
                          (this.emissiveIntensity = t.emissiveIntensity),
                          (this.bumpMap = t.bumpMap),
                          (this.bumpScale = t.bumpScale),
                          (this.normalMap = t.normalMap),
                          this.normalScale.copy(t.normalScale),
                          (this.displacementMap = t.displacementMap),
                          (this.displacementScale = t.displacementScale),
                          (this.displacementBias = t.displacementBias),
                          (this.specularMap = t.specularMap),
                          (this.alphaMap = t.alphaMap),
                          (this.envMap = t.envMap),
                          (this.combine = t.combine),
                          (this.reflectivity = t.reflectivity),
                          (this.refractionRatio = t.refractionRatio),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          (this.wireframeLinecap = t.wireframeLinecap),
                          (this.wireframeLinejoin = t.wireframeLinejoin),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.morphNormals = t.morphNormals),
                          this
                        );
                      }),
                      (Hs.prototype = Object.create(Fs.prototype)),
                      (Hs.prototype.constructor = Hs),
                      (Hs.prototype.isMeshToonMaterial = !0),
                      (Hs.prototype.copy = function(t) {
                        return (
                          Fs.prototype.copy.call(this, t),
                          (this.gradientMap = t.gradientMap),
                          this
                        );
                      }),
                      (Vs.prototype = Object.create(on.prototype)),
                      (Vs.prototype.constructor = Vs),
                      (Vs.prototype.isMeshNormalMaterial = !0),
                      (Vs.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          (this.bumpMap = t.bumpMap),
                          (this.bumpScale = t.bumpScale),
                          (this.normalMap = t.normalMap),
                          this.normalScale.copy(t.normalScale),
                          (this.displacementMap = t.displacementMap),
                          (this.displacementScale = t.displacementScale),
                          (this.displacementBias = t.displacementBias),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.morphNormals = t.morphNormals),
                          this
                        );
                      }),
                      (Gs.prototype = Object.create(on.prototype)),
                      (Gs.prototype.constructor = Gs),
                      (Gs.prototype.isMeshLambertMaterial = !0),
                      (Gs.prototype.copy = function(t) {
                        return (
                          on.prototype.copy.call(this, t),
                          this.color.copy(t.color),
                          (this.map = t.map),
                          (this.lightMap = t.lightMap),
                          (this.lightMapIntensity = t.lightMapIntensity),
                          (this.aoMap = t.aoMap),
                          (this.aoMapIntensity = t.aoMapIntensity),
                          this.emissive.copy(t.emissive),
                          (this.emissiveMap = t.emissiveMap),
                          (this.emissiveIntensity = t.emissiveIntensity),
                          (this.specularMap = t.specularMap),
                          (this.alphaMap = t.alphaMap),
                          (this.envMap = t.envMap),
                          (this.combine = t.combine),
                          (this.reflectivity = t.reflectivity),
                          (this.refractionRatio = t.refractionRatio),
                          (this.wireframe = t.wireframe),
                          (this.wireframeLinewidth = t.wireframeLinewidth),
                          (this.wireframeLinecap = t.wireframeLinecap),
                          (this.wireframeLinejoin = t.wireframeLinejoin),
                          (this.skinning = t.skinning),
                          (this.morphTargets = t.morphTargets),
                          (this.morphNormals = t.morphNormals),
                          this
                        );
                      }),
                      (Ys.prototype = Object.create(Fo.prototype)),
                      (Ys.prototype.constructor = Ys),
                      (Ys.prototype.isLineDashedMaterial = !0),
                      (Ys.prototype.copy = function(t) {
                        return (
                          Fo.prototype.copy.call(this, t),
                          (this.scale = t.scale),
                          (this.dashSize = t.dashSize),
                          (this.gapSize = t.gapSize),
                          this
                        );
                      });
                    var Qs = Object.freeze({
                        ShadowMaterial: ks,
                        SpriteMaterial: Ro,
                        RawShaderMaterial: Bs,
                        ShaderMaterial: sn,
                        PointsMaterial: Yo,
                        MeshPhysicalMaterial: Us,
                        MeshStandardMaterial: Ps,
                        MeshPhongMaterial: Fs,
                        MeshToonMaterial: Hs,
                        MeshNormalMaterial: Vs,
                        MeshLambertMaterial: Gs,
                        MeshDepthMaterial: an,
                        MeshDistanceMaterial: cn,
                        MeshBasicMaterial: Qr,
                        LineDashedMaterial: Ys,
                        LineBasicMaterial: Fo,
                        Material: on
                      }),
                      Ws = {
                        enabled: !1,
                        files: {},
                        add: function(t, e) {
                          !1 !== this.enabled && (this.files[t] = e);
                        },
                        get: function(t) {
                          if (!1 !== this.enabled) return this.files[t];
                        },
                        remove: function(t) {
                          delete this.files[t];
                        },
                        clear: function() {
                          this.files = {};
                        }
                      };
                    function qs(t, e, i) {
                      var n = this,
                        r = !1,
                        o = 0,
                        s = 0;
                      (this.onStart = void 0),
                        (this.onLoad = t),
                        (this.onProgress = e),
                        (this.onError = i),
                        (this.itemStart = function(t) {
                          s++,
                            !1 === r &&
                              void 0 !== n.onStart &&
                              n.onStart(t, o, s),
                            (r = !0);
                        }),
                        (this.itemEnd = function(t) {
                          o++,
                            void 0 !== n.onProgress && n.onProgress(t, o, s),
                            o === s &&
                              ((r = !1), void 0 !== n.onLoad && n.onLoad());
                        }),
                        (this.itemError = function(t) {
                          void 0 !== n.onError && n.onError(t);
                        });
                    }
                    var Xs = new qs();
                    function Ks(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    function Zs(t) {
                      (this.manager = void 0 !== t ? t : Xs),
                        (this._parser = null);
                    }
                    function Js(t) {
                      (this.manager = void 0 !== t ? t : Xs),
                        (this._parser = null);
                    }
                    function $s(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    function ta(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    function ea(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    function ia(t, e) {
                      zn.call(this),
                        (this.type = 'Light'),
                        (this.color = new Ni(t)),
                        (this.intensity = void 0 !== e ? e : 1),
                        (this.receiveShadow = void 0);
                    }
                    function na(t, e, i) {
                      ia.call(this, t, i),
                        (this.type = 'HemisphereLight'),
                        (this.castShadow = void 0),
                        this.position.copy(zn.DefaultUp),
                        this.updateMatrix(),
                        (this.groundColor = new Ni(e));
                    }
                    function ra(t) {
                      (this.camera = t),
                        (this.bias = 0),
                        (this.radius = 1),
                        (this.mapSize = new he(512, 512)),
                        (this.map = null),
                        (this.matrix = new Be());
                    }
                    function oa() {
                      ra.call(this, new Pn(50, 1, 0.5, 500));
                    }
                    function sa(t, e, i, n, r, o) {
                      ia.call(this, t, e),
                        (this.type = 'SpotLight'),
                        this.position.copy(zn.DefaultUp),
                        this.updateMatrix(),
                        (this.target = new zn()),
                        Object.defineProperty(this, 'power', {
                          get: function() {
                            return this.intensity * Math.PI;
                          },
                          set: function(t) {
                            this.intensity = t / Math.PI;
                          }
                        }),
                        (this.distance = void 0 !== i ? i : 0),
                        (this.angle = void 0 !== n ? n : Math.PI / 3),
                        (this.penumbra = void 0 !== r ? r : 0),
                        (this.decay = void 0 !== o ? o : 1),
                        (this.shadow = new oa());
                    }
                    function aa(t, e, i, n) {
                      ia.call(this, t, e),
                        (this.type = 'PointLight'),
                        Object.defineProperty(this, 'power', {
                          get: function() {
                            return 4 * this.intensity * Math.PI;
                          },
                          set: function(t) {
                            this.intensity = t / (4 * Math.PI);
                          }
                        }),
                        (this.distance = void 0 !== i ? i : 0),
                        (this.decay = void 0 !== n ? n : 1),
                        (this.shadow = new ra(new Pn(90, 1, 0.5, 500)));
                    }
                    function ca() {
                      ra.call(this, new Bn(-5, 5, 5, -5, 0.5, 500));
                    }
                    function la(t, e) {
                      ia.call(this, t, e),
                        (this.type = 'DirectionalLight'),
                        this.position.copy(zn.DefaultUp),
                        this.updateMatrix(),
                        (this.target = new zn()),
                        (this.shadow = new ca());
                    }
                    function ua(t, e) {
                      ia.call(this, t, e),
                        (this.type = 'AmbientLight'),
                        (this.castShadow = void 0);
                    }
                    function ha(t, e, i, n) {
                      ia.call(this, t, e),
                        (this.type = 'RectAreaLight'),
                        this.position.set(0, 1, 0),
                        this.updateMatrix(),
                        (this.width = void 0 !== i ? i : 10),
                        (this.height = void 0 !== n ? n : 10);
                    }
                    Object.assign(Ks.prototype, {
                      load: function(t, e, i, n) {
                        void 0 === t && (t = ''),
                          void 0 !== this.path && (t = this.path + t);
                        var r = this,
                          o = Ws.get(t);
                        if (void 0 !== o)
                          return (
                            r.manager.itemStart(t),
                            setTimeout(function() {
                              e && e(o), r.manager.itemEnd(t);
                            }, 0),
                            o
                          );
                        var s = t.match(/^data:(.*?)(;base64)?,(.*)$/);
                        if (s) {
                          var a = s[1],
                            c = !!s[2],
                            l = s[3];
                          (l = window.decodeURIComponent(l)),
                            c && (l = window.atob(l));
                          try {
                            var u,
                              h = (this.responseType || '').toLowerCase();
                            switch (h) {
                              case 'arraybuffer':
                              case 'blob':
                                u = new ArrayBuffer(l.length);
                                for (
                                  var d = new Uint8Array(u), p = 0;
                                  p < l.length;
                                  p++
                                )
                                  d[p] = l.charCodeAt(p);
                                'blob' === h &&
                                  (u = new Blob([u], { type: a }));
                                break;
                              case 'document':
                                var f = new DOMParser();
                                u = f.parseFromString(l, a);
                                break;
                              case 'json':
                                u = JSON.parse(l);
                                break;
                              default:
                                u = l;
                            }
                            window.setTimeout(function() {
                              e && e(u), r.manager.itemEnd(t);
                            }, 0);
                          } catch (e) {
                            window.setTimeout(function() {
                              n && n(e),
                                r.manager.itemEnd(t),
                                r.manager.itemError(t);
                            }, 0);
                          }
                        } else {
                          var m = new XMLHttpRequest();
                          m.open('GET', t, !0),
                            m.addEventListener(
                              'load',
                              function(i) {
                                var o = i.target.response;
                                Ws.add(t, o),
                                  200 === this.status
                                    ? (e && e(o), r.manager.itemEnd(t))
                                    : 0 === this.status
                                      ? (console.warn(
                                          'THREE.FileLoader: HTTP Status 0 received.'
                                        ),
                                        e && e(o),
                                        r.manager.itemEnd(t))
                                      : (n && n(i),
                                        r.manager.itemEnd(t),
                                        r.manager.itemError(t));
                              },
                              !1
                            ),
                            void 0 !== i &&
                              m.addEventListener(
                                'progress',
                                function(t) {
                                  i(t);
                                },
                                !1
                              ),
                            m.addEventListener(
                              'error',
                              function(e) {
                                n && n(e),
                                  r.manager.itemEnd(t),
                                  r.manager.itemError(t);
                              },
                              !1
                            ),
                            void 0 !== this.responseType &&
                              (m.responseType = this.responseType),
                            void 0 !== this.withCredentials &&
                              (m.withCredentials = this.withCredentials),
                            m.overrideMimeType &&
                              m.overrideMimeType(
                                void 0 !== this.mimeType
                                  ? this.mimeType
                                  : 'text/plain'
                              );
                          for (var g in this.requestHeader)
                            m.setRequestHeader(g, this.requestHeader[g]);
                          m.send(null);
                        }
                        return r.manager.itemStart(t), m;
                      },
                      setPath: function(t) {
                        return (this.path = t), this;
                      },
                      setResponseType: function(t) {
                        return (this.responseType = t), this;
                      },
                      setWithCredentials: function(t) {
                        return (this.withCredentials = t), this;
                      },
                      setMimeType: function(t) {
                        return (this.mimeType = t), this;
                      },
                      setRequestHeader: function(t) {
                        return (this.requestHeader = t), this;
                      }
                    }),
                      Object.assign(Zs.prototype, {
                        load: function(t, e, i, n) {
                          var r = this,
                            o = [],
                            s = new Xo();
                          s.image = o;
                          var a = new Ks(this.manager);
                          function c(c) {
                            a.load(
                              t[c],
                              function(t) {
                                var i = r._parser(t, !0);
                                (o[c] = {
                                  width: i.width,
                                  height: i.height,
                                  format: i.format,
                                  mipmaps: i.mipmaps
                                }),
                                  6 === (l += 1) &&
                                    (1 === i.mipmapCount && (s.minFilter = yt),
                                    (s.format = i.format),
                                    (s.needsUpdate = !0),
                                    e && e(s));
                              },
                              i,
                              n
                            );
                          }
                          if (
                            (a.setPath(this.path),
                            a.setResponseType('arraybuffer'),
                            Array.isArray(t))
                          )
                            for (var l = 0, u = 0, h = t.length; u < h; ++u)
                              c(u);
                          else
                            a.load(
                              t,
                              function(t) {
                                var i = r._parser(t, !0);
                                if (i.isCubemap)
                                  for (
                                    var n = i.mipmaps.length / i.mipmapCount,
                                      a = 0;
                                    a < n;
                                    a++
                                  ) {
                                    o[a] = { mipmaps: [] };
                                    for (var c = 0; c < i.mipmapCount; c++)
                                      o[a].mipmaps.push(
                                        i.mipmaps[a * i.mipmapCount + c]
                                      ),
                                        (o[a].format = i.format),
                                        (o[a].width = i.width),
                                        (o[a].height = i.height);
                                  }
                                else
                                  (s.image.width = i.width),
                                    (s.image.height = i.height),
                                    (s.mipmaps = i.mipmaps);
                                1 === i.mipmapCount && (s.minFilter = yt),
                                  (s.format = i.format),
                                  (s.needsUpdate = !0),
                                  e && e(s);
                              },
                              i,
                              n
                            );
                          return s;
                        },
                        setPath: function(t) {
                          return (this.path = t), this;
                        }
                      }),
                      Object.assign(Js.prototype, {
                        load: function(t, e, i, n) {
                          var r = this,
                            o = new Pe(),
                            s = new Ks(this.manager);
                          return (
                            s.setResponseType('arraybuffer'),
                            s.load(
                              t,
                              function(t) {
                                var i = r._parser(t);
                                i &&
                                  (void 0 !== i.image
                                    ? (o.image = i.image)
                                    : void 0 !== i.data &&
                                      ((o.image.width = i.width),
                                      (o.image.height = i.height),
                                      (o.image.data = i.data)),
                                  (o.wrapS = void 0 !== i.wrapS ? i.wrapS : pt),
                                  (o.wrapT = void 0 !== i.wrapT ? i.wrapT : pt),
                                  (o.magFilter =
                                    void 0 !== i.magFilter ? i.magFilter : yt),
                                  (o.minFilter =
                                    void 0 !== i.minFilter ? i.minFilter : Mt),
                                  (o.anisotropy =
                                    void 0 !== i.anisotropy ? i.anisotropy : 1),
                                  void 0 !== i.format && (o.format = i.format),
                                  void 0 !== i.type && (o.type = i.type),
                                  void 0 !== i.mipmaps &&
                                    (o.mipmaps = i.mipmaps),
                                  1 === i.mipmapCount && (o.minFilter = yt),
                                  (o.needsUpdate = !0),
                                  e && e(o, i));
                              },
                              i,
                              n
                            ),
                            o
                          );
                        }
                      }),
                      Object.assign($s.prototype, {
                        crossOrigin: 'Anonymous',
                        load: function(t, e, i, n) {
                          void 0 === t && (t = ''),
                            void 0 !== this.path && (t = this.path + t);
                          var r = this,
                            o = Ws.get(t);
                          if (void 0 !== o)
                            return (
                              r.manager.itemStart(t),
                              setTimeout(function() {
                                e && e(o), r.manager.itemEnd(t);
                              }, 0),
                              o
                            );
                          var s = document.createElementNS(
                            'http://www.w3.org/1999/xhtml',
                            'img'
                          );
                          return (
                            s.addEventListener(
                              'load',
                              function() {
                                Ws.add(t, this),
                                  e && e(this),
                                  r.manager.itemEnd(t);
                              },
                              !1
                            ),
                            s.addEventListener(
                              'error',
                              function(e) {
                                n && n(e),
                                  r.manager.itemEnd(t),
                                  r.manager.itemError(t);
                              },
                              !1
                            ),
                            'data:' !== t.substr(0, 5) &&
                              void 0 !== this.crossOrigin &&
                              (s.crossOrigin = this.crossOrigin),
                            r.manager.itemStart(t),
                            (s.src = t),
                            s
                          );
                        },
                        setCrossOrigin: function(t) {
                          return (this.crossOrigin = t), this;
                        },
                        setPath: function(t) {
                          return (this.path = t), this;
                        }
                      }),
                      Object.assign(ta.prototype, {
                        crossOrigin: 'Anonymous',
                        load: function(t, e, i, n) {
                          var r = new Ue(),
                            o = new $s(this.manager);
                          o.setCrossOrigin(this.crossOrigin),
                            o.setPath(this.path);
                          var s = 0;
                          function a(i) {
                            o.load(
                              t[i],
                              function(t) {
                                (r.images[i] = t),
                                  6 === ++s &&
                                    ((r.needsUpdate = !0), e && e(r));
                              },
                              void 0,
                              n
                            );
                          }
                          for (var c = 0; c < t.length; ++c) a(c);
                          return r;
                        },
                        setCrossOrigin: function(t) {
                          return (this.crossOrigin = t), this;
                        },
                        setPath: function(t) {
                          return (this.path = t), this;
                        }
                      }),
                      Object.assign(ea.prototype, {
                        crossOrigin: 'Anonymous',
                        load: function(t, e, i, n) {
                          var r = new $s(this.manager);
                          r.setCrossOrigin(this.crossOrigin),
                            r.setPath(this.path);
                          var o = new Ie();
                          return (
                            (o.image = r.load(
                              t,
                              function() {
                                var i =
                                  t.search(/\.(jpg|jpeg)$/) > 0 ||
                                  0 === t.search(/^data\:image\/jpeg/);
                                (o.format = i ? Ot : Rt),
                                  (o.needsUpdate = !0),
                                  void 0 !== e && e(o);
                              },
                              i,
                              n
                            )),
                            o
                          );
                        },
                        setCrossOrigin: function(t) {
                          return (this.crossOrigin = t), this;
                        },
                        setPath: function(t) {
                          return (this.path = t), this;
                        }
                      }),
                      (ia.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: ia,
                          isLight: !0,
                          copy: function(t) {
                            return (
                              zn.prototype.copy.call(this, t),
                              this.color.copy(t.color),
                              (this.intensity = t.intensity),
                              this
                            );
                          },
                          toJSON: function(t) {
                            var e = zn.prototype.toJSON.call(this, t);
                            return (
                              (e.object.color = this.color.getHex()),
                              (e.object.intensity = this.intensity),
                              void 0 !== this.groundColor &&
                                (e.object.groundColor = this.groundColor.getHex()),
                              void 0 !== this.distance &&
                                (e.object.distance = this.distance),
                              void 0 !== this.angle &&
                                (e.object.angle = this.angle),
                              void 0 !== this.decay &&
                                (e.object.decay = this.decay),
                              void 0 !== this.penumbra &&
                                (e.object.penumbra = this.penumbra),
                              void 0 !== this.shadow &&
                                (e.object.shadow = this.shadow.toJSON()),
                              e
                            );
                          }
                        }
                      )),
                      (na.prototype = Object.assign(
                        Object.create(ia.prototype),
                        {
                          constructor: na,
                          isHemisphereLight: !0,
                          copy: function(t) {
                            return (
                              ia.prototype.copy.call(this, t),
                              this.groundColor.copy(t.groundColor),
                              this
                            );
                          }
                        }
                      )),
                      Object.assign(ra.prototype, {
                        copy: function(t) {
                          return (
                            (this.camera = t.camera.clone()),
                            (this.bias = t.bias),
                            (this.radius = t.radius),
                            this.mapSize.copy(t.mapSize),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        toJSON: function() {
                          var t = {};
                          return (
                            0 !== this.bias && (t.bias = this.bias),
                            1 !== this.radius && (t.radius = this.radius),
                            (512 === this.mapSize.x &&
                              512 === this.mapSize.y) ||
                              (t.mapSize = this.mapSize.toArray()),
                            (t.camera = this.camera.toJSON(!1).object),
                            delete t.camera.matrix,
                            t
                          );
                        }
                      }),
                      (oa.prototype = Object.assign(
                        Object.create(ra.prototype),
                        {
                          constructor: oa,
                          isSpotLightShadow: !0,
                          update: function(t) {
                            var e = this.camera,
                              i = 2 * ue.RAD2DEG * t.angle,
                              n = this.mapSize.width / this.mapSize.height,
                              r = t.distance || e.far;
                            (i === e.fov && n === e.aspect && r === e.far) ||
                              ((e.fov = i),
                              (e.aspect = n),
                              (e.far = r),
                              e.updateProjectionMatrix());
                          }
                        }
                      )),
                      (sa.prototype = Object.assign(
                        Object.create(ia.prototype),
                        {
                          constructor: sa,
                          isSpotLight: !0,
                          copy: function(t) {
                            return (
                              ia.prototype.copy.call(this, t),
                              (this.distance = t.distance),
                              (this.angle = t.angle),
                              (this.penumbra = t.penumbra),
                              (this.decay = t.decay),
                              (this.target = t.target.clone()),
                              (this.shadow = t.shadow.clone()),
                              this
                            );
                          }
                        }
                      )),
                      (aa.prototype = Object.assign(
                        Object.create(ia.prototype),
                        {
                          constructor: aa,
                          isPointLight: !0,
                          copy: function(t) {
                            return (
                              ia.prototype.copy.call(this, t),
                              (this.distance = t.distance),
                              (this.decay = t.decay),
                              (this.shadow = t.shadow.clone()),
                              this
                            );
                          }
                        }
                      )),
                      (ca.prototype = Object.assign(
                        Object.create(ra.prototype),
                        { constructor: ca }
                      )),
                      (la.prototype = Object.assign(
                        Object.create(ia.prototype),
                        {
                          constructor: la,
                          isDirectionalLight: !0,
                          copy: function(t) {
                            return (
                              ia.prototype.copy.call(this, t),
                              (this.target = t.target.clone()),
                              (this.shadow = t.shadow.clone()),
                              this
                            );
                          }
                        }
                      )),
                      (ua.prototype = Object.assign(
                        Object.create(ia.prototype),
                        { constructor: ua, isAmbientLight: !0 }
                      )),
                      (ha.prototype = Object.assign(
                        Object.create(ia.prototype),
                        {
                          constructor: ha,
                          isRectAreaLight: !0,
                          copy: function(t) {
                            return (
                              ia.prototype.copy.call(this, t),
                              (this.width = t.width),
                              (this.height = t.height),
                              this
                            );
                          },
                          toJSON: function(t) {
                            var e = ia.prototype.toJSON.call(this, t);
                            return (
                              (e.object.width = this.width),
                              (e.object.height = this.height),
                              e
                            );
                          }
                        }
                      ));
                    var da,
                      pa = {
                        arraySlice: function(t, e, i) {
                          return pa.isTypedArray(t)
                            ? new t.constructor(
                                t.subarray(e, void 0 !== i ? i : t.length)
                              )
                            : t.slice(e, i);
                        },
                        convertArray: function(t, e, i) {
                          return !t || (!i && t.constructor === e)
                            ? t
                            : 'number' == typeof e.BYTES_PER_ELEMENT
                              ? new e(t)
                              : Array.prototype.slice.call(t);
                        },
                        isTypedArray: function(t) {
                          return (
                            ArrayBuffer.isView(t) && !(t instanceof DataView)
                          );
                        },
                        getKeyframeOrder: function(t) {
                          for (
                            var e = t.length, i = new Array(e), n = 0;
                            n !== e;
                            ++n
                          )
                            i[n] = n;
                          return (
                            i.sort(function(e, i) {
                              return t[e] - t[i];
                            }),
                            i
                          );
                        },
                        sortedArray: function(t, e, i) {
                          for (
                            var n = t.length,
                              r = new t.constructor(n),
                              o = 0,
                              s = 0;
                            s !== n;
                            ++o
                          )
                            for (var a = i[o] * e, c = 0; c !== e; ++c)
                              r[s++] = t[a + c];
                          return r;
                        },
                        flattenJSON: function(t, e, i, n) {
                          for (
                            var r = 1, o = t[0];
                            void 0 !== o && void 0 === o[n];

                          )
                            o = t[r++];
                          if (void 0 !== o) {
                            var s = o[n];
                            if (void 0 !== s)
                              if (Array.isArray(s))
                                do {
                                  void 0 !== (s = o[n]) &&
                                    (e.push(o.time), i.push.apply(i, s)),
                                    (o = t[r++]);
                                } while (void 0 !== o);
                              else if (void 0 !== s.toArray)
                                do {
                                  void 0 !== (s = o[n]) &&
                                    (e.push(o.time), s.toArray(i, i.length)),
                                    (o = t[r++]);
                                } while (void 0 !== o);
                              else
                                do {
                                  void 0 !== (s = o[n]) &&
                                    (e.push(o.time), i.push(s)),
                                    (o = t[r++]);
                                } while (void 0 !== o);
                          }
                        }
                      };
                    function fa(t, e, i, n) {
                      (this.parameterPositions = t),
                        (this._cachedIndex = 0),
                        (this.resultBuffer =
                          void 0 !== n ? n : new e.constructor(i)),
                        (this.sampleValues = e),
                        (this.valueSize = i);
                    }
                    function ma(t, e, i, n) {
                      fa.call(this, t, e, i, n),
                        (this._weightPrev = -0),
                        (this._offsetPrev = -0),
                        (this._weightNext = -0),
                        (this._offsetNext = -0);
                    }
                    function ga(t, e, i, n) {
                      fa.call(this, t, e, i, n);
                    }
                    function va(t, e, i, n) {
                      fa.call(this, t, e, i, n);
                    }
                    function ya(t, e, i, n) {
                      if (void 0 === t)
                        throw new Error('track name is undefined');
                      if (void 0 === e || 0 === e.length)
                        throw new Error('no keyframes in track named ' + t);
                      (this.name = t),
                        (this.times = pa.convertArray(e, this.TimeBufferType)),
                        (this.values = pa.convertArray(
                          i,
                          this.ValueBufferType
                        )),
                        this.setInterpolation(n || this.DefaultInterpolation),
                        this.validate(),
                        this.optimize();
                    }
                    function wa(t, e, i, n) {
                      ya.call(this, t, e, i, n);
                    }
                    function Ma(t, e, i, n) {
                      fa.call(this, t, e, i, n);
                    }
                    function Ea(t, e, i, n) {
                      ya.call(this, t, e, i, n);
                    }
                    function ba(t, e, i, n) {
                      ya.call(this, t, e, i, n);
                    }
                    function xa(t, e, i, n) {
                      ya.call(this, t, e, i, n);
                    }
                    function Aa(t, e, i) {
                      ya.call(this, t, e, i);
                    }
                    function Ta(t, e, i, n) {
                      ya.call(this, t, e, i, n);
                    }
                    function La(t, e, i, n) {
                      ya.apply(this, arguments);
                    }
                    function Na(t, e, i) {
                      (this.name = t),
                        (this.tracks = i),
                        (this.duration = void 0 !== e ? e : -1),
                        (this.uuid = ue.generateUUID()),
                        this.duration < 0 && this.resetDuration(),
                        this.optimize();
                    }
                    function Da(t) {
                      (this.manager = void 0 !== t ? t : Xs),
                        (this.textures = {});
                    }
                    function Sa(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    Object.assign(fa.prototype, {
                      evaluate: function(t) {
                        var e = this.parameterPositions,
                          i = this._cachedIndex,
                          n = e[i],
                          r = e[i - 1];
                        t: {
                          e: {
                            var o;
                            i: {
                              n: if (!(t < n)) {
                                for (var s = i + 2; ; ) {
                                  if (void 0 === n) {
                                    if (t < r) break n;
                                    return (
                                      (i = e.length),
                                      (this._cachedIndex = i),
                                      this.afterEnd_(i - 1, t, r)
                                    );
                                  }
                                  if (i === s) break;
                                  if (((r = n), t < (n = e[++i]))) break e;
                                }
                                o = e.length;
                                break i;
                              }
                              if (t >= r) break t;
                              var a = e[1];
                              t < a && ((i = 2), (r = a));
                              for (s = i - 2; ; ) {
                                if (void 0 === r)
                                  return (
                                    (this._cachedIndex = 0),
                                    this.beforeStart_(0, t, n)
                                  );
                                if (i === s) break;
                                if (((n = r), t >= (r = e[--i - 1]))) break e;
                              }
                              (o = i), (i = 0);
                            }
                            for (; i < o; ) {
                              var c = (i + o) >>> 1;
                              t < e[c] ? (o = c) : (i = c + 1);
                            }
                            if (((n = e[i]), void 0 === (r = e[i - 1])))
                              return (
                                (this._cachedIndex = 0),
                                this.beforeStart_(0, t, n)
                              );
                            if (void 0 === n)
                              return (
                                (i = e.length),
                                (this._cachedIndex = i),
                                this.afterEnd_(i - 1, r, t)
                              );
                          }
                          (this._cachedIndex = i),
                            this.intervalChanged_(i, r, n);
                        }
                        return this.interpolate_(i, r, t, n);
                      },
                      settings: null,
                      DefaultSettings_: {},
                      getSettings_: function() {
                        return this.settings || this.DefaultSettings_;
                      },
                      copySampleValue_: function(t) {
                        for (
                          var e = this.resultBuffer,
                            i = this.sampleValues,
                            n = this.valueSize,
                            r = t * n,
                            o = 0;
                          o !== n;
                          ++o
                        )
                          e[o] = i[r + o];
                        return e;
                      },
                      interpolate_: function(t, e, i, n) {
                        throw new Error('call to abstract method');
                      },
                      intervalChanged_: function(t, e, i) {}
                    }),
                      Object.assign(fa.prototype, {
                        beforeStart_: fa.prototype.copySampleValue_,
                        afterEnd_: fa.prototype.copySampleValue_
                      }),
                      (ma.prototype = Object.assign(
                        Object.create(fa.prototype),
                        {
                          constructor: ma,
                          DefaultSettings_: { endingStart: Zt, endingEnd: Zt },
                          intervalChanged_: function(t, e, i) {
                            var n = this.parameterPositions,
                              r = t - 2,
                              o = t + 1,
                              s = n[r],
                              a = n[o];
                            if (void 0 === s)
                              switch (this.getSettings_().endingStart) {
                                case 2401:
                                  (r = t), (s = 2 * e - i);
                                  break;
                                case 2402:
                                  s = e + n[(r = n.length - 2)] - n[r + 1];
                                  break;
                                default:
                                  (r = t), (s = i);
                              }
                            if (void 0 === a)
                              switch (this.getSettings_().endingEnd) {
                                case 2401:
                                  (o = t), (a = 2 * i - e);
                                  break;
                                case 2402:
                                  (o = 1), (a = i + n[1] - n[0]);
                                  break;
                                default:
                                  (o = t - 1), (a = e);
                              }
                            var c = 0.5 * (i - e),
                              l = this.valueSize;
                            (this._weightPrev = c / (e - s)),
                              (this._weightNext = c / (a - i)),
                              (this._offsetPrev = r * l),
                              (this._offsetNext = o * l);
                          },
                          interpolate_: function(t, e, i, n) {
                            for (
                              var r = this.resultBuffer,
                                o = this.sampleValues,
                                s = this.valueSize,
                                a = t * s,
                                c = a - s,
                                l = this._offsetPrev,
                                u = this._offsetNext,
                                h = this._weightPrev,
                                d = this._weightNext,
                                p = (i - e) / (n - e),
                                f = p * p,
                                m = f * p,
                                g = -h * m + 2 * h * f - h * p,
                                v =
                                  (1 + h) * m +
                                  (-1.5 - 2 * h) * f +
                                  (-0.5 + h) * p +
                                  1,
                                y = (-1 - d) * m + (1.5 + d) * f + 0.5 * p,
                                w = d * m - d * f,
                                M = 0;
                              M !== s;
                              ++M
                            )
                              r[M] =
                                g * o[l + M] +
                                v * o[c + M] +
                                y * o[a + M] +
                                w * o[u + M];
                            return r;
                          }
                        }
                      )),
                      (ga.prototype = Object.assign(
                        Object.create(fa.prototype),
                        {
                          constructor: ga,
                          interpolate_: function(t, e, i, n) {
                            for (
                              var r = this.resultBuffer,
                                o = this.sampleValues,
                                s = this.valueSize,
                                a = t * s,
                                c = a - s,
                                l = (i - e) / (n - e),
                                u = 1 - l,
                                h = 0;
                              h !== s;
                              ++h
                            )
                              r[h] = o[c + h] * u + o[a + h] * l;
                            return r;
                          }
                        }
                      )),
                      (va.prototype = Object.assign(
                        Object.create(fa.prototype),
                        {
                          constructor: va,
                          interpolate_: function(t, e, i, n) {
                            return this.copySampleValue_(t - 1);
                          }
                        }
                      )),
                      (da = {
                        TimeBufferType: Float32Array,
                        ValueBufferType: Float32Array,
                        DefaultInterpolation: 2301,
                        InterpolantFactoryMethodDiscrete: function(t) {
                          return new va(
                            this.times,
                            this.values,
                            this.getValueSize(),
                            t
                          );
                        },
                        InterpolantFactoryMethodLinear: function(t) {
                          return new ga(
                            this.times,
                            this.values,
                            this.getValueSize(),
                            t
                          );
                        },
                        InterpolantFactoryMethodSmooth: function(t) {
                          return new ma(
                            this.times,
                            this.values,
                            this.getValueSize(),
                            t
                          );
                        },
                        setInterpolation: function(t) {
                          var e;
                          switch (t) {
                            case 2300:
                              e = this.InterpolantFactoryMethodDiscrete;
                              break;
                            case 2301:
                              e = this.InterpolantFactoryMethodLinear;
                              break;
                            case 2302:
                              e = this.InterpolantFactoryMethodSmooth;
                          }
                          if (void 0 !== e) this.createInterpolant = e;
                          else {
                            var i =
                              'unsupported interpolation for ' +
                              this.ValueTypeName +
                              ' keyframe track named ' +
                              this.name;
                            if (void 0 === this.createInterpolant) {
                              if (t === this.DefaultInterpolation)
                                throw new Error(i);
                              this.setInterpolation(this.DefaultInterpolation);
                            }
                            console.warn('THREE.KeyframeTrackPrototype:', i);
                          }
                        },
                        getInterpolation: function() {
                          switch (this.createInterpolant) {
                            case this.InterpolantFactoryMethodDiscrete:
                              return 2300;
                            case this.InterpolantFactoryMethodLinear:
                              return 2301;
                            case this.InterpolantFactoryMethodSmooth:
                              return 2302;
                          }
                        },
                        getValueSize: function() {
                          return this.values.length / this.times.length;
                        },
                        shift: function(t) {
                          if (0 !== t)
                            for (
                              var e = this.times, i = 0, n = e.length;
                              i !== n;
                              ++i
                            )
                              e[i] += t;
                          return this;
                        },
                        scale: function(t) {
                          if (1 !== t)
                            for (
                              var e = this.times, i = 0, n = e.length;
                              i !== n;
                              ++i
                            )
                              e[i] *= t;
                          return this;
                        },
                        trim: function(t, e) {
                          for (
                            var i = this.times, n = i.length, r = 0, o = n - 1;
                            r !== n && i[r] < t;

                          )
                            ++r;
                          for (; -1 !== o && i[o] > e; ) --o;
                          if ((++o, 0 !== r || o !== n)) {
                            r >= o && (r = (o = Math.max(o, 1)) - 1);
                            var s = this.getValueSize();
                            (this.times = pa.arraySlice(i, r, o)),
                              (this.values = pa.arraySlice(
                                this.values,
                                r * s,
                                o * s
                              ));
                          }
                          return this;
                        },
                        validate: function() {
                          var t = !0,
                            e = this.getValueSize();
                          e - Math.floor(e) != 0 &&
                            (console.error(
                              'THREE.KeyframeTrackPrototype: Invalid value size in track.',
                              this
                            ),
                            (t = !1));
                          var i = this.times,
                            n = this.values,
                            r = i.length;
                          0 === r &&
                            (console.error(
                              'THREE.KeyframeTrackPrototype: Track is empty.',
                              this
                            ),
                            (t = !1));
                          for (var o = null, s = 0; s !== r; s++) {
                            var a = i[s];
                            if ('number' == typeof a && isNaN(a)) {
                              console.error(
                                'THREE.KeyframeTrackPrototype: Time is not a valid number.',
                                this,
                                s,
                                a
                              ),
                                (t = !1);
                              break;
                            }
                            if (null !== o && o > a) {
                              console.error(
                                'THREE.KeyframeTrackPrototype: Out of order keys.',
                                this,
                                s,
                                a,
                                o
                              ),
                                (t = !1);
                              break;
                            }
                            o = a;
                          }
                          if (void 0 !== n && pa.isTypedArray(n)) {
                            s = 0;
                            for (var c = n.length; s !== c; ++s) {
                              var l = n[s];
                              if (isNaN(l)) {
                                console.error(
                                  'THREE.KeyframeTrackPrototype: Value is not a valid number.',
                                  this,
                                  s,
                                  l
                                ),
                                  (t = !1);
                                break;
                              }
                            }
                          }
                          return t;
                        },
                        optimize: function() {
                          for (
                            var t = this.times,
                              e = this.values,
                              i = this.getValueSize(),
                              n = 2302 === this.getInterpolation(),
                              r = 1,
                              o = t.length - 1,
                              s = 1;
                            s < o;
                            ++s
                          ) {
                            var a = !1,
                              c = t[s];
                            if (c !== t[s + 1] && (1 !== s || c !== c[0]))
                              if (n) a = !0;
                              else
                                for (
                                  var l = s * i, u = l - i, h = l + i, d = 0;
                                  d !== i;
                                  ++d
                                ) {
                                  var p = e[l + d];
                                  if (p !== e[u + d] || p !== e[h + d]) {
                                    a = !0;
                                    break;
                                  }
                                }
                            if (a) {
                              if (s !== r) {
                                t[r] = t[s];
                                var f = s * i,
                                  m = r * i;
                                for (d = 0; d !== i; ++d) e[m + d] = e[f + d];
                              }
                              ++r;
                            }
                          }
                          if (o > 0) {
                            t[r] = t[o];
                            for (f = o * i, m = r * i, d = 0; d !== i; ++d)
                              e[m + d] = e[f + d];
                            ++r;
                          }
                          return (
                            r !== t.length &&
                              ((this.times = pa.arraySlice(t, 0, r)),
                              (this.values = pa.arraySlice(e, 0, r * i))),
                            this
                          );
                        }
                      }),
                      (wa.prototype = Object.assign(Object.create(da), {
                        constructor: wa,
                        ValueTypeName: 'vector'
                      })),
                      (Ma.prototype = Object.assign(
                        Object.create(fa.prototype),
                        {
                          constructor: Ma,
                          interpolate_: function(t, e, i, n) {
                            for (
                              var r = this.resultBuffer,
                                o = this.sampleValues,
                                s = this.valueSize,
                                a = t * s,
                                c = (i - e) / (n - e),
                                l = a + s;
                              a !== l;
                              a += 4
                            )
                              ze.slerpFlat(r, 0, o, a - s, o, a, c);
                            return r;
                          }
                        }
                      )),
                      (Ea.prototype = Object.assign(Object.create(da), {
                        constructor: Ea,
                        ValueTypeName: 'quaternion',
                        DefaultInterpolation: 2301,
                        InterpolantFactoryMethodLinear: function(t) {
                          return new Ma(
                            this.times,
                            this.values,
                            this.getValueSize(),
                            t
                          );
                        },
                        InterpolantFactoryMethodSmooth: void 0
                      })),
                      (ba.prototype = Object.assign(Object.create(da), {
                        constructor: ba,
                        ValueTypeName: 'number'
                      })),
                      (xa.prototype = Object.assign(Object.create(da), {
                        constructor: xa,
                        ValueTypeName: 'string',
                        ValueBufferType: Array,
                        DefaultInterpolation: 2300,
                        InterpolantFactoryMethodLinear: void 0,
                        InterpolantFactoryMethodSmooth: void 0
                      })),
                      (Aa.prototype = Object.assign(Object.create(da), {
                        constructor: Aa,
                        ValueTypeName: 'bool',
                        ValueBufferType: Array,
                        DefaultInterpolation: 2300,
                        InterpolantFactoryMethodLinear: void 0,
                        InterpolantFactoryMethodSmooth: void 0
                      })),
                      (Ta.prototype = Object.assign(Object.create(da), {
                        constructor: Ta,
                        ValueTypeName: 'color'
                      })),
                      (La.prototype = da),
                      (da.constructor = La),
                      Object.assign(La, {
                        parse: function(t) {
                          if (void 0 === t.type)
                            throw new Error(
                              'track type undefined, can not parse'
                            );
                          var e = La._getTrackTypeForValueTypeName(t.type);
                          if (void 0 === t.times) {
                            var i = [],
                              n = [];
                            pa.flattenJSON(t.keys, i, n, 'value'),
                              (t.times = i),
                              (t.values = n);
                          }
                          return void 0 !== e.parse
                            ? e.parse(t)
                            : new e(t.name, t.times, t.values, t.interpolation);
                        },
                        toJSON: function(t) {
                          var e,
                            i = t.constructor;
                          if (void 0 !== i.toJSON) e = i.toJSON(t);
                          else {
                            e = {
                              name: t.name,
                              times: pa.convertArray(t.times, Array),
                              values: pa.convertArray(t.values, Array)
                            };
                            var n = t.getInterpolation();
                            n !== t.DefaultInterpolation &&
                              (e.interpolation = n);
                          }
                          return (e.type = t.ValueTypeName), e;
                        },
                        _getTrackTypeForValueTypeName: function(t) {
                          switch (t.toLowerCase()) {
                            case 'scalar':
                            case 'double':
                            case 'float':
                            case 'number':
                            case 'integer':
                              return ba;
                            case 'vector':
                            case 'vector2':
                            case 'vector3':
                            case 'vector4':
                              return wa;
                            case 'color':
                              return Ta;
                            case 'quaternion':
                              return Ea;
                            case 'bool':
                            case 'boolean':
                              return Aa;
                            case 'string':
                              return xa;
                          }
                          throw new Error('Unsupported typeName: ' + t);
                        }
                      }),
                      Object.assign(Na, {
                        parse: function(t) {
                          for (
                            var e = [],
                              i = t.tracks,
                              n = 1 / (t.fps || 1),
                              r = 0,
                              o = i.length;
                            r !== o;
                            ++r
                          )
                            e.push(La.parse(i[r]).scale(n));
                          return new Na(t.name, t.duration, e);
                        },
                        toJSON: function(t) {
                          for (
                            var e = [],
                              i = t.tracks,
                              n = {
                                name: t.name,
                                duration: t.duration,
                                tracks: e
                              },
                              r = 0,
                              o = i.length;
                            r !== o;
                            ++r
                          )
                            e.push(La.toJSON(i[r]));
                          return n;
                        },
                        CreateFromMorphTargetSequence: function(t, e, i, n) {
                          for (var r = e.length, o = [], s = 0; s < r; s++) {
                            var a = [],
                              c = [];
                            a.push((s + r - 1) % r, s, (s + 1) % r),
                              c.push(0, 1, 0);
                            var l = pa.getKeyframeOrder(a);
                            (a = pa.sortedArray(a, 1, l)),
                              (c = pa.sortedArray(c, 1, l)),
                              n || 0 !== a[0] || (a.push(r), c.push(c[0])),
                              o.push(
                                new ba(
                                  '.morphTargetInfluences[' + e[s].name + ']',
                                  a,
                                  c
                                ).scale(1 / i)
                              );
                          }
                          return new Na(t, -1, o);
                        },
                        findByName: function(t, e) {
                          var i = t;
                          if (!Array.isArray(t)) {
                            var n = t;
                            i =
                              (n.geometry && n.geometry.animations) ||
                              n.animations;
                          }
                          for (var r = 0; r < i.length; r++)
                            if (i[r].name === e) return i[r];
                          return null;
                        },
                        CreateClipsFromMorphTargetSequences: function(t, e, i) {
                          for (
                            var n = {},
                              r = /^([\w-]*?)([\d]+)$/,
                              o = 0,
                              s = t.length;
                            o < s;
                            o++
                          ) {
                            var a = t[o],
                              c = a.name.match(r);
                            if (c && c.length > 1) {
                              var l = n[(h = c[1])];
                              l || (n[h] = l = []), l.push(a);
                            }
                          }
                          var u = [];
                          for (var h in n)
                            u.push(
                              Na.CreateFromMorphTargetSequence(h, n[h], e, i)
                            );
                          return u;
                        },
                        parseAnimation: function(t, e) {
                          if (!t)
                            return (
                              console.error(
                                'THREE.AnimationClip: No animation in JSONLoader data.'
                              ),
                              null
                            );
                          for (
                            var i = function(t, e, i, n, r) {
                                if (0 !== i.length) {
                                  var o = [],
                                    s = [];
                                  pa.flattenJSON(i, o, s, n),
                                    0 !== o.length && r.push(new t(e, o, s));
                                }
                              },
                              n = [],
                              r = t.name || 'default',
                              o = t.length || -1,
                              s = t.fps || 30,
                              a = t.hierarchy || [],
                              c = 0;
                            c < a.length;
                            c++
                          ) {
                            var l = a[c].keys;
                            if (l && 0 !== l.length)
                              if (l[0].morphTargets) {
                                for (var u = {}, h = 0; h < l.length; h++)
                                  if (l[h].morphTargets)
                                    for (
                                      var d = 0;
                                      d < l[h].morphTargets.length;
                                      d++
                                    )
                                      u[l[h].morphTargets[d]] = -1;
                                for (var p in u) {
                                  var f = [],
                                    m = [];
                                  for (
                                    d = 0;
                                    d !== l[h].morphTargets.length;
                                    ++d
                                  ) {
                                    var g = l[h];
                                    f.push(g.time),
                                      m.push(g.morphTarget === p ? 1 : 0);
                                  }
                                  n.push(
                                    new ba(
                                      '.morphTargetInfluence[' + p + ']',
                                      f,
                                      m
                                    )
                                  );
                                }
                                o = u.length * (s || 1);
                              } else {
                                var v = '.bones[' + e[c].name + ']';
                                i(wa, v + '.position', l, 'pos', n),
                                  i(Ea, v + '.quaternion', l, 'rot', n),
                                  i(wa, v + '.scale', l, 'scl', n);
                              }
                          }
                          return 0 === n.length ? null : new Na(r, o, n);
                        }
                      }),
                      Object.assign(Na.prototype, {
                        resetDuration: function() {
                          for (
                            var t = 0, e = 0, i = this.tracks.length;
                            e !== i;
                            ++e
                          ) {
                            var n = this.tracks[e];
                            t = Math.max(t, n.times[n.times.length - 1]);
                          }
                          this.duration = t;
                        },
                        trim: function() {
                          for (var t = 0; t < this.tracks.length; t++)
                            this.tracks[t].trim(0, this.duration);
                          return this;
                        },
                        optimize: function() {
                          for (var t = 0; t < this.tracks.length; t++)
                            this.tracks[t].optimize();
                          return this;
                        }
                      }),
                      Object.assign(Da.prototype, {
                        load: function(t, e, i, n) {
                          var r = this;
                          new Ks(r.manager).load(
                            t,
                            function(t) {
                              e(r.parse(JSON.parse(t)));
                            },
                            i,
                            n
                          );
                        },
                        setTextures: function(t) {
                          this.textures = t;
                        },
                        parse: function(t) {
                          var e = this.textures;
                          function i(t) {
                            return (
                              void 0 === e[t] &&
                                console.warn(
                                  'THREE.MaterialLoader: Undefined texture',
                                  t
                                ),
                              e[t]
                            );
                          }
                          var n = new Qs[t.type]();
                          if (
                            (void 0 !== t.uuid && (n.uuid = t.uuid),
                            void 0 !== t.name && (n.name = t.name),
                            void 0 !== t.color && n.color.setHex(t.color),
                            void 0 !== t.roughness &&
                              (n.roughness = t.roughness),
                            void 0 !== t.metalness &&
                              (n.metalness = t.metalness),
                            void 0 !== t.emissive &&
                              n.emissive.setHex(t.emissive),
                            void 0 !== t.specular &&
                              n.specular.setHex(t.specular),
                            void 0 !== t.shininess &&
                              (n.shininess = t.shininess),
                            void 0 !== t.clearCoat &&
                              (n.clearCoat = t.clearCoat),
                            void 0 !== t.clearCoatRoughness &&
                              (n.clearCoatRoughness = t.clearCoatRoughness),
                            void 0 !== t.uniforms && (n.uniforms = t.uniforms),
                            void 0 !== t.vertexShader &&
                              (n.vertexShader = t.vertexShader),
                            void 0 !== t.fragmentShader &&
                              (n.fragmentShader = t.fragmentShader),
                            void 0 !== t.vertexColors &&
                              (n.vertexColors = t.vertexColors),
                            void 0 !== t.fog && (n.fog = t.fog),
                            void 0 !== t.flatShading &&
                              (n.flatShading = t.flatShading),
                            void 0 !== t.blending && (n.blending = t.blending),
                            void 0 !== t.side && (n.side = t.side),
                            void 0 !== t.opacity && (n.opacity = t.opacity),
                            void 0 !== t.transparent &&
                              (n.transparent = t.transparent),
                            void 0 !== t.alphaTest &&
                              (n.alphaTest = t.alphaTest),
                            void 0 !== t.depthTest &&
                              (n.depthTest = t.depthTest),
                            void 0 !== t.depthWrite &&
                              (n.depthWrite = t.depthWrite),
                            void 0 !== t.colorWrite &&
                              (n.colorWrite = t.colorWrite),
                            void 0 !== t.wireframe &&
                              (n.wireframe = t.wireframe),
                            void 0 !== t.wireframeLinewidth &&
                              (n.wireframeLinewidth = t.wireframeLinewidth),
                            void 0 !== t.wireframeLinecap &&
                              (n.wireframeLinecap = t.wireframeLinecap),
                            void 0 !== t.wireframeLinejoin &&
                              (n.wireframeLinejoin = t.wireframeLinejoin),
                            void 0 !== t.skinning && (n.skinning = t.skinning),
                            void 0 !== t.morphTargets &&
                              (n.morphTargets = t.morphTargets),
                            void 0 !== t.dithering &&
                              (n.dithering = t.dithering),
                            void 0 !== t.visible && (n.visible = t.visible),
                            void 0 !== t.userData && (n.userData = t.userData),
                            void 0 !== t.shading &&
                              (n.flatShading = 1 === t.shading),
                            void 0 !== t.size && (n.size = t.size),
                            void 0 !== t.sizeAttenuation &&
                              (n.sizeAttenuation = t.sizeAttenuation),
                            void 0 !== t.map && (n.map = i(t.map)),
                            void 0 !== t.alphaMap &&
                              ((n.alphaMap = i(t.alphaMap)),
                              (n.transparent = !0)),
                            void 0 !== t.bumpMap && (n.bumpMap = i(t.bumpMap)),
                            void 0 !== t.bumpScale &&
                              (n.bumpScale = t.bumpScale),
                            void 0 !== t.normalMap &&
                              (n.normalMap = i(t.normalMap)),
                            void 0 !== t.normalScale)
                          ) {
                            var r = t.normalScale;
                            !1 === Array.isArray(r) && (r = [r, r]),
                              (n.normalScale = new he().fromArray(r));
                          }
                          return (
                            void 0 !== t.displacementMap &&
                              (n.displacementMap = i(t.displacementMap)),
                            void 0 !== t.displacementScale &&
                              (n.displacementScale = t.displacementScale),
                            void 0 !== t.displacementBias &&
                              (n.displacementBias = t.displacementBias),
                            void 0 !== t.roughnessMap &&
                              (n.roughnessMap = i(t.roughnessMap)),
                            void 0 !== t.metalnessMap &&
                              (n.metalnessMap = i(t.metalnessMap)),
                            void 0 !== t.emissiveMap &&
                              (n.emissiveMap = i(t.emissiveMap)),
                            void 0 !== t.emissiveIntensity &&
                              (n.emissiveIntensity = t.emissiveIntensity),
                            void 0 !== t.specularMap &&
                              (n.specularMap = i(t.specularMap)),
                            void 0 !== t.envMap && (n.envMap = i(t.envMap)),
                            void 0 !== t.reflectivity &&
                              (n.reflectivity = t.reflectivity),
                            void 0 !== t.lightMap &&
                              (n.lightMap = i(t.lightMap)),
                            void 0 !== t.lightMapIntensity &&
                              (n.lightMapIntensity = t.lightMapIntensity),
                            void 0 !== t.aoMap && (n.aoMap = i(t.aoMap)),
                            void 0 !== t.aoMapIntensity &&
                              (n.aoMapIntensity = t.aoMapIntensity),
                            void 0 !== t.gradientMap &&
                              (n.gradientMap = i(t.gradientMap)),
                            n
                          );
                        }
                      }),
                      Object.assign(Sa.prototype, {
                        load: function(t, e, i, n) {
                          var r = this;
                          new Ks(r.manager).load(
                            t,
                            function(t) {
                              e(r.parse(JSON.parse(t)));
                            },
                            i,
                            n
                          );
                        },
                        parse: function(t) {
                          var e = new Fr(),
                            i = t.data.index;
                          if (void 0 !== i) {
                            var n = new Ra[i.type](i.array);
                            e.setIndex(new Sr(n, 1));
                          }
                          var r = t.data.attributes;
                          for (var o in r) {
                            var s = r[o];
                            n = new Ra[s.type](s.array);
                            e.addAttribute(
                              o,
                              new Sr(n, s.itemSize, s.normalized)
                            );
                          }
                          var a =
                            t.data.groups || t.data.drawcalls || t.data.offsets;
                          if (void 0 !== a)
                            for (var c = 0, l = a.length; c !== l; ++c) {
                              var u = a[c];
                              e.addGroup(u.start, u.count, u.materialIndex);
                            }
                          var h = t.data.boundingSphere;
                          if (void 0 !== h) {
                            var d = new ke();
                            void 0 !== h.center && d.fromArray(h.center),
                              (e.boundingSphere = new un(d, h.radius));
                          }
                          return e;
                        }
                      });
                    var Ca,
                      _a,
                      Ia,
                      ja,
                      Oa,
                      Ra = {
                        Int8Array: Int8Array,
                        Uint8Array: Uint8Array,
                        Uint8ClampedArray:
                          'undefined' != typeof Uint8ClampedArray
                            ? Uint8ClampedArray
                            : Uint8Array,
                        Int16Array: Int16Array,
                        Uint16Array: Uint16Array,
                        Int32Array: Int32Array,
                        Uint32Array: Uint32Array,
                        Float32Array: Float32Array,
                        Float64Array: Float64Array
                      };
                    function za() {
                      (this.onLoadStart = function() {}),
                        (this.onLoadProgress = function() {}),
                        (this.onLoadComplete = function() {});
                    }
                    function ka(t) {
                      'boolean' == typeof t &&
                        (console.warn(
                          'THREE.JSONLoader: showStatus parameter has been removed from constructor.'
                        ),
                        (t = void 0)),
                        (this.manager = void 0 !== t ? t : Xs),
                        (this.withCredentials = !1);
                    }
                    function Ba(t) {
                      (this.manager = void 0 !== t ? t : Xs),
                        (this.texturePath = '');
                    }
                    (za.Handlers = {
                      handlers: [],
                      add: function(t, e) {
                        this.handlers.push(t, e);
                      },
                      get: function(t) {
                        for (
                          var e = this.handlers, i = 0, n = e.length;
                          i < n;
                          i += 2
                        ) {
                          var r = e[i],
                            o = e[i + 1];
                          if (r.test(t)) return o;
                        }
                        return null;
                      }
                    }),
                      Object.assign(za.prototype, {
                        crossOrigin: void 0,
                        extractUrlBase: function(t) {
                          var e = t.split('/');
                          return 1 === e.length
                            ? './'
                            : (e.pop(), e.join('/') + '/');
                        },
                        initMaterials: function(t, e, i) {
                          for (var n = [], r = 0; r < t.length; ++r)
                            n[r] = this.createMaterial(t[r], e, i);
                          return n;
                        },
                        createMaterial: ((Ca = {
                          NoBlending: E,
                          NormalBlending: b,
                          AdditiveBlending: x,
                          SubtractiveBlending: A,
                          MultiplyBlending: T,
                          CustomBlending: L
                        }),
                        (_a = new Ni()),
                        (Ia = new ea()),
                        (ja = new Da()),
                        function(t, e, i) {
                          var n = {};
                          function r(t, r, o, s, a) {
                            var c,
                              l = e + t,
                              u = za.Handlers.get(l);
                            null !== u
                              ? (c = u.load(l))
                              : (Ia.setCrossOrigin(i), (c = Ia.load(l))),
                              void 0 !== r &&
                                (c.repeat.fromArray(r),
                                1 !== r[0] && (c.wrapS = dt),
                                1 !== r[1] && (c.wrapT = dt)),
                              void 0 !== o && c.offset.fromArray(o),
                              void 0 !== s &&
                                ('repeat' === s[0] && (c.wrapS = dt),
                                'mirror' === s[0] && (c.wrapS = ft),
                                'repeat' === s[1] && (c.wrapT = dt),
                                'mirror' === s[1] && (c.wrapT = ft)),
                              void 0 !== a && (c.anisotropy = a);
                            var h = ue.generateUUID();
                            return (n[h] = c), h;
                          }
                          var o = {
                            uuid: ue.generateUUID(),
                            type: 'MeshLambertMaterial'
                          };
                          for (var s in t) {
                            var a = t[s];
                            switch (s) {
                              case 'DbgColor':
                              case 'DbgIndex':
                              case 'opticalDensity':
                              case 'illumination':
                                break;
                              case 'DbgName':
                                o.name = a;
                                break;
                              case 'blending':
                                o.blending = Ca[a];
                                break;
                              case 'colorAmbient':
                              case 'mapAmbient':
                                console.warn(
                                  'THREE.Loader.createMaterial:',
                                  s,
                                  'is no longer supported.'
                                );
                                break;
                              case 'colorDiffuse':
                                o.color = _a.fromArray(a).getHex();
                                break;
                              case 'colorSpecular':
                                o.specular = _a.fromArray(a).getHex();
                                break;
                              case 'colorEmissive':
                                o.emissive = _a.fromArray(a).getHex();
                                break;
                              case 'specularCoef':
                                o.shininess = a;
                                break;
                              case 'shading':
                                'basic' === a.toLowerCase() &&
                                  (o.type = 'MeshBasicMaterial'),
                                  'phong' === a.toLowerCase() &&
                                    (o.type = 'MeshPhongMaterial'),
                                  'standard' === a.toLowerCase() &&
                                    (o.type = 'MeshStandardMaterial');
                                break;
                              case 'mapDiffuse':
                                o.map = r(
                                  a,
                                  t.mapDiffuseRepeat,
                                  t.mapDiffuseOffset,
                                  t.mapDiffuseWrap,
                                  t.mapDiffuseAnisotropy
                                );
                                break;
                              case 'mapDiffuseRepeat':
                              case 'mapDiffuseOffset':
                              case 'mapDiffuseWrap':
                              case 'mapDiffuseAnisotropy':
                                break;
                              case 'mapEmissive':
                                o.emissiveMap = r(
                                  a,
                                  t.mapEmissiveRepeat,
                                  t.mapEmissiveOffset,
                                  t.mapEmissiveWrap,
                                  t.mapEmissiveAnisotropy
                                );
                                break;
                              case 'mapEmissiveRepeat':
                              case 'mapEmissiveOffset':
                              case 'mapEmissiveWrap':
                              case 'mapEmissiveAnisotropy':
                                break;
                              case 'mapLight':
                                o.lightMap = r(
                                  a,
                                  t.mapLightRepeat,
                                  t.mapLightOffset,
                                  t.mapLightWrap,
                                  t.mapLightAnisotropy
                                );
                                break;
                              case 'mapLightRepeat':
                              case 'mapLightOffset':
                              case 'mapLightWrap':
                              case 'mapLightAnisotropy':
                                break;
                              case 'mapAO':
                                o.aoMap = r(
                                  a,
                                  t.mapAORepeat,
                                  t.mapAOOffset,
                                  t.mapAOWrap,
                                  t.mapAOAnisotropy
                                );
                                break;
                              case 'mapAORepeat':
                              case 'mapAOOffset':
                              case 'mapAOWrap':
                              case 'mapAOAnisotropy':
                                break;
                              case 'mapBump':
                                o.bumpMap = r(
                                  a,
                                  t.mapBumpRepeat,
                                  t.mapBumpOffset,
                                  t.mapBumpWrap,
                                  t.mapBumpAnisotropy
                                );
                                break;
                              case 'mapBumpScale':
                                o.bumpScale = a;
                                break;
                              case 'mapBumpRepeat':
                              case 'mapBumpOffset':
                              case 'mapBumpWrap':
                              case 'mapBumpAnisotropy':
                                break;
                              case 'mapNormal':
                                o.normalMap = r(
                                  a,
                                  t.mapNormalRepeat,
                                  t.mapNormalOffset,
                                  t.mapNormalWrap,
                                  t.mapNormalAnisotropy
                                );
                                break;
                              case 'mapNormalFactor':
                                o.normalScale = [a, a];
                                break;
                              case 'mapNormalRepeat':
                              case 'mapNormalOffset':
                              case 'mapNormalWrap':
                              case 'mapNormalAnisotropy':
                                break;
                              case 'mapSpecular':
                                o.specularMap = r(
                                  a,
                                  t.mapSpecularRepeat,
                                  t.mapSpecularOffset,
                                  t.mapSpecularWrap,
                                  t.mapSpecularAnisotropy
                                );
                                break;
                              case 'mapSpecularRepeat':
                              case 'mapSpecularOffset':
                              case 'mapSpecularWrap':
                              case 'mapSpecularAnisotropy':
                                break;
                              case 'mapMetalness':
                                o.metalnessMap = r(
                                  a,
                                  t.mapMetalnessRepeat,
                                  t.mapMetalnessOffset,
                                  t.mapMetalnessWrap,
                                  t.mapMetalnessAnisotropy
                                );
                                break;
                              case 'mapMetalnessRepeat':
                              case 'mapMetalnessOffset':
                              case 'mapMetalnessWrap':
                              case 'mapMetalnessAnisotropy':
                                break;
                              case 'mapRoughness':
                                o.roughnessMap = r(
                                  a,
                                  t.mapRoughnessRepeat,
                                  t.mapRoughnessOffset,
                                  t.mapRoughnessWrap,
                                  t.mapRoughnessAnisotropy
                                );
                                break;
                              case 'mapRoughnessRepeat':
                              case 'mapRoughnessOffset':
                              case 'mapRoughnessWrap':
                              case 'mapRoughnessAnisotropy':
                                break;
                              case 'mapAlpha':
                                o.alphaMap = r(
                                  a,
                                  t.mapAlphaRepeat,
                                  t.mapAlphaOffset,
                                  t.mapAlphaWrap,
                                  t.mapAlphaAnisotropy
                                );
                                break;
                              case 'mapAlphaRepeat':
                              case 'mapAlphaOffset':
                              case 'mapAlphaWrap':
                              case 'mapAlphaAnisotropy':
                                break;
                              case 'flipSided':
                                o.side = g;
                                break;
                              case 'doubleSided':
                                o.side = v;
                                break;
                              case 'transparency':
                                console.warn(
                                  'THREE.Loader.createMaterial: transparency has been renamed to opacity'
                                ),
                                  (o.opacity = a);
                                break;
                              case 'depthTest':
                              case 'depthWrite':
                              case 'colorWrite':
                              case 'opacity':
                              case 'reflectivity':
                              case 'transparent':
                              case 'visible':
                              case 'wireframe':
                                o[s] = a;
                                break;
                              case 'vertexColors':
                                !0 === a && (o.vertexColors = M),
                                  'face' === a && (o.vertexColors = w);
                                break;
                              default:
                                console.error(
                                  'THREE.Loader.createMaterial: Unsupported',
                                  s,
                                  a
                                );
                            }
                          }
                          return (
                            'MeshBasicMaterial' === o.type && delete o.emissive,
                            'MeshPhongMaterial' !== o.type && delete o.specular,
                            o.opacity < 1 && (o.transparent = !0),
                            ja.setTextures(n),
                            ja.parse(o)
                          );
                        })
                      }),
                      Object.assign(ka.prototype, {
                        load: function(t, e, i, n) {
                          var r = this,
                            o =
                              this.texturePath &&
                              'string' == typeof this.texturePath
                                ? this.texturePath
                                : za.prototype.extractUrlBase(t),
                            s = new Ks(this.manager);
                          s.setWithCredentials(this.withCredentials),
                            s.load(
                              t,
                              function(i) {
                                var n = JSON.parse(i),
                                  s = n.metadata;
                                if (void 0 !== s) {
                                  var a = s.type;
                                  if (void 0 !== a) {
                                    if ('object' === a.toLowerCase())
                                      return void console.error(
                                        'THREE.JSONLoader: ' +
                                          t +
                                          ' should be loaded with THREE.ObjectLoader instead.'
                                      );
                                    if ('scene' === a.toLowerCase())
                                      return void console.error(
                                        'THREE.JSONLoader: ' +
                                          t +
                                          ' should be loaded with THREE.SceneLoader instead.'
                                      );
                                  }
                                }
                                var c = r.parse(n, o);
                                e(c.geometry, c.materials);
                              },
                              i,
                              n
                            );
                        },
                        setTexturePath: function(t) {
                          this.texturePath = t;
                        },
                        parse: (function() {
                          return function(t, e) {
                            void 0 !== t.data && (t = t.data),
                              void 0 !== t.scale
                                ? (t.scale = 1 / t.scale)
                                : (t.scale = 1);
                            var i = new Dr();
                            return (
                              (function(t, e) {
                                function i(t, e) {
                                  return t & (1 << e);
                                }
                                var n,
                                  r,
                                  o,
                                  s,
                                  a,
                                  c,
                                  l,
                                  u,
                                  h,
                                  d,
                                  p,
                                  f,
                                  m,
                                  g,
                                  v,
                                  y,
                                  w,
                                  M,
                                  E,
                                  b,
                                  x,
                                  A,
                                  T,
                                  L,
                                  N,
                                  D = t.faces,
                                  S = t.vertices,
                                  C = t.normals,
                                  _ = t.colors,
                                  I = t.scale,
                                  j = 0;
                                if (void 0 !== t.uvs) {
                                  for (n = 0; n < t.uvs.length; n++)
                                    t.uvs[n].length && j++;
                                  for (n = 0; n < j; n++)
                                    e.faceVertexUvs[n] = [];
                                }
                                for (s = 0, a = S.length; s < a; )
                                  ((M = new ke()).x = S[s++] * I),
                                    (M.y = S[s++] * I),
                                    (M.z = S[s++] * I),
                                    e.vertices.push(M);
                                for (s = 0, a = D.length; s < a; )
                                  if (
                                    ((p = i((d = D[s++]), 0)),
                                    (f = i(d, 1)),
                                    (m = i(d, 3)),
                                    (g = i(d, 4)),
                                    (v = i(d, 5)),
                                    (y = i(d, 6)),
                                    (w = i(d, 7)),
                                    p)
                                  ) {
                                    if (
                                      (((b = new Un()).a = D[s]),
                                      (b.b = D[s + 1]),
                                      (b.c = D[s + 3]),
                                      ((x = new Un()).a = D[s + 1]),
                                      (x.b = D[s + 2]),
                                      (x.c = D[s + 3]),
                                      (s += 4),
                                      f &&
                                        ((h = D[s++]),
                                        (b.materialIndex = h),
                                        (x.materialIndex = h)),
                                      (o = e.faces.length),
                                      m)
                                    )
                                      for (n = 0; n < j; n++)
                                        for (
                                          L = t.uvs[n],
                                            e.faceVertexUvs[n][o] = [],
                                            e.faceVertexUvs[n][o + 1] = [],
                                            r = 0;
                                          r < 4;
                                          r++
                                        )
                                          (N = new he(
                                            L[2 * (u = D[s++])],
                                            L[2 * u + 1]
                                          )),
                                            2 !== r &&
                                              e.faceVertexUvs[n][o].push(N),
                                            0 !== r &&
                                              e.faceVertexUvs[n][o + 1].push(N);
                                    if (
                                      (g &&
                                        ((l = 3 * D[s++]),
                                        b.normal.set(C[l++], C[l++], C[l]),
                                        x.normal.copy(b.normal)),
                                      v)
                                    )
                                      for (n = 0; n < 4; n++)
                                        (l = 3 * D[s++]),
                                          (T = new ke(C[l++], C[l++], C[l])),
                                          2 !== n && b.vertexNormals.push(T),
                                          0 !== n && x.vertexNormals.push(T);
                                    if (
                                      (y &&
                                        ((A = _[(c = D[s++])]),
                                        b.color.setHex(A),
                                        x.color.setHex(A)),
                                      w)
                                    )
                                      for (n = 0; n < 4; n++)
                                        (A = _[(c = D[s++])]),
                                          2 !== n &&
                                            b.vertexColors.push(new Ni(A)),
                                          0 !== n &&
                                            x.vertexColors.push(new Ni(A));
                                    e.faces.push(b), e.faces.push(x);
                                  } else {
                                    if (
                                      (((E = new Un()).a = D[s++]),
                                      (E.b = D[s++]),
                                      (E.c = D[s++]),
                                      f &&
                                        ((h = D[s++]), (E.materialIndex = h)),
                                      (o = e.faces.length),
                                      m)
                                    )
                                      for (n = 0; n < j; n++)
                                        for (
                                          L = t.uvs[n],
                                            e.faceVertexUvs[n][o] = [],
                                            r = 0;
                                          r < 3;
                                          r++
                                        )
                                          (N = new he(
                                            L[2 * (u = D[s++])],
                                            L[2 * u + 1]
                                          )),
                                            e.faceVertexUvs[n][o].push(N);
                                    if (
                                      (g &&
                                        ((l = 3 * D[s++]),
                                        E.normal.set(C[l++], C[l++], C[l])),
                                      v)
                                    )
                                      for (n = 0; n < 3; n++)
                                        (l = 3 * D[s++]),
                                          (T = new ke(C[l++], C[l++], C[l])),
                                          E.vertexNormals.push(T);
                                    if (
                                      (y &&
                                        ((c = D[s++]), E.color.setHex(_[c])),
                                      w)
                                    )
                                      for (n = 0; n < 3; n++)
                                        (c = D[s++]),
                                          E.vertexColors.push(new Ni(_[c]));
                                    e.faces.push(E);
                                  }
                              })(t, i),
                              (function(t, e) {
                                var i =
                                  void 0 !== t.influencesPerVertex
                                    ? t.influencesPerVertex
                                    : 2;
                                if (t.skinWeights)
                                  for (
                                    var n = 0, r = t.skinWeights.length;
                                    n < r;
                                    n += i
                                  ) {
                                    var o = t.skinWeights[n],
                                      s = i > 1 ? t.skinWeights[n + 1] : 0,
                                      a = i > 2 ? t.skinWeights[n + 2] : 0,
                                      c = i > 3 ? t.skinWeights[n + 3] : 0;
                                    e.skinWeights.push(new je(o, s, a, c));
                                  }
                                if (t.skinIndices)
                                  for (
                                    n = 0, r = t.skinIndices.length;
                                    n < r;
                                    n += i
                                  ) {
                                    var l = t.skinIndices[n],
                                      u = i > 1 ? t.skinIndices[n + 1] : 0,
                                      h = i > 2 ? t.skinIndices[n + 2] : 0,
                                      d = i > 3 ? t.skinIndices[n + 3] : 0;
                                    e.skinIndices.push(new je(l, u, h, d));
                                  }
                                (e.bones = t.bones),
                                  e.bones &&
                                    e.bones.length > 0 &&
                                    (e.skinWeights.length !==
                                      e.skinIndices.length ||
                                      e.skinIndices.length !==
                                        e.vertices.length) &&
                                    console.warn(
                                      'When skinning, number of vertices (' +
                                        e.vertices.length +
                                        '), skinIndices (' +
                                        e.skinIndices.length +
                                        '), and skinWeights (' +
                                        e.skinWeights.length +
                                        ') should match.'
                                    );
                              })(t, i),
                              (function(t, e) {
                                var i = t.scale;
                                if (void 0 !== t.morphTargets)
                                  for (
                                    var n = 0, r = t.morphTargets.length;
                                    n < r;
                                    n++
                                  ) {
                                    (e.morphTargets[n] = {}),
                                      (e.morphTargets[n].name =
                                        t.morphTargets[n].name),
                                      (e.morphTargets[n].vertices = []);
                                    for (
                                      var o = e.morphTargets[n].vertices,
                                        s = t.morphTargets[n].vertices,
                                        a = 0,
                                        c = s.length;
                                      a < c;
                                      a += 3
                                    ) {
                                      var l = new ke();
                                      (l.x = s[a] * i),
                                        (l.y = s[a + 1] * i),
                                        (l.z = s[a + 2] * i),
                                        o.push(l);
                                    }
                                  }
                                if (
                                  void 0 !== t.morphColors &&
                                  t.morphColors.length > 0
                                ) {
                                  console.warn(
                                    'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.'
                                  );
                                  var u = e.faces,
                                    h = t.morphColors[0].colors;
                                  for (n = 0, r = u.length; n < r; n++)
                                    u[n].color.fromArray(h, 3 * n);
                                }
                              })(t, i),
                              (function(t, e) {
                                var i = [],
                                  n = [];
                                void 0 !== t.animation && n.push(t.animation),
                                  void 0 !== t.animations &&
                                    (t.animations.length
                                      ? (n = n.concat(t.animations))
                                      : n.push(t.animations));
                                for (var r = 0; r < n.length; r++) {
                                  var o = Na.parseAnimation(n[r], e.bones);
                                  o && i.push(o);
                                }
                                if (e.morphTargets) {
                                  var s = Na.CreateClipsFromMorphTargetSequences(
                                    e.morphTargets,
                                    10
                                  );
                                  i = i.concat(s);
                                }
                                i.length > 0 && (e.animations = i);
                              })(t, i),
                              i.computeFaceNormals(),
                              i.computeBoundingSphere(),
                              void 0 === t.materials || 0 === t.materials.length
                                ? { geometry: i }
                                : {
                                    geometry: i,
                                    materials: za.prototype.initMaterials(
                                      t.materials,
                                      e,
                                      this.crossOrigin
                                    )
                                  }
                            );
                          };
                        })()
                      }),
                      Object.assign(Ba.prototype, {
                        load: function(t, e, i, n) {
                          '' === this.texturePath &&
                            (this.texturePath = t.substring(
                              0,
                              t.lastIndexOf('/') + 1
                            ));
                          var r = this;
                          new Ks(r.manager).load(
                            t,
                            function(i) {
                              var o = null;
                              try {
                                o = JSON.parse(i);
                              } catch (e) {
                                return (
                                  void 0 !== n && n(e),
                                  void console.error(
                                    "THREE:ObjectLoader: Can't parse " +
                                      t +
                                      '.',
                                    e.message
                                  )
                                );
                              }
                              var s = o.metadata;
                              void 0 !== s &&
                              void 0 !== s.type &&
                              'geometry' !== s.type.toLowerCase()
                                ? r.parse(o, e)
                                : console.error(
                                    "THREE.ObjectLoader: Can't load " +
                                      t +
                                      '. Use THREE.JSONLoader instead.'
                                  );
                            },
                            i,
                            n
                          );
                        },
                        setTexturePath: function(t) {
                          this.texturePath = t;
                        },
                        setCrossOrigin: function(t) {
                          this.crossOrigin = t;
                        },
                        parse: function(t, e) {
                          var i = this.parseGeometries(t.geometries),
                            n = this.parseImages(t.images, function() {
                              void 0 !== e && e(s);
                            }),
                            r = this.parseTextures(t.textures, n),
                            o = this.parseMaterials(t.materials, r),
                            s = this.parseObject(t.object, i, o);
                          return (
                            t.animations &&
                              (s.animations = this.parseAnimations(
                                t.animations
                              )),
                            (void 0 !== t.images && 0 !== t.images.length) ||
                              (void 0 !== e && e(s)),
                            s
                          );
                        },
                        parseGeometries: function(t) {
                          var e = {};
                          if (void 0 !== t)
                            for (
                              var i = new ka(),
                                n = new Sa(),
                                r = 0,
                                o = t.length;
                              r < o;
                              r++
                            ) {
                              var s,
                                a = t[r];
                              switch (a.type) {
                                case 'PlaneGeometry':
                                case 'PlaneBufferGeometry':
                                  s = new zs[a.type](
                                    a.width,
                                    a.height,
                                    a.widthSegments,
                                    a.heightSegments
                                  );
                                  break;
                                case 'BoxGeometry':
                                case 'BoxBufferGeometry':
                                case 'CubeGeometry':
                                  s = new zs[a.type](
                                    a.width,
                                    a.height,
                                    a.depth,
                                    a.widthSegments,
                                    a.heightSegments,
                                    a.depthSegments
                                  );
                                  break;
                                case 'CircleGeometry':
                                case 'CircleBufferGeometry':
                                  s = new zs[a.type](
                                    a.radius,
                                    a.segments,
                                    a.thetaStart,
                                    a.thetaLength
                                  );
                                  break;
                                case 'CylinderGeometry':
                                case 'CylinderBufferGeometry':
                                  s = new zs[a.type](
                                    a.radiusTop,
                                    a.radiusBottom,
                                    a.height,
                                    a.radialSegments,
                                    a.heightSegments,
                                    a.openEnded,
                                    a.thetaStart,
                                    a.thetaLength
                                  );
                                  break;
                                case 'ConeGeometry':
                                case 'ConeBufferGeometry':
                                  s = new zs[a.type](
                                    a.radius,
                                    a.height,
                                    a.radialSegments,
                                    a.heightSegments,
                                    a.openEnded,
                                    a.thetaStart,
                                    a.thetaLength
                                  );
                                  break;
                                case 'SphereGeometry':
                                case 'SphereBufferGeometry':
                                  s = new zs[a.type](
                                    a.radius,
                                    a.widthSegments,
                                    a.heightSegments,
                                    a.phiStart,
                                    a.phiLength,
                                    a.thetaStart,
                                    a.thetaLength
                                  );
                                  break;
                                case 'DodecahedronGeometry':
                                case 'IcosahedronGeometry':
                                case 'OctahedronGeometry':
                                case 'TetrahedronGeometry':
                                  s = new zs[a.type](a.radius, a.detail);
                                  break;
                                case 'RingGeometry':
                                case 'RingBufferGeometry':
                                  s = new zs[a.type](
                                    a.innerRadius,
                                    a.outerRadius,
                                    a.thetaSegments,
                                    a.phiSegments,
                                    a.thetaStart,
                                    a.thetaLength
                                  );
                                  break;
                                case 'TorusGeometry':
                                case 'TorusBufferGeometry':
                                  s = new zs[a.type](
                                    a.radius,
                                    a.tube,
                                    a.radialSegments,
                                    a.tubularSegments,
                                    a.arc
                                  );
                                  break;
                                case 'TorusKnotGeometry':
                                case 'TorusKnotBufferGeometry':
                                  s = new zs[a.type](
                                    a.radius,
                                    a.tube,
                                    a.tubularSegments,
                                    a.radialSegments,
                                    a.p,
                                    a.q
                                  );
                                  break;
                                case 'LatheGeometry':
                                case 'LatheBufferGeometry':
                                  s = new zs[a.type](
                                    a.points,
                                    a.segments,
                                    a.phiStart,
                                    a.phiLength
                                  );
                                  break;
                                case 'BufferGeometry':
                                  s = n.parse(a);
                                  break;
                                case 'Geometry':
                                  s = i.parse(a, this.texturePath).geometry;
                                  break;
                                default:
                                  console.warn(
                                    'THREE.ObjectLoader: Unsupported geometry type "' +
                                      a.type +
                                      '"'
                                  );
                                  continue;
                              }
                              (s.uuid = a.uuid),
                                void 0 !== a.name && (s.name = a.name),
                                (e[a.uuid] = s);
                            }
                          return e;
                        },
                        parseMaterials: function(t, e) {
                          var i = {};
                          if (void 0 !== t) {
                            var n = new Da();
                            n.setTextures(e);
                            for (var r = 0, o = t.length; r < o; r++) {
                              var s = t[r];
                              if ('MultiMaterial' === s.type) {
                                for (
                                  var a = [], c = 0;
                                  c < s.materials.length;
                                  c++
                                )
                                  a.push(n.parse(s.materials[c]));
                                i[s.uuid] = a;
                              } else i[s.uuid] = n.parse(s);
                            }
                          }
                          return i;
                        },
                        parseAnimations: function(t) {
                          for (var e = [], i = 0; i < t.length; i++) {
                            var n = Na.parse(t[i]);
                            e.push(n);
                          }
                          return e;
                        },
                        parseImages: function(t, e) {
                          var i = this,
                            n = {};
                          function r(t) {
                            return (
                              i.manager.itemStart(t),
                              o.load(
                                t,
                                function() {
                                  i.manager.itemEnd(t);
                                },
                                void 0,
                                function() {
                                  i.manager.itemEnd(t), i.manager.itemError(t);
                                }
                              )
                            );
                          }
                          if (void 0 !== t && t.length > 0) {
                            var o = new $s(new qs(e));
                            o.setCrossOrigin(this.crossOrigin);
                            for (var s = 0, a = t.length; s < a; s++) {
                              var c = t[s],
                                l = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(c.url)
                                  ? c.url
                                  : i.texturePath + c.url;
                              n[c.uuid] = r(l);
                            }
                          }
                          return n;
                        },
                        parseTextures: function(t, e) {
                          function i(t, e) {
                            return 'number' == typeof t
                              ? t
                              : (console.warn(
                                  'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',
                                  t
                                ),
                                e[t]);
                          }
                          var n = {};
                          if (void 0 !== t)
                            for (var r = 0, o = t.length; r < o; r++) {
                              var s = t[r];
                              void 0 === s.image &&
                                console.warn(
                                  'THREE.ObjectLoader: No "image" specified for',
                                  s.uuid
                                ),
                                void 0 === e[s.image] &&
                                  console.warn(
                                    'THREE.ObjectLoader: Undefined image',
                                    s.image
                                  );
                              var a = new Ie(e[s.image]);
                              (a.needsUpdate = !0),
                                (a.uuid = s.uuid),
                                void 0 !== s.name && (a.name = s.name),
                                void 0 !== s.mapping &&
                                  (a.mapping = i(s.mapping, Pa)),
                                void 0 !== s.offset &&
                                  a.offset.fromArray(s.offset),
                                void 0 !== s.repeat &&
                                  a.repeat.fromArray(s.repeat),
                                void 0 !== s.wrap &&
                                  ((a.wrapS = i(s.wrap[0], Ua)),
                                  (a.wrapT = i(s.wrap[1], Ua))),
                                void 0 !== s.minFilter &&
                                  (a.minFilter = i(s.minFilter, Fa)),
                                void 0 !== s.magFilter &&
                                  (a.magFilter = i(s.magFilter, Fa)),
                                void 0 !== s.anisotropy &&
                                  (a.anisotropy = s.anisotropy),
                                void 0 !== s.flipY && (a.flipY = s.flipY),
                                (n[s.uuid] = a);
                            }
                          return n;
                        },
                        parseObject: ((Oa = new Be()),
                        function(t, e, i) {
                          var n;
                          function r(t) {
                            return (
                              void 0 === e[t] &&
                                console.warn(
                                  'THREE.ObjectLoader: Undefined geometry',
                                  t
                                ),
                              e[t]
                            );
                          }
                          function o(t) {
                            if (void 0 !== t) {
                              if (Array.isArray(t)) {
                                for (
                                  var e = [], n = 0, r = t.length;
                                  n < r;
                                  n++
                                ) {
                                  var o = t[n];
                                  void 0 === i[o] &&
                                    console.warn(
                                      'THREE.ObjectLoader: Undefined material',
                                      o
                                    ),
                                    e.push(i[o]);
                                }
                                return e;
                              }
                              return (
                                void 0 === i[t] &&
                                  console.warn(
                                    'THREE.ObjectLoader: Undefined material',
                                    t
                                  ),
                                i[t]
                              );
                            }
                          }
                          switch (t.type) {
                            case 'Scene':
                              (n = new jo()),
                                void 0 !== t.background &&
                                  Number.isInteger(t.background) &&
                                  (n.background = new Ni(t.background)),
                                void 0 !== t.fog &&
                                  ('Fog' === t.fog.type
                                    ? (n.fog = new Io(
                                        t.fog.color,
                                        t.fog.near,
                                        t.fog.far
                                      ))
                                    : 'FogExp2' === t.fog.type &&
                                      (n.fog = new _o(
                                        t.fog.color,
                                        t.fog.density
                                      )));
                              break;
                            case 'PerspectiveCamera':
                              (n = new Pn(t.fov, t.aspect, t.near, t.far)),
                                void 0 !== t.focus && (n.focus = t.focus),
                                void 0 !== t.zoom && (n.zoom = t.zoom),
                                void 0 !== t.filmGauge &&
                                  (n.filmGauge = t.filmGauge),
                                void 0 !== t.filmOffset &&
                                  (n.filmOffset = t.filmOffset),
                                void 0 !== t.view &&
                                  (n.view = Object.assign({}, t.view));
                              break;
                            case 'OrthographicCamera':
                              n = new Bn(
                                t.left,
                                t.right,
                                t.top,
                                t.bottom,
                                t.near,
                                t.far
                              );
                              break;
                            case 'AmbientLight':
                              n = new ua(t.color, t.intensity);
                              break;
                            case 'DirectionalLight':
                              n = new la(t.color, t.intensity);
                              break;
                            case 'PointLight':
                              n = new aa(
                                t.color,
                                t.intensity,
                                t.distance,
                                t.decay
                              );
                              break;
                            case 'RectAreaLight':
                              n = new ha(
                                t.color,
                                t.intensity,
                                t.width,
                                t.height
                              );
                              break;
                            case 'SpotLight':
                              n = new sa(
                                t.color,
                                t.intensity,
                                t.distance,
                                t.angle,
                                t.penumbra,
                                t.decay
                              );
                              break;
                            case 'HemisphereLight':
                              n = new na(t.color, t.groundColor, t.intensity);
                              break;
                            case 'SkinnedMesh':
                              console.warn(
                                'THREE.ObjectLoader.parseObject() does not support SkinnedMesh yet.'
                              );
                            case 'Mesh':
                              var s = r(t.geometry),
                                a = o(t.material);
                              n =
                                s.bones && s.bones.length > 0
                                  ? new Uo(s, a)
                                  : new Kr(s, a);
                              break;
                            case 'LOD':
                              n = new ko();
                              break;
                            case 'Line':
                              n = new Ho(r(t.geometry), o(t.material), t.mode);
                              break;
                            case 'LineLoop':
                              n = new Go(r(t.geometry), o(t.material));
                              break;
                            case 'LineSegments':
                              n = new Vo(r(t.geometry), o(t.material));
                              break;
                            case 'PointCloud':
                            case 'Points':
                              n = new Qo(r(t.geometry), o(t.material));
                              break;
                            case 'Sprite':
                              n = new zo(o(t.material));
                              break;
                            case 'Group':
                              n = new Wo();
                              break;
                            default:
                              n = new zn();
                          }
                          if (
                            ((n.uuid = t.uuid),
                            void 0 !== t.name && (n.name = t.name),
                            void 0 !== t.matrix
                              ? (Oa.fromArray(t.matrix),
                                Oa.decompose(n.position, n.quaternion, n.scale))
                              : (void 0 !== t.position &&
                                  n.position.fromArray(t.position),
                                void 0 !== t.rotation &&
                                  n.rotation.fromArray(t.rotation),
                                void 0 !== t.quaternion &&
                                  n.quaternion.fromArray(t.quaternion),
                                void 0 !== t.scale &&
                                  n.scale.fromArray(t.scale)),
                            void 0 !== t.castShadow &&
                              (n.castShadow = t.castShadow),
                            void 0 !== t.receiveShadow &&
                              (n.receiveShadow = t.receiveShadow),
                            t.shadow &&
                              (void 0 !== t.shadow.bias &&
                                (n.shadow.bias = t.shadow.bias),
                              void 0 !== t.shadow.radius &&
                                (n.shadow.radius = t.shadow.radius),
                              void 0 !== t.shadow.mapSize &&
                                n.shadow.mapSize.fromArray(t.shadow.mapSize),
                              void 0 !== t.shadow.camera &&
                                (n.shadow.camera = this.parseObject(
                                  t.shadow.camera
                                ))),
                            void 0 !== t.visible && (n.visible = t.visible),
                            void 0 !== t.userData && (n.userData = t.userData),
                            void 0 !== t.children)
                          )
                            for (var c = t.children, l = 0; l < c.length; l++)
                              n.add(this.parseObject(c[l], e, i));
                          if ('LOD' === t.type)
                            for (var u = t.levels, h = 0; h < u.length; h++) {
                              var d = u[h],
                                p = n.getObjectByProperty('uuid', d.object);
                              void 0 !== p && n.addLevel(p, d.distance);
                            }
                          return n;
                        })
                      });
                    var Pa = {
                        UVMapping: 300,
                        CubeReflectionMapping: ot,
                        CubeRefractionMapping: st,
                        EquirectangularReflectionMapping: at,
                        EquirectangularRefractionMapping: ct,
                        SphericalReflectionMapping: lt,
                        CubeUVReflectionMapping: ut,
                        CubeUVRefractionMapping: ht
                      },
                      Ua = {
                        RepeatWrapping: dt,
                        ClampToEdgeWrapping: pt,
                        MirroredRepeatWrapping: ft
                      },
                      Fa = {
                        NearestFilter: mt,
                        NearestMipMapNearestFilter: gt,
                        NearestMipMapLinearFilter: vt,
                        LinearFilter: yt,
                        LinearMipMapNearestFilter: wt,
                        LinearMipMapLinearFilter: Mt
                      };
                    function Ha(t, e, i, n, r) {
                      var o = 0.5 * (n - e),
                        s = 0.5 * (r - i),
                        a = t * t;
                      return (
                        (2 * i - 2 * n + o + s) * (t * a) +
                        (-3 * i + 3 * n - 2 * o - s) * a +
                        o * t +
                        i
                      );
                    }
                    function Va(t, e, i, n) {
                      return (
                        (s = 1 - t) * s * e +
                        2 * (1 - (o = t)) * o * i +
                        (r = t) * r * n
                      );
                      var r, o, s;
                    }
                    function Ga(t, e, i, n, r) {
                      return (
                        (l = 1 - t) * l * l * e +
                        3 * (c = 1 - (a = t)) * c * a * i +
                        3 * (1 - (s = t)) * s * s * n +
                        (o = t) * o * o * r
                      );
                      var o, s, a, c, l;
                    }
                    function Ya() {
                      this.arcLengthDivisions = 200;
                    }
                    function Qa(t, e) {
                      Ya.call(this), (this.v1 = t), (this.v2 = e);
                    }
                    function Wa() {
                      Ya.call(this), (this.curves = []), (this.autoClose = !1);
                    }
                    function qa(t, e, i, n, r, o, s, a) {
                      Ya.call(this),
                        (this.aX = t),
                        (this.aY = e),
                        (this.xRadius = i),
                        (this.yRadius = n),
                        (this.aStartAngle = r),
                        (this.aEndAngle = o),
                        (this.aClockwise = s),
                        (this.aRotation = a || 0);
                    }
                    function Xa(t) {
                      Ya.call(this), (this.points = void 0 === t ? [] : t);
                    }
                    function Ka(t, e, i, n) {
                      Ya.call(this),
                        (this.v0 = t),
                        (this.v1 = e),
                        (this.v2 = i),
                        (this.v3 = n);
                    }
                    function Za(t, e, i) {
                      Ya.call(this),
                        (this.v0 = t),
                        (this.v1 = e),
                        (this.v2 = i);
                    }
                    Object.assign(Ya.prototype, {
                      getPoint: function() {
                        return (
                          console.warn(
                            'THREE.Curve: .getPoint() not implemented.'
                          ),
                          null
                        );
                      },
                      getPointAt: function(t) {
                        var e = this.getUtoTmapping(t);
                        return this.getPoint(e);
                      },
                      getPoints: function(t) {
                        void 0 === t && (t = 5);
                        for (var e = [], i = 0; i <= t; i++)
                          e.push(this.getPoint(i / t));
                        return e;
                      },
                      getSpacedPoints: function(t) {
                        void 0 === t && (t = 5);
                        for (var e = [], i = 0; i <= t; i++)
                          e.push(this.getPointAt(i / t));
                        return e;
                      },
                      getLength: function() {
                        var t = this.getLengths();
                        return t[t.length - 1];
                      },
                      getLengths: function(t) {
                        if (
                          (void 0 === t && (t = this.arcLengthDivisions),
                          this.cacheArcLengths &&
                            this.cacheArcLengths.length === t + 1 &&
                            !this.needsUpdate)
                        )
                          return this.cacheArcLengths;
                        this.needsUpdate = !1;
                        var e,
                          i,
                          n = [],
                          r = this.getPoint(0),
                          o = 0;
                        for (n.push(0), i = 1; i <= t; i++)
                          (o += (e = this.getPoint(i / t)).distanceTo(r)),
                            n.push(o),
                            (r = e);
                        return (this.cacheArcLengths = n), n;
                      },
                      updateArcLengths: function() {
                        (this.needsUpdate = !0), this.getLengths();
                      },
                      getUtoTmapping: function(t, e) {
                        var i,
                          n = this.getLengths(),
                          r = 0,
                          o = n.length;
                        i = e || t * n[o - 1];
                        for (var s, a = 0, c = o - 1; a <= c; )
                          if (
                            (s = n[(r = Math.floor(a + (c - a) / 2))] - i) < 0
                          )
                            a = r + 1;
                          else {
                            if (!(s > 0)) {
                              c = r;
                              break;
                            }
                            c = r - 1;
                          }
                        if (n[(r = c)] === i) return r / (o - 1);
                        var l = n[r];
                        return (r + (i - l) / (n[r + 1] - l)) / (o - 1);
                      },
                      getTangent: function(t) {
                        var e = t - 1e-4,
                          i = t + 1e-4;
                        e < 0 && (e = 0), i > 1 && (i = 1);
                        var n = this.getPoint(e);
                        return this.getPoint(i)
                          .clone()
                          .sub(n)
                          .normalize();
                      },
                      getTangentAt: function(t) {
                        var e = this.getUtoTmapping(t);
                        return this.getTangent(e);
                      },
                      computeFrenetFrames: function(t, e) {
                        var i,
                          n,
                          r,
                          o = new ke(),
                          s = [],
                          a = [],
                          c = [],
                          l = new ke(),
                          u = new Be();
                        for (i = 0; i <= t; i++)
                          (n = i / t),
                            (s[i] = this.getTangentAt(n)),
                            s[i].normalize();
                        (a[0] = new ke()), (c[0] = new ke());
                        var h = Number.MAX_VALUE,
                          d = Math.abs(s[0].x),
                          p = Math.abs(s[0].y),
                          f = Math.abs(s[0].z);
                        for (
                          d <= h && ((h = d), o.set(1, 0, 0)),
                            p <= h && ((h = p), o.set(0, 1, 0)),
                            f <= h && o.set(0, 0, 1),
                            l.crossVectors(s[0], o).normalize(),
                            a[0].crossVectors(s[0], l),
                            c[0].crossVectors(s[0], a[0]),
                            i = 1;
                          i <= t;
                          i++
                        )
                          (a[i] = a[i - 1].clone()),
                            (c[i] = c[i - 1].clone()),
                            l.crossVectors(s[i - 1], s[i]),
                            l.length() > Number.EPSILON &&
                              (l.normalize(),
                              (r = Math.acos(
                                ue.clamp(s[i - 1].dot(s[i]), -1, 1)
                              )),
                              a[i].applyMatrix4(u.makeRotationAxis(l, r))),
                            c[i].crossVectors(s[i], a[i]);
                        if (!0 === e)
                          for (
                            r = Math.acos(ue.clamp(a[0].dot(a[t]), -1, 1)),
                              r /= t,
                              s[0].dot(l.crossVectors(a[0], a[t])) > 0 &&
                                (r = -r),
                              i = 1;
                            i <= t;
                            i++
                          )
                            a[i].applyMatrix4(u.makeRotationAxis(s[i], r * i)),
                              c[i].crossVectors(s[i], a[i]);
                        return { tangents: s, normals: a, binormals: c };
                      }
                    }),
                      (Qa.prototype = Object.create(Ya.prototype)),
                      (Qa.prototype.constructor = Qa),
                      (Qa.prototype.isLineCurve = !0),
                      (Qa.prototype.getPoint = function(t) {
                        if (1 === t) return this.v2.clone();
                        var e = this.v2.clone().sub(this.v1);
                        return e.multiplyScalar(t).add(this.v1), e;
                      }),
                      (Qa.prototype.getPointAt = function(t) {
                        return this.getPoint(t);
                      }),
                      (Qa.prototype.getTangent = function(t) {
                        return this.v2
                          .clone()
                          .sub(this.v1)
                          .normalize();
                      }),
                      (Wa.prototype = Object.assign(
                        Object.create(Ya.prototype),
                        {
                          constructor: Wa,
                          add: function(t) {
                            this.curves.push(t);
                          },
                          closePath: function() {
                            var t = this.curves[0].getPoint(0),
                              e = this.curves[this.curves.length - 1].getPoint(
                                1
                              );
                            t.equals(e) || this.curves.push(new Qa(e, t));
                          },
                          getPoint: function(t) {
                            for (
                              var e = t * this.getLength(),
                                i = this.getCurveLengths(),
                                n = 0;
                              n < i.length;

                            ) {
                              if (i[n] >= e) {
                                var r = i[n] - e,
                                  o = this.curves[n],
                                  s = o.getLength(),
                                  a = 0 === s ? 0 : 1 - r / s;
                                return o.getPointAt(a);
                              }
                              n++;
                            }
                            return null;
                          },
                          getLength: function() {
                            var t = this.getCurveLengths();
                            return t[t.length - 1];
                          },
                          updateArcLengths: function() {
                            (this.needsUpdate = !0),
                              (this.cacheLengths = null),
                              this.getCurveLengths();
                          },
                          getCurveLengths: function() {
                            if (
                              this.cacheLengths &&
                              this.cacheLengths.length === this.curves.length
                            )
                              return this.cacheLengths;
                            for (
                              var t = [], e = 0, i = 0, n = this.curves.length;
                              i < n;
                              i++
                            )
                              (e += this.curves[i].getLength()), t.push(e);
                            return (this.cacheLengths = t), t;
                          },
                          getSpacedPoints: function(t) {
                            void 0 === t && (t = 40);
                            for (var e = [], i = 0; i <= t; i++)
                              e.push(this.getPoint(i / t));
                            return this.autoClose && e.push(e[0]), e;
                          },
                          getPoints: function(t) {
                            t = t || 12;
                            for (
                              var e, i = [], n = 0, r = this.curves;
                              n < r.length;
                              n++
                            )
                              for (
                                var o = r[n],
                                  s =
                                    o && o.isEllipseCurve
                                      ? 2 * t
                                      : o && o.isLineCurve
                                        ? 1
                                        : o && o.isSplineCurve
                                          ? t * o.points.length
                                          : t,
                                  a = o.getPoints(s),
                                  c = 0;
                                c < a.length;
                                c++
                              ) {
                                var l = a[c];
                                (e && e.equals(l)) || (i.push(l), (e = l));
                              }
                            return (
                              this.autoClose &&
                                i.length > 1 &&
                                !i[i.length - 1].equals(i[0]) &&
                                i.push(i[0]),
                              i
                            );
                          },
                          createPointsGeometry: function(t) {
                            var e = this.getPoints(t);
                            return this.createGeometry(e);
                          },
                          createSpacedPointsGeometry: function(t) {
                            var e = this.getSpacedPoints(t);
                            return this.createGeometry(e);
                          },
                          createGeometry: function(t) {
                            for (
                              var e = new Dr(), i = 0, n = t.length;
                              i < n;
                              i++
                            ) {
                              var r = t[i];
                              e.vertices.push(new ke(r.x, r.y, r.z || 0));
                            }
                            return e;
                          }
                        }
                      )),
                      (qa.prototype = Object.create(Ya.prototype)),
                      (qa.prototype.constructor = qa),
                      (qa.prototype.isEllipseCurve = !0),
                      (qa.prototype.getPoint = function(t) {
                        for (
                          var e = 2 * Math.PI,
                            i = this.aEndAngle - this.aStartAngle,
                            n = Math.abs(i) < Number.EPSILON;
                          i < 0;

                        )
                          i += e;
                        for (; i > e; ) i -= e;
                        i < Number.EPSILON && (i = n ? 0 : e),
                          !0 !== this.aClockwise ||
                            n ||
                            (i === e ? (i = -e) : (i -= e));
                        var r = this.aStartAngle + t * i,
                          o = this.aX + this.xRadius * Math.cos(r),
                          s = this.aY + this.yRadius * Math.sin(r);
                        if (0 !== this.aRotation) {
                          var a = Math.cos(this.aRotation),
                            c = Math.sin(this.aRotation),
                            l = o - this.aX,
                            u = s - this.aY;
                          (o = l * a - u * c + this.aX),
                            (s = l * c + u * a + this.aY);
                        }
                        return new he(o, s);
                      }),
                      (Xa.prototype = Object.create(Ya.prototype)),
                      (Xa.prototype.constructor = Xa),
                      (Xa.prototype.isSplineCurve = !0),
                      (Xa.prototype.getPoint = function(t) {
                        var e = this.points,
                          i = (e.length - 1) * t,
                          n = Math.floor(i),
                          r = i - n,
                          o = e[0 === n ? n : n - 1],
                          s = e[n],
                          a = e[n > e.length - 2 ? e.length - 1 : n + 1],
                          c = e[n > e.length - 3 ? e.length - 1 : n + 2];
                        return new he(
                          Ha(r, o.x, s.x, a.x, c.x),
                          Ha(r, o.y, s.y, a.y, c.y)
                        );
                      }),
                      (Ka.prototype = Object.create(Ya.prototype)),
                      (Ka.prototype.constructor = Ka),
                      (Ka.prototype.getPoint = function(t) {
                        var e = this.v0,
                          i = this.v1,
                          n = this.v2,
                          r = this.v3;
                        return new he(
                          Ga(t, e.x, i.x, n.x, r.x),
                          Ga(t, e.y, i.y, n.y, r.y)
                        );
                      }),
                      (Za.prototype = Object.create(Ya.prototype)),
                      (Za.prototype.constructor = Za),
                      (Za.prototype.getPoint = function(t) {
                        var e = this.v0,
                          i = this.v1,
                          n = this.v2;
                        return new he(
                          Va(t, e.x, i.x, n.x),
                          Va(t, e.y, i.y, n.y)
                        );
                      });
                    var Ja,
                      $a = Object.assign(Object.create(Wa.prototype), {
                        fromPoints: function(t) {
                          this.moveTo(t[0].x, t[0].y);
                          for (var e = 1, i = t.length; e < i; e++)
                            this.lineTo(t[e].x, t[e].y);
                        },
                        moveTo: function(t, e) {
                          this.currentPoint.set(t, e);
                        },
                        lineTo: function(t, e) {
                          var i = new Qa(
                            this.currentPoint.clone(),
                            new he(t, e)
                          );
                          this.curves.push(i), this.currentPoint.set(t, e);
                        },
                        quadraticCurveTo: function(t, e, i, n) {
                          var r = new Za(
                            this.currentPoint.clone(),
                            new he(t, e),
                            new he(i, n)
                          );
                          this.curves.push(r), this.currentPoint.set(i, n);
                        },
                        bezierCurveTo: function(t, e, i, n, r, o) {
                          var s = new Ka(
                            this.currentPoint.clone(),
                            new he(t, e),
                            new he(i, n),
                            new he(r, o)
                          );
                          this.curves.push(s), this.currentPoint.set(r, o);
                        },
                        splineThru: function(t) {
                          var e = new Xa([this.currentPoint.clone()].concat(t));
                          this.curves.push(e),
                            this.currentPoint.copy(t[t.length - 1]);
                        },
                        arc: function(t, e, i, n, r, o) {
                          var s = this.currentPoint.x,
                            a = this.currentPoint.y;
                          this.absarc(t + s, e + a, i, n, r, o);
                        },
                        absarc: function(t, e, i, n, r, o) {
                          this.absellipse(t, e, i, i, n, r, o);
                        },
                        ellipse: function(t, e, i, n, r, o, s, a) {
                          var c = this.currentPoint.x,
                            l = this.currentPoint.y;
                          this.absellipse(t + c, e + l, i, n, r, o, s, a);
                        },
                        absellipse: function(t, e, i, n, r, o, s, a) {
                          var c = new qa(t, e, i, n, r, o, s, a);
                          if (this.curves.length > 0) {
                            var l = c.getPoint(0);
                            l.equals(this.currentPoint) ||
                              this.lineTo(l.x, l.y);
                          }
                          this.curves.push(c);
                          var u = c.getPoint(1);
                          this.currentPoint.copy(u);
                        }
                      });
                    function tc(t) {
                      Wa.call(this),
                        (this.currentPoint = new he()),
                        t && this.fromPoints(t);
                    }
                    function ec() {
                      tc.apply(this, arguments), (this.holes = []);
                    }
                    function ic() {
                      (this.subPaths = []), (this.currentPath = null);
                    }
                    function nc(t) {
                      this.data = t;
                    }
                    function rc(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    (tc.prototype = $a),
                      ($a.constructor = tc),
                      (ec.prototype = Object.assign(Object.create($a), {
                        constructor: ec,
                        getPointsHoles: function(t) {
                          for (
                            var e = [], i = 0, n = this.holes.length;
                            i < n;
                            i++
                          )
                            e[i] = this.holes[i].getPoints(t);
                          return e;
                        },
                        extractAllPoints: function(t) {
                          return {
                            shape: this.getPoints(t),
                            holes: this.getPointsHoles(t)
                          };
                        },
                        extractPoints: function(t) {
                          return this.extractAllPoints(t);
                        }
                      })),
                      Object.assign(ic.prototype, {
                        moveTo: function(t, e) {
                          (this.currentPath = new tc()),
                            this.subPaths.push(this.currentPath),
                            this.currentPath.moveTo(t, e);
                        },
                        lineTo: function(t, e) {
                          this.currentPath.lineTo(t, e);
                        },
                        quadraticCurveTo: function(t, e, i, n) {
                          this.currentPath.quadraticCurveTo(t, e, i, n);
                        },
                        bezierCurveTo: function(t, e, i, n, r, o) {
                          this.currentPath.bezierCurveTo(t, e, i, n, r, o);
                        },
                        splineThru: function(t) {
                          this.currentPath.splineThru(t);
                        },
                        toShapes: function(t, e) {
                          function i(t) {
                            for (var e = [], i = 0, n = t.length; i < n; i++) {
                              var r = t[i],
                                o = new ec();
                              (o.curves = r.curves), e.push(o);
                            }
                            return e;
                          }
                          function n(t, e) {
                            for (
                              var i = e.length, n = !1, r = i - 1, o = 0;
                              o < i;
                              r = o++
                            ) {
                              var s = e[r],
                                a = e[o],
                                c = a.x - s.x,
                                l = a.y - s.y;
                              if (Math.abs(l) > Number.EPSILON) {
                                if (
                                  (l < 0 &&
                                    ((s = e[o]),
                                    (c = -c),
                                    (a = e[r]),
                                    (l = -l)),
                                  t.y < s.y || t.y > a.y)
                                )
                                  continue;
                                if (t.y === s.y) {
                                  if (t.x === s.x) return !0;
                                } else {
                                  var u = l * (t.x - s.x) - c * (t.y - s.y);
                                  if (0 === u) return !0;
                                  if (u < 0) continue;
                                  n = !n;
                                }
                              } else {
                                if (t.y !== s.y) continue;
                                if (
                                  (a.x <= t.x && t.x <= s.x) ||
                                  (s.x <= t.x && t.x <= a.x)
                                )
                                  return !0;
                              }
                            }
                            return n;
                          }
                          var r = gs.isClockWise,
                            o = this.subPaths;
                          if (0 === o.length) return [];
                          if (!0 === e) return i(o);
                          var s,
                            a,
                            c,
                            l = [];
                          if (1 === o.length)
                            return (
                              (a = o[0]),
                              ((c = new ec()).curves = a.curves),
                              l.push(c),
                              l
                            );
                          var u = !r(o[0].getPoints());
                          u = t ? !u : u;
                          var h,
                            d,
                            p = [],
                            f = [],
                            m = [],
                            g = 0;
                          (f[g] = void 0), (m[g] = []);
                          for (var v = 0, y = o.length; v < y; v++)
                            (s = r((h = (a = o[v]).getPoints()))),
                              (s = t ? !s : s)
                                ? (!u && f[g] && g++,
                                  (f[g] = { s: new ec(), p: h }),
                                  (f[g].s.curves = a.curves),
                                  u && g++,
                                  (m[g] = []))
                                : m[g].push({ h: a, p: h[0] });
                          if (!f[0]) return i(o);
                          if (f.length > 1) {
                            for (
                              var w = !1, M = [], E = 0, b = f.length;
                              E < b;
                              E++
                            )
                              p[E] = [];
                            for (E = 0, b = f.length; E < b; E++)
                              for (var x = m[E], A = 0; A < x.length; A++) {
                                for (
                                  var T = x[A], L = !0, N = 0;
                                  N < f.length;
                                  N++
                                )
                                  n(T.p, f[N].p) &&
                                    (E !== N &&
                                      M.push({ froms: E, tos: N, hole: A }),
                                    L ? ((L = !1), p[N].push(T)) : (w = !0));
                                L && p[E].push(T);
                              }
                            M.length > 0 && (w || (m = p));
                          }
                          v = 0;
                          for (var D = f.length; v < D; v++) {
                            (c = f[v].s), l.push(c);
                            for (var S = 0, C = (d = m[v]).length; S < C; S++)
                              c.holes.push(d[S].h);
                          }
                          return l;
                        }
                      }),
                      Object.assign(nc.prototype, {
                        isFont: !0,
                        generateShapes: function(t, e, i) {
                          function n(t, e, n, o) {
                            var s = r.glyphs[t] || r.glyphs['?'];
                            if (s) {
                              var a,
                                c,
                                l,
                                u,
                                h,
                                d,
                                p,
                                f,
                                m,
                                g,
                                v,
                                y = new ic(),
                                w = [];
                              if (s.o)
                                for (
                                  var M =
                                      s._cachedOutline ||
                                      (s._cachedOutline = s.o.split(' ')),
                                    E = 0,
                                    b = M.length;
                                  E < b;

                                ) {
                                  switch (M[E++]) {
                                    case 'm':
                                      (a = M[E++] * e + n),
                                        (c = M[E++] * e + o),
                                        y.moveTo(a, c);
                                      break;
                                    case 'l':
                                      (a = M[E++] * e + n),
                                        (c = M[E++] * e + o),
                                        y.lineTo(a, c);
                                      break;
                                    case 'q':
                                      if (
                                        ((l = M[E++] * e + n),
                                        (u = M[E++] * e + o),
                                        (p = M[E++] * e + n),
                                        (f = M[E++] * e + o),
                                        y.quadraticCurveTo(p, f, l, u),
                                        (v = w[w.length - 1]))
                                      ) {
                                        (h = v.x), (d = v.y);
                                        for (var x = 1; x <= i; x++) {
                                          Va((A = x / i), h, p, l),
                                            Va(A, d, f, u);
                                        }
                                      }
                                      break;
                                    case 'b':
                                      if (
                                        ((l = M[E++] * e + n),
                                        (u = M[E++] * e + o),
                                        (p = M[E++] * e + n),
                                        (f = M[E++] * e + o),
                                        (m = M[E++] * e + n),
                                        (g = M[E++] * e + o),
                                        y.bezierCurveTo(p, f, m, g, l, u),
                                        (v = w[w.length - 1]))
                                      ) {
                                        (h = v.x), (d = v.y);
                                        for (x = 1; x <= i; x++) {
                                          var A;
                                          Ga((A = x / i), h, p, m, l),
                                            Ga(A, d, f, g, u);
                                        }
                                      }
                                  }
                                }
                              return { offsetX: s.ha * e, path: y };
                            }
                          }
                          void 0 === e && (e = 100), void 0 === i && (i = 4);
                          for (
                            var r = this.data,
                              o = (function(t) {
                                for (
                                  var i = String(t).split(''),
                                    o = e / r.resolution,
                                    s =
                                      (r.boundingBox.yMax -
                                        r.boundingBox.yMin +
                                        r.underlineThickness) *
                                      o,
                                    a = 0,
                                    c = 0,
                                    l = [],
                                    u = 0;
                                  u < i.length;
                                  u++
                                ) {
                                  var h = i[u];
                                  if ('\n' === h) (a = 0), (c -= s);
                                  else {
                                    var d = n(h, o, a, c);
                                    (a += d.offsetX), l.push(d.path);
                                  }
                                }
                                return l;
                              })(t),
                              s = [],
                              a = 0,
                              c = o.length;
                            a < c;
                            a++
                          )
                            Array.prototype.push.apply(s, o[a].toShapes());
                          return s;
                        }
                      }),
                      Object.assign(rc.prototype, {
                        load: function(t, e, i, n) {
                          var r = this;
                          new Ks(this.manager).load(
                            t,
                            function(t) {
                              var i;
                              try {
                                i = JSON.parse(t);
                              } catch (e) {
                                console.warn(
                                  'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.'
                                ),
                                  (i = JSON.parse(
                                    t.substring(65, t.length - 2)
                                  ));
                              }
                              var n = r.parse(i);
                              e && e(n);
                            },
                            i,
                            n
                          );
                        },
                        parse: function(t) {
                          return new nc(t);
                        }
                      });
                    var oc,
                      sc,
                      ac,
                      cc,
                      lc,
                      uc,
                      hc,
                      dc,
                      pc,
                      fc,
                      mc,
                      gc,
                      vc,
                      yc,
                      wc,
                      Mc,
                      Ec,
                      bc,
                      xc,
                      Ac,
                      Tc,
                      Lc,
                      Nc,
                      Dc,
                      Sc,
                      Cc,
                      _c,
                      Ic,
                      jc,
                      Oc,
                      Rc,
                      zc,
                      kc,
                      Bc,
                      Pc,
                      Uc,
                      Fc,
                      Hc,
                      Vc,
                      Gc = {
                        getContext: function() {
                          return (
                            void 0 === Ja &&
                              (Ja = new (window.AudioContext ||
                                window.webkitAudioContext)()),
                            Ja
                          );
                        },
                        setContext: function(t) {
                          Ja = t;
                        }
                      };
                    function Yc(t) {
                      this.manager = void 0 !== t ? t : Xs;
                    }
                    function Qc() {
                      (this.type = 'StereoCamera'),
                        (this.aspect = 1),
                        (this.eyeSep = 0.064),
                        (this.cameraL = new Pn()),
                        this.cameraL.layers.enable(1),
                        (this.cameraL.matrixAutoUpdate = !1),
                        (this.cameraR = new Pn()),
                        this.cameraR.layers.enable(2),
                        (this.cameraR.matrixAutoUpdate = !1);
                    }
                    function Wc(t, e, i) {
                      zn.call(this), (this.type = 'CubeCamera');
                      var n = new Pn(90, 1, t, e);
                      n.up.set(0, -1, 0),
                        n.lookAt(new ke(1, 0, 0)),
                        this.add(n);
                      var r = new Pn(90, 1, t, e);
                      r.up.set(0, -1, 0),
                        r.lookAt(new ke(-1, 0, 0)),
                        this.add(r);
                      var o = new Pn(90, 1, t, e);
                      o.up.set(0, 0, 1), o.lookAt(new ke(0, 1, 0)), this.add(o);
                      var s = new Pn(90, 1, t, e);
                      s.up.set(0, 0, -1),
                        s.lookAt(new ke(0, -1, 0)),
                        this.add(s);
                      var a = new Pn(90, 1, t, e);
                      a.up.set(0, -1, 0),
                        a.lookAt(new ke(0, 0, 1)),
                        this.add(a);
                      var c = new Pn(90, 1, t, e);
                      c.up.set(0, -1, 0),
                        c.lookAt(new ke(0, 0, -1)),
                        this.add(c);
                      var l = { format: Ot, magFilter: yt, minFilter: yt };
                      (this.renderTarget = new Re(i, i, l)),
                        (this.renderTarget.texture.name = 'CubeCamera'),
                        (this.update = function(t, e) {
                          null === this.parent && this.updateMatrixWorld();
                          var i = this.renderTarget,
                            l = i.texture.generateMipmaps;
                          (i.texture.generateMipmaps = !1),
                            (i.activeCubeFace = 0),
                            t.render(e, n, i),
                            (i.activeCubeFace = 1),
                            t.render(e, r, i),
                            (i.activeCubeFace = 2),
                            t.render(e, o, i),
                            (i.activeCubeFace = 3),
                            t.render(e, s, i),
                            (i.activeCubeFace = 4),
                            t.render(e, a, i),
                            (i.texture.generateMipmaps = l),
                            (i.activeCubeFace = 5),
                            t.render(e, c, i),
                            t.setRenderTarget(null);
                        }),
                        (this.clear = function(t, e, i, n) {
                          for (var r = this.renderTarget, o = 0; o < 6; o++)
                            (r.activeCubeFace = o),
                              t.setRenderTarget(r),
                              t.clear(e, i, n);
                          t.setRenderTarget(null);
                        });
                    }
                    function qc() {
                      zn.call(this),
                        (this.type = 'AudioListener'),
                        (this.context = Gc.getContext()),
                        (this.gain = this.context.createGain()),
                        this.gain.connect(this.context.destination),
                        (this.filter = null);
                    }
                    function Xc(t) {
                      zn.call(this),
                        (this.type = 'Audio'),
                        (this.context = t.context),
                        (this.gain = this.context.createGain()),
                        this.gain.connect(t.getInput()),
                        (this.autoplay = !1),
                        (this.buffer = null),
                        (this.loop = !1),
                        (this.startTime = 0),
                        (this.playbackRate = 1),
                        (this.isPlaying = !1),
                        (this.hasPlaybackControl = !0),
                        (this.sourceType = 'empty'),
                        (this.filters = []);
                    }
                    function Kc(t) {
                      Xc.call(this, t),
                        (this.panner = this.context.createPanner()),
                        this.panner.connect(this.gain);
                    }
                    function Zc(t, e) {
                      (this.analyser = t.context.createAnalyser()),
                        (this.analyser.fftSize = void 0 !== e ? e : 2048),
                        (this.data = new Uint8Array(
                          this.analyser.frequencyBinCount
                        )),
                        t.getOutput().connect(this.analyser);
                    }
                    function Jc(t, e, i) {
                      (this.binding = t), (this.valueSize = i);
                      var n,
                        r = Float64Array;
                      switch (e) {
                        case 'quaternion':
                          n = this._slerp;
                          break;
                        case 'string':
                        case 'bool':
                          (r = Array), (n = this._select);
                          break;
                        default:
                          n = this._lerp;
                      }
                      (this.buffer = new r(4 * i)),
                        (this._mixBufferRegion = n),
                        (this.cumulativeWeight = 0),
                        (this.useCount = 0),
                        (this.referenceCount = 0);
                    }
                    function $c(t, e, i) {
                      var n = i || tl.parseTrackName(e);
                      (this._targetGroup = t),
                        (this._bindings = t.subscribe_(e, n));
                    }
                    function tl(t, e, i) {
                      (this.path = e),
                        (this.parsedPath = i || tl.parseTrackName(e)),
                        (this.node =
                          tl.findNode(t, this.parsedPath.nodeName) || t),
                        (this.rootNode = t);
                    }
                    function el(t) {
                      (this.uuid = ue.generateUUID()),
                        (this._objects = Array.prototype.slice.call(arguments)),
                        (this.nCachedObjects_ = 0);
                      var e = {};
                      this._indicesByUUID = e;
                      for (var i = 0, n = arguments.length; i !== n; ++i)
                        e[arguments[i].uuid] = i;
                      (this._paths = []),
                        (this._parsedPaths = []),
                        (this._bindings = []),
                        (this._bindingsIndicesByPath = {});
                      var r = this;
                      this.stats = {
                        objects: {
                          get total() {
                            return r._objects.length;
                          },
                          get inUse() {
                            return this.total - r.nCachedObjects_;
                          }
                        },
                        get bindingsPerObject() {
                          return r._bindings.length;
                        }
                      };
                    }
                    function il(t, e, i) {
                      (this._mixer = t),
                        (this._clip = e),
                        (this._localRoot = i || null);
                      for (
                        var n = e.tracks,
                          r = n.length,
                          o = new Array(r),
                          s = { endingStart: Zt, endingEnd: Zt },
                          a = 0;
                        a !== r;
                        ++a
                      ) {
                        var c = n[a].createInterpolant(null);
                        (o[a] = c), (c.settings = s);
                      }
                      (this._interpolantSettings = s),
                        (this._interpolants = o),
                        (this._propertyBindings = new Array(r)),
                        (this._cacheIndex = null),
                        (this._byClipCacheIndex = null),
                        (this._timeScaleInterpolant = null),
                        (this._weightInterpolant = null),
                        (this.loop = Kt),
                        (this._loopCount = -1),
                        (this._startTime = null),
                        (this.time = 0),
                        (this.timeScale = 1),
                        (this._effectiveTimeScale = 1),
                        (this.weight = 1),
                        (this._effectiveWeight = 1),
                        (this.repetitions = 1 / 0),
                        (this.paused = !1),
                        (this.enabled = !0),
                        (this.clampWhenFinished = !1),
                        (this.zeroSlopeAtStart = !0),
                        (this.zeroSlopeAtEnd = !0);
                    }
                    function nl(t) {
                      (this._root = t),
                        this._initMemoryManager(),
                        (this._accuIndex = 0),
                        (this.time = 0),
                        (this.timeScale = 1);
                    }
                    function rl(t) {
                      'string' == typeof t &&
                        (console.warn(
                          'THREE.Uniform: Type parameter is no longer needed.'
                        ),
                        (t = arguments[1])),
                        (this.value = t);
                    }
                    function ol() {
                      Fr.call(this),
                        (this.type = 'InstancedBufferGeometry'),
                        (this.maxInstancedCount = void 0);
                    }
                    function sl(t, e, i, n) {
                      (this.uuid = ue.generateUUID()),
                        (this.data = t),
                        (this.itemSize = e),
                        (this.offset = i),
                        (this.normalized = !0 === n);
                    }
                    function al(t, e) {
                      (this.uuid = ue.generateUUID()),
                        (this.array = t),
                        (this.stride = e),
                        (this.count = void 0 !== t ? t.length / e : 0),
                        (this.dynamic = !1),
                        (this.updateRange = { offset: 0, count: -1 }),
                        (this.onUploadCallback = function() {}),
                        (this.version = 0);
                    }
                    function cl(t, e, i) {
                      al.call(this, t, e), (this.meshPerAttribute = i || 1);
                    }
                    function ll(t, e, i) {
                      Sr.call(this, t, e), (this.meshPerAttribute = i || 1);
                    }
                    function ul(t, e, i, n) {
                      (this.ray = new Wr(t, e)),
                        (this.near = i || 0),
                        (this.far = n || 1 / 0),
                        (this.params = {
                          Mesh: {},
                          Line: {},
                          LOD: {},
                          Points: { threshold: 1 },
                          Sprite: {}
                        }),
                        Object.defineProperties(this.params, {
                          PointCloud: {
                            get: function() {
                              return (
                                console.warn(
                                  'THREE.Raycaster: params.PointCloud has been renamed to params.Points.'
                                ),
                                this.Points
                              );
                            }
                          }
                        });
                    }
                    function hl(t, e) {
                      return t.distance - e.distance;
                    }
                    function dl(t, e, i, n) {
                      if (!1 !== t.visible && (t.raycast(e, i), !0 === n))
                        for (
                          var r = t.children, o = 0, s = r.length;
                          o < s;
                          o++
                        )
                          dl(r[o], e, i, !0);
                    }
                    function pl(t) {
                      (this.autoStart = void 0 === t || t),
                        (this.startTime = 0),
                        (this.oldTime = 0),
                        (this.elapsedTime = 0),
                        (this.running = !1);
                    }
                    function fl(t, e, i) {
                      return (
                        (this.radius = void 0 !== t ? t : 1),
                        (this.phi = void 0 !== e ? e : 0),
                        (this.theta = void 0 !== i ? i : 0),
                        this
                      );
                    }
                    function ml(t, e, i) {
                      return (
                        (this.radius = void 0 !== t ? t : 1),
                        (this.theta = void 0 !== e ? e : 0),
                        (this.y = void 0 !== i ? i : 0),
                        this
                      );
                    }
                    function gl(t) {
                      zn.call(this),
                        (this.material = t),
                        (this.render = function(t) {});
                    }
                    function vl(t, e, i, n) {
                      (this.object = t), (this.size = void 0 !== e ? e : 1);
                      var r = void 0 !== i ? i : 16711680,
                        o = void 0 !== n ? n : 1,
                        s = 0,
                        a = this.object.geometry;
                      a && a.isGeometry
                        ? (s = 3 * a.faces.length)
                        : a &&
                          a.isBufferGeometry &&
                          (s = a.attributes.normal.count);
                      var c = new Fr(),
                        l = new kr(2 * s * 3, 3);
                      c.addAttribute('position', l),
                        Vo.call(this, c, new Fo({ color: r, linewidth: o })),
                        (this.matrixAutoUpdate = !1),
                        this.update();
                    }
                    function yl(t, e) {
                      zn.call(this),
                        (this.light = t),
                        this.light.updateMatrixWorld(),
                        (this.matrix = t.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        (this.color = e);
                      for (
                        var i = new Fr(),
                          n = [
                            0,
                            0,
                            0,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0,
                            1,
                            0,
                            1,
                            0,
                            0,
                            0,
                            -1,
                            0,
                            1,
                            0,
                            0,
                            0,
                            0,
                            1,
                            1,
                            0,
                            0,
                            0,
                            0,
                            -1,
                            1
                          ],
                          r = 0,
                          o = 1;
                        r < 32;
                        r++, o++
                      ) {
                        var s = r / 32 * Math.PI * 2,
                          a = o / 32 * Math.PI * 2;
                        n.push(
                          Math.cos(s),
                          Math.sin(s),
                          1,
                          Math.cos(a),
                          Math.sin(a),
                          1
                        );
                      }
                      i.addAttribute('position', new kr(n, 3));
                      var c = new Fo({ fog: !1 });
                      (this.cone = new Vo(i, c)),
                        this.add(this.cone),
                        this.update();
                    }
                    function wl(t) {
                      for (
                        var e = (function t(e) {
                            var i = [];
                            e && e.isBone && i.push(e);
                            for (var n = 0; n < e.children.length; n++)
                              i.push.apply(i, t(e.children[n]));
                            return i;
                          })(t),
                          i = new Fr(),
                          n = [],
                          r = [],
                          o = new Ni(0, 0, 1),
                          s = new Ni(0, 1, 0),
                          a = 0;
                        a < e.length;
                        a++
                      ) {
                        var c = e[a];
                        c.parent &&
                          c.parent.isBone &&
                          (n.push(0, 0, 0),
                          n.push(0, 0, 0),
                          r.push(o.r, o.g, o.b),
                          r.push(s.r, s.g, s.b));
                      }
                      i.addAttribute('position', new kr(n, 3)),
                        i.addAttribute('color', new kr(r, 3));
                      var l = new Fo({
                        vertexColors: M,
                        depthTest: !1,
                        depthWrite: !1,
                        transparent: !0
                      });
                      Vo.call(this, i, l),
                        (this.root = t),
                        (this.bones = e),
                        (this.matrix = t.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        this.onBeforeRender();
                    }
                    function Ml(t, e, i) {
                      (this.light = t),
                        this.light.updateMatrixWorld(),
                        (this.color = i);
                      var n = new bs(e, 4, 2),
                        r = new Qr({ wireframe: !0, fog: !1 });
                      Kr.call(this, n, r),
                        (this.matrix = this.light.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        this.update();
                    }
                    function El(t, e) {
                      zn.call(this),
                        (this.light = t),
                        this.light.updateMatrixWorld(),
                        (this.matrix = t.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        (this.color = e);
                      var i = new Fo({ fog: !1 }),
                        n = new Fr();
                      n.addAttribute(
                        'position',
                        new Sr(new Float32Array(15), 3)
                      ),
                        (this.line = new Ho(n, i)),
                        this.add(this.line),
                        this.update();
                    }
                    function bl(t, e, i) {
                      zn.call(this),
                        (this.light = t),
                        this.light.updateMatrixWorld(),
                        (this.matrix = t.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        (this.color = i);
                      var n = new os(e);
                      n.rotateY(0.5 * Math.PI),
                        (this.material = new Qr({ wireframe: !0, fog: !1 })),
                        void 0 === this.color &&
                          (this.material.vertexColors = M);
                      var r = n.getAttribute('position'),
                        o = new Float32Array(3 * r.count);
                      n.addAttribute('color', new Sr(o, 3)),
                        this.add(new Kr(n, this.material)),
                        this.update();
                    }
                    function xl(t, e, i, n) {
                      (t = t || 10),
                        (e = e || 10),
                        (i = new Ni(void 0 !== i ? i : 4473924)),
                        (n = new Ni(void 0 !== n ? n : 8947848));
                      for (
                        var r = e / 2,
                          o = t / e,
                          s = t / 2,
                          a = [],
                          c = [],
                          l = 0,
                          u = 0,
                          h = -s;
                        l <= e;
                        l++, h += o
                      ) {
                        a.push(-s, 0, h, s, 0, h), a.push(h, 0, -s, h, 0, s);
                        var d = l === r ? i : n;
                        d.toArray(c, u),
                          (u += 3),
                          d.toArray(c, u),
                          (u += 3),
                          d.toArray(c, u),
                          (u += 3),
                          d.toArray(c, u),
                          (u += 3);
                      }
                      var p = new Fr();
                      p.addAttribute('position', new kr(a, 3)),
                        p.addAttribute('color', new kr(c, 3));
                      var f = new Fo({ vertexColors: M });
                      Vo.call(this, p, f);
                    }
                    function Al(t, e, i, n, r, o) {
                      (t = t || 10),
                        (e = e || 16),
                        (i = i || 8),
                        (n = n || 64),
                        (r = new Ni(void 0 !== r ? r : 4473924)),
                        (o = new Ni(void 0 !== o ? o : 8947848));
                      var s,
                        a,
                        c,
                        l,
                        u,
                        h,
                        d,
                        p = [],
                        f = [];
                      for (l = 0; l <= e; l++)
                        (c = l / e * (2 * Math.PI)),
                          (s = Math.sin(c) * t),
                          (a = Math.cos(c) * t),
                          p.push(0, 0, 0),
                          p.push(s, 0, a),
                          (d = 1 & l ? r : o),
                          f.push(d.r, d.g, d.b),
                          f.push(d.r, d.g, d.b);
                      for (l = 0; l <= i; l++)
                        for (
                          d = 1 & l ? r : o, h = t - t / i * l, u = 0;
                          u < n;
                          u++
                        )
                          (c = u / n * (2 * Math.PI)),
                            (s = Math.sin(c) * h),
                            (a = Math.cos(c) * h),
                            p.push(s, 0, a),
                            f.push(d.r, d.g, d.b),
                            (c = (u + 1) / n * (2 * Math.PI)),
                            (s = Math.sin(c) * h),
                            (a = Math.cos(c) * h),
                            p.push(s, 0, a),
                            f.push(d.r, d.g, d.b);
                      var m = new Fr();
                      m.addAttribute('position', new kr(p, 3)),
                        m.addAttribute('color', new kr(f, 3));
                      var g = new Fo({ vertexColors: M });
                      Vo.call(this, m, g);
                    }
                    function Tl(t, e, i, n) {
                      (this.object = t), (this.size = void 0 !== e ? e : 1);
                      var r = void 0 !== i ? i : 16776960,
                        o = void 0 !== n ? n : 1,
                        s = 0,
                        a = this.object.geometry;
                      a && a.isGeometry
                        ? (s = a.faces.length)
                        : console.warn(
                            'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.'
                          );
                      var c = new Fr(),
                        l = new kr(2 * s * 3, 3);
                      c.addAttribute('position', l),
                        Vo.call(this, c, new Fo({ color: r, linewidth: o })),
                        (this.matrixAutoUpdate = !1),
                        this.update();
                    }
                    function Ll(t, e, i) {
                      zn.call(this),
                        (this.light = t),
                        this.light.updateMatrixWorld(),
                        (this.matrix = t.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        (this.color = i),
                        void 0 === e && (e = 1);
                      var n = new Fr();
                      n.addAttribute(
                        'position',
                        new kr(
                          [-e, e, 0, e, e, 0, e, -e, 0, -e, -e, 0, -e, e, 0],
                          3
                        )
                      );
                      var r = new Fo({ fog: !1 });
                      (this.lightPlane = new Ho(n, r)),
                        this.add(this.lightPlane),
                        (n = new Fr()).addAttribute(
                          'position',
                          new kr([0, 0, 0, 0, 0, 1], 3)
                        ),
                        (this.targetLine = new Ho(n, r)),
                        this.add(this.targetLine),
                        this.update();
                    }
                    function Nl(t) {
                      var e = new Fr(),
                        i = new Fo({ color: 16777215, vertexColors: w }),
                        n = [],
                        r = [],
                        o = {},
                        s = new Ni(16755200),
                        a = new Ni(16711680),
                        c = new Ni(43775),
                        l = new Ni(16777215),
                        u = new Ni(3355443);
                      function h(t, e, i) {
                        d(t, i), d(e, i);
                      }
                      function d(t, e) {
                        n.push(0, 0, 0),
                          r.push(e.r, e.g, e.b),
                          void 0 === o[t] && (o[t] = []),
                          o[t].push(n.length / 3 - 1);
                      }
                      h('n1', 'n2', s),
                        h('n2', 'n4', s),
                        h('n4', 'n3', s),
                        h('n3', 'n1', s),
                        h('f1', 'f2', s),
                        h('f2', 'f4', s),
                        h('f4', 'f3', s),
                        h('f3', 'f1', s),
                        h('n1', 'f1', s),
                        h('n2', 'f2', s),
                        h('n3', 'f3', s),
                        h('n4', 'f4', s),
                        h('p', 'n1', a),
                        h('p', 'n2', a),
                        h('p', 'n3', a),
                        h('p', 'n4', a),
                        h('u1', 'u2', c),
                        h('u2', 'u3', c),
                        h('u3', 'u1', c),
                        h('c', 't', l),
                        h('p', 'c', u),
                        h('cn1', 'cn2', u),
                        h('cn3', 'cn4', u),
                        h('cf1', 'cf2', u),
                        h('cf3', 'cf4', u),
                        e.addAttribute('position', new kr(n, 3)),
                        e.addAttribute('color', new kr(r, 3)),
                        Vo.call(this, e, i),
                        (this.camera = t),
                        this.camera.updateProjectionMatrix &&
                          this.camera.updateProjectionMatrix(),
                        (this.matrix = t.matrixWorld),
                        (this.matrixAutoUpdate = !1),
                        (this.pointMap = o),
                        this.update();
                    }
                    function Dl(t, e) {
                      (this.object = t), void 0 === e && (e = 16776960);
                      var i = new Uint16Array([
                          0,
                          1,
                          1,
                          2,
                          2,
                          3,
                          3,
                          0,
                          4,
                          5,
                          5,
                          6,
                          6,
                          7,
                          7,
                          4,
                          0,
                          4,
                          1,
                          5,
                          2,
                          6,
                          3,
                          7
                        ]),
                        n = new Float32Array(24),
                        r = new Fr();
                      r.setIndex(new Sr(i, 1)),
                        r.addAttribute('position', new Sr(n, 3)),
                        Vo.call(this, r, new Fo({ color: e })),
                        (this.matrixAutoUpdate = !1),
                        this.update();
                    }
                    function Sl(t, e) {
                      (this.type = 'Box3Helper'), (this.box = t);
                      var i = void 0 !== e ? e : 16776960,
                        n = new Uint16Array([
                          0,
                          1,
                          1,
                          2,
                          2,
                          3,
                          3,
                          0,
                          4,
                          5,
                          5,
                          6,
                          6,
                          7,
                          7,
                          4,
                          0,
                          4,
                          1,
                          5,
                          2,
                          6,
                          3,
                          7
                        ]),
                        r = new Fr();
                      r.setIndex(new Sr(n, 1)),
                        r.addAttribute(
                          'position',
                          new kr(
                            [
                              1,
                              1,
                              1,
                              -1,
                              1,
                              1,
                              -1,
                              -1,
                              1,
                              1,
                              -1,
                              1,
                              1,
                              1,
                              -1,
                              -1,
                              1,
                              -1,
                              -1,
                              -1,
                              -1,
                              1,
                              -1,
                              -1
                            ],
                            3
                          )
                        ),
                        Vo.call(this, r, new Fo({ color: i })),
                        this.geometry.computeBoundingSphere(),
                        this.onBeforeRender();
                    }
                    function Cl(t, e, i) {
                      (this.type = 'PlaneHelper'),
                        (this.plane = t),
                        (this.size = void 0 === e ? 1 : e);
                      var n = void 0 !== i ? i : 16776960,
                        r = new Fr();
                      r.addAttribute(
                        'position',
                        new kr(
                          [
                            1,
                            -1,
                            1,
                            -1,
                            1,
                            1,
                            -1,
                            -1,
                            1,
                            1,
                            1,
                            1,
                            -1,
                            1,
                            1,
                            -1,
                            -1,
                            1,
                            1,
                            -1,
                            1,
                            1,
                            1,
                            1,
                            0,
                            0,
                            1,
                            0,
                            0,
                            0
                          ],
                          3
                        )
                      ),
                        r.computeBoundingSphere(),
                        Ho.call(this, r, new Fo({ color: n }));
                      var o = new Fr();
                      o.addAttribute(
                        'position',
                        new kr(
                          [
                            1,
                            1,
                            1,
                            -1,
                            1,
                            1,
                            -1,
                            -1,
                            1,
                            1,
                            1,
                            1,
                            -1,
                            -1,
                            1,
                            1,
                            -1,
                            1
                          ],
                          3
                        )
                      ),
                        o.computeBoundingSphere(),
                        this.add(
                          new Kr(
                            o,
                            new Qr({
                              color: n,
                              opacity: 0.2,
                              transparent: !0,
                              depthWrite: !1
                            })
                          )
                        ),
                        this.onBeforeRender();
                    }
                    function _l(t, e, i, n, r, o) {
                      zn.call(this),
                        void 0 === n && (n = 16776960),
                        void 0 === i && (i = 1),
                        void 0 === r && (r = 0.2 * i),
                        void 0 === o && (o = 0.2 * r),
                        void 0 === Uc &&
                          ((Uc = new Fr()).addAttribute(
                            'position',
                            new kr([0, 0, 0, 0, 1, 0], 3)
                          ),
                          (Fc = new _s(0, 0.5, 1, 5, 1)).translate(0, -0.5, 0)),
                        this.position.copy(e),
                        (this.line = new Ho(Uc, new Fo({ color: n }))),
                        (this.line.matrixAutoUpdate = !1),
                        this.add(this.line),
                        (this.cone = new Kr(Fc, new Qr({ color: n }))),
                        (this.cone.matrixAutoUpdate = !1),
                        this.add(this.cone),
                        this.setDirection(t),
                        this.setLength(i, r, o);
                    }
                    function Il(t) {
                      var e = [
                          0,
                          0,
                          0,
                          (t = t || 1),
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          t,
                          0,
                          0,
                          0,
                          0,
                          0,
                          0,
                          t
                        ],
                        i = new Fr();
                      i.addAttribute('position', new kr(e, 3)),
                        i.addAttribute(
                          'color',
                          new kr(
                            [
                              1,
                              0,
                              0,
                              1,
                              0.6,
                              0,
                              0,
                              1,
                              0,
                              0.6,
                              1,
                              0,
                              0,
                              0,
                              1,
                              0,
                              0.6,
                              1
                            ],
                            3
                          )
                        );
                      var n = new Fo({ vertexColors: M });
                      Vo.call(this, i, n);
                    }
                    function jl() {
                      var t = 0,
                        e = 0,
                        i = 0,
                        n = 0;
                      function r(r, o, s, a) {
                        (t = r),
                          (e = s),
                          (i = -3 * r + 3 * o - 2 * s - a),
                          (n = 2 * r - 2 * o + s + a);
                      }
                      return {
                        initCatmullRom: function(t, e, i, n, o) {
                          r(e, i, o * (i - t), o * (n - e));
                        },
                        initNonuniformCatmullRom: function(
                          t,
                          e,
                          i,
                          n,
                          o,
                          s,
                          a
                        ) {
                          var c = (e - t) / o - (i - t) / (o + s) + (i - e) / s,
                            l = (i - e) / s - (n - e) / (s + a) + (n - i) / a;
                          r(e, i, (c *= s), (l *= s));
                        },
                        calc: function(r) {
                          var o = r * r;
                          return t + e * r + i * o + n * (o * r);
                        }
                      };
                    }
                    Object.assign(Yc.prototype, {
                      load: function(t, e, i, n) {
                        var r = new Ks(this.manager);
                        r.setResponseType('arraybuffer'),
                          r.load(
                            t,
                            function(t) {
                              Gc.getContext().decodeAudioData(t, function(t) {
                                e(t);
                              });
                            },
                            i,
                            n
                          );
                      }
                    }),
                      Object.assign(Qc.prototype, {
                        update: ((pc = new Be()),
                        (fc = new Be()),
                        function(t) {
                          if (
                            oc !== this ||
                            sc !== t.focus ||
                            ac !== t.fov ||
                            cc !== t.aspect * this.aspect ||
                            lc !== t.near ||
                            uc !== t.far ||
                            hc !== t.zoom ||
                            dc !== this.eyeSep
                          ) {
                            (oc = this),
                              (sc = t.focus),
                              (ac = t.fov),
                              (cc = t.aspect * this.aspect),
                              (lc = t.near),
                              (uc = t.far),
                              (hc = t.zoom);
                            var e,
                              i,
                              n = t.projectionMatrix.clone(),
                              r = (dc = this.eyeSep / 2) * lc / sc,
                              o = lc * Math.tan(ue.DEG2RAD * ac * 0.5) / hc;
                            (fc.elements[12] = -dc),
                              (pc.elements[12] = dc),
                              (e = -o * cc + r),
                              (i = o * cc + r),
                              (n.elements[0] = 2 * lc / (i - e)),
                              (n.elements[8] = (i + e) / (i - e)),
                              this.cameraL.projectionMatrix.copy(n),
                              (e = -o * cc - r),
                              (i = o * cc - r),
                              (n.elements[0] = 2 * lc / (i - e)),
                              (n.elements[8] = (i + e) / (i - e)),
                              this.cameraR.projectionMatrix.copy(n);
                          }
                          this.cameraL.matrixWorld
                            .copy(t.matrixWorld)
                            .multiply(fc),
                            this.cameraR.matrixWorld
                              .copy(t.matrixWorld)
                              .multiply(pc);
                        })
                      }),
                      (Wc.prototype = Object.create(zn.prototype)),
                      (Wc.prototype.constructor = Wc),
                      (qc.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: qc,
                          getInput: function() {
                            return this.gain;
                          },
                          removeFilter: function() {
                            null !== this.filter &&
                              (this.gain.disconnect(this.filter),
                              this.filter.disconnect(this.context.destination),
                              this.gain.connect(this.context.destination),
                              (this.filter = null));
                          },
                          getFilter: function() {
                            return this.filter;
                          },
                          setFilter: function(t) {
                            null !== this.filter
                              ? (this.gain.disconnect(this.filter),
                                this.filter.disconnect(
                                  this.context.destination
                                ))
                              : this.gain.disconnect(this.context.destination),
                              (this.filter = t),
                              this.gain.connect(this.filter),
                              this.filter.connect(this.context.destination);
                          },
                          getMasterVolume: function() {
                            return this.gain.gain.value;
                          },
                          setMasterVolume: function(t) {
                            this.gain.gain.value = t;
                          },
                          updateMatrixWorld: ((mc = new ke()),
                          (gc = new ze()),
                          (vc = new ke()),
                          (yc = new ke()),
                          function(t) {
                            zn.prototype.updateMatrixWorld.call(this, t);
                            var e = this.context.listener,
                              i = this.up;
                            this.matrixWorld.decompose(mc, gc, vc),
                              yc.set(0, 0, -1).applyQuaternion(gc),
                              e.positionX
                                ? (e.positionX.setValueAtTime(
                                    mc.x,
                                    this.context.currentTime
                                  ),
                                  e.positionY.setValueAtTime(
                                    mc.y,
                                    this.context.currentTime
                                  ),
                                  e.positionZ.setValueAtTime(
                                    mc.z,
                                    this.context.currentTime
                                  ),
                                  e.forwardX.setValueAtTime(
                                    yc.x,
                                    this.context.currentTime
                                  ),
                                  e.forwardY.setValueAtTime(
                                    yc.y,
                                    this.context.currentTime
                                  ),
                                  e.forwardZ.setValueAtTime(
                                    yc.z,
                                    this.context.currentTime
                                  ),
                                  e.upX.setValueAtTime(
                                    i.x,
                                    this.context.currentTime
                                  ),
                                  e.upY.setValueAtTime(
                                    i.y,
                                    this.context.currentTime
                                  ),
                                  e.upZ.setValueAtTime(
                                    i.z,
                                    this.context.currentTime
                                  ))
                                : (e.setPosition(mc.x, mc.y, mc.z),
                                  e.setOrientation(
                                    yc.x,
                                    yc.y,
                                    yc.z,
                                    i.x,
                                    i.y,
                                    i.z
                                  ));
                          })
                        }
                      )),
                      (Xc.prototype = Object.assign(
                        Object.create(zn.prototype),
                        {
                          constructor: Xc,
                          getOutput: function() {
                            return this.gain;
                          },
                          setNodeSource: function(t) {
                            return (
                              (this.hasPlaybackControl = !1),
                              (this.sourceType = 'audioNode'),
                              (this.source = t),
                              this.connect(),
                              this
                            );
                          },
                          setBuffer: function(t) {
                            return (
                              (this.buffer = t),
                              (this.sourceType = 'buffer'),
                              this.autoplay && this.play(),
                              this
                            );
                          },
                          play: function() {
                            if (!0 !== this.isPlaying) {
                              if (!1 !== this.hasPlaybackControl) {
                                var t = this.context.createBufferSource();
                                return (
                                  (t.buffer = this.buffer),
                                  (t.loop = this.loop),
                                  (t.onended = this.onEnded.bind(this)),
                                  t.playbackRate.setValueAtTime(
                                    this.playbackRate,
                                    this.startTime
                                  ),
                                  t.start(0, this.startTime),
                                  (this.isPlaying = !0),
                                  (this.source = t),
                                  this.connect()
                                );
                              }
                              console.warn(
                                'THREE.Audio: this Audio has no playback control.'
                              );
                            } else
                              console.warn(
                                'THREE.Audio: Audio is already playing.'
                              );
                          },
                          pause: function() {
                            if (!1 !== this.hasPlaybackControl)
                              return (
                                this.source.stop(),
                                (this.startTime = this.context.currentTime),
                                (this.isPlaying = !1),
                                this
                              );
                            console.warn(
                              'THREE.Audio: this Audio has no playback control.'
                            );
                          },
                          stop: function() {
                            if (!1 !== this.hasPlaybackControl)
                              return (
                                this.source.stop(),
                                (this.startTime = 0),
                                (this.isPlaying = !1),
                                this
                              );
                            console.warn(
                              'THREE.Audio: this Audio has no playback control.'
                            );
                          },
                          connect: function() {
                            if (this.filters.length > 0) {
                              this.source.connect(this.filters[0]);
                              for (
                                var t = 1, e = this.filters.length;
                                t < e;
                                t++
                              )
                                this.filters[t - 1].connect(this.filters[t]);
                              this.filters[this.filters.length - 1].connect(
                                this.getOutput()
                              );
                            } else this.source.connect(this.getOutput());
                            return this;
                          },
                          disconnect: function() {
                            if (this.filters.length > 0) {
                              this.source.disconnect(this.filters[0]);
                              for (
                                var t = 1, e = this.filters.length;
                                t < e;
                                t++
                              )
                                this.filters[t - 1].disconnect(this.filters[t]);
                              this.filters[this.filters.length - 1].disconnect(
                                this.getOutput()
                              );
                            } else this.source.disconnect(this.getOutput());
                            return this;
                          },
                          getFilters: function() {
                            return this.filters;
                          },
                          setFilters: function(t) {
                            return (
                              t || (t = []),
                              !0 === this.isPlaying
                                ? (this.disconnect(),
                                  (this.filters = t),
                                  this.connect())
                                : (this.filters = t),
                              this
                            );
                          },
                          getFilter: function() {
                            return this.getFilters()[0];
                          },
                          setFilter: function(t) {
                            return this.setFilters(t ? [t] : []);
                          },
                          setPlaybackRate: function(t) {
                            if (!1 !== this.hasPlaybackControl)
                              return (
                                (this.playbackRate = t),
                                !0 === this.isPlaying &&
                                  this.source.playbackRate.setValueAtTime(
                                    this.playbackRate,
                                    this.context.currentTime
                                  ),
                                this
                              );
                            console.warn(
                              'THREE.Audio: this Audio has no playback control.'
                            );
                          },
                          getPlaybackRate: function() {
                            return this.playbackRate;
                          },
                          onEnded: function() {
                            this.isPlaying = !1;
                          },
                          getLoop: function() {
                            return !1 === this.hasPlaybackControl
                              ? (console.warn(
                                  'THREE.Audio: this Audio has no playback control.'
                                ),
                                !1)
                              : this.loop;
                          },
                          setLoop: function(t) {
                            if (!1 !== this.hasPlaybackControl)
                              return (
                                (this.loop = t),
                                !0 === this.isPlaying &&
                                  (this.source.loop = this.loop),
                                this
                              );
                            console.warn(
                              'THREE.Audio: this Audio has no playback control.'
                            );
                          },
                          getVolume: function() {
                            return this.gain.gain.value;
                          },
                          setVolume: function(t) {
                            return (this.gain.gain.value = t), this;
                          }
                        }
                      )),
                      (Kc.prototype = Object.assign(
                        Object.create(Xc.prototype),
                        {
                          constructor: Kc,
                          getOutput: function() {
                            return this.panner;
                          },
                          getRefDistance: function() {
                            return this.panner.refDistance;
                          },
                          setRefDistance: function(t) {
                            this.panner.refDistance = t;
                          },
                          getRolloffFactor: function() {
                            return this.panner.rolloffFactor;
                          },
                          setRolloffFactor: function(t) {
                            this.panner.rolloffFactor = t;
                          },
                          getDistanceModel: function() {
                            return this.panner.distanceModel;
                          },
                          setDistanceModel: function(t) {
                            this.panner.distanceModel = t;
                          },
                          getMaxDistance: function() {
                            return this.panner.maxDistance;
                          },
                          setMaxDistance: function(t) {
                            this.panner.maxDistance = t;
                          },
                          updateMatrixWorld: ((wc = new ke()),
                          function(t) {
                            zn.prototype.updateMatrixWorld.call(this, t),
                              wc.setFromMatrixPosition(this.matrixWorld),
                              this.panner.setPosition(wc.x, wc.y, wc.z);
                          })
                        }
                      )),
                      Object.assign(Zc.prototype, {
                        getFrequencyData: function() {
                          return (
                            this.analyser.getByteFrequencyData(this.data),
                            this.data
                          );
                        },
                        getAverageFrequency: function() {
                          for (
                            var t = 0, e = this.getFrequencyData(), i = 0;
                            i < e.length;
                            i++
                          )
                            t += e[i];
                          return t / e.length;
                        }
                      }),
                      Object.assign(Jc.prototype, {
                        accumulate: function(t, e) {
                          var i = this.buffer,
                            n = this.valueSize,
                            r = t * n + n,
                            o = this.cumulativeWeight;
                          if (0 === o) {
                            for (var s = 0; s !== n; ++s) i[r + s] = i[s];
                            o = e;
                          } else {
                            var a = e / (o += e);
                            this._mixBufferRegion(i, r, 0, a, n);
                          }
                          this.cumulativeWeight = o;
                        },
                        apply: function(t) {
                          var e = this.valueSize,
                            i = this.buffer,
                            n = t * e + e,
                            r = this.cumulativeWeight,
                            o = this.binding;
                          if (((this.cumulativeWeight = 0), r < 1)) {
                            var s = 3 * e;
                            this._mixBufferRegion(i, n, s, 1 - r, e);
                          }
                          for (var a = e, c = e + e; a !== c; ++a)
                            if (i[a] !== i[a + e]) {
                              o.setValue(i, n);
                              break;
                            }
                        },
                        saveOriginalState: function() {
                          var t = this.binding,
                            e = this.buffer,
                            i = this.valueSize,
                            n = 3 * i;
                          t.getValue(e, n);
                          for (var r = i, o = n; r !== o; ++r)
                            e[r] = e[n + r % i];
                          this.cumulativeWeight = 0;
                        },
                        restoreOriginalState: function() {
                          var t = 3 * this.valueSize;
                          this.binding.setValue(this.buffer, t);
                        },
                        _select: function(t, e, i, n, r) {
                          if (n >= 0.5)
                            for (var o = 0; o !== r; ++o) t[e + o] = t[i + o];
                        },
                        _slerp: function(t, e, i, n) {
                          ze.slerpFlat(t, e, t, e, t, i, n);
                        },
                        _lerp: function(t, e, i, n, r) {
                          for (var o = 1 - n, s = 0; s !== r; ++s) {
                            var a = e + s;
                            t[a] = t[a] * o + t[i + s] * n;
                          }
                        }
                      }),
                      Object.assign($c.prototype, {
                        getValue: function(t, e) {
                          this.bind();
                          var i = this._targetGroup.nCachedObjects_,
                            n = this._bindings[i];
                          void 0 !== n && n.getValue(t, e);
                        },
                        setValue: function(t, e) {
                          for (
                            var i = this._bindings,
                              n = this._targetGroup.nCachedObjects_,
                              r = i.length;
                            n !== r;
                            ++n
                          )
                            i[n].setValue(t, e);
                        },
                        bind: function() {
                          for (
                            var t = this._bindings,
                              e = this._targetGroup.nCachedObjects_,
                              i = t.length;
                            e !== i;
                            ++e
                          )
                            t[e].bind();
                        },
                        unbind: function() {
                          for (
                            var t = this._bindings,
                              e = this._targetGroup.nCachedObjects_,
                              i = t.length;
                            e !== i;
                            ++e
                          )
                            t[e].unbind();
                        }
                      }),
                      Object.assign(tl, {
                        Composite: $c,
                        create: function(t, e, i) {
                          return t && t.isAnimationObjectGroup
                            ? new tl.Composite(t, e, i)
                            : new tl(t, e, i);
                        },
                        sanitizeNodeName: function(t) {
                          return t.replace(/\s/g, '_').replace(/[^\w-]/g, '');
                        },
                        parseTrackName: ((Mc = new RegExp(
                          '^' +
                            /((?:[\w-]+[\/:])*)/.source +
                            /([\w-\.]+)?/.source +
                            /(?:\.([\w-]+)(?:\[(.+)\])?)?/.source +
                            /\.([\w-]+)(?:\[(.+)\])?/.source +
                            '$'
                        )),
                        (Ec = ['material', 'materials', 'bones']),
                        function(t) {
                          var e = Mc.exec(t);
                          if (!e)
                            throw new Error(
                              'PropertyBinding: Cannot parse trackName: ' + t
                            );
                          var i = {
                              nodeName: e[2],
                              objectName: e[3],
                              objectIndex: e[4],
                              propertyName: e[5],
                              propertyIndex: e[6]
                            },
                            n = i.nodeName && i.nodeName.lastIndexOf('.');
                          if (void 0 !== n && -1 !== n) {
                            var r = i.nodeName.substring(n + 1);
                            -1 !== Ec.indexOf(r) &&
                              ((i.nodeName = i.nodeName.substring(0, n)),
                              (i.objectName = r));
                          }
                          if (
                            null === i.propertyName ||
                            0 === i.propertyName.length
                          )
                            throw new Error(
                              'PropertyBinding: can not parse propertyName from trackName: ' +
                                t
                            );
                          return i;
                        }),
                        findNode: function(t, e) {
                          if (
                            !e ||
                            '' === e ||
                            'root' === e ||
                            '.' === e ||
                            -1 === e ||
                            e === t.name ||
                            e === t.uuid
                          )
                            return t;
                          if (t.skeleton) {
                            var i = (function(t) {
                              for (var i = 0; i < t.bones.length; i++) {
                                var n = t.bones[i];
                                if (n.name === e) return n;
                              }
                              return null;
                            })(t.skeleton);
                            if (i) return i;
                          }
                          if (t.children) {
                            var n = function(t) {
                                for (var i = 0; i < t.length; i++) {
                                  var r = t[i];
                                  if (r.name === e || r.uuid === e) return r;
                                  var o = n(r.children);
                                  if (o) return o;
                                }
                                return null;
                              },
                              r = n(t.children);
                            if (r) return r;
                          }
                          return null;
                        }
                      }),
                      Object.assign(tl.prototype, {
                        _getValue_unavailable: function() {},
                        _setValue_unavailable: function() {},
                        BindingType: {
                          Direct: 0,
                          EntireArray: 1,
                          ArrayElement: 2,
                          HasFromToArray: 3
                        },
                        Versioning: {
                          None: 0,
                          NeedsUpdate: 1,
                          MatrixWorldNeedsUpdate: 2
                        },
                        GetterByBindingType: [
                          function(t, e) {
                            t[e] = this.node[this.propertyName];
                          },
                          function(t, e) {
                            for (
                              var i = this.resolvedProperty,
                                n = 0,
                                r = i.length;
                              n !== r;
                              ++n
                            )
                              t[e++] = i[n];
                          },
                          function(t, e) {
                            t[e] = this.resolvedProperty[this.propertyIndex];
                          },
                          function(t, e) {
                            this.resolvedProperty.toArray(t, e);
                          }
                        ],
                        SetterByBindingTypeAndVersioning: [
                          [
                            function(t, e) {
                              this.node[this.propertyName] = t[e];
                            },
                            function(t, e) {
                              (this.node[this.propertyName] = t[e]),
                                (this.targetObject.needsUpdate = !0);
                            },
                            function(t, e) {
                              (this.node[this.propertyName] = t[e]),
                                (this.targetObject.matrixWorldNeedsUpdate = !0);
                            }
                          ],
                          [
                            function(t, e) {
                              for (
                                var i = this.resolvedProperty,
                                  n = 0,
                                  r = i.length;
                                n !== r;
                                ++n
                              )
                                i[n] = t[e++];
                            },
                            function(t, e) {
                              for (
                                var i = this.resolvedProperty,
                                  n = 0,
                                  r = i.length;
                                n !== r;
                                ++n
                              )
                                i[n] = t[e++];
                              this.targetObject.needsUpdate = !0;
                            },
                            function(t, e) {
                              for (
                                var i = this.resolvedProperty,
                                  n = 0,
                                  r = i.length;
                                n !== r;
                                ++n
                              )
                                i[n] = t[e++];
                              this.targetObject.matrixWorldNeedsUpdate = !0;
                            }
                          ],
                          [
                            function(t, e) {
                              this.resolvedProperty[this.propertyIndex] = t[e];
                            },
                            function(t, e) {
                              (this.resolvedProperty[this.propertyIndex] =
                                t[e]),
                                (this.targetObject.needsUpdate = !0);
                            },
                            function(t, e) {
                              (this.resolvedProperty[this.propertyIndex] =
                                t[e]),
                                (this.targetObject.matrixWorldNeedsUpdate = !0);
                            }
                          ],
                          [
                            function(t, e) {
                              this.resolvedProperty.fromArray(t, e);
                            },
                            function(t, e) {
                              this.resolvedProperty.fromArray(t, e),
                                (this.targetObject.needsUpdate = !0);
                            },
                            function(t, e) {
                              this.resolvedProperty.fromArray(t, e),
                                (this.targetObject.matrixWorldNeedsUpdate = !0);
                            }
                          ]
                        ],
                        getValue: function(t, e) {
                          this.bind(), this.getValue(t, e);
                        },
                        setValue: function(t, e) {
                          this.bind(), this.setValue(t, e);
                        },
                        bind: function() {
                          var t = this.node,
                            e = this.parsedPath,
                            i = e.objectName,
                            n = e.propertyName,
                            r = e.propertyIndex;
                          if (
                            (t ||
                              ((t =
                                tl.findNode(this.rootNode, e.nodeName) ||
                                this.rootNode),
                              (this.node = t)),
                            (this.getValue = this._getValue_unavailable),
                            (this.setValue = this._setValue_unavailable),
                            t)
                          ) {
                            if (i) {
                              var o = e.objectIndex;
                              switch (i) {
                                case 'materials':
                                  if (!t.material)
                                    return void console.error(
                                      'THREE.PropertyBinding: Can not bind to material as node does not have a material.',
                                      this
                                    );
                                  if (!t.material.materials)
                                    return void console.error(
                                      'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',
                                      this
                                    );
                                  t = t.material.materials;
                                  break;
                                case 'bones':
                                  if (!t.skeleton)
                                    return void console.error(
                                      'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',
                                      this
                                    );
                                  t = t.skeleton.bones;
                                  for (var s = 0; s < t.length; s++)
                                    if (t[s].name === o) {
                                      o = s;
                                      break;
                                    }
                                  break;
                                default:
                                  if (void 0 === t[i])
                                    return void console.error(
                                      'THREE.PropertyBinding: Can not bind to objectName of node undefined.',
                                      this
                                    );
                                  t = t[i];
                              }
                              if (void 0 !== o) {
                                if (void 0 === t[o])
                                  return void console.error(
                                    'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',
                                    this,
                                    t
                                  );
                                t = t[o];
                              }
                            }
                            var a = t[n];
                            if (void 0 !== a) {
                              var c = this.Versioning.None;
                              void 0 !== t.needsUpdate
                                ? ((c = this.Versioning.NeedsUpdate),
                                  (this.targetObject = t))
                                : void 0 !== t.matrixWorldNeedsUpdate &&
                                  ((c = this.Versioning.MatrixWorldNeedsUpdate),
                                  (this.targetObject = t));
                              var l = this.BindingType.Direct;
                              if (void 0 !== r) {
                                if ('morphTargetInfluences' === n) {
                                  if (!t.geometry)
                                    return void console.error(
                                      'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',
                                      this
                                    );
                                  if (t.geometry.isBufferGeometry) {
                                    if (!t.geometry.morphAttributes)
                                      return void console.error(
                                        'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',
                                        this
                                      );
                                    for (
                                      s = 0;
                                      s <
                                      this.node.geometry.morphAttributes
                                        .position.length;
                                      s++
                                    )
                                      if (
                                        t.geometry.morphAttributes.position[s]
                                          .name === r
                                      ) {
                                        r = s;
                                        break;
                                      }
                                  } else {
                                    if (!t.geometry.morphTargets)
                                      return void console.error(
                                        'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphTargets.',
                                        this
                                      );
                                    for (
                                      s = 0;
                                      s <
                                      this.node.geometry.morphTargets.length;
                                      s++
                                    )
                                      if (
                                        t.geometry.morphTargets[s].name === r
                                      ) {
                                        r = s;
                                        break;
                                      }
                                  }
                                }
                                (l = this.BindingType.ArrayElement),
                                  (this.resolvedProperty = a),
                                  (this.propertyIndex = r);
                              } else
                                void 0 !== a.fromArray && void 0 !== a.toArray
                                  ? ((l = this.BindingType.HasFromToArray),
                                    (this.resolvedProperty = a))
                                  : Array.isArray(a)
                                    ? ((l = this.BindingType.EntireArray),
                                      (this.resolvedProperty = a))
                                    : (this.propertyName = n);
                              (this.getValue = this.GetterByBindingType[l]),
                                (this.setValue = this.SetterByBindingTypeAndVersioning[
                                  l
                                ][c]);
                            } else {
                              var u = e.nodeName;
                              console.error(
                                'THREE.PropertyBinding: Trying to update property for track: ' +
                                  u +
                                  '.' +
                                  n +
                                  " but it wasn't found.",
                                t
                              );
                            }
                          } else
                            console.error(
                              'THREE.PropertyBinding: Trying to update node for track: ' +
                                this.path +
                                " but it wasn't found."
                            );
                        },
                        unbind: function() {
                          (this.node = null),
                            (this.getValue = this._getValue_unbound),
                            (this.setValue = this._setValue_unbound);
                        }
                      }),
                      Object.assign(tl.prototype, {
                        _getValue_unbound: tl.prototype.getValue,
                        _setValue_unbound: tl.prototype.setValue
                      }),
                      Object.assign(el.prototype, {
                        isAnimationObjectGroup: !0,
                        add: function(t) {
                          for (
                            var e = this._objects,
                              i = e.length,
                              n = this.nCachedObjects_,
                              r = this._indicesByUUID,
                              o = this._paths,
                              s = this._parsedPaths,
                              a = this._bindings,
                              c = a.length,
                              l = 0,
                              u = arguments.length;
                            l !== u;
                            ++l
                          ) {
                            var h = arguments[l],
                              d = h.uuid,
                              p = r[d],
                              f = void 0;
                            if (void 0 === p) {
                              (p = i++), (r[d] = p), e.push(h);
                              for (var m = 0, g = c; m !== g; ++m)
                                a[m].push(new tl(h, o[m], s[m]));
                            } else if (p < n) {
                              f = e[p];
                              var v = --n,
                                y = e[v];
                              (r[y.uuid] = p),
                                (e[p] = y),
                                (r[d] = v),
                                (e[v] = h);
                              for (m = 0, g = c; m !== g; ++m) {
                                var w = a[m],
                                  M = w[v],
                                  E = w[p];
                                (w[p] = M),
                                  void 0 === E && (E = new tl(h, o[m], s[m])),
                                  (w[v] = E);
                              }
                            } else
                              e[p] !== f &&
                                console.error(
                                  'THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.'
                                );
                          }
                          this.nCachedObjects_ = n;
                        },
                        remove: function(t) {
                          for (
                            var e = this._objects,
                              i = this.nCachedObjects_,
                              n = this._indicesByUUID,
                              r = this._bindings,
                              o = r.length,
                              s = 0,
                              a = arguments.length;
                            s !== a;
                            ++s
                          ) {
                            var c = arguments[s],
                              l = c.uuid,
                              u = n[l];
                            if (void 0 !== u && u >= i) {
                              var h = i++,
                                d = e[h];
                              (n[d.uuid] = u),
                                (e[u] = d),
                                (n[l] = h),
                                (e[h] = c);
                              for (var p = 0, f = o; p !== f; ++p) {
                                var m = r[p],
                                  g = m[h],
                                  v = m[u];
                                (m[u] = g), (m[h] = v);
                              }
                            }
                          }
                          this.nCachedObjects_ = i;
                        },
                        uncache: function(t) {
                          for (
                            var e = this._objects,
                              i = e.length,
                              n = this.nCachedObjects_,
                              r = this._indicesByUUID,
                              o = this._bindings,
                              s = o.length,
                              a = 0,
                              c = arguments.length;
                            a !== c;
                            ++a
                          ) {
                            var l = arguments[a].uuid,
                              u = r[l];
                            if (void 0 !== u)
                              if ((delete r[l], u < n)) {
                                var h = --n,
                                  d = e[h],
                                  p = e[(y = --i)];
                                (r[d.uuid] = u),
                                  (e[u] = d),
                                  (r[p.uuid] = h),
                                  (e[h] = p),
                                  e.pop();
                                for (var f = 0, m = s; f !== m; ++f) {
                                  var g = (w = o[f])[h],
                                    v = w[y];
                                  (w[u] = g), (w[h] = v), w.pop();
                                }
                              } else {
                                var y;
                                (r[(p = e[(y = --i)]).uuid] = u),
                                  (e[u] = p),
                                  e.pop();
                                for (f = 0, m = s; f !== m; ++f) {
                                  var w;
                                  ((w = o[f])[u] = w[y]), w.pop();
                                }
                              }
                          }
                          this.nCachedObjects_ = n;
                        },
                        subscribe_: function(t, e) {
                          var i = this._bindingsIndicesByPath,
                            n = i[t],
                            r = this._bindings;
                          if (void 0 !== n) return r[n];
                          var o = this._paths,
                            s = this._parsedPaths,
                            a = this._objects,
                            c = a.length,
                            l = this.nCachedObjects_,
                            u = new Array(c);
                          (n = r.length),
                            (i[t] = n),
                            o.push(t),
                            s.push(e),
                            r.push(u);
                          for (var h = l, d = a.length; h !== d; ++h) {
                            var p = a[h];
                            u[h] = new tl(p, t, e);
                          }
                          return u;
                        },
                        unsubscribe_: function(t) {
                          var e = this._bindingsIndicesByPath,
                            i = e[t];
                          if (void 0 !== i) {
                            var n = this._paths,
                              r = this._parsedPaths,
                              o = this._bindings,
                              s = o.length - 1,
                              a = o[s];
                            (e[t[s]] = i),
                              (o[i] = a),
                              o.pop(),
                              (r[i] = r[s]),
                              r.pop(),
                              (n[i] = n[s]),
                              n.pop();
                          }
                        }
                      }),
                      Object.assign(il.prototype, {
                        play: function() {
                          return this._mixer._activateAction(this), this;
                        },
                        stop: function() {
                          return (
                            this._mixer._deactivateAction(this), this.reset()
                          );
                        },
                        reset: function() {
                          return (
                            (this.paused = !1),
                            (this.enabled = !0),
                            (this.time = 0),
                            (this._loopCount = -1),
                            (this._startTime = null),
                            this.stopFading().stopWarping()
                          );
                        },
                        isRunning: function() {
                          return (
                            this.enabled &&
                            !this.paused &&
                            0 !== this.timeScale &&
                            null === this._startTime &&
                            this._mixer._isActiveAction(this)
                          );
                        },
                        isScheduled: function() {
                          return this._mixer._isActiveAction(this);
                        },
                        startAt: function(t) {
                          return (this._startTime = t), this;
                        },
                        setLoop: function(t, e) {
                          return (this.loop = t), (this.repetitions = e), this;
                        },
                        setEffectiveWeight: function(t) {
                          return (
                            (this.weight = t),
                            (this._effectiveWeight = this.enabled ? t : 0),
                            this.stopFading()
                          );
                        },
                        getEffectiveWeight: function() {
                          return this._effectiveWeight;
                        },
                        fadeIn: function(t) {
                          return this._scheduleFading(t, 0, 1);
                        },
                        fadeOut: function(t) {
                          return this._scheduleFading(t, 1, 0);
                        },
                        crossFadeFrom: function(t, e, i) {
                          if ((t.fadeOut(e), this.fadeIn(e), i)) {
                            var n = this._clip.duration,
                              r = t._clip.duration,
                              o = r / n,
                              s = n / r;
                            t.warp(1, o, e), this.warp(s, 1, e);
                          }
                          return this;
                        },
                        crossFadeTo: function(t, e, i) {
                          return t.crossFadeFrom(this, e, i);
                        },
                        stopFading: function() {
                          var t = this._weightInterpolant;
                          return (
                            null !== t &&
                              ((this._weightInterpolant = null),
                              this._mixer._takeBackControlInterpolant(t)),
                            this
                          );
                        },
                        setEffectiveTimeScale: function(t) {
                          return (
                            (this.timeScale = t),
                            (this._effectiveTimeScale = this.paused ? 0 : t),
                            this.stopWarping()
                          );
                        },
                        getEffectiveTimeScale: function() {
                          return this._effectiveTimeScale;
                        },
                        setDuration: function(t) {
                          return (
                            (this.timeScale = this._clip.duration / t),
                            this.stopWarping()
                          );
                        },
                        syncWith: function(t) {
                          return (
                            (this.time = t.time),
                            (this.timeScale = t.timeScale),
                            this.stopWarping()
                          );
                        },
                        halt: function(t) {
                          return this.warp(this._effectiveTimeScale, 0, t);
                        },
                        warp: function(t, e, i) {
                          var n = this._mixer,
                            r = n.time,
                            o = this._timeScaleInterpolant,
                            s = this.timeScale;
                          null === o &&
                            ((o = n._lendControlInterpolant()),
                            (this._timeScaleInterpolant = o));
                          var a = o.parameterPositions,
                            c = o.sampleValues;
                          return (
                            (a[0] = r),
                            (a[1] = r + i),
                            (c[0] = t / s),
                            (c[1] = e / s),
                            this
                          );
                        },
                        stopWarping: function() {
                          var t = this._timeScaleInterpolant;
                          return (
                            null !== t &&
                              ((this._timeScaleInterpolant = null),
                              this._mixer._takeBackControlInterpolant(t)),
                            this
                          );
                        },
                        getMixer: function() {
                          return this._mixer;
                        },
                        getClip: function() {
                          return this._clip;
                        },
                        getRoot: function() {
                          return this._localRoot || this._mixer._root;
                        },
                        _update: function(t, e, i, n) {
                          if (this.enabled) {
                            var r = this._startTime;
                            if (null !== r) {
                              var o = (t - r) * i;
                              if (o < 0 || 0 === i) return;
                              (this._startTime = null), (e = i * o);
                            }
                            e *= this._updateTimeScale(t);
                            var s = this._updateTime(e),
                              a = this._updateWeight(t);
                            if (a > 0)
                              for (
                                var c = this._interpolants,
                                  l = this._propertyBindings,
                                  u = 0,
                                  h = c.length;
                                u !== h;
                                ++u
                              )
                                c[u].evaluate(s), l[u].accumulate(n, a);
                          } else this._updateWeight(t);
                        },
                        _updateWeight: function(t) {
                          var e = 0;
                          if (this.enabled) {
                            e = this.weight;
                            var i = this._weightInterpolant;
                            if (null !== i) {
                              var n = i.evaluate(t)[0];
                              (e *= n),
                                t > i.parameterPositions[1] &&
                                  (this.stopFading(),
                                  0 === n && (this.enabled = !1));
                            }
                          }
                          return (this._effectiveWeight = e), e;
                        },
                        _updateTimeScale: function(t) {
                          var e = 0;
                          if (!this.paused) {
                            e = this.timeScale;
                            var i = this._timeScaleInterpolant;
                            if (null !== i)
                              (e *= i.evaluate(t)[0]),
                                t > i.parameterPositions[1] &&
                                  (this.stopWarping(),
                                  0 === e
                                    ? (this.paused = !0)
                                    : (this.timeScale = e));
                          }
                          return (this._effectiveTimeScale = e), e;
                        },
                        _updateTime: function(t) {
                          var e = this.time + t;
                          if (0 === t) return e;
                          var i = this._clip.duration,
                            n = this.loop,
                            r = this._loopCount;
                          if (2200 === n) {
                            -1 === r &&
                              ((this._loopCount = 0),
                              this._setEndings(!0, !0, !1));
                            t: {
                              if (e >= i) e = i;
                              else {
                                if (!(e < 0)) break t;
                                e = 0;
                              }
                              this.clampWhenFinished
                                ? (this.paused = !0)
                                : (this.enabled = !1),
                                this._mixer.dispatchEvent({
                                  type: 'finished',
                                  action: this,
                                  direction: t < 0 ? -1 : 1
                                });
                            }
                          } else {
                            var o = 2202 === n;
                            if (
                              (-1 === r &&
                                (t >= 0
                                  ? ((r = 0),
                                    this._setEndings(
                                      !0,
                                      0 === this.repetitions,
                                      o
                                    ))
                                  : this._setEndings(
                                      0 === this.repetitions,
                                      !0,
                                      o
                                    )),
                              e >= i || e < 0)
                            ) {
                              var s = Math.floor(e / i);
                              (e -= i * s), (r += Math.abs(s));
                              var a = this.repetitions - r;
                              if (a < 0)
                                this.clampWhenFinished
                                  ? (this.paused = !0)
                                  : (this.enabled = !1),
                                  (e = t > 0 ? i : 0),
                                  this._mixer.dispatchEvent({
                                    type: 'finished',
                                    action: this,
                                    direction: t > 0 ? 1 : -1
                                  });
                              else {
                                if (0 === a) {
                                  var c = t < 0;
                                  this._setEndings(c, !c, o);
                                } else this._setEndings(!1, !1, o);
                                (this._loopCount = r),
                                  this._mixer.dispatchEvent({
                                    type: 'loop',
                                    action: this,
                                    loopDelta: s
                                  });
                              }
                            }
                            if (o && 1 == (1 & r))
                              return (this.time = e), i - e;
                          }
                          return (this.time = e), e;
                        },
                        _setEndings: function(t, e, i) {
                          var n = this._interpolantSettings;
                          i
                            ? ((n.endingStart = 2401), (n.endingEnd = 2401))
                            : ((n.endingStart = t
                                ? this.zeroSlopeAtStart ? 2401 : Zt
                                : 2402),
                              (n.endingEnd = e
                                ? this.zeroSlopeAtEnd ? 2401 : Zt
                                : 2402));
                        },
                        _scheduleFading: function(t, e, i) {
                          var n = this._mixer,
                            r = n.time,
                            o = this._weightInterpolant;
                          null === o &&
                            ((o = n._lendControlInterpolant()),
                            (this._weightInterpolant = o));
                          var s = o.parameterPositions,
                            a = o.sampleValues;
                          return (
                            (s[0] = r),
                            (a[0] = e),
                            (s[1] = r + t),
                            (a[1] = i),
                            this
                          );
                        }
                      }),
                      Object.assign(nl.prototype, e.prototype, {
                        _bindAction: function(t, e) {
                          var i = t._localRoot || this._root,
                            n = t._clip.tracks,
                            r = n.length,
                            o = t._propertyBindings,
                            s = t._interpolants,
                            a = i.uuid,
                            c = this._bindingsByRootAndName,
                            l = c[a];
                          void 0 === l && ((l = {}), (c[a] = l));
                          for (var u = 0; u !== r; ++u) {
                            var h = n[u],
                              d = h.name,
                              p = l[d];
                            if (void 0 !== p) o[u] = p;
                            else {
                              if (void 0 !== (p = o[u])) {
                                null === p._cacheIndex &&
                                  (++p.referenceCount,
                                  this._addInactiveBinding(p, a, d));
                                continue;
                              }
                              var f =
                                e && e._propertyBindings[u].binding.parsedPath;
                              ++(p = new Jc(
                                tl.create(i, d, f),
                                h.ValueTypeName,
                                h.getValueSize()
                              )).referenceCount,
                                this._addInactiveBinding(p, a, d),
                                (o[u] = p);
                            }
                            s[u].resultBuffer = p.buffer;
                          }
                        },
                        _activateAction: function(t) {
                          if (!this._isActiveAction(t)) {
                            if (null === t._cacheIndex) {
                              var e = (t._localRoot || this._root).uuid,
                                i = t._clip.uuid,
                                n = this._actionsByClip[i];
                              this._bindAction(t, n && n.knownActions[0]),
                                this._addInactiveAction(t, i, e);
                            }
                            for (
                              var r = t._propertyBindings, o = 0, s = r.length;
                              o !== s;
                              ++o
                            ) {
                              var a = r[o];
                              0 == a.useCount++ &&
                                (this._lendBinding(a), a.saveOriginalState());
                            }
                            this._lendAction(t);
                          }
                        },
                        _deactivateAction: function(t) {
                          if (this._isActiveAction(t)) {
                            for (
                              var e = t._propertyBindings, i = 0, n = e.length;
                              i !== n;
                              ++i
                            ) {
                              var r = e[i];
                              0 == --r.useCount &&
                                (r.restoreOriginalState(),
                                this._takeBackBinding(r));
                            }
                            this._takeBackAction(t);
                          }
                        },
                        _initMemoryManager: function() {
                          (this._actions = []),
                            (this._nActiveActions = 0),
                            (this._actionsByClip = {}),
                            (this._bindings = []),
                            (this._nActiveBindings = 0),
                            (this._bindingsByRootAndName = {}),
                            (this._controlInterpolants = []),
                            (this._nActiveControlInterpolants = 0);
                          var t = this;
                          this.stats = {
                            actions: {
                              get total() {
                                return t._actions.length;
                              },
                              get inUse() {
                                return t._nActiveActions;
                              }
                            },
                            bindings: {
                              get total() {
                                return t._bindings.length;
                              },
                              get inUse() {
                                return t._nActiveBindings;
                              }
                            },
                            controlInterpolants: {
                              get total() {
                                return t._controlInterpolants.length;
                              },
                              get inUse() {
                                return t._nActiveControlInterpolants;
                              }
                            }
                          };
                        },
                        _isActiveAction: function(t) {
                          var e = t._cacheIndex;
                          return null !== e && e < this._nActiveActions;
                        },
                        _addInactiveAction: function(t, e, i) {
                          var n = this._actions,
                            r = this._actionsByClip,
                            o = r[e];
                          if (void 0 === o)
                            (o = { knownActions: [t], actionByRoot: {} }),
                              (t._byClipCacheIndex = 0),
                              (r[e] = o);
                          else {
                            var s = o.knownActions;
                            (t._byClipCacheIndex = s.length), s.push(t);
                          }
                          (t._cacheIndex = n.length),
                            n.push(t),
                            (o.actionByRoot[i] = t);
                        },
                        _removeInactiveAction: function(t) {
                          var e = this._actions,
                            i = e[e.length - 1],
                            n = t._cacheIndex;
                          (i._cacheIndex = n),
                            (e[n] = i),
                            e.pop(),
                            (t._cacheIndex = null);
                          var r = t._clip.uuid,
                            o = this._actionsByClip,
                            s = o[r],
                            a = s.knownActions,
                            c = a[a.length - 1],
                            l = t._byClipCacheIndex;
                          (c._byClipCacheIndex = l),
                            (a[l] = c),
                            a.pop(),
                            (t._byClipCacheIndex = null),
                            delete s.actionByRoot[
                              (t._localRoot || this._root).uuid
                            ],
                            0 === a.length && delete o[r],
                            this._removeInactiveBindingsForAction(t);
                        },
                        _removeInactiveBindingsForAction: function(t) {
                          for (
                            var e = t._propertyBindings, i = 0, n = e.length;
                            i !== n;
                            ++i
                          ) {
                            var r = e[i];
                            0 == --r.referenceCount &&
                              this._removeInactiveBinding(r);
                          }
                        },
                        _lendAction: function(t) {
                          var e = this._actions,
                            i = t._cacheIndex,
                            n = this._nActiveActions++,
                            r = e[n];
                          (t._cacheIndex = n),
                            (e[n] = t),
                            (r._cacheIndex = i),
                            (e[i] = r);
                        },
                        _takeBackAction: function(t) {
                          var e = this._actions,
                            i = t._cacheIndex,
                            n = --this._nActiveActions,
                            r = e[n];
                          (t._cacheIndex = n),
                            (e[n] = t),
                            (r._cacheIndex = i),
                            (e[i] = r);
                        },
                        _addInactiveBinding: function(t, e, i) {
                          var n = this._bindingsByRootAndName,
                            r = n[e],
                            o = this._bindings;
                          void 0 === r && ((r = {}), (n[e] = r)),
                            (r[i] = t),
                            (t._cacheIndex = o.length),
                            o.push(t);
                        },
                        _removeInactiveBinding: function(t) {
                          var e = this._bindings,
                            i = t.binding,
                            n = i.rootNode.uuid,
                            r = i.path,
                            o = this._bindingsByRootAndName,
                            s = o[n],
                            a = e[e.length - 1],
                            c = t._cacheIndex;
                          (a._cacheIndex = c), (e[c] = a), e.pop(), delete s[r];
                          t: {
                            for (var l in s) break t;
                            delete o[n];
                          }
                        },
                        _lendBinding: function(t) {
                          var e = this._bindings,
                            i = t._cacheIndex,
                            n = this._nActiveBindings++,
                            r = e[n];
                          (t._cacheIndex = n),
                            (e[n] = t),
                            (r._cacheIndex = i),
                            (e[i] = r);
                        },
                        _takeBackBinding: function(t) {
                          var e = this._bindings,
                            i = t._cacheIndex,
                            n = --this._nActiveBindings,
                            r = e[n];
                          (t._cacheIndex = n),
                            (e[n] = t),
                            (r._cacheIndex = i),
                            (e[i] = r);
                        },
                        _lendControlInterpolant: function() {
                          var t = this._controlInterpolants,
                            e = this._nActiveControlInterpolants++,
                            i = t[e];
                          return (
                            void 0 === i &&
                              (((i = new ga(
                                new Float32Array(2),
                                new Float32Array(2),
                                1,
                                this._controlInterpolantsResultBuffer
                              )).__cacheIndex = e),
                              (t[e] = i)),
                            i
                          );
                        },
                        _takeBackControlInterpolant: function(t) {
                          var e = this._controlInterpolants,
                            i = t.__cacheIndex,
                            n = --this._nActiveControlInterpolants,
                            r = e[n];
                          (t.__cacheIndex = n),
                            (e[n] = t),
                            (r.__cacheIndex = i),
                            (e[i] = r);
                        },
                        _controlInterpolantsResultBuffer: new Float32Array(1),
                        clipAction: function(t, e) {
                          var i = e || this._root,
                            n = i.uuid,
                            r = 'string' == typeof t ? Na.findByName(i, t) : t,
                            o = null !== r ? r.uuid : t,
                            s = this._actionsByClip[o],
                            a = null;
                          if (void 0 !== s) {
                            var c = s.actionByRoot[n];
                            if (void 0 !== c) return c;
                            (a = s.knownActions[0]),
                              null === r && (r = a._clip);
                          }
                          if (null === r) return null;
                          var l = new il(this, r, e);
                          return (
                            this._bindAction(l, a),
                            this._addInactiveAction(l, o, n),
                            l
                          );
                        },
                        existingAction: function(t, e) {
                          var i = e || this._root,
                            n = i.uuid,
                            r = 'string' == typeof t ? Na.findByName(i, t) : t,
                            o = r ? r.uuid : t,
                            s = this._actionsByClip[o];
                          return void 0 !== s
                            ? s.actionByRoot[n] || null
                            : null;
                        },
                        stopAllAction: function() {
                          var t = this._actions,
                            e = this._nActiveActions,
                            i = this._bindings,
                            n = this._nActiveBindings;
                          (this._nActiveActions = 0),
                            (this._nActiveBindings = 0);
                          for (var r = 0; r !== e; ++r) t[r].reset();
                          for (r = 0; r !== n; ++r) i[r].useCount = 0;
                          return this;
                        },
                        update: function(t) {
                          t *= this.timeScale;
                          for (
                            var e = this._actions,
                              i = this._nActiveActions,
                              n = (this.time += t),
                              r = Math.sign(t),
                              o = (this._accuIndex ^= 1),
                              s = 0;
                            s !== i;
                            ++s
                          ) {
                            e[s]._update(n, t, r, o);
                          }
                          var a = this._bindings,
                            c = this._nActiveBindings;
                          for (s = 0; s !== c; ++s) a[s].apply(o);
                          return this;
                        },
                        getRoot: function() {
                          return this._root;
                        },
                        uncacheClip: function(t) {
                          var e = this._actions,
                            i = t.uuid,
                            n = this._actionsByClip,
                            r = n[i];
                          if (void 0 !== r) {
                            for (
                              var o = r.knownActions, s = 0, a = o.length;
                              s !== a;
                              ++s
                            ) {
                              var c = o[s];
                              this._deactivateAction(c);
                              var l = c._cacheIndex,
                                u = e[e.length - 1];
                              (c._cacheIndex = null),
                                (c._byClipCacheIndex = null),
                                (u._cacheIndex = l),
                                (e[l] = u),
                                e.pop(),
                                this._removeInactiveBindingsForAction(c);
                            }
                            delete n[i];
                          }
                        },
                        uncacheRoot: function(t) {
                          var e = t.uuid,
                            i = this._actionsByClip;
                          for (var n in i) {
                            var r = i[n].actionByRoot[e];
                            void 0 !== r &&
                              (this._deactivateAction(r),
                              this._removeInactiveAction(r));
                          }
                          var o = this._bindingsByRootAndName[e];
                          if (void 0 !== o)
                            for (var s in o) {
                              var a = o[s];
                              a.restoreOriginalState(),
                                this._removeInactiveBinding(a);
                            }
                        },
                        uncacheAction: function(t, e) {
                          var i = this.existingAction(t, e);
                          null !== i &&
                            (this._deactivateAction(i),
                            this._removeInactiveAction(i));
                        }
                      }),
                      (rl.prototype.clone = function() {
                        return new rl(
                          void 0 === this.value.clone
                            ? this.value
                            : this.value.clone()
                        );
                      }),
                      (ol.prototype = Object.assign(
                        Object.create(Fr.prototype),
                        {
                          constructor: ol,
                          isInstancedBufferGeometry: !0,
                          addGroup: function(t, e, i) {
                            this.groups.push({
                              start: t,
                              count: e,
                              materialIndex: i
                            });
                          },
                          copy: function(t) {
                            var e = t.index;
                            null !== e && this.setIndex(e.clone());
                            var i = t.attributes;
                            for (var n in i) {
                              var r = i[n];
                              this.addAttribute(n, r.clone());
                            }
                            for (
                              var o = t.groups, s = 0, a = o.length;
                              s < a;
                              s++
                            ) {
                              var c = o[s];
                              this.addGroup(c.start, c.count, c.materialIndex);
                            }
                            return this;
                          }
                        }
                      )),
                      Object.defineProperties(sl.prototype, {
                        count: {
                          get: function() {
                            return this.data.count;
                          }
                        },
                        array: {
                          get: function() {
                            return this.data.array;
                          }
                        }
                      }),
                      Object.assign(sl.prototype, {
                        isInterleavedBufferAttribute: !0,
                        setX: function(t, e) {
                          return (
                            (this.data.array[
                              t * this.data.stride + this.offset
                            ] = e),
                            this
                          );
                        },
                        setY: function(t, e) {
                          return (
                            (this.data.array[
                              t * this.data.stride + this.offset + 1
                            ] = e),
                            this
                          );
                        },
                        setZ: function(t, e) {
                          return (
                            (this.data.array[
                              t * this.data.stride + this.offset + 2
                            ] = e),
                            this
                          );
                        },
                        setW: function(t, e) {
                          return (
                            (this.data.array[
                              t * this.data.stride + this.offset + 3
                            ] = e),
                            this
                          );
                        },
                        getX: function(t) {
                          return this.data.array[
                            t * this.data.stride + this.offset
                          ];
                        },
                        getY: function(t) {
                          return this.data.array[
                            t * this.data.stride + this.offset + 1
                          ];
                        },
                        getZ: function(t) {
                          return this.data.array[
                            t * this.data.stride + this.offset + 2
                          ];
                        },
                        getW: function(t) {
                          return this.data.array[
                            t * this.data.stride + this.offset + 3
                          ];
                        },
                        setXY: function(t, e, i) {
                          return (
                            (t = t * this.data.stride + this.offset),
                            (this.data.array[t + 0] = e),
                            (this.data.array[t + 1] = i),
                            this
                          );
                        },
                        setXYZ: function(t, e, i, n) {
                          return (
                            (t = t * this.data.stride + this.offset),
                            (this.data.array[t + 0] = e),
                            (this.data.array[t + 1] = i),
                            (this.data.array[t + 2] = n),
                            this
                          );
                        },
                        setXYZW: function(t, e, i, n, r) {
                          return (
                            (t = t * this.data.stride + this.offset),
                            (this.data.array[t + 0] = e),
                            (this.data.array[t + 1] = i),
                            (this.data.array[t + 2] = n),
                            (this.data.array[t + 3] = r),
                            this
                          );
                        }
                      }),
                      Object.defineProperty(al.prototype, 'needsUpdate', {
                        set: function(t) {
                          !0 === t && this.version++;
                        }
                      }),
                      Object.assign(al.prototype, {
                        isInterleavedBuffer: !0,
                        setArray: function(t) {
                          if (Array.isArray(t))
                            throw new TypeError(
                              'THREE.BufferAttribute: array should be a Typed Array.'
                            );
                          (this.count =
                            void 0 !== t ? t.length / this.stride : 0),
                            (this.array = t);
                        },
                        setDynamic: function(t) {
                          return (this.dynamic = t), this;
                        },
                        copy: function(t) {
                          return (
                            (this.array = new t.array.constructor(t.array)),
                            (this.count = t.count),
                            (this.stride = t.stride),
                            (this.dynamic = t.dynamic),
                            this
                          );
                        },
                        copyAt: function(t, e, i) {
                          (t *= this.stride), (i *= e.stride);
                          for (var n = 0, r = this.stride; n < r; n++)
                            this.array[t + n] = e.array[i + n];
                          return this;
                        },
                        set: function(t, e) {
                          return (
                            void 0 === e && (e = 0), this.array.set(t, e), this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        onUpload: function(t) {
                          return (this.onUploadCallback = t), this;
                        }
                      }),
                      (cl.prototype = Object.assign(
                        Object.create(al.prototype),
                        {
                          constructor: cl,
                          isInstancedInterleavedBuffer: !0,
                          copy: function(t) {
                            return (
                              al.prototype.copy.call(this, t),
                              (this.meshPerAttribute = t.meshPerAttribute),
                              this
                            );
                          }
                        }
                      )),
                      (ll.prototype = Object.assign(
                        Object.create(Sr.prototype),
                        {
                          constructor: ll,
                          isInstancedBufferAttribute: !0,
                          copy: function(t) {
                            return (
                              Sr.prototype.copy.call(this, t),
                              (this.meshPerAttribute = t.meshPerAttribute),
                              this
                            );
                          }
                        }
                      )),
                      Object.assign(ul.prototype, {
                        linePrecision: 1,
                        set: function(t, e) {
                          this.ray.set(t, e);
                        },
                        setFromCamera: function(t, e) {
                          e && e.isPerspectiveCamera
                            ? (this.ray.origin.setFromMatrixPosition(
                                e.matrixWorld
                              ),
                              this.ray.direction
                                .set(t.x, t.y, 0.5)
                                .unproject(e)
                                .sub(this.ray.origin)
                                .normalize())
                            : e && e.isOrthographicCamera
                              ? (this.ray.origin
                                  .set(
                                    t.x,
                                    t.y,
                                    (e.near + e.far) / (e.near - e.far)
                                  )
                                  .unproject(e),
                                this.ray.direction
                                  .set(0, 0, -1)
                                  .transformDirection(e.matrixWorld))
                              : console.error(
                                  'THREE.Raycaster: Unsupported camera type.'
                                );
                        },
                        intersectObject: function(t, e) {
                          var i = [];
                          return dl(t, this, i, e), i.sort(hl), i;
                        },
                        intersectObjects: function(t, e) {
                          var i = [];
                          if (!1 === Array.isArray(t))
                            return (
                              console.warn(
                                'THREE.Raycaster.intersectObjects: objects is not an Array.'
                              ),
                              i
                            );
                          for (var n = 0, r = t.length; n < r; n++)
                            dl(t[n], this, i, e);
                          return i.sort(hl), i;
                        }
                      }),
                      Object.assign(pl.prototype, {
                        start: function() {
                          (this.startTime = ('undefined' == typeof performance
                            ? Date
                            : performance
                          ).now()),
                            (this.oldTime = this.startTime),
                            (this.elapsedTime = 0),
                            (this.running = !0);
                        },
                        stop: function() {
                          this.getElapsedTime(),
                            (this.running = !1),
                            (this.autoStart = !1);
                        },
                        getElapsedTime: function() {
                          return this.getDelta(), this.elapsedTime;
                        },
                        getDelta: function() {
                          var t = 0;
                          if (this.autoStart && !this.running)
                            return this.start(), 0;
                          if (this.running) {
                            var e = ('undefined' == typeof performance
                              ? Date
                              : performance
                            ).now();
                            (t = (e - this.oldTime) / 1e3),
                              (this.oldTime = e),
                              (this.elapsedTime += t);
                          }
                          return t;
                        }
                      }),
                      Object.assign(fl.prototype, {
                        set: function(t, e, i) {
                          return (
                            (this.radius = t),
                            (this.phi = e),
                            (this.theta = i),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            (this.radius = t.radius),
                            (this.phi = t.phi),
                            (this.theta = t.theta),
                            this
                          );
                        },
                        makeSafe: function() {
                          return (
                            (this.phi = Math.max(
                              1e-6,
                              Math.min(Math.PI - 1e-6, this.phi)
                            )),
                            this
                          );
                        },
                        setFromVector3: function(t) {
                          return (
                            (this.radius = t.length()),
                            0 === this.radius
                              ? ((this.theta = 0), (this.phi = 0))
                              : ((this.theta = Math.atan2(t.x, t.z)),
                                (this.phi = Math.acos(
                                  ue.clamp(t.y / this.radius, -1, 1)
                                ))),
                            this
                          );
                        }
                      }),
                      Object.assign(ml.prototype, {
                        set: function(t, e, i) {
                          return (
                            (this.radius = t),
                            (this.theta = e),
                            (this.y = i),
                            this
                          );
                        },
                        clone: function() {
                          return new this.constructor().copy(this);
                        },
                        copy: function(t) {
                          return (
                            (this.radius = t.radius),
                            (this.theta = t.theta),
                            (this.y = t.y),
                            this
                          );
                        },
                        setFromVector3: function(t) {
                          return (
                            (this.radius = Math.sqrt(t.x * t.x + t.z * t.z)),
                            (this.theta = Math.atan2(t.x, t.z)),
                            (this.y = t.y),
                            this
                          );
                        }
                      }),
                      (gl.prototype = Object.create(zn.prototype)),
                      (gl.prototype.constructor = gl),
                      (gl.prototype.isImmediateRenderObject = !0),
                      (vl.prototype = Object.create(Vo.prototype)),
                      (vl.prototype.constructor = vl),
                      (vl.prototype.update = ((bc = new ke()),
                      (xc = new ke()),
                      (Ac = new hn()),
                      function() {
                        var t = ['a', 'b', 'c'];
                        this.object.updateMatrixWorld(!0),
                          Ac.getNormalMatrix(this.object.matrixWorld);
                        var e = this.object.matrixWorld,
                          i = this.geometry.attributes.position,
                          n = this.object.geometry;
                        if (n && n.isGeometry)
                          for (
                            var r = n.vertices,
                              o = n.faces,
                              s = 0,
                              a = 0,
                              c = o.length;
                            a < c;
                            a++
                          )
                            for (
                              var l = o[a], u = 0, h = l.vertexNormals.length;
                              u < h;
                              u++
                            ) {
                              var d = r[l[t[u]]],
                                p = l.vertexNormals[u];
                              bc.copy(d).applyMatrix4(e),
                                xc
                                  .copy(p)
                                  .applyMatrix3(Ac)
                                  .normalize()
                                  .multiplyScalar(this.size)
                                  .add(bc),
                                i.setXYZ(s, bc.x, bc.y, bc.z),
                                (s += 1),
                                i.setXYZ(s, xc.x, xc.y, xc.z),
                                (s += 1);
                            }
                        else if (n && n.isBufferGeometry) {
                          var f = n.attributes.position,
                            m = n.attributes.normal;
                          for (s = 0, u = 0, h = f.count; u < h; u++)
                            bc
                              .set(f.getX(u), f.getY(u), f.getZ(u))
                              .applyMatrix4(e),
                              xc.set(m.getX(u), m.getY(u), m.getZ(u)),
                              xc
                                .applyMatrix3(Ac)
                                .normalize()
                                .multiplyScalar(this.size)
                                .add(bc),
                              i.setXYZ(s, bc.x, bc.y, bc.z),
                              (s += 1),
                              i.setXYZ(s, xc.x, xc.y, xc.z),
                              (s += 1);
                        }
                        i.needsUpdate = !0;
                      })),
                      (yl.prototype = Object.create(zn.prototype)),
                      (yl.prototype.constructor = yl),
                      (yl.prototype.dispose = function() {
                        this.cone.geometry.dispose(),
                          this.cone.material.dispose();
                      }),
                      (yl.prototype.update = ((Tc = new ke()),
                      (Lc = new ke()),
                      function() {
                        this.light.updateMatrixWorld();
                        var t = this.light.distance ? this.light.distance : 1e3,
                          e = t * Math.tan(this.light.angle);
                        this.cone.scale.set(e, e, t),
                          Tc.setFromMatrixPosition(this.light.matrixWorld),
                          Lc.setFromMatrixPosition(
                            this.light.target.matrixWorld
                          ),
                          this.cone.lookAt(Lc.sub(Tc)),
                          void 0 !== this.color
                            ? this.cone.material.color.set(this.color)
                            : this.cone.material.color.copy(this.light.color);
                      })),
                      (wl.prototype = Object.create(Vo.prototype)),
                      (wl.prototype.constructor = wl),
                      (wl.prototype.onBeforeRender = ((Nc = new ke()),
                      (Dc = new Be()),
                      (Sc = new Be()),
                      function() {
                        var t = this.bones,
                          e = this.geometry,
                          i = e.getAttribute('position');
                        Sc.getInverse(this.root.matrixWorld);
                        for (var n = 0, r = 0; n < t.length; n++) {
                          var o = t[n];
                          o.parent &&
                            o.parent.isBone &&
                            (Dc.multiplyMatrices(Sc, o.matrixWorld),
                            Nc.setFromMatrixPosition(Dc),
                            i.setXYZ(r, Nc.x, Nc.y, Nc.z),
                            Dc.multiplyMatrices(Sc, o.parent.matrixWorld),
                            Nc.setFromMatrixPosition(Dc),
                            i.setXYZ(r + 1, Nc.x, Nc.y, Nc.z),
                            (r += 2));
                        }
                        e.getAttribute('position').needsUpdate = !0;
                      })),
                      (Ml.prototype = Object.create(Kr.prototype)),
                      (Ml.prototype.constructor = Ml),
                      (Ml.prototype.dispose = function() {
                        this.geometry.dispose(), this.material.dispose();
                      }),
                      (Ml.prototype.update = function() {
                        void 0 !== this.color
                          ? this.material.color.set(this.color)
                          : this.material.color.copy(this.light.color);
                      }),
                      (El.prototype = Object.create(zn.prototype)),
                      (El.prototype.constructor = El),
                      (El.prototype.dispose = function() {
                        this.children[0].geometry.dispose(),
                          this.children[0].material.dispose();
                      }),
                      (El.prototype.update = function() {
                        var t = 0.5 * this.light.width,
                          e = 0.5 * this.light.height,
                          i = this.line.geometry.attributes.position,
                          n = i.array;
                        (n[0] = t),
                          (n[1] = -e),
                          (n[2] = 0),
                          (n[3] = t),
                          (n[4] = e),
                          (n[5] = 0),
                          (n[6] = -t),
                          (n[7] = e),
                          (n[8] = 0),
                          (n[9] = -t),
                          (n[10] = -e),
                          (n[11] = 0),
                          (n[12] = t),
                          (n[13] = -e),
                          (n[14] = 0),
                          (i.needsUpdate = !0),
                          void 0 !== this.color
                            ? this.line.material.color.set(this.color)
                            : this.line.material.color.copy(this.light.color);
                      }),
                      (bl.prototype = Object.create(zn.prototype)),
                      (bl.prototype.constructor = bl),
                      (bl.prototype.dispose = function() {
                        this.children[0].geometry.dispose(),
                          this.children[0].material.dispose();
                      }),
                      (bl.prototype.update = ((Cc = new ke()),
                      (_c = new Ni()),
                      (Ic = new Ni()),
                      function() {
                        var t = this.children[0];
                        if (void 0 !== this.color)
                          this.material.color.set(this.color);
                        else {
                          var e = t.geometry.getAttribute('color');
                          _c.copy(this.light.color),
                            Ic.copy(this.light.groundColor);
                          for (var i = 0, n = e.count; i < n; i++) {
                            var r = i < n / 2 ? _c : Ic;
                            e.setXYZ(i, r.r, r.g, r.b);
                          }
                          e.needsUpdate = !0;
                        }
                        t.lookAt(
                          Cc.setFromMatrixPosition(
                            this.light.matrixWorld
                          ).negate()
                        );
                      })),
                      (xl.prototype = Object.create(Vo.prototype)),
                      (xl.prototype.constructor = xl),
                      (Al.prototype = Object.create(Vo.prototype)),
                      (Al.prototype.constructor = Al),
                      (Tl.prototype = Object.create(Vo.prototype)),
                      (Tl.prototype.constructor = Tl),
                      (Tl.prototype.update = ((jc = new ke()),
                      (Oc = new ke()),
                      (Rc = new hn()),
                      function() {
                        this.object.updateMatrixWorld(!0),
                          Rc.getNormalMatrix(this.object.matrixWorld);
                        for (
                          var t = this.object.matrixWorld,
                            e = this.geometry.attributes.position,
                            i = this.object.geometry,
                            n = i.vertices,
                            r = i.faces,
                            o = 0,
                            s = 0,
                            a = r.length;
                          s < a;
                          s++
                        ) {
                          var c = r[s],
                            l = c.normal;
                          jc
                            .copy(n[c.a])
                            .add(n[c.b])
                            .add(n[c.c])
                            .divideScalar(3)
                            .applyMatrix4(t),
                            Oc.copy(l)
                              .applyMatrix3(Rc)
                              .normalize()
                              .multiplyScalar(this.size)
                              .add(jc),
                            e.setXYZ(o, jc.x, jc.y, jc.z),
                            (o += 1),
                            e.setXYZ(o, Oc.x, Oc.y, Oc.z),
                            (o += 1);
                        }
                        e.needsUpdate = !0;
                      })),
                      (Ll.prototype = Object.create(zn.prototype)),
                      (Ll.prototype.constructor = Ll),
                      (Ll.prototype.dispose = function() {
                        this.lightPlane.geometry.dispose(),
                          this.lightPlane.material.dispose(),
                          this.targetLine.geometry.dispose(),
                          this.targetLine.material.dispose();
                      }),
                      (Ll.prototype.update = ((zc = new ke()),
                      (kc = new ke()),
                      (Bc = new ke()),
                      function() {
                        zc.setFromMatrixPosition(this.light.matrixWorld),
                          kc.setFromMatrixPosition(
                            this.light.target.matrixWorld
                          ),
                          Bc.subVectors(kc, zc),
                          this.lightPlane.lookAt(Bc),
                          void 0 !== this.color
                            ? (this.lightPlane.material.color.set(this.color),
                              this.targetLine.material.color.set(this.color))
                            : (this.lightPlane.material.color.copy(
                                this.light.color
                              ),
                              this.targetLine.material.color.copy(
                                this.light.color
                              )),
                          this.targetLine.lookAt(Bc),
                          (this.targetLine.scale.z = Bc.length());
                      })),
                      (Nl.prototype = Object.create(Vo.prototype)),
                      (Nl.prototype.constructor = Nl),
                      (Nl.prototype.update = (function() {
                        var t,
                          e,
                          i = new ke(),
                          n = new kn();
                        function r(r, o, s, a) {
                          i.set(o, s, a).unproject(n);
                          var c = e[r];
                          if (void 0 !== c)
                            for (
                              var l = t.getAttribute('position'),
                                u = 0,
                                h = c.length;
                              u < h;
                              u++
                            )
                              l.setXYZ(c[u], i.x, i.y, i.z);
                        }
                        return function() {
                          (t = this.geometry), (e = this.pointMap);
                          n.projectionMatrix.copy(this.camera.projectionMatrix),
                            r('c', 0, 0, -1),
                            r('t', 0, 0, 1),
                            r('n1', -1, -1, -1),
                            r('n2', 1, -1, -1),
                            r('n3', -1, 1, -1),
                            r('n4', 1, 1, -1),
                            r('f1', -1, -1, 1),
                            r('f2', 1, -1, 1),
                            r('f3', -1, 1, 1),
                            r('f4', 1, 1, 1),
                            r('u1', 0.7, 1.1, -1),
                            r('u2', -0.7, 1.1, -1),
                            r('u3', 0, 2, -1),
                            r('cf1', -1, 0, 1),
                            r('cf2', 1, 0, 1),
                            r('cf3', 0, -1, 1),
                            r('cf4', 0, 1, 1),
                            r('cn1', -1, 0, -1),
                            r('cn2', 1, 0, -1),
                            r('cn3', 0, -1, -1),
                            r('cn4', 0, 1, -1),
                            (t.getAttribute('position').needsUpdate = !0);
                        };
                      })()),
                      (Dl.prototype = Object.create(Vo.prototype)),
                      (Dl.prototype.constructor = Dl),
                      (Dl.prototype.update = ((Pc = new ln()),
                      function(t) {
                        if (
                          (void 0 !== t &&
                            console.warn(
                              'THREE.BoxHelper: .update() has no longer arguments.'
                            ),
                          void 0 !== this.object &&
                            Pc.setFromObject(this.object),
                          !Pc.isEmpty())
                        ) {
                          var e = Pc.min,
                            i = Pc.max,
                            n = this.geometry.attributes.position,
                            r = n.array;
                          (r[0] = i.x),
                            (r[1] = i.y),
                            (r[2] = i.z),
                            (r[3] = e.x),
                            (r[4] = i.y),
                            (r[5] = i.z),
                            (r[6] = e.x),
                            (r[7] = e.y),
                            (r[8] = i.z),
                            (r[9] = i.x),
                            (r[10] = e.y),
                            (r[11] = i.z),
                            (r[12] = i.x),
                            (r[13] = i.y),
                            (r[14] = e.z),
                            (r[15] = e.x),
                            (r[16] = i.y),
                            (r[17] = e.z),
                            (r[18] = e.x),
                            (r[19] = e.y),
                            (r[20] = e.z),
                            (r[21] = i.x),
                            (r[22] = e.y),
                            (r[23] = e.z),
                            (n.needsUpdate = !0),
                            this.geometry.computeBoundingSphere();
                        }
                      })),
                      (Dl.prototype.setFromObject = function(t) {
                        return (this.object = t), this.update(), this;
                      }),
                      (Sl.prototype = Object.create(Vo.prototype)),
                      (Sl.prototype.constructor = Sl),
                      (Sl.prototype.onBeforeRender = function() {
                        var t = this.box;
                        t.isEmpty() ||
                          (t.getCenter(this.position),
                          t.getSize(this.scale),
                          this.scale.multiplyScalar(0.5));
                      }),
                      (Cl.prototype = Object.create(Ho.prototype)),
                      (Cl.prototype.constructor = Cl),
                      (Cl.prototype.onBeforeRender = function() {
                        var t = -this.plane.constant;
                        Math.abs(t) < 1e-8 && (t = 1e-8),
                          this.scale.set(0.5 * this.size, 0.5 * this.size, t),
                          this.lookAt(this.plane.normal),
                          this.updateMatrixWorld();
                      }),
                      (_l.prototype = Object.create(zn.prototype)),
                      (_l.prototype.constructor = _l),
                      (_l.prototype.setDirection = ((Vc = new ke()),
                      function(t) {
                        t.y > 0.99999
                          ? this.quaternion.set(0, 0, 0, 1)
                          : t.y < -0.99999
                            ? this.quaternion.set(1, 0, 0, 0)
                            : (Vc.set(t.z, 0, -t.x).normalize(),
                              (Hc = Math.acos(t.y)),
                              this.quaternion.setFromAxisAngle(Vc, Hc));
                      })),
                      (_l.prototype.setLength = function(t, e, i) {
                        void 0 === e && (e = 0.2 * t),
                          void 0 === i && (i = 0.2 * e),
                          this.line.scale.set(1, Math.max(0, t - e), 1),
                          this.line.updateMatrix(),
                          this.cone.scale.set(i, e, i),
                          (this.cone.position.y = t),
                          this.cone.updateMatrix();
                      }),
                      (_l.prototype.setColor = function(t) {
                        this.line.material.color.copy(t),
                          this.cone.material.color.copy(t);
                      }),
                      (Il.prototype = Object.create(Vo.prototype)),
                      (Il.prototype.constructor = Il);
                    var Ol = new ke(),
                      Rl = new jl(),
                      zl = new jl(),
                      kl = new jl();
                    function Bl(t) {
                      Ya.call(this),
                        t.length < 2 &&
                          console.warn(
                            'THREE.CatmullRomCurve3: Points array needs at least two entries.'
                          ),
                        (this.points = t || []),
                        (this.closed = !1);
                    }
                    function Pl(t, e, i, n) {
                      Ya.call(this),
                        (this.v0 = t),
                        (this.v1 = e),
                        (this.v2 = i),
                        (this.v3 = n);
                    }
                    function Ul(t, e, i) {
                      Ya.call(this),
                        (this.v0 = t),
                        (this.v1 = e),
                        (this.v2 = i);
                    }
                    function Fl(t, e) {
                      Ya.call(this), (this.v1 = t), (this.v2 = e);
                    }
                    function Hl(t, e, i, n, r, o) {
                      qa.call(this, t, e, i, i, n, r, o);
                    }
                    (Bl.prototype = Object.create(Ya.prototype)),
                      (Bl.prototype.constructor = Bl),
                      (Bl.prototype.getPoint = function(t) {
                        var e,
                          i,
                          n,
                          r,
                          o = this.points,
                          s = o.length,
                          a = (s - (this.closed ? 0 : 1)) * t,
                          c = Math.floor(a),
                          l = a - c;
                        if (
                          (this.closed
                            ? (c +=
                                c > 0
                                  ? 0
                                  : (Math.floor(Math.abs(c) / o.length) + 1) *
                                    o.length)
                            : 0 === l && c === s - 1 && ((c = s - 2), (l = 1)),
                          this.closed || c > 0
                            ? (e = o[(c - 1) % s])
                            : (Ol.subVectors(o[0], o[1]).add(o[0]), (e = Ol)),
                          (i = o[c % s]),
                          (n = o[(c + 1) % s]),
                          this.closed || c + 2 < s
                            ? (r = o[(c + 2) % s])
                            : (Ol.subVectors(o[s - 1], o[s - 2]).add(o[s - 1]),
                              (r = Ol)),
                          void 0 === this.type ||
                            'centripetal' === this.type ||
                            'chordal' === this.type)
                        ) {
                          var u = 'chordal' === this.type ? 0.5 : 0.25,
                            h = Math.pow(e.distanceToSquared(i), u),
                            d = Math.pow(i.distanceToSquared(n), u),
                            p = Math.pow(n.distanceToSquared(r), u);
                          d < 1e-4 && (d = 1),
                            h < 1e-4 && (h = d),
                            p < 1e-4 && (p = d),
                            Rl.initNonuniformCatmullRom(
                              e.x,
                              i.x,
                              n.x,
                              r.x,
                              h,
                              d,
                              p
                            ),
                            zl.initNonuniformCatmullRom(
                              e.y,
                              i.y,
                              n.y,
                              r.y,
                              h,
                              d,
                              p
                            ),
                            kl.initNonuniformCatmullRom(
                              e.z,
                              i.z,
                              n.z,
                              r.z,
                              h,
                              d,
                              p
                            );
                        } else if ('catmullrom' === this.type) {
                          var f = void 0 !== this.tension ? this.tension : 0.5;
                          Rl.initCatmullRom(e.x, i.x, n.x, r.x, f),
                            zl.initCatmullRom(e.y, i.y, n.y, r.y, f),
                            kl.initCatmullRom(e.z, i.z, n.z, r.z, f);
                        }
                        return new ke(Rl.calc(l), zl.calc(l), kl.calc(l));
                      }),
                      (Pl.prototype = Object.create(Ya.prototype)),
                      (Pl.prototype.constructor = Pl),
                      (Pl.prototype.getPoint = function(t) {
                        var e = this.v0,
                          i = this.v1,
                          n = this.v2,
                          r = this.v3;
                        return new ke(
                          Ga(t, e.x, i.x, n.x, r.x),
                          Ga(t, e.y, i.y, n.y, r.y),
                          Ga(t, e.z, i.z, n.z, r.z)
                        );
                      }),
                      (Ul.prototype = Object.create(Ya.prototype)),
                      (Ul.prototype.constructor = Ul),
                      (Ul.prototype.getPoint = function(t) {
                        var e = this.v0,
                          i = this.v1,
                          n = this.v2;
                        return new ke(
                          Va(t, e.x, i.x, n.x),
                          Va(t, e.y, i.y, n.y),
                          Va(t, e.z, i.z, n.z)
                        );
                      }),
                      (Fl.prototype = Object.create(Ya.prototype)),
                      (Fl.prototype.constructor = Fl),
                      (Fl.prototype.getPoint = function(t) {
                        if (1 === t) return this.v2.clone();
                        var e = new ke();
                        return (
                          e.subVectors(this.v2, this.v1),
                          e.multiplyScalar(t),
                          e.add(this.v1),
                          e
                        );
                      }),
                      (Hl.prototype = Object.create(qa.prototype)),
                      (Hl.prototype.constructor = Hl);
                    var Vl = {
                      createMultiMaterialObject: function(t, e) {
                        for (var i = new Wo(), n = 0, r = e.length; n < r; n++)
                          i.add(new Kr(t, e[n]));
                        return i;
                      },
                      detach: function(t, e, i) {
                        t.applyMatrix(e.matrixWorld), e.remove(t), i.add(t);
                      },
                      attach: function(t, e, i) {
                        t.applyMatrix(new Be().getInverse(i.matrixWorld)),
                          e.remove(t),
                          i.add(t);
                      }
                    };
                    var Gl;
                    function Yl(t) {
                      console.warn(
                        'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.'
                      ),
                        Bl.call(this, t),
                        (this.type = 'catmullrom'),
                        (this.closed = !0);
                    }
                    function Ql(t) {
                      console.warn(
                        'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.'
                      ),
                        Bl.call(this, t),
                        (this.type = 'catmullrom');
                    }
                    function Wl(t) {
                      console.warn(
                        'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.'
                      ),
                        Bl.call(this, t),
                        (this.type = 'catmullrom');
                    }
                    (Ya.create = function(t, e) {
                      return (
                        console.log('THREE.Curve.create() has been deprecated'),
                        (t.prototype = Object.create(Ya.prototype)),
                        (t.prototype.constructor = t),
                        (t.prototype.getPoint = e),
                        t
                      );
                    }),
                      (Yl.prototype = Object.create(Bl.prototype)),
                      (Ql.prototype = Object.create(Bl.prototype)),
                      (Wl.prototype = Object.create(Bl.prototype)),
                      Object.assign(Wl.prototype, {
                        initFromArray: function(t) {
                          console.error(
                            'THREE.Spline: .initFromArray() has been removed.'
                          );
                        },
                        getControlPointsArray: function(t) {
                          console.error(
                            'THREE.Spline: .getControlPointsArray() has been removed.'
                          );
                        },
                        reparametrizeByArcLength: function(t) {
                          console.error(
                            'THREE.Spline: .reparametrizeByArcLength() has been removed.'
                          );
                        }
                      }),
                      (xl.prototype.setColors = function() {
                        console.error(
                          'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.'
                        );
                      }),
                      (wl.prototype.update = function() {
                        console.error(
                          'THREE.SkeletonHelper: update() no longer needs to be called.'
                        );
                      }),
                      Object.assign(Oi.prototype, {
                        center: function(t) {
                          return (
                            console.warn(
                              'THREE.Box2: .center() has been renamed to .getCenter().'
                            ),
                            this.getCenter(t)
                          );
                        },
                        empty: function() {
                          return (
                            console.warn(
                              'THREE.Box2: .empty() has been renamed to .isEmpty().'
                            ),
                            this.isEmpty()
                          );
                        },
                        isIntersectionBox: function(t) {
                          return (
                            console.warn(
                              'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().'
                            ),
                            this.intersectsBox(t)
                          );
                        },
                        size: function(t) {
                          return (
                            console.warn(
                              'THREE.Box2: .size() has been renamed to .getSize().'
                            ),
                            this.getSize(t)
                          );
                        }
                      }),
                      Object.assign(ln.prototype, {
                        center: function(t) {
                          return (
                            console.warn(
                              'THREE.Box3: .center() has been renamed to .getCenter().'
                            ),
                            this.getCenter(t)
                          );
                        },
                        empty: function() {
                          return (
                            console.warn(
                              'THREE.Box3: .empty() has been renamed to .isEmpty().'
                            ),
                            this.isEmpty()
                          );
                        },
                        isIntersectionBox: function(t) {
                          return (
                            console.warn(
                              'THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().'
                            ),
                            this.intersectsBox(t)
                          );
                        },
                        isIntersectionSphere: function(t) {
                          return (
                            console.warn(
                              'THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().'
                            ),
                            this.intersectsSphere(t)
                          );
                        },
                        size: function(t) {
                          return (
                            console.warn(
                              'THREE.Box3: .size() has been renamed to .getSize().'
                            ),
                            this.getSize(t)
                          );
                        }
                      }),
                      (qr.prototype.center = function(t) {
                        return (
                          console.warn(
                            'THREE.Line3: .center() has been renamed to .getCenter().'
                          ),
                          this.getCenter(t)
                        );
                      }),
                      (ue.random16 = function() {
                        return (
                          console.warn(
                            'THREE.Math.random16() has been deprecated. Use Math.random() instead.'
                          ),
                          Math.random()
                        );
                      }),
                      Object.assign(hn.prototype, {
                        flattenToArrayOffset: function(t, e) {
                          return (
                            console.warn(
                              'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.'
                            ),
                            this.toArray(t, e)
                          );
                        },
                        multiplyVector3: function(t) {
                          return (
                            console.warn(
                              'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.'
                            ),
                            t.applyMatrix3(this)
                          );
                        },
                        multiplyVector3Array: function(t) {
                          console.error(
                            'THREE.Matrix3: .multiplyVector3Array() has been removed.'
                          );
                        },
                        applyToBuffer: function(t, e, i) {
                          return (
                            console.warn(
                              'THREE.Matrix3: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.'
                            ),
                            this.applyToBufferAttribute(t)
                          );
                        },
                        applyToVector3Array: function(t, e, i) {
                          console.error(
                            'THREE.Matrix3: .applyToVector3Array() has been removed.'
                          );
                        }
                      }),
                      Object.assign(Be.prototype, {
                        extractPosition: function(t) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().'
                            ),
                            this.copyPosition(t)
                          );
                        },
                        flattenToArrayOffset: function(t, e) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.'
                            ),
                            this.toArray(t, e)
                          );
                        },
                        getPosition: function() {
                          return (
                            void 0 === Gl && (Gl = new ke()),
                            console.warn(
                              'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.'
                            ),
                            Gl.setFromMatrixColumn(this, 3)
                          );
                        },
                        setRotationFromQuaternion: function(t) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().'
                            ),
                            this.makeRotationFromQuaternion(t)
                          );
                        },
                        multiplyToArray: function() {
                          console.warn(
                            'THREE.Matrix4: .multiplyToArray() has been removed.'
                          );
                        },
                        multiplyVector3: function(t) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.'
                            ),
                            t.applyMatrix4(this)
                          );
                        },
                        multiplyVector4: function(t) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.'
                            ),
                            t.applyMatrix4(this)
                          );
                        },
                        multiplyVector3Array: function(t) {
                          console.error(
                            'THREE.Matrix4: .multiplyVector3Array() has been removed.'
                          );
                        },
                        rotateAxis: function(t) {
                          console.warn(
                            'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.'
                          ),
                            t.transformDirection(this);
                        },
                        crossVector: function(t) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.'
                            ),
                            t.applyMatrix4(this)
                          );
                        },
                        translate: function() {
                          console.error(
                            'THREE.Matrix4: .translate() has been removed.'
                          );
                        },
                        rotateX: function() {
                          console.error(
                            'THREE.Matrix4: .rotateX() has been removed.'
                          );
                        },
                        rotateY: function() {
                          console.error(
                            'THREE.Matrix4: .rotateY() has been removed.'
                          );
                        },
                        rotateZ: function() {
                          console.error(
                            'THREE.Matrix4: .rotateZ() has been removed.'
                          );
                        },
                        rotateByAxis: function() {
                          console.error(
                            'THREE.Matrix4: .rotateByAxis() has been removed.'
                          );
                        },
                        applyToBuffer: function(t, e, i) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .applyToBuffer() has been removed. Use matrix.applyToBufferAttribute( attribute ) instead.'
                            ),
                            this.applyToBufferAttribute(t)
                          );
                        },
                        applyToVector3Array: function(t, e, i) {
                          console.error(
                            'THREE.Matrix4: .applyToVector3Array() has been removed.'
                          );
                        },
                        makeFrustum: function(t, e, i, n, r, o) {
                          return (
                            console.warn(
                              'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.'
                            ),
                            this.makePerspective(t, e, n, i, r, o)
                          );
                        }
                      }),
                      (dn.prototype.isIntersectionLine = function(t) {
                        return (
                          console.warn(
                            'THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().'
                          ),
                          this.intersectsLine(t)
                        );
                      }),
                      (ze.prototype.multiplyVector3 = function(t) {
                        return (
                          console.warn(
                            'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.'
                          ),
                          t.applyQuaternion(this)
                        );
                      }),
                      Object.assign(Wr.prototype, {
                        isIntersectionBox: function(t) {
                          return (
                            console.warn(
                              'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().'
                            ),
                            this.intersectsBox(t)
                          );
                        },
                        isIntersectionPlane: function(t) {
                          return (
                            console.warn(
                              'THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().'
                            ),
                            this.intersectsPlane(t)
                          );
                        },
                        isIntersectionSphere: function(t) {
                          return (
                            console.warn(
                              'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().'
                            ),
                            this.intersectsSphere(t)
                          );
                        }
                      }),
                      Object.assign(ec.prototype, {
                        extrude: function(t) {
                          return (
                            console.warn(
                              'THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.'
                            ),
                            new vs(this, t)
                          );
                        },
                        makeGeometry: function(t) {
                          return (
                            console.warn(
                              'THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.'
                            ),
                            new Ns(this, t)
                          );
                        }
                      }),
                      Object.assign(he.prototype, {
                        fromAttribute: function(t, e, i) {
                          return (
                            console.error(
                              'THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().'
                            ),
                            this.fromBufferAttribute(t, e, i)
                          );
                        }
                      }),
                      Object.assign(ke.prototype, {
                        setEulerFromRotationMatrix: function() {
                          console.error(
                            'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.'
                          );
                        },
                        setEulerFromQuaternion: function() {
                          console.error(
                            'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.'
                          );
                        },
                        getPositionFromMatrix: function(t) {
                          return (
                            console.warn(
                              'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().'
                            ),
                            this.setFromMatrixPosition(t)
                          );
                        },
                        getScaleFromMatrix: function(t) {
                          return (
                            console.warn(
                              'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().'
                            ),
                            this.setFromMatrixScale(t)
                          );
                        },
                        getColumnFromMatrix: function(t, e) {
                          return (
                            console.warn(
                              'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().'
                            ),
                            this.setFromMatrixColumn(e, t)
                          );
                        },
                        applyProjection: function(t) {
                          return (
                            console.warn(
                              'THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.'
                            ),
                            this.applyMatrix4(t)
                          );
                        },
                        fromAttribute: function(t, e, i) {
                          return (
                            console.error(
                              'THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().'
                            ),
                            this.fromBufferAttribute(t, e, i)
                          );
                        }
                      }),
                      Object.assign(je.prototype, {
                        fromAttribute: function(t, e, i) {
                          return (
                            console.error(
                              'THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().'
                            ),
                            this.fromBufferAttribute(t, e, i)
                          );
                        }
                      }),
                      (Dr.prototype.computeTangents = function() {
                        console.warn(
                          'THREE.Geometry: .computeTangents() has been removed.'
                        );
                      }),
                      Object.assign(zn.prototype, {
                        getChildByName: function(t) {
                          return (
                            console.warn(
                              'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().'
                            ),
                            this.getObjectByName(t)
                          );
                        },
                        renderDepth: function() {
                          console.warn(
                            'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.'
                          );
                        },
                        translate: function(t, e) {
                          return (
                            console.warn(
                              'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.'
                            ),
                            this.translateOnAxis(e, t)
                          );
                        }
                      }),
                      Object.defineProperties(zn.prototype, {
                        eulerOrder: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.Object3D: .eulerOrder is now .rotation.order.'
                              ),
                              this.rotation.order
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.Object3D: .eulerOrder is now .rotation.order.'
                            ),
                              (this.rotation.order = t);
                          }
                        },
                        useQuaternion: {
                          get: function() {
                            console.warn(
                              'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.'
                            );
                          },
                          set: function() {
                            console.warn(
                              'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.'
                            );
                          }
                        }
                      }),
                      Object.defineProperties(ko.prototype, {
                        objects: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.LOD: .objects has been renamed to .levels.'
                              ),
                              this.levels
                            );
                          }
                        }
                      }),
                      Object.defineProperty(Bo.prototype, 'useVertexTexture', {
                        get: function() {
                          console.warn(
                            'THREE.Skeleton: useVertexTexture has been removed.'
                          );
                        },
                        set: function() {
                          console.warn(
                            'THREE.Skeleton: useVertexTexture has been removed.'
                          );
                        }
                      }),
                      Object.defineProperty(
                        Ya.prototype,
                        '__arcLengthDivisions',
                        {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.'
                              ),
                              this.arcLengthDivisions
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.'
                            ),
                              (this.arcLengthDivisions = t);
                          }
                        }
                      ),
                      (Pn.prototype.setLens = function(t, e) {
                        console.warn(
                          'THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.'
                        ),
                          void 0 !== e && (this.filmGauge = e),
                          this.setFocalLength(t);
                      }),
                      Object.defineProperties(ia.prototype, {
                        onlyShadow: {
                          set: function() {
                            console.warn(
                              'THREE.Light: .onlyShadow has been removed.'
                            );
                          }
                        },
                        shadowCameraFov: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraFov is now .shadow.camera.fov.'
                            ),
                              (this.shadow.camera.fov = t);
                          }
                        },
                        shadowCameraLeft: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.'
                            ),
                              (this.shadow.camera.left = t);
                          }
                        },
                        shadowCameraRight: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraRight is now .shadow.camera.right.'
                            ),
                              (this.shadow.camera.right = t);
                          }
                        },
                        shadowCameraTop: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraTop is now .shadow.camera.top.'
                            ),
                              (this.shadow.camera.top = t);
                          }
                        },
                        shadowCameraBottom: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.'
                            ),
                              (this.shadow.camera.bottom = t);
                          }
                        },
                        shadowCameraNear: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraNear is now .shadow.camera.near.'
                            ),
                              (this.shadow.camera.near = t);
                          }
                        },
                        shadowCameraFar: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowCameraFar is now .shadow.camera.far.'
                            ),
                              (this.shadow.camera.far = t);
                          }
                        },
                        shadowCameraVisible: {
                          set: function() {
                            console.warn(
                              'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.'
                            );
                          }
                        },
                        shadowBias: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowBias is now .shadow.bias.'
                            ),
                              (this.shadow.bias = t);
                          }
                        },
                        shadowDarkness: {
                          set: function() {
                            console.warn(
                              'THREE.Light: .shadowDarkness has been removed.'
                            );
                          }
                        },
                        shadowMapWidth: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.'
                            ),
                              (this.shadow.mapSize.width = t);
                          }
                        },
                        shadowMapHeight: {
                          set: function(t) {
                            console.warn(
                              'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.'
                            ),
                              (this.shadow.mapSize.height = t);
                          }
                        }
                      }),
                      Object.defineProperties(Sr.prototype, {
                        length: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.BufferAttribute: .length has been deprecated. Use .count instead.'
                              ),
                              this.array.length
                            );
                          }
                        }
                      }),
                      Object.assign(Fr.prototype, {
                        addIndex: function(t) {
                          console.warn(
                            'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().'
                          ),
                            this.setIndex(t);
                        },
                        addDrawCall: function(t, e, i) {
                          void 0 !== i &&
                            console.warn(
                              'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.'
                            ),
                            console.warn(
                              'THREE.BufferGeometry: .addDrawCall() is now .addGroup().'
                            ),
                            this.addGroup(t, e);
                        },
                        clearDrawCalls: function() {
                          console.warn(
                            'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().'
                          ),
                            this.clearGroups();
                        },
                        computeTangents: function() {
                          console.warn(
                            'THREE.BufferGeometry: .computeTangents() has been removed.'
                          );
                        },
                        computeOffsets: function() {
                          console.warn(
                            'THREE.BufferGeometry: .computeOffsets() has been removed.'
                          );
                        }
                      }),
                      Object.defineProperties(Fr.prototype, {
                        drawcalls: {
                          get: function() {
                            return (
                              console.error(
                                'THREE.BufferGeometry: .drawcalls has been renamed to .groups.'
                              ),
                              this.groups
                            );
                          }
                        },
                        offsets: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.BufferGeometry: .offsets has been renamed to .groups.'
                              ),
                              this.groups
                            );
                          }
                        }
                      }),
                      Object.defineProperties(rl.prototype, {
                        dynamic: {
                          set: function() {
                            console.warn(
                              'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.'
                            );
                          }
                        },
                        onUpdate: {
                          value: function() {
                            return (
                              console.warn(
                                'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.'
                              ),
                              this
                            );
                          }
                        }
                      }),
                      Object.defineProperties(on.prototype, {
                        wrapAround: {
                          get: function() {
                            console.warn(
                              'THREE.Material: .wrapAround has been removed.'
                            );
                          },
                          set: function() {
                            console.warn(
                              'THREE.Material: .wrapAround has been removed.'
                            );
                          }
                        },
                        wrapRGB: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.Material: .wrapRGB has been removed.'
                              ),
                              new Ni()
                            );
                          }
                        },
                        shading: {
                          get: function() {
                            console.error(
                              'THREE.' +
                                this.type +
                                ': .shading has been removed. Use the boolean .flatShading instead.'
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.' +
                                this.type +
                                ': .shading has been removed. Use the boolean .flatShading instead.'
                            ),
                              (this.flatShading = 1 === t);
                          }
                        }
                      }),
                      Object.defineProperties(Fs.prototype, {
                        metal: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead.'
                              ),
                              !1
                            );
                          },
                          set: function() {
                            console.warn(
                              'THREE.MeshPhongMaterial: .metal has been removed. Use THREE.MeshStandardMaterial instead'
                            );
                          }
                        }
                      }),
                      Object.defineProperties(sn.prototype, {
                        derivatives: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.'
                              ),
                              this.extensions.derivatives
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.'
                            ),
                              (this.extensions.derivatives = t);
                          }
                        }
                      }),
                      Object.assign(Co.prototype, {
                        getCurrentRenderTarget: function() {
                          return (
                            console.warn(
                              'THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().'
                            ),
                            this.getRenderTarget()
                          );
                        },
                        getMaxAnisotropy: function() {
                          return (
                            console.warn(
                              'THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().'
                            ),
                            this.capabilities.getMaxAnisotropy()
                          );
                        },
                        getPrecision: function() {
                          return (
                            console.warn(
                              'THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.'
                            ),
                            this.capabilities.precision
                          );
                        },
                        supportsFloatTextures: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."
                            ),
                            this.extensions.get('OES_texture_float')
                          );
                        },
                        supportsHalfFloatTextures: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."
                            ),
                            this.extensions.get('OES_texture_half_float')
                          );
                        },
                        supportsStandardDerivatives: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."
                            ),
                            this.extensions.get('OES_standard_derivatives')
                          );
                        },
                        supportsCompressedTextureS3TC: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."
                            ),
                            this.extensions.get('WEBGL_compressed_texture_s3tc')
                          );
                        },
                        supportsCompressedTexturePVRTC: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."
                            ),
                            this.extensions.get(
                              'WEBGL_compressed_texture_pvrtc'
                            )
                          );
                        },
                        supportsBlendMinMax: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."
                            ),
                            this.extensions.get('EXT_blend_minmax')
                          );
                        },
                        supportsVertexTextures: function() {
                          return (
                            console.warn(
                              'THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.'
                            ),
                            this.capabilities.vertexTextures
                          );
                        },
                        supportsInstancedArrays: function() {
                          return (
                            console.warn(
                              "THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."
                            ),
                            this.extensions.get('ANGLE_instanced_arrays')
                          );
                        },
                        enableScissorTest: function(t) {
                          console.warn(
                            'THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().'
                          ),
                            this.setScissorTest(t);
                        },
                        initMaterial: function() {
                          console.warn(
                            'THREE.WebGLRenderer: .initMaterial() has been removed.'
                          );
                        },
                        addPrePlugin: function() {
                          console.warn(
                            'THREE.WebGLRenderer: .addPrePlugin() has been removed.'
                          );
                        },
                        addPostPlugin: function() {
                          console.warn(
                            'THREE.WebGLRenderer: .addPostPlugin() has been removed.'
                          );
                        },
                        updateShadowMap: function() {
                          console.warn(
                            'THREE.WebGLRenderer: .updateShadowMap() has been removed.'
                          );
                        }
                      }),
                      Object.defineProperties(Co.prototype, {
                        shadowMapEnabled: {
                          get: function() {
                            return this.shadowMap.enabled;
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.'
                            ),
                              (this.shadowMap.enabled = t);
                          }
                        },
                        shadowMapType: {
                          get: function() {
                            return this.shadowMap.type;
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.'
                            ),
                              (this.shadowMap.type = t);
                          }
                        },
                        shadowMapCullFace: {
                          get: function() {
                            return this.shadowMap.cullFace;
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.'
                            ),
                              (this.shadowMap.cullFace = t);
                          }
                        }
                      }),
                      Object.defineProperties(fn.prototype, {
                        cullFace: {
                          get: function() {
                            return this.renderReverseSided ? h : u;
                          },
                          set: function(t) {
                            var e = t !== u;
                            console.warn(
                              'WebGLRenderer: .shadowMap.cullFace is deprecated. Set .shadowMap.renderReverseSided to ' +
                                e +
                                '.'
                            ),
                              (this.renderReverseSided = e);
                          }
                        }
                      }),
                      Object.defineProperties(Oe.prototype, {
                        wrapS: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.'
                              ),
                              this.texture.wrapS
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.'
                            ),
                              (this.texture.wrapS = t);
                          }
                        },
                        wrapT: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.'
                              ),
                              this.texture.wrapT
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.'
                            ),
                              (this.texture.wrapT = t);
                          }
                        },
                        magFilter: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.'
                              ),
                              this.texture.magFilter
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.'
                            ),
                              (this.texture.magFilter = t);
                          }
                        },
                        minFilter: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.'
                              ),
                              this.texture.minFilter
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.'
                            ),
                              (this.texture.minFilter = t);
                          }
                        },
                        anisotropy: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.'
                              ),
                              this.texture.anisotropy
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.'
                            ),
                              (this.texture.anisotropy = t);
                          }
                        },
                        offset: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .offset is now .texture.offset.'
                              ),
                              this.texture.offset
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .offset is now .texture.offset.'
                            ),
                              (this.texture.offset = t);
                          }
                        },
                        repeat: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.'
                              ),
                              this.texture.repeat
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.'
                            ),
                              (this.texture.repeat = t);
                          }
                        },
                        format: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .format is now .texture.format.'
                              ),
                              this.texture.format
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .format is now .texture.format.'
                            ),
                              (this.texture.format = t);
                          }
                        },
                        type: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .type is now .texture.type.'
                              ),
                              this.texture.type
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .type is now .texture.type.'
                            ),
                              (this.texture.type = t);
                          }
                        },
                        generateMipmaps: {
                          get: function() {
                            return (
                              console.warn(
                                'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.'
                              ),
                              this.texture.generateMipmaps
                            );
                          },
                          set: function(t) {
                            console.warn(
                              'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.'
                            ),
                              (this.texture.generateMipmaps = t);
                          }
                        }
                      }),
                      (Xc.prototype.load = function(t) {
                        console.warn(
                          'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.'
                        );
                        var e = this;
                        return (
                          new Yc().load(t, function(t) {
                            e.setBuffer(t);
                          }),
                          this
                        );
                      }),
                      (Zc.prototype.getData = function() {
                        return (
                          console.warn(
                            'THREE.AudioAnalyser: .getData() is now .getFrequencyData().'
                          ),
                          this.getFrequencyData()
                        );
                      }),
                      (Wc.prototype.updateCubeMap = function(t, e) {
                        return (
                          console.warn(
                            'THREE.CubeCamera: .updateCubeMap() is now .update().'
                          ),
                          this.update(t, e)
                        );
                      });
                    var ql = {
                        merge: function(t, e, i) {
                          var n;
                          console.warn(
                            'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.'
                          ),
                            e.isMesh &&
                              (e.matrixAutoUpdate && e.updateMatrix(),
                              (n = e.matrix),
                              (e = e.geometry)),
                            t.merge(e, n, i);
                        },
                        center: function(t) {
                          return (
                            console.warn(
                              'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.'
                            ),
                            t.center()
                          );
                        }
                      },
                      Xl = {
                        crossOrigin: void 0,
                        loadTexture: function(t, e, i, n) {
                          console.warn(
                            'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.'
                          );
                          var r = new ea();
                          r.setCrossOrigin(this.crossOrigin);
                          var o = r.load(t, i, void 0, n);
                          return e && (o.mapping = e), o;
                        },
                        loadTextureCube: function(t, e, i, n) {
                          console.warn(
                            'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.'
                          );
                          var r = new ta();
                          r.setCrossOrigin(this.crossOrigin);
                          var o = r.load(t, i, void 0, n);
                          return e && (o.mapping = e), o;
                        },
                        loadCompressedTexture: function() {
                          console.error(
                            'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.'
                          );
                        },
                        loadCompressedTextureCube: function() {
                          console.error(
                            'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.'
                          );
                        }
                      };
                    (t.WebGLRenderTargetCube = Re),
                      (t.WebGLRenderTarget = Oe),
                      (t.WebGLRenderer = Co),
                      (t.ShaderLib = ji),
                      (t.UniformsLib = Ci),
                      (t.UniformsUtils = _i),
                      (t.ShaderChunk = Ii),
                      (t.FogExp2 = _o),
                      (t.Fog = Io),
                      (t.Scene = jo),
                      (t.LensFlare = Oo),
                      (t.Sprite = zo),
                      (t.LOD = ko),
                      (t.SkinnedMesh = Uo),
                      (t.Skeleton = Bo),
                      (t.Bone = Po),
                      (t.Mesh = Kr),
                      (t.LineSegments = Vo),
                      (t.LineLoop = Go),
                      (t.Line = Ho),
                      (t.Points = Qo),
                      (t.Group = Wo),
                      (t.VideoTexture = qo),
                      (t.DataTexture = Pe),
                      (t.CompressedTexture = Xo),
                      (t.CubeTexture = Ue),
                      (t.CanvasTexture = zi),
                      (t.DepthTexture = Ko),
                      (t.Texture = Ie),
                      (t.CompressedTextureLoader = Zs),
                      (t.DataTextureLoader = Js),
                      (t.CubeTextureLoader = ta),
                      (t.TextureLoader = ea),
                      (t.ObjectLoader = Ba),
                      (t.MaterialLoader = Da),
                      (t.BufferGeometryLoader = Sa),
                      (t.DefaultLoadingManager = Xs),
                      (t.LoadingManager = qs),
                      (t.JSONLoader = ka),
                      (t.ImageLoader = $s),
                      (t.FontLoader = rc),
                      (t.FileLoader = Ks),
                      (t.Loader = za),
                      (t.Cache = Ws),
                      (t.AudioLoader = Yc),
                      (t.SpotLightShadow = oa),
                      (t.SpotLight = sa),
                      (t.PointLight = aa),
                      (t.RectAreaLight = ha),
                      (t.HemisphereLight = na),
                      (t.DirectionalLightShadow = ca),
                      (t.DirectionalLight = la),
                      (t.AmbientLight = ua),
                      (t.LightShadow = ra),
                      (t.Light = ia),
                      (t.StereoCamera = Qc),
                      (t.PerspectiveCamera = Pn),
                      (t.OrthographicCamera = Bn),
                      (t.CubeCamera = Wc),
                      (t.ArrayCamera = Do),
                      (t.Camera = kn),
                      (t.AudioListener = qc),
                      (t.PositionalAudio = Kc),
                      (t.AudioContext = Gc),
                      (t.AudioAnalyser = Zc),
                      (t.Audio = Xc),
                      (t.VectorKeyframeTrack = wa),
                      (t.StringKeyframeTrack = xa),
                      (t.QuaternionKeyframeTrack = Ea),
                      (t.NumberKeyframeTrack = ba),
                      (t.ColorKeyframeTrack = Ta),
                      (t.BooleanKeyframeTrack = Aa),
                      (t.PropertyMixer = Jc),
                      (t.PropertyBinding = tl),
                      (t.KeyframeTrack = La),
                      (t.AnimationUtils = pa),
                      (t.AnimationObjectGroup = el),
                      (t.AnimationMixer = nl),
                      (t.AnimationClip = Na),
                      (t.Uniform = rl),
                      (t.InstancedBufferGeometry = ol),
                      (t.BufferGeometry = Fr),
                      (t.GeometryIdCount = Nr),
                      (t.Geometry = Dr),
                      (t.InterleavedBufferAttribute = sl),
                      (t.InstancedInterleavedBuffer = cl),
                      (t.InterleavedBuffer = al),
                      (t.InstancedBufferAttribute = ll),
                      (t.Face3 = Un),
                      (t.Object3D = zn),
                      (t.Raycaster = ul),
                      (t.Layers = vn),
                      (t.EventDispatcher = e),
                      (t.Clock = pl),
                      (t.QuaternionLinearInterpolant = Ma),
                      (t.LinearInterpolant = ga),
                      (t.DiscreteInterpolant = va),
                      (t.CubicInterpolant = ma),
                      (t.Interpolant = fa),
                      (t.Triangle = Xr),
                      (t.Math = ue),
                      (t.Spherical = fl),
                      (t.Cylindrical = ml),
                      (t.Plane = dn),
                      (t.Frustum = pn),
                      (t.Sphere = un),
                      (t.Ray = Wr),
                      (t.Matrix4 = Be),
                      (t.Matrix3 = hn),
                      (t.Box3 = ln),
                      (t.Box2 = Oi),
                      (t.Line3 = qr),
                      (t.Euler = gn),
                      (t.Vector4 = je),
                      (t.Vector3 = ke),
                      (t.Vector2 = he),
                      (t.Quaternion = ze),
                      (t.Color = Ni),
                      (t.ImmediateRenderObject = gl),
                      (t.VertexNormalsHelper = vl),
                      (t.SpotLightHelper = yl),
                      (t.SkeletonHelper = wl),
                      (t.PointLightHelper = Ml),
                      (t.RectAreaLightHelper = El),
                      (t.HemisphereLightHelper = bl),
                      (t.GridHelper = xl),
                      (t.PolarGridHelper = Al),
                      (t.FaceNormalsHelper = Tl),
                      (t.DirectionalLightHelper = Ll),
                      (t.CameraHelper = Nl),
                      (t.BoxHelper = Dl),
                      (t.Box3Helper = Sl),
                      (t.PlaneHelper = Cl),
                      (t.ArrowHelper = _l),
                      (t.AxisHelper = Il),
                      (t.CatmullRomCurve3 = Bl),
                      (t.CubicBezierCurve3 = Pl),
                      (t.QuadraticBezierCurve3 = Ul),
                      (t.LineCurve3 = Fl),
                      (t.ArcCurve = Hl),
                      (t.EllipseCurve = qa),
                      (t.SplineCurve = Xa),
                      (t.CubicBezierCurve = Ka),
                      (t.QuadraticBezierCurve = Za),
                      (t.LineCurve = Qa),
                      (t.Shape = ec),
                      (t.Path = tc),
                      (t.ShapePath = ic),
                      (t.Font = nc),
                      (t.CurvePath = Wa),
                      (t.Curve = Ya),
                      (t.ShapeUtils = gs),
                      (t.SceneUtils = Vl),
                      (t.WebGLUtils = So),
                      (t.WireframeGeometry = Zo),
                      (t.ParametricGeometry = Jo),
                      (t.ParametricBufferGeometry = $o),
                      (t.TetrahedronGeometry = is),
                      (t.TetrahedronBufferGeometry = ns),
                      (t.OctahedronGeometry = rs),
                      (t.OctahedronBufferGeometry = os),
                      (t.IcosahedronGeometry = ss),
                      (t.IcosahedronBufferGeometry = as),
                      (t.DodecahedronGeometry = cs),
                      (t.DodecahedronBufferGeometry = ls),
                      (t.PolyhedronGeometry = ts),
                      (t.PolyhedronBufferGeometry = es),
                      (t.TubeGeometry = us),
                      (t.TubeBufferGeometry = hs),
                      (t.TorusKnotGeometry = ds),
                      (t.TorusKnotBufferGeometry = ps),
                      (t.TorusGeometry = fs),
                      (t.TorusBufferGeometry = ms),
                      (t.TextGeometry = ws),
                      (t.TextBufferGeometry = Ms),
                      (t.SphereGeometry = Es),
                      (t.SphereBufferGeometry = bs),
                      (t.RingGeometry = xs),
                      (t.RingBufferGeometry = As),
                      (t.PlaneGeometry = Gr),
                      (t.PlaneBufferGeometry = Yr),
                      (t.LatheGeometry = Ts),
                      (t.LatheBufferGeometry = Ls),
                      (t.ShapeGeometry = Ns),
                      (t.ShapeBufferGeometry = Ds),
                      (t.ExtrudeGeometry = vs),
                      (t.ExtrudeBufferGeometry = ys),
                      (t.EdgesGeometry = Ss),
                      (t.ConeGeometry = Is),
                      (t.ConeBufferGeometry = js),
                      (t.CylinderGeometry = Cs),
                      (t.CylinderBufferGeometry = _s),
                      (t.CircleGeometry = Os),
                      (t.CircleBufferGeometry = Rs),
                      (t.BoxGeometry = Hr),
                      (t.BoxBufferGeometry = Vr),
                      (t.ShadowMaterial = ks),
                      (t.SpriteMaterial = Ro),
                      (t.RawShaderMaterial = Bs),
                      (t.ShaderMaterial = sn),
                      (t.PointsMaterial = Yo),
                      (t.MeshPhysicalMaterial = Us),
                      (t.MeshStandardMaterial = Ps),
                      (t.MeshPhongMaterial = Fs),
                      (t.MeshToonMaterial = Hs),
                      (t.MeshNormalMaterial = Vs),
                      (t.MeshLambertMaterial = Gs),
                      (t.MeshDepthMaterial = an),
                      (t.MeshDistanceMaterial = cn),
                      (t.MeshBasicMaterial = Qr),
                      (t.LineDashedMaterial = Ys),
                      (t.LineBasicMaterial = Fo),
                      (t.Material = on),
                      (t.Float64BufferAttribute = Br),
                      (t.Float32BufferAttribute = kr),
                      (t.Uint32BufferAttribute = zr),
                      (t.Int32BufferAttribute = Rr),
                      (t.Uint16BufferAttribute = Or),
                      (t.Int16BufferAttribute = jr),
                      (t.Uint8ClampedBufferAttribute = Ir),
                      (t.Uint8BufferAttribute = _r),
                      (t.Int8BufferAttribute = Cr),
                      (t.BufferAttribute = Sr),
                      (t.REVISION = c),
                      (t.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 }),
                      (t.CullFaceNone = l),
                      (t.CullFaceBack = u),
                      (t.CullFaceFront = h),
                      (t.CullFaceFrontBack = 3),
                      (t.FrontFaceDirectionCW = d),
                      (t.FrontFaceDirectionCCW = 1),
                      (t.BasicShadowMap = 0),
                      (t.PCFShadowMap = p),
                      (t.PCFSoftShadowMap = f),
                      (t.FrontSide = m),
                      (t.BackSide = g),
                      (t.DoubleSide = v),
                      (t.FlatShading = 1),
                      (t.SmoothShading = 2),
                      (t.NoColors = y),
                      (t.FaceColors = w),
                      (t.VertexColors = M),
                      (t.NoBlending = E),
                      (t.NormalBlending = b),
                      (t.AdditiveBlending = x),
                      (t.SubtractiveBlending = A),
                      (t.MultiplyBlending = T),
                      (t.CustomBlending = L),
                      (t.AddEquation = N),
                      (t.SubtractEquation = D),
                      (t.ReverseSubtractEquation = S),
                      (t.MinEquation = C),
                      (t.MaxEquation = _),
                      (t.ZeroFactor = I),
                      (t.OneFactor = j),
                      (t.SrcColorFactor = O),
                      (t.OneMinusSrcColorFactor = R),
                      (t.SrcAlphaFactor = z),
                      (t.OneMinusSrcAlphaFactor = k),
                      (t.DstAlphaFactor = B),
                      (t.OneMinusDstAlphaFactor = P),
                      (t.DstColorFactor = U),
                      (t.OneMinusDstColorFactor = F),
                      (t.SrcAlphaSaturateFactor = H),
                      (t.NeverDepth = V),
                      (t.AlwaysDepth = G),
                      (t.LessDepth = Y),
                      (t.LessEqualDepth = Q),
                      (t.EqualDepth = W),
                      (t.GreaterEqualDepth = q),
                      (t.GreaterDepth = X),
                      (t.NotEqualDepth = K),
                      (t.MultiplyOperation = Z),
                      (t.MixOperation = J),
                      (t.AddOperation = $),
                      (t.NoToneMapping = tt),
                      (t.LinearToneMapping = et),
                      (t.ReinhardToneMapping = it),
                      (t.Uncharted2ToneMapping = nt),
                      (t.CineonToneMapping = rt),
                      (t.UVMapping = 300),
                      (t.CubeReflectionMapping = ot),
                      (t.CubeRefractionMapping = st),
                      (t.EquirectangularReflectionMapping = at),
                      (t.EquirectangularRefractionMapping = ct),
                      (t.SphericalReflectionMapping = lt),
                      (t.CubeUVReflectionMapping = ut),
                      (t.CubeUVRefractionMapping = ht),
                      (t.RepeatWrapping = dt),
                      (t.ClampToEdgeWrapping = pt),
                      (t.MirroredRepeatWrapping = ft),
                      (t.NearestFilter = mt),
                      (t.NearestMipMapNearestFilter = gt),
                      (t.NearestMipMapLinearFilter = vt),
                      (t.LinearFilter = yt),
                      (t.LinearMipMapNearestFilter = wt),
                      (t.LinearMipMapLinearFilter = Mt),
                      (t.UnsignedByteType = Et),
                      (t.ByteType = bt),
                      (t.ShortType = xt),
                      (t.UnsignedShortType = At),
                      (t.IntType = Tt),
                      (t.UnsignedIntType = Lt),
                      (t.FloatType = Nt),
                      (t.HalfFloatType = Dt),
                      (t.UnsignedShort4444Type = St),
                      (t.UnsignedShort5551Type = Ct),
                      (t.UnsignedShort565Type = _t),
                      (t.UnsignedInt248Type = It),
                      (t.AlphaFormat = jt),
                      (t.RGBFormat = Ot),
                      (t.RGBAFormat = Rt),
                      (t.LuminanceFormat = zt),
                      (t.LuminanceAlphaFormat = kt),
                      (t.RGBEFormat = Bt),
                      (t.DepthFormat = Pt),
                      (t.DepthStencilFormat = Ut),
                      (t.RGB_S3TC_DXT1_Format = Ft),
                      (t.RGBA_S3TC_DXT1_Format = Ht),
                      (t.RGBA_S3TC_DXT3_Format = Vt),
                      (t.RGBA_S3TC_DXT5_Format = Gt),
                      (t.RGB_PVRTC_4BPPV1_Format = Yt),
                      (t.RGB_PVRTC_2BPPV1_Format = Qt),
                      (t.RGBA_PVRTC_4BPPV1_Format = Wt),
                      (t.RGBA_PVRTC_2BPPV1_Format = qt),
                      (t.RGB_ETC1_Format = Xt),
                      (t.LoopOnce = 2200),
                      (t.LoopRepeat = Kt),
                      (t.LoopPingPong = 2202),
                      (t.InterpolateDiscrete = 2300),
                      (t.InterpolateLinear = 2301),
                      (t.InterpolateSmooth = 2302),
                      (t.ZeroCurvatureEnding = Zt),
                      (t.ZeroSlopeEnding = 2401),
                      (t.WrapAroundEnding = 2402),
                      (t.TrianglesDrawMode = Jt),
                      (t.TriangleStripDrawMode = $t),
                      (t.TriangleFanDrawMode = te),
                      (t.LinearEncoding = ee),
                      (t.sRGBEncoding = ie),
                      (t.GammaEncoding = ne),
                      (t.RGBEEncoding = re),
                      (t.LogLuvEncoding = 3003),
                      (t.RGBM7Encoding = oe),
                      (t.RGBM16Encoding = se),
                      (t.RGBDEncoding = ae),
                      (t.BasicDepthPacking = ce),
                      (t.RGBADepthPacking = le),
                      (t.CubeGeometry = Hr),
                      (t.Face4 = function(t, e, i, n, r, o, s) {
                        return (
                          console.warn(
                            'THREE.Face4 has been removed. A THREE.Face3 will be created instead.'
                          ),
                          new Un(t, e, i, r, o, s)
                        );
                      }),
                      (t.LineStrip = 0),
                      (t.LinePieces = 1),
                      (t.MeshFaceMaterial = function(t) {
                        return (
                          console.warn(
                            'THREE.MeshFaceMaterial has been removed. Use an Array instead.'
                          ),
                          t
                        );
                      }),
                      (t.MultiMaterial = function(t) {
                        return (
                          void 0 === t && (t = []),
                          console.warn(
                            'THREE.MultiMaterial has been removed. Use an Array instead.'
                          ),
                          (t.isMultiMaterial = !0),
                          (t.materials = t),
                          (t.clone = function() {
                            return t.slice();
                          }),
                          t
                        );
                      }),
                      (t.PointCloud = function(t, e) {
                        return (
                          console.warn(
                            'THREE.PointCloud has been renamed to THREE.Points.'
                          ),
                          new Qo(t, e)
                        );
                      }),
                      (t.Particle = function(t) {
                        return (
                          console.warn(
                            'THREE.Particle has been renamed to THREE.Sprite.'
                          ),
                          new zo(t)
                        );
                      }),
                      (t.ParticleSystem = function(t, e) {
                        return (
                          console.warn(
                            'THREE.ParticleSystem has been renamed to THREE.Points.'
                          ),
                          new Qo(t, e)
                        );
                      }),
                      (t.PointCloudMaterial = function(t) {
                        return (
                          console.warn(
                            'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.'
                          ),
                          new Yo(t)
                        );
                      }),
                      (t.ParticleBasicMaterial = function(t) {
                        return (
                          console.warn(
                            'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.'
                          ),
                          new Yo(t)
                        );
                      }),
                      (t.ParticleSystemMaterial = function(t) {
                        return (
                          console.warn(
                            'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.'
                          ),
                          new Yo(t)
                        );
                      }),
                      (t.Vertex = function(t, e, i) {
                        return (
                          console.warn(
                            'THREE.Vertex has been removed. Use THREE.Vector3 instead.'
                          ),
                          new ke(t, e, i)
                        );
                      }),
                      (t.DynamicBufferAttribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.'
                          ),
                          new Sr(t, e).setDynamic(!0)
                        );
                      }),
                      (t.Int8Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.'
                          ),
                          new Cr(t, e)
                        );
                      }),
                      (t.Uint8Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.'
                          ),
                          new _r(t, e)
                        );
                      }),
                      (t.Uint8ClampedAttribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.'
                          ),
                          new Ir(t, e)
                        );
                      }),
                      (t.Int16Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.'
                          ),
                          new jr(t, e)
                        );
                      }),
                      (t.Uint16Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.'
                          ),
                          new Or(t, e)
                        );
                      }),
                      (t.Int32Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.'
                          ),
                          new Rr(t, e)
                        );
                      }),
                      (t.Uint32Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.'
                          ),
                          new zr(t, e)
                        );
                      }),
                      (t.Float32Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.'
                          ),
                          new kr(t, e)
                        );
                      }),
                      (t.Float64Attribute = function(t, e) {
                        return (
                          console.warn(
                            'THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.'
                          ),
                          new Br(t, e)
                        );
                      }),
                      (t.ClosedSplineCurve3 = Yl),
                      (t.SplineCurve3 = Ql),
                      (t.Spline = Wl),
                      (t.BoundingBoxHelper = function(t, e) {
                        return (
                          console.warn(
                            'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.'
                          ),
                          new Dl(t, e)
                        );
                      }),
                      (t.EdgesHelper = function(t, e) {
                        return (
                          console.warn(
                            'THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.'
                          ),
                          new Vo(
                            new Ss(t.geometry),
                            new Fo({ color: void 0 !== e ? e : 16777215 })
                          )
                        );
                      }),
                      (t.WireframeHelper = function(t, e) {
                        return (
                          console.warn(
                            'THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.'
                          ),
                          new Vo(
                            new Zo(t.geometry),
                            new Fo({ color: void 0 !== e ? e : 16777215 })
                          )
                        );
                      }),
                      (t.XHRLoader = function(t) {
                        return (
                          console.warn(
                            'THREE.XHRLoader has been renamed to THREE.FileLoader.'
                          ),
                          new Ks(t)
                        );
                      }),
                      (t.BinaryTextureLoader = function(t) {
                        return (
                          console.warn(
                            'THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.'
                          ),
                          new Js(t)
                        );
                      }),
                      (t.GeometryUtils = ql),
                      (t.ImageUtils = Xl),
                      (t.Projector = function() {
                        console.error(
                          'THREE.Projector has been moved to /examples/js/renderers/Projector.js.'
                        ),
                          (this.projectVector = function(t, e) {
                            console.warn(
                              'THREE.Projector: .projectVector() is now vector.project().'
                            ),
                              t.project(e);
                          }),
                          (this.unprojectVector = function(t, e) {
                            console.warn(
                              'THREE.Projector: .unprojectVector() is now vector.unproject().'
                            ),
                              t.unproject(e);
                          }),
                          (this.pickingRay = function() {
                            console.error(
                              'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().'
                            );
                          });
                      }),
                      (t.CanvasRenderer = function() {
                        console.error(
                          'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js'
                        ),
                          (this.domElement = document.createElementNS(
                            'http://www.w3.org/1999/xhtml',
                            'canvas'
                          )),
                          (this.clear = function() {}),
                          (this.render = function() {}),
                          (this.setClearColor = function() {}),
                          (this.setSize = function() {});
                      }),
                      Object.defineProperty(t, '__esModule', { value: !0 });
                  })(
                    'object' == typeof i && void 0 !== e
                      ? i
                      : (n.THREE = n.THREE || {})
                  );
              },
              {}
            ],
            42: [
              function(t, e, i) {
                THREE.ColladaLoader = function() {
                  var t,
                    e,
                    i,
                    n,
                    r,
                    o,
                    s,
                    a,
                    c,
                    l,
                    u = null,
                    h = null,
                    d = null,
                    p = {},
                    f = {},
                    m = {},
                    g = {},
                    v = {},
                    y = {},
                    w = {},
                    M = {},
                    E = {},
                    b = {
                      centerGeometry: !1,
                      convertUpAxis: !1,
                      subdivideFaces: !0,
                      upAxis: 'Y',
                      defaultEnvMap: null
                    },
                    x = 1,
                    A = 'Y',
                    T = null;
                  function L(l, p, L) {
                    if (
                      ((u = new DOMParser().parseFromString(l, 'text/xml')),
                      (p = p || d),
                      void 0 !== L)
                    ) {
                      var D = L.split('/');
                      D.pop(), (s = (D.length < 1 ? '.' : D.join('/')) + '/');
                    }
                    !(function() {
                      var t = u.querySelectorAll('asset')[0];
                      if (t && t.childNodes)
                        for (var e = 0; e < t.childNodes.length; e++) {
                          var i = t.childNodes[e];
                          switch (i.nodeName) {
                            case 'unit':
                              var n = i.getAttribute('meter');
                              n && (x = parseFloat(n));
                              break;
                            case 'up_axis':
                              A = i.textContent.charAt(0);
                          }
                        }
                    })(),
                      (function() {
                        if (!0 !== b.convertUpAxis || A === b.upAxis) T = null;
                        else
                          switch (A) {
                            case 'X':
                              T = 'Y' === b.upAxis ? 'XtoY' : 'XtoZ';
                              break;
                            case 'Y':
                              T = 'X' === b.upAxis ? 'YtoX' : 'YtoZ';
                              break;
                            case 'Z':
                              T = 'X' === b.upAxis ? 'ZtoX' : 'ZtoY';
                          }
                      })(),
                      (f = N('library_images image', k, 'image')),
                      (y = N('library_materials material', nt, 'material')),
                      (w = N('library_effects effect', ct, 'effect')),
                      (v = N('library_geometries geometry', W, 'geometry')),
                      (M = N('library_cameras camera', ft, 'camera')),
                      (E = N('library_lights light', gt, 'light')),
                      (g = N(
                        'library_controllers controller',
                        B,
                        'controller'
                      )),
                      (m = N('library_animations animation', ut, 'animation')),
                      (r = N(
                        'library_visual_scenes visual_scene',
                        F,
                        'visual_scene'
                      )),
                      (o = N(
                        'library_kinematics_models kinematics_model',
                        yt,
                        'kinematics_model'
                      )),
                      (a = []),
                      (c = []),
                      (t = (function() {
                        var t = u.querySelectorAll(
                          'scene instance_visual_scene'
                        )[0];
                        if (t) {
                          var e = t.getAttribute('url').replace(/^#/, '');
                          return r[e.length > 0 ? e : 'visual_scene0'];
                        }
                        return null;
                      })()),
                      (h = new THREE.Group());
                    for (var S = 0; S < t.nodes.length; S++)
                      h.add(I(t.nodes[S]));
                    h.scale.multiplyScalar(x),
                      (i = []),
                      (function e(n) {
                        var r = t.getChildById(n.colladaId, !0),
                          o = null;
                        if (r && r.keys) {
                          (o = {
                            fps: 60,
                            hierarchy: [
                              { node: r, keys: r.keys, sids: r.sids }
                            ],
                            node: n,
                            name: 'animation_' + n.name,
                            length: 0
                          }),
                            i.push(o);
                          for (var s = 0, a = r.keys.length; s < a; s++)
                            o.length = Math.max(o.length, r.keys[s].time);
                        } else o = { hierarchy: [{ keys: [], sids: [] }] };
                        for (var s = 0, a = n.children.length; s < a; s++)
                          for (
                            var c = e(n.children[s]),
                              l = 0,
                              u = c.hierarchy.length;
                            l < u;
                            l++
                          )
                            o.hierarchy.push({ keys: [], sids: [] });
                        return o;
                      })(h),
                      (e = (function() {
                        var t = u.querySelectorAll(
                          'instance_kinematics_model'
                        )[0];
                        if (t) {
                          var e = t.getAttribute('url').replace(/^#/, '');
                          return o[e.length > 0 ? e : 'kinematics_model0'];
                        }
                        return null;
                      })()),
                      (function() {
                        if (e && 0 === e.joints.length)
                          return void (n = void 0);
                        var i = {},
                          r = function(n, r) {
                            var o = r.getAttribute('id'),
                              s = t.getChildById(o, !0),
                              a = e.joints[n];
                            h.traverse(function(t) {
                              t.colladaId == o &&
                                (i[n] = {
                                  node: t,
                                  transforms: s.transforms,
                                  joint: a,
                                  position: a.zeroPosition
                                });
                            });
                          };
                        n = {
                          joints: e && e.joints,
                          getJointValue: function(t) {
                            var e = i[t];
                            if (e) return e.position;
                            console.log(
                              'getJointValue: joint ' + t + " doesn't exist"
                            );
                          },
                          setJointValue: function(t, e) {
                            var n = i[t];
                            if (n) {
                              var r = n.joint;
                              if (e > r.limits.max || e < r.limits.min)
                                console.log(
                                  'setJointValue: joint ' +
                                    t +
                                    ' value ' +
                                    e +
                                    ' outside of limits (min: ' +
                                    r.limits.min +
                                    ', max: ' +
                                    r.limits.max +
                                    ')'
                                );
                              else if (r.static)
                                console.log(
                                  'setJointValue: joint ' + t + ' is static'
                                );
                              else {
                                var o = n.node,
                                  a = r.axis,
                                  c = n.transforms,
                                  l = new THREE.Matrix4(),
                                  u = new THREE.Matrix4();
                                for (s = 0; s < c.length; s++) {
                                  var h = c[s];
                                  if (
                                    h.sid &&
                                    -1 !== h.sid.indexOf('joint' + t)
                                  )
                                    switch (r.type) {
                                      case 'revolute':
                                        l.multiply(
                                          u.makeRotationAxis(
                                            a,
                                            THREE.Math.degToRad(e)
                                          )
                                        );
                                        break;
                                      case 'prismatic':
                                        l.multiply(
                                          u.makeTranslation(
                                            a.x * e,
                                            a.y * e,
                                            a.z * e
                                          )
                                        );
                                        break;
                                      default:
                                        console.warn(
                                          'setJointValue: unknown joint type: ' +
                                            r.type
                                        );
                                    }
                                  else
                                    switch (h.type) {
                                      case 'matrix':
                                        l.multiply(h.obj);
                                        break;
                                      case 'translate':
                                        l.multiply(
                                          u.makeTranslation(
                                            h.obj.x,
                                            h.obj.y,
                                            h.obj.z
                                          )
                                        );
                                        break;
                                      case 'rotate':
                                        l.multiply(
                                          u.makeRotationAxis(h.obj, h.angle)
                                        );
                                    }
                                }
                                var d = l.elements,
                                  p = Array.prototype.slice.call(d),
                                  f = [
                                    p[0],
                                    p[4],
                                    p[8],
                                    p[12],
                                    p[1],
                                    p[5],
                                    p[9],
                                    p[13],
                                    p[2],
                                    p[6],
                                    p[10],
                                    p[14],
                                    p[3],
                                    p[7],
                                    p[11],
                                    p[15]
                                  ];
                                o.matrix.set.apply(o.matrix, f),
                                  o.matrix.decompose(
                                    o.position,
                                    o.quaternion,
                                    o.scale
                                  ),
                                  (i[t].position = e);
                              }
                            } else
                              console.log(
                                'setJointValue: joint ' + t + " doesn't exist"
                              );
                          }
                        };
                        var o = u.querySelector(
                          'scene instance_kinematics_scene'
                        );
                        if (o)
                          for (var s = 0; s < o.childNodes.length; s++) {
                            var a = o.childNodes[s];
                            if (1 == a.nodeType)
                              switch (a.nodeName) {
                                case 'bind_joint_axis':
                                  var c = a
                                      .getAttribute('target')
                                      .split('/')
                                      .pop(),
                                    l = a.querySelector('axis param')
                                      .textContent,
                                    d = parseInt(
                                      l
                                        .split('joint')
                                        .pop()
                                        .split('.')[0]
                                    ),
                                    p = u.querySelector('[sid="' + c + '"]');
                                  if (p) {
                                    var f = p.parentElement;
                                    r(d, f);
                                  }
                              }
                          }
                      })();
                    var C = {
                      scene: h,
                      morphs: a,
                      skins: c,
                      animations: i,
                      kinematics: n,
                      dae: {
                        images: f,
                        materials: y,
                        cameras: M,
                        lights: E,
                        effects: w,
                        geometries: v,
                        controllers: g,
                        animations: m,
                        visualScenes: r,
                        visualScene: t,
                        scene: t,
                        kinematicsModels: o,
                        kinematicsModel: e
                      }
                    };
                    return p && p(C), C;
                  }
                  function N(t, e, i) {
                    for (
                      var n = u.querySelectorAll(t),
                        r = {},
                        o = 0,
                        s = n.length,
                        a = 0;
                      a < s;
                      a++
                    ) {
                      var c = n[a],
                        l = new e().parse(c);
                      (l.id && 0 !== l.id.length) || (l.id = i + o++),
                        (r[l.id] = l);
                    }
                    return r;
                  }
                  function D(t, e) {
                    var i = e instanceof G ? g[e.url] : e;
                    if (i && i.morph) {
                      for (var n = i.morph, r = 0; r < n.targets.length; r++) {
                        var o = n.targets[r],
                          s = v[o];
                        if (
                          s.mesh &&
                          s.mesh.primitives &&
                          s.mesh.primitives.length
                        ) {
                          var a = s.mesh.primitives[0].geometry;
                          a.vertices.length === t.vertices.length &&
                            t.morphTargets.push({
                              name: 'target_1',
                              vertices: a.vertices
                            });
                        }
                      }
                      t.morphTargets.push({
                        name: 'target_Z',
                        vertices: t.vertices
                      });
                    } else console.log('could not find morph controller!');
                  }
                  function S(t, e, i, n) {
                    if (
                      ((t.world = t.world || new THREE.Matrix4()),
                      (t.localworld = t.localworld || new THREE.Matrix4()),
                      t.world.copy(t.matrix),
                      t.localworld.copy(t.matrix),
                      t.channels && t.channels.length)
                    ) {
                      var r = t.channels[0].sampler.output[i];
                      r instanceof THREE.Matrix4 &&
                        (t.world.copy(r),
                        t.localworld.copy(r),
                        0 === i && t.matrix.copy(r));
                    }
                    n && t.world.multiplyMatrices(n, t.world), e.push(t);
                    for (var o = 0; o < t.nodes.length; o++)
                      S(t.nodes[o], e, i, t.world);
                  }
                  function C(t, e) {
                    for (var i = 0; i < t.length; i++) {
                      var n = t[i],
                        r = -1;
                      if ('JOINT' == n.type) {
                        for (var o = 0; o < e.joints.length; o++)
                          if (n.sid === e.joints[o]) {
                            r = o;
                            break;
                          }
                        if (r >= 0) {
                          var s = e.invBindMatrices[r];
                          (n.invBindMatrix = s),
                            (n.skinningMatrix = new THREE.Matrix4()),
                            n.skinningMatrix.multiplyMatrices(n.world, s),
                            (n.animatrix = new THREE.Matrix4()),
                            n.animatrix.copy(n.localworld),
                            (n.weights = []);
                          for (o = 0; o < e.weights.length; o++)
                            for (var a = 0; a < e.weights[o].length; a++) {
                              var c = e.weights[o][a];
                              c.joint === r && n.weights.push(c);
                            }
                        } else
                          console.warn(
                            "ColladaLoader: Could not find joint '" +
                              n.sid +
                              "'."
                          ),
                            (n.skinningMatrix = new THREE.Matrix4()),
                            (n.weights = []);
                      }
                    }
                  }
                  function _(e, i, n) {
                    void 0 === n && (n = 40);
                    var r = g[i.url];
                    if (r && r.skin)
                      if (i.skeleton && i.skeleton.length) {
                        for (
                          var o,
                            s,
                            a = (function() {
                              var t,
                                e = 1e6,
                                i = -e,
                                n = 0;
                              for (var r in m) {
                                var o = m[r];
                                t = t || o.id;
                                for (var s = 0; s < o.sampler.length; s++) {
                                  var a = o.sampler[s];
                                  a.create(),
                                    (e = Math.min(e, a.startTime)),
                                    (i = Math.max(i, a.endTime)),
                                    (n = Math.max(n, a.input.length));
                                }
                              }
                              return { start: e, end: i, frames: n, ID: t };
                            })(),
                            c =
                              t.getChildById(i.skeleton[0], !0) ||
                              t.getChildBySid(i.skeleton[0], !0),
                            l = ((s = function(t, e, i) {
                              var n = {};
                              (n.name = e.sid),
                                (n.parent = t),
                                (n.matrix = e.matrix);
                              var r = [
                                new THREE.Vector3(),
                                new THREE.Quaternion(),
                                new THREE.Vector3()
                              ];
                              n.matrix.decompose(r[0], r[1], r[2]),
                                (n.pos = [r[0].x, r[0].y, r[0].z]),
                                (n.scl = [r[2].x, r[2].y, r[2].z]),
                                (n.rotq = [r[1].x, r[1].y, r[1].z, r[1].w]),
                                i.push(n);
                              for (var o in e.nodes) s(e.sid, e.nodes[o], i);
                            })(-1, c, (o = [])),
                            o),
                            u = r.skin.joints,
                            h = [],
                            d = 0;
                          d < u.length;
                          d++
                        )
                          for (var p = 0; p < l.length; p++)
                            l[p].name === u[d] && (h[d] = l[p]);
                        for (var d = 0; d < h.length; d++)
                          for (var p = 0; p < h.length; p++)
                            h[d].parent === h[p].name && (h[d].parent = p);
                        new THREE.Vector3();
                        for (d = 0; d < e.vertices.length; d++)
                          e.vertices[d].applyMatrix4(r.skin.bindShapeMatrix);
                        var f = [],
                          v = [],
                          y = r.skin.weights;
                        for (d = 0; d < y.length; d++) {
                          var w = new THREE.Vector4(
                              y[d][0] ? y[d][0].joint : 0,
                              y[d][1] ? y[d][1].joint : 0,
                              y[d][2] ? y[d][2].joint : 0,
                              y[d][3] ? y[d][3].joint : 0
                            ),
                            M = new THREE.Vector4(
                              y[d][0] ? y[d][0].weight : 0,
                              y[d][1] ? y[d][1].weight : 0,
                              y[d][2] ? y[d][2].weight : 0,
                              y[d][3] ? y[d][3].weight : 0
                            );
                          f.push(w), v.push(M);
                        }
                        (e.skinIndices = f), (e.skinWeights = v), (e.bones = h);
                        var E = {
                          name: a.ID,
                          fps: 30,
                          length: a.frames / 30,
                          hierarchy: []
                        };
                        for (p = 0; p < h.length; p++)
                          E.hierarchy.push({
                            parent: h[p].parent,
                            name: h[p].name,
                            keys: []
                          });
                        for (
                          console.log(
                            'ColladaLoader:',
                            a.ID + ' has ' + h.length + ' bones.'
                          ),
                            (function(t, e, i) {
                              var n = [];
                              S(e, n, -1), C(n, i.skin);
                              for (
                                var r = new THREE.Vector3(), o = [], s = 0;
                                s < t.vertices.length;
                                s++
                              )
                                o.push(new THREE.Vector3());
                              for (s = 0; s < n.length; s++)
                                if ('JOINT' == n[s].type)
                                  for (
                                    var a = 0;
                                    a < n[s].weights.length;
                                    a++
                                  ) {
                                    var c = n[s].weights[a],
                                      l = c.index,
                                      u = c.weight,
                                      h = t.vertices[l],
                                      d = o[l];
                                    (r.x = h.x),
                                      (r.y = h.y),
                                      (r.z = h.z),
                                      r.applyMatrix4(n[s].skinningMatrix),
                                      (d.x += r.x * u),
                                      (d.y += r.y * u),
                                      (d.z += r.z * u);
                                  }
                              for (s = 0; s < t.vertices.length; s++)
                                t.vertices[s] = o[s];
                            })(e, c, r),
                            n = 0;
                          n < a.frames;
                          n++
                        ) {
                          var b = [];
                          S(c, b, n), C(b, r.skin);
                          for (d = 0; d < b.length; d++)
                            for (p = 0; p < E.hierarchy.length; p++)
                              if (E.hierarchy[p].name === b[d].sid) {
                                var x = {};
                                (x.time = n / 30),
                                  (x.matrix = b[d].animatrix),
                                  0 === n && (b[d].matrix = x.matrix);
                                var A = [
                                  new THREE.Vector3(),
                                  new THREE.Quaternion(),
                                  new THREE.Vector3()
                                ];
                                x.matrix.decompose(A[0], A[1], A[2]),
                                  (x.pos = [A[0].x, A[0].y, A[0].z]),
                                  (x.scl = [A[2].x, A[2].y, A[2].z]),
                                  (x.rot = A[1]),
                                  E.hierarchy[p].keys.push(x);
                              }
                          e.animation = E;
                        }
                      } else
                        console.log(
                          'ColladaLoader: Could not find the skeleton for the skin. '
                        );
                    else
                      console.log(
                        'ColladaLoader: Could not find skin controller.'
                      );
                  }
                  function I(t, e) {
                    var i,
                      n,
                      r,
                      o,
                      s = new THREE.Object3D();
                    for (r = 0; r < t.controllers.length; r++) {
                      var l = g[t.controllers[r].url];
                      switch (l.type) {
                        case 'skin':
                          if (v[l.skin.source])
                            ((h = new Q()).url = l.skin.source),
                              (h.instance_material =
                                t.controllers[r].instance_material),
                              t.geometries.push(h),
                              !0,
                              (i = t.controllers[r]);
                          else if (g[l.skin.source]) {
                            var u = g[l.skin.source];
                            if (((n = u), u.morph && v[u.morph.source]))
                              ((h = new Q()).url = u.morph.source),
                                (h.instance_material =
                                  t.controllers[r].instance_material),
                                t.geometries.push(h);
                          }
                          break;
                        case 'morph':
                          var h;
                          if (v[l.morph.source])
                            ((h = new Q()).url = l.morph.source),
                              (h.instance_material =
                                t.controllers[r].instance_material),
                              t.geometries.push(h),
                              (n = t.controllers[r]);
                          console.log(
                            'ColladaLoader: Morph-controller partially supported.'
                          );
                      }
                    }
                    var d = {};
                    for (r = 0; r < t.geometries.length; r++) {
                      var p,
                        f = t.geometries[r],
                        m = f.instance_material,
                        x = v[f.url],
                        A = {},
                        T = [],
                        L = 0;
                      if (x) {
                        if (!x.mesh || !x.mesh.primitives) continue;
                        if ((0 === s.name.length && (s.name = x.id), m))
                          for (o = 0; o < m.length; o++) {
                            var N = m[o],
                              S = y[N.target],
                              C = S.instance_effect.url,
                              j = w[C].shader.material;
                            if (x.doubleSided) {
                              if (!(N.symbol in d)) {
                                var O = j.clone();
                                (O.side = THREE.DoubleSide), (d[N.symbol] = O);
                              }
                              j = d[N.symbol];
                            }
                            (j.opacity = j.opacity ? j.opacity : 1),
                              (A[N.symbol] = L),
                              T.push(j),
                              ((p = j).name =
                                null === S.name || '' === S.name
                                  ? S.id
                                  : S.name),
                              L++;
                          }
                        var R,
                          z =
                            p ||
                            new THREE.MeshLambertMaterial({
                              color: 14540253,
                              side: x.doubleSided
                                ? THREE.DoubleSide
                                : THREE.FrontSide
                            }),
                          k = x.mesh.geometry3js;
                        if (L > 1)
                          for (
                            z = new THREE.MultiMaterial(T), o = 0;
                            o < k.faces.length;
                            o++
                          ) {
                            var B = k.faces[o];
                            B.materialIndex = A[B.daeMaterial];
                          }
                        void 0 !== i
                          ? (_(k, i),
                            k.morphTargets.length > 0
                              ? ((z.morphTargets = !0), (z.skinning = !1))
                              : ((z.morphTargets = !1), (z.skinning = !0)),
                            ((R = new THREE.SkinnedMesh(k, z, !1)).name =
                              'skin_' + c.length),
                            c.push(R))
                          : void 0 !== n
                            ? (D(k, n),
                              (z.morphTargets = !0),
                              ((R = new THREE.Mesh(k, z)).name =
                                'morph_' + a.length),
                              a.push(R))
                            : (R =
                                !0 === k.isLineStrip
                                  ? new THREE.Line(k)
                                  : new THREE.Mesh(k, z)),
                          s.add(R);
                      }
                    }
                    for (r = 0; r < t.cameras.length; r++) {
                      var P = t.cameras[r],
                        U = M[P.url],
                        F = new THREE.PerspectiveCamera(
                          U.yfov,
                          parseFloat(U.aspect_ratio),
                          parseFloat(U.znear),
                          parseFloat(U.zfar)
                        );
                      s.add(F);
                    }
                    for (r = 0; r < t.lights.length; r++) {
                      var H = null,
                        V = t.lights[r],
                        G = E[V.url];
                      if (G && G.technique) {
                        var Y = G.color.getHex(),
                          W = G.intensity,
                          q = G.distance,
                          X = G.falloff_angle;
                        switch (G.technique) {
                          case 'directional':
                            (H = new THREE.DirectionalLight(
                              Y,
                              W,
                              q
                            )).position.set(0, 0, 1);
                            break;
                          case 'point':
                            H = new THREE.PointLight(Y, W, q);
                            break;
                          case 'spot':
                            (H = new THREE.SpotLight(Y, W, q, X)).position.set(
                              0,
                              0,
                              1
                            );
                            break;
                          case 'ambient':
                            H = new THREE.AmbientLight(Y);
                        }
                      }
                      H && s.add(H);
                    }
                    if (
                      ((s.name = t.name || t.id || ''),
                      (s.colladaId = t.id || ''),
                      (s.layer = t.layer || ''),
                      (s.matrix = t.matrix),
                      s.matrix.decompose(s.position, s.quaternion, s.scale),
                      b.centerGeometry && s.geometry)
                    ) {
                      var K = s.geometry.center();
                      K.multiply(s.scale),
                        K.applyQuaternion(s.quaternion),
                        s.position.sub(K);
                    }
                    for (r = 0; r < t.nodes.length; r++)
                      s.add(I(t.nodes[r], t));
                    return s;
                  }
                  function j(t) {
                    for (
                      var e = u.querySelectorAll('library_nodes node'), i = 0;
                      i < e.length;
                      i++
                    ) {
                      var n = e[i].attributes.getNamedItem('id');
                      if (n && n.value === t) return e[i];
                    }
                  }
                  function O(t, e) {
                    for (
                      var i = null, n = 0, r = t.length;
                      n < r && null === i;
                      n++
                    ) {
                      var o = t[n];
                      if (o.time === e) i = o;
                      else if (o.time > e) break;
                    }
                    return i;
                  }
                  function R(t, e) {
                    for (
                      var i = -1, n = 0, r = t.length;
                      n < r && -1 === i;
                      n++
                    ) {
                      t[n].time >= e && (i = n);
                    }
                    return i;
                  }
                  function z(t, e, i, n) {
                    var r = (function(t, e, i) {
                        for (i = i >= 0 ? i : i + t.length; i >= 0; i--) {
                          var n = t[i];
                          if (n.hasTarget(e)) return n;
                        }
                        return null;
                      })(t, n, i ? i - 1 : 0),
                      o = (function(t, e, i) {
                        for (; i < t.length; i++) {
                          var n = t[i];
                          if (n.hasTarget(e)) return n;
                        }
                        return null;
                      })(t, n, i + 1);
                    if (r && o) {
                      var s,
                        a = (e.time - r.time) / (o.time - r.time),
                        c = r.getTarget(n),
                        l = o.getTarget(n).data,
                        u = c.data;
                      if ('matrix' === c.type) s = u;
                      else if (u.length) {
                        s = [];
                        for (var h = 0; h < u.length; ++h)
                          s[h] = u[h] + (l[h] - u[h]) * a;
                      } else s = u + (l - u) * a;
                      e.addTarget(n, c.transform, c.member, s);
                    }
                  }
                  function k() {
                    (this.id = ''), (this.init_from = '');
                  }
                  function B() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.type = ''),
                      (this.skin = null),
                      (this.morph = null);
                  }
                  function P() {
                    (this.method = null),
                      (this.source = null),
                      (this.targets = null),
                      (this.weights = null);
                  }
                  function U() {
                    (this.source = ''),
                      (this.bindShapeMatrix = null),
                      (this.invBindMatrices = []),
                      (this.joints = []),
                      (this.weights = []);
                  }
                  function F() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.nodes = []),
                      (this.scene = new THREE.Group());
                  }
                  function H() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.sid = ''),
                      (this.nodes = []),
                      (this.controllers = []),
                      (this.transforms = []),
                      (this.geometries = []),
                      (this.channels = []),
                      (this.matrix = new THREE.Matrix4());
                  }
                  function V() {
                    (this.sid = ''),
                      (this.type = ''),
                      (this.data = []),
                      (this.obj = null);
                  }
                  function G() {
                    (this.url = ''),
                      (this.skeleton = []),
                      (this.instance_material = []);
                  }
                  function Y() {
                    (this.symbol = ''), (this.target = '');
                  }
                  function Q() {
                    (this.url = ''), (this.instance_material = []);
                  }
                  function W() {
                    (this.id = ''), (this.mesh = null);
                  }
                  function q(t) {
                    (this.geometry = t.id),
                      (this.primitives = []),
                      (this.vertices = null),
                      (this.geometry3js = null);
                  }
                  function X() {
                    (this.material = ''),
                      (this.count = 0),
                      (this.inputs = []),
                      (this.vcount = null),
                      (this.p = []),
                      (this.geometry = new THREE.Geometry());
                  }
                  function K() {
                    X.call(this), (this.vcount = []);
                  }
                  function Z() {
                    X.call(this), (this.vcount = 1);
                  }
                  function J() {
                    X.call(this), (this.vcount = 3);
                  }
                  function $() {
                    (this.source = ''),
                      (this.count = 0),
                      (this.stride = 0),
                      (this.params = []);
                  }
                  function tt() {
                    this.input = {};
                  }
                  function et() {
                    (this.semantic = ''),
                      (this.offset = 0),
                      (this.source = ''),
                      (this.set = 0);
                  }
                  function it(t) {
                    (this.id = t), (this.type = null);
                  }
                  function nt() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.instance_effect = null);
                  }
                  function rt() {
                    (this.color = new THREE.Color()),
                      this.color.setRGB(
                        Math.random(),
                        Math.random(),
                        Math.random()
                      ),
                      (this.color.a = 1),
                      (this.texture = null),
                      (this.texcoord = null),
                      (this.texOpts = null);
                  }
                  function ot(t, e) {
                    (this.type = t), (this.effect = e), (this.material = null);
                  }
                  function st(t) {
                    (this.effect = t),
                      (this.init_from = null),
                      (this.format = null);
                  }
                  function at(t) {
                    (this.effect = t),
                      (this.source = null),
                      (this.wrap_s = null),
                      (this.wrap_t = null),
                      (this.minfilter = null),
                      (this.magfilter = null),
                      (this.mipfilter = null);
                  }
                  function ct() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.shader = null),
                      (this.surface = {}),
                      (this.sampler = {});
                  }
                  function lt() {
                    this.url = '';
                  }
                  function ut() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.source = {}),
                      (this.sampler = []),
                      (this.channel = []);
                  }
                  function ht(t) {
                    (this.animation = t),
                      (this.source = ''),
                      (this.target = ''),
                      (this.fullSid = null),
                      (this.sid = null),
                      (this.dotSyntax = null),
                      (this.arrSyntax = null),
                      (this.arrIndices = null),
                      (this.member = null);
                  }
                  function dt(t) {
                    (this.id = ''),
                      (this.animation = t),
                      (this.inputs = []),
                      (this.input = null),
                      (this.output = null),
                      (this.strideOut = null),
                      (this.interpolation = null),
                      (this.startTime = null),
                      (this.endTime = null),
                      (this.duration = 0);
                  }
                  function pt(t) {
                    (this.targets = []), (this.time = t);
                  }
                  function ft() {
                    (this.id = ''), (this.name = ''), (this.technique = '');
                  }
                  function mt() {
                    this.url = '';
                  }
                  function gt() {
                    (this.id = ''), (this.name = ''), (this.technique = '');
                  }
                  function vt() {
                    this.url = '';
                  }
                  function yt() {
                    (this.id = ''),
                      (this.name = ''),
                      (this.joints = []),
                      (this.links = []);
                  }
                  function wt() {
                    (this.sid = ''),
                      (this.name = ''),
                      (this.axis = new THREE.Vector3()),
                      (this.limits = { min: 0, max: 0 }),
                      (this.type = ''),
                      (this.static = !1),
                      (this.zeroPosition = 0),
                      (this.middlePosition = 0);
                  }
                  function Mt() {
                    (this.sid = ''),
                      (this.name = ''),
                      (this.transforms = []),
                      (this.attachments = []);
                  }
                  function Et() {
                    (this.joint = ''),
                      (this.transforms = []),
                      (this.links = []);
                  }
                  function bt(t) {
                    var e = t.getAttribute('id');
                    return void 0 != p[e]
                      ? p[e]
                      : ((p[e] = new it(e).parse(t)), p[e]);
                  }
                  function xt(t) {
                    for (var e = Lt(t), i = [], n = 0, r = e.length; n < r; n++)
                      i.push('true' === e[n] || '1' === e[n]);
                    return i;
                  }
                  function At(t) {
                    for (var e = Lt(t), i = [], n = 0, r = e.length; n < r; n++)
                      i.push(parseFloat(e[n]));
                    return i;
                  }
                  function Tt(t) {
                    for (var e = Lt(t), i = [], n = 0, r = e.length; n < r; n++)
                      i.push(parseInt(e[n], 10));
                    return i;
                  }
                  function Lt(t) {
                    return t.length > 0
                      ? ((e = t),
                        e.replace(/^\s+/, '').replace(/\s+$/, '')).split(/\s+/)
                      : [];
                    var e;
                  }
                  function Nt(t, e, i) {
                    return t.hasAttribute(e)
                      ? parseInt(t.getAttribute(e), 10)
                      : i;
                  }
                  function Dt(t, e) {
                    new THREE.ImageLoader().load(e, function(e) {
                      (t.image = e), (t.needsUpdate = !0);
                    });
                  }
                  function St(t, e) {
                    t.doubleSided = !1;
                    var i = e.querySelectorAll('extra double_sided')[0];
                    i &&
                      i &&
                      1 === parseInt(i.textContent, 10) &&
                      (t.doubleSided = !0);
                  }
                  function Ct(t, e) {
                    if (!0 === b.convertUpAxis && A !== b.upAxis)
                      switch (T) {
                        case 'XtoY':
                          var i = t[0];
                          (t[0] = e * t[1]), (t[1] = i);
                          break;
                        case 'XtoZ':
                          i = t[2];
                          (t[2] = t[1]), (t[1] = t[0]), (t[0] = i);
                          break;
                        case 'YtoX':
                          i = t[0];
                          (t[0] = t[1]), (t[1] = e * i);
                          break;
                        case 'YtoZ':
                          i = t[1];
                          (t[1] = e * t[2]), (t[2] = i);
                          break;
                        case 'ZtoX':
                          i = t[0];
                          (t[0] = t[1]), (t[1] = t[2]), (t[2] = i);
                          break;
                        case 'ZtoY':
                          i = t[1];
                          (t[1] = t[2]), (t[2] = e * i);
                      }
                  }
                  function _t(t, e) {
                    var i = [t[e], t[e + 1], t[e + 2]];
                    return Ct(i, -1), new THREE.Vector3(i[0], i[1], i[2]);
                  }
                  function It(t) {
                    if (b.convertUpAxis) {
                      var e = [t[0], t[4], t[8]];
                      Ct(e, -1),
                        (t[0] = e[0]),
                        (t[4] = e[1]),
                        (t[8] = e[2]),
                        Ct((e = [t[1], t[5], t[9]]), -1),
                        (t[1] = e[0]),
                        (t[5] = e[1]),
                        (t[9] = e[2]),
                        Ct((e = [t[2], t[6], t[10]]), -1),
                        (t[2] = e[0]),
                        (t[6] = e[1]),
                        (t[10] = e[2]),
                        Ct((e = [t[0], t[1], t[2]]), -1),
                        (t[0] = e[0]),
                        (t[1] = e[1]),
                        (t[2] = e[2]),
                        Ct((e = [t[4], t[5], t[6]]), -1),
                        (t[4] = e[0]),
                        (t[5] = e[1]),
                        (t[6] = e[2]),
                        Ct((e = [t[8], t[9], t[10]]), -1),
                        (t[8] = e[0]),
                        (t[9] = e[1]),
                        (t[10] = e[2]),
                        Ct((e = [t[3], t[7], t[11]]), -1),
                        (t[3] = e[0]),
                        (t[7] = e[1]),
                        (t[11] = e[2]);
                    }
                    return new THREE.Matrix4().set(
                      t[0],
                      t[1],
                      t[2],
                      t[3],
                      t[4],
                      t[5],
                      t[6],
                      t[7],
                      t[8],
                      t[9],
                      t[10],
                      t[11],
                      t[12],
                      t[13],
                      t[14],
                      t[15]
                    );
                  }
                  function jt(t) {
                    if (t > -1 && t < 3) {
                      t = { X: 0, Y: 1, Z: 2 }[(t = Ot(['X', 'Y', 'Z'][t]))];
                    }
                    return t;
                  }
                  function Ot(t) {
                    if (b.convertUpAxis)
                      switch (t) {
                        case 'X':
                          switch (T) {
                            case 'XtoY':
                            case 'XtoZ':
                            case 'YtoX':
                              t = 'Y';
                              break;
                            case 'ZtoX':
                              t = 'Z';
                          }
                          break;
                        case 'Y':
                          switch (T) {
                            case 'XtoY':
                            case 'YtoX':
                            case 'ZtoX':
                              t = 'X';
                              break;
                            case 'XtoZ':
                            case 'YtoZ':
                            case 'ZtoY':
                              t = 'Z';
                          }
                          break;
                        case 'Z':
                          switch (T) {
                            case 'XtoZ':
                              t = 'X';
                              break;
                            case 'YtoZ':
                            case 'ZtoX':
                            case 'ZtoY':
                              t = 'Y';
                          }
                      }
                    return t;
                  }
                  return (
                    (k.prototype.parse = function(t) {
                      this.id = t.getAttribute('id');
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        'init_from' === i.nodeName &&
                          (this.init_from = i.textContent);
                      }
                      return this;
                    }),
                    (B.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name')),
                        (this.type = 'none');
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'skin':
                            (this.skin = new U().parse(i)),
                              (this.type = i.nodeName);
                            break;
                          case 'morph':
                            (this.morph = new P().parse(i)),
                              (this.type = i.nodeName);
                        }
                      }
                      return this;
                    }),
                    (P.prototype.parse = function(t) {
                      var e,
                        i = {},
                        n = [];
                      for (
                        this.method = t.getAttribute('method'),
                          this.source = t
                            .getAttribute('source')
                            .replace(/^#/, ''),
                          e = 0;
                        e < t.childNodes.length;
                        e++
                      ) {
                        var r = t.childNodes[e];
                        if (1 == r.nodeType)
                          switch (r.nodeName) {
                            case 'source':
                              i[(s = new it().parse(r)).id] = s;
                              break;
                            case 'targets':
                              n = this.parseInputs(r);
                              break;
                            default:
                              console.log(r.nodeName);
                          }
                      }
                      for (e = 0; e < n.length; e++) {
                        var o = n[e],
                          s = i[o.source];
                        switch (o.semantic) {
                          case 'MORPH_TARGET':
                            this.targets = s.read();
                            break;
                          case 'MORPH_WEIGHT':
                            this.weights = s.read();
                        }
                      }
                      return this;
                    }),
                    (P.prototype.parseInputs = function(t) {
                      for (var e = [], i = 0; i < t.childNodes.length; i++) {
                        var n = t.childNodes[i];
                        if (1 == n.nodeType)
                          switch (n.nodeName) {
                            case 'input':
                              e.push(new et().parse(n));
                          }
                      }
                      return e;
                    }),
                    (U.prototype.parse = function(t) {
                      var e,
                        i,
                        n = {};
                      (this.source = t
                        .getAttribute('source')
                        .replace(/^#/, '')),
                        (this.invBindMatrices = []),
                        (this.joints = []),
                        (this.weights = []);
                      for (var r = 0; r < t.childNodes.length; r++) {
                        var o = t.childNodes[r];
                        if (1 == o.nodeType)
                          switch (o.nodeName) {
                            case 'bind_shape_matrix':
                              var s = At(o.textContent);
                              this.bindShapeMatrix = It(s);
                              break;
                            case 'source':
                              var a = new it().parse(o);
                              n[a.id] = a;
                              break;
                            case 'joints':
                              e = o;
                              break;
                            case 'vertex_weights':
                              i = o;
                              break;
                            default:
                              console.log(o.nodeName);
                          }
                      }
                      return (
                        this.parseJoints(e, n), this.parseWeights(i, n), this
                      );
                    }),
                    (U.prototype.parseJoints = function(t, e) {
                      for (var i = 0; i < t.childNodes.length; i++) {
                        var n = t.childNodes[i];
                        if (1 == n.nodeType)
                          switch (n.nodeName) {
                            case 'input':
                              var r = new et().parse(n),
                                o = e[r.source];
                              'JOINT' === r.semantic
                                ? (this.joints = o.read())
                                : 'INV_BIND_MATRIX' === r.semantic &&
                                  (this.invBindMatrices = o.read());
                          }
                      }
                    }),
                    (U.prototype.parseWeights = function(t, e) {
                      for (
                        var i, n, r = [], o = 0;
                        o < t.childNodes.length;
                        o++
                      ) {
                        var s = t.childNodes[o];
                        if (1 == s.nodeType)
                          switch (s.nodeName) {
                            case 'input':
                              r.push(new et().parse(s));
                              break;
                            case 'v':
                              i = Tt(s.textContent);
                              break;
                            case 'vcount':
                              n = Tt(s.textContent);
                          }
                      }
                      var a = 0;
                      for (o = 0; o < n.length; o++) {
                        for (var c = n[o], l = [], u = 0; u < c; u++) {
                          for (var h = {}, d = 0; d < r.length; d++) {
                            var p = r[d],
                              f = i[a + p.offset];
                            switch (p.semantic) {
                              case 'JOINT':
                                h.joint = f;
                                break;
                              case 'WEIGHT':
                                h.weight = e[p.source].data[f];
                            }
                          }
                          l.push(h), (a += r.length);
                        }
                        for (u = 0; u < l.length; u++) l[u].index = o;
                        this.weights.push(l);
                      }
                    }),
                    (F.prototype.getChildById = function(t, e) {
                      for (var i = 0; i < this.nodes.length; i++) {
                        var n = this.nodes[i].getChildById(t, e);
                        if (n) return n;
                      }
                      return null;
                    }),
                    (F.prototype.getChildBySid = function(t, e) {
                      for (var i = 0; i < this.nodes.length; i++) {
                        var n = this.nodes[i].getChildBySid(t, e);
                        if (n) return n;
                      }
                      return null;
                    }),
                    (F.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name')),
                        (this.nodes = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'node':
                              this.nodes.push(new H().parse(i));
                          }
                      }
                      return this;
                    }),
                    (H.prototype.getChannelForTransform = function(t) {
                      for (var e = 0; e < this.channels.length; e++) {
                        var i,
                          n = this.channels[e],
                          r = n.target.split('/'),
                          o = (r.shift(), r.shift()),
                          s = o.indexOf('.') >= 0,
                          a = o.indexOf('(') >= 0;
                        if (s) o = (r = o.split('.')).shift();
                        else if (a) {
                          o = (i = o.split('(')).shift();
                          for (var c = 0; c < i.length; c++)
                            i[c] = parseInt(i[c].replace(/\)/, ''));
                        }
                        if (o === t)
                          return (
                            (n.info = {
                              sid: o,
                              dotSyntax: s,
                              arrSyntax: a,
                              arrIndices: i
                            }),
                            n
                          );
                      }
                      return null;
                    }),
                    (H.prototype.getChildById = function(t, e) {
                      if (this.id === t) return this;
                      if (e)
                        for (var i = 0; i < this.nodes.length; i++) {
                          var n = this.nodes[i].getChildById(t, e);
                          if (n) return n;
                        }
                      return null;
                    }),
                    (H.prototype.getChildBySid = function(t, e) {
                      if (this.sid === t) return this;
                      if (e)
                        for (var i = 0; i < this.nodes.length; i++) {
                          var n = this.nodes[i].getChildBySid(t, e);
                          if (n) return n;
                        }
                      return null;
                    }),
                    (H.prototype.getTransformBySid = function(t) {
                      for (var e = 0; e < this.transforms.length; e++)
                        if (this.transforms[e].sid === t)
                          return this.transforms[e];
                      return null;
                    }),
                    (H.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.sid = t.getAttribute('sid')),
                        (this.name = t.getAttribute('name')),
                        (this.type = t.getAttribute('type')),
                        (this.layer = t.getAttribute('layer')),
                        (this.type =
                          'JOINT' === this.type ? this.type : 'NODE'),
                        (this.nodes = []),
                        (this.transforms = []),
                        (this.geometries = []),
                        (this.cameras = []),
                        (this.lights = []),
                        (this.controllers = []),
                        (this.matrix = new THREE.Matrix4());
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'node':
                              this.nodes.push(new H().parse(i));
                              break;
                            case 'instance_camera':
                              this.cameras.push(new mt().parse(i));
                              break;
                            case 'instance_controller':
                              this.controllers.push(new G().parse(i));
                              break;
                            case 'instance_geometry':
                              this.geometries.push(new Q().parse(i));
                              break;
                            case 'instance_light':
                              this.lights.push(new vt().parse(i));
                              break;
                            case 'instance_node':
                              var n = j(
                                i.getAttribute('url').replace(/^#/, '')
                              );
                              n && this.nodes.push(new H().parse(n));
                              break;
                            case 'rotate':
                            case 'translate':
                            case 'scale':
                            case 'matrix':
                            case 'lookat':
                            case 'skew':
                              this.transforms.push(new V().parse(i));
                              break;
                            case 'extra':
                              break;
                            default:
                              console.log(i.nodeName);
                          }
                      }
                      return (
                        (this.channels = (function(t) {
                          var e = [],
                            i = 1e6,
                            n = -1e6;
                          for (var r in m)
                            for (
                              var o = m[r], s = 0;
                              s < o.channel.length;
                              s++
                            ) {
                              var a = o.channel[s],
                                c = o.sampler[s];
                              (r = a.target.split('/')[0]) == t.id &&
                                (c.create(),
                                (a.sampler = c),
                                (i = Math.min(i, c.startTime)),
                                (n = Math.max(n, c.endTime)),
                                e.push(a));
                            }
                          return (
                            e.length && ((t.startTime = i), (t.endTime = n)), e
                          );
                        })(this)),
                        (function(t) {
                          if (t.channels && t.channels.length) {
                            for (
                              var e = [], i = [], n = 0, r = t.channels.length;
                              n < r;
                              n++
                            ) {
                              var o,
                                s = t.channels[n],
                                a = s.fullSid,
                                c = s.sampler,
                                l = c.input,
                                u = t.getTransformBySid(s.sid);
                              if (s.arrIndices) {
                                o = [];
                                for (
                                  var h = 0, d = s.arrIndices.length;
                                  h < d;
                                  h++
                                )
                                  o[h] = jt(s.arrIndices[h]);
                              } else o = Ot(s.member);
                              if (u)
                                for (
                                  -1 === i.indexOf(a) && i.push(a),
                                    h = 0,
                                    d = l.length;
                                  h < d;
                                  h++
                                ) {
                                  var p = l[h],
                                    f = c.getData(u.type, h, o);
                                  if (!(v = O(e, p))) {
                                    v = new pt(p);
                                    var m = R(e, p);
                                    e.splice(-1 === m ? e.length : m, 0, v);
                                  }
                                  v.addTarget(a, u, o, f);
                                }
                              else
                                console.log(
                                  'Could not find transform "' +
                                    s.sid +
                                    '" in node ' +
                                    t.id
                                );
                            }
                            for (n = 0; n < i.length; n++) {
                              var g = i[n];
                              for (h = 0; h < e.length; h++) {
                                var v;
                                (v = e[h]).hasTarget(g) || z(e, v, h, g);
                              }
                            }
                            (t.keys = e), (t.sids = i);
                          }
                        })(this),
                        this.updateMatrix(),
                        this
                      );
                    }),
                    (H.prototype.updateMatrix = function() {
                      this.matrix.identity();
                      for (var t = 0; t < this.transforms.length; t++)
                        this.transforms[t].apply(this.matrix);
                    }),
                    (V.prototype.parse = function(t) {
                      return (
                        (this.sid = t.getAttribute('sid')),
                        (this.type = t.nodeName),
                        (this.data = At(t.textContent)),
                        this.convert(),
                        this
                      );
                    }),
                    (V.prototype.convert = function() {
                      switch (this.type) {
                        case 'matrix':
                          this.obj = It(this.data);
                          break;
                        case 'rotate':
                          this.angle = THREE.Math.degToRad(this.data[3]);
                        case 'translate':
                          Ct(this.data, -1),
                            (this.obj = new THREE.Vector3(
                              this.data[0],
                              this.data[1],
                              this.data[2]
                            ));
                          break;
                        case 'scale':
                          Ct(this.data, 1),
                            (this.obj = new THREE.Vector3(
                              this.data[0],
                              this.data[1],
                              this.data[2]
                            ));
                          break;
                        default:
                          console.log(
                            'Can not convert Transform of type ' + this.type
                          );
                      }
                    }),
                    (V.prototype.apply = ((l = new THREE.Matrix4()),
                    function(t) {
                      switch (this.type) {
                        case 'matrix':
                          t.multiply(this.obj);
                          break;
                        case 'translate':
                          t.multiply(
                            l.makeTranslation(
                              this.obj.x,
                              this.obj.y,
                              this.obj.z
                            )
                          );
                          break;
                        case 'rotate':
                          t.multiply(l.makeRotationAxis(this.obj, this.angle));
                          break;
                        case 'scale':
                          t.scale(this.obj);
                      }
                    })),
                    (V.prototype.update = function(t, e) {
                      var i = ['X', 'Y', 'Z', 'ANGLE'];
                      switch (this.type) {
                        case 'matrix':
                          if (e)
                            if (1 === e.length)
                              switch (e[0]) {
                                case 0:
                                  (this.obj.n11 = t[0]),
                                    (this.obj.n21 = t[1]),
                                    (this.obj.n31 = t[2]),
                                    (this.obj.n41 = t[3]);
                                  break;
                                case 1:
                                  (this.obj.n12 = t[0]),
                                    (this.obj.n22 = t[1]),
                                    (this.obj.n32 = t[2]),
                                    (this.obj.n42 = t[3]);
                                  break;
                                case 2:
                                  (this.obj.n13 = t[0]),
                                    (this.obj.n23 = t[1]),
                                    (this.obj.n33 = t[2]),
                                    (this.obj.n43 = t[3]);
                                  break;
                                case 3:
                                  (this.obj.n14 = t[0]),
                                    (this.obj.n24 = t[1]),
                                    (this.obj.n34 = t[2]),
                                    (this.obj.n44 = t[3]);
                              }
                            else if (2 === e.length) {
                              var n = 'n' + (e[0] + 1) + (e[1] + 1);
                              this.obj[n] = t;
                            } else
                              console.log(
                                'Incorrect addressing of matrix in transform.'
                              );
                          else this.obj.copy(t);
                          break;
                        case 'translate':
                        case 'scale':
                          switch (('[object Array]' ===
                            Object.prototype.toString.call(e) && (e = i[e[0]]),
                          e)) {
                            case 'X':
                              this.obj.x = t;
                              break;
                            case 'Y':
                              this.obj.y = t;
                              break;
                            case 'Z':
                              this.obj.z = t;
                              break;
                            default:
                              (this.obj.x = t[0]),
                                (this.obj.y = t[1]),
                                (this.obj.z = t[2]);
                          }
                          break;
                        case 'rotate':
                          switch (('[object Array]' ===
                            Object.prototype.toString.call(e) && (e = i[e[0]]),
                          e)) {
                            case 'X':
                              this.obj.x = t;
                              break;
                            case 'Y':
                              this.obj.y = t;
                              break;
                            case 'Z':
                              this.obj.z = t;
                              break;
                            case 'ANGLE':
                              this.angle = THREE.Math.degToRad(t);
                              break;
                            default:
                              (this.obj.x = t[0]),
                                (this.obj.y = t[1]),
                                (this.obj.z = t[2]),
                                (this.angle = THREE.Math.degToRad(t[3]));
                          }
                      }
                    }),
                    (G.prototype.parse = function(t) {
                      (this.url = t.getAttribute('url').replace(/^#/, '')),
                        (this.skeleton = []),
                        (this.instance_material = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 === i.nodeType)
                          switch (i.nodeName) {
                            case 'skeleton':
                              this.skeleton.push(
                                i.textContent.replace(/^#/, '')
                              );
                              break;
                            case 'bind_material':
                              for (
                                var n = i.querySelectorAll('instance_material'),
                                  r = 0;
                                r < n.length;
                                r++
                              ) {
                                var o = n[r];
                                this.instance_material.push(new Y().parse(o));
                              }
                          }
                      }
                      return this;
                    }),
                    (Y.prototype.parse = function(t) {
                      return (
                        (this.symbol = t.getAttribute('symbol')),
                        (this.target = t
                          .getAttribute('target')
                          .replace(/^#/, '')),
                        this
                      );
                    }),
                    (Q.prototype.parse = function(t) {
                      (this.url = t.getAttribute('url').replace(/^#/, '')),
                        (this.instance_material = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType && 'bind_material' === i.nodeName) {
                          for (
                            var n = i.querySelectorAll('instance_material'),
                              r = 0;
                            r < n.length;
                            r++
                          ) {
                            var o = n[r];
                            this.instance_material.push(new Y().parse(o));
                          }
                          break;
                        }
                      }
                      return this;
                    }),
                    (W.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')), St(this, t);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'mesh':
                            this.mesh = new q(this).parse(i);
                        }
                      }
                      return this;
                    }),
                    (q.prototype.parse = function(t) {
                      this.primitives = [];
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'source':
                            bt(i);
                            break;
                          case 'vertices':
                            this.vertices = new tt().parse(i);
                            break;
                          case 'linestrips':
                            this.primitives.push(new Z().parse(i));
                            break;
                          case 'triangles':
                            this.primitives.push(new J().parse(i));
                            break;
                          case 'polygons':
                            this.primitives.push(new X().parse(i));
                            break;
                          case 'polylist':
                            this.primitives.push(new K().parse(i));
                        }
                      }
                      if (
                        ((this.geometry3js = new THREE.Geometry()),
                        null === this.vertices)
                      )
                        return this;
                      var n = p[this.vertices.input.POSITION.source].data;
                      for (e = 0; e < n.length; e += 3)
                        this.geometry3js.vertices.push(_t(n, e).clone());
                      for (e = 0; e < this.primitives.length; e++) {
                        var r = this.primitives[e];
                        r.setVertices(this.vertices),
                          this.handlePrimitive(r, this.geometry3js);
                      }
                      return (
                        this.geometry3js.calcNormals &&
                          (this.geometry3js.computeVertexNormals(),
                          delete this.geometry3js.calcNormals),
                        this
                      );
                    }),
                    (q.prototype.handlePrimitive = function(t, e) {
                      if (t instanceof Z) e.isLineStrip = !0;
                      else {
                        var i,
                          n,
                          r,
                          o,
                          s,
                          a,
                          c,
                          l,
                          u = t.p,
                          h = t.inputs,
                          d = 0,
                          f = 0,
                          m = [];
                        for (i = 0; i < h.length; i++) {
                          var g = (r = h[i]).offset + 1;
                          switch (((f = f < g ? g : f), r.semantic)) {
                            case 'TEXCOORD':
                              m.push(r.set);
                          }
                        }
                        for (var v = 0; v < u.length; ++v)
                          for (var y = u[v], w = 0; w < y.length; ) {
                            var M = [],
                              E = [],
                              x = null,
                              A = [];
                            for (
                              l = t.vcount
                                ? t.vcount.length ? t.vcount[d++] : t.vcount
                                : y.length / f,
                                i = 0;
                              i < l;
                              i++
                            )
                              for (n = 0; n < h.length; n++)
                                switch (((r = h[n]),
                                (a = p[r.source]),
                                (s =
                                  (o = y[w + i * f + r.offset]) *
                                  (c = a.accessor.params.length)),
                                r.semantic)) {
                                  case 'VERTEX':
                                    M.push(o);
                                    break;
                                  case 'NORMAL':
                                    E.push(_t(a.data, s));
                                    break;
                                  case 'TEXCOORD':
                                    void 0 === (x = x || {})[r.set] &&
                                      (x[r.set] = []),
                                      x[r.set].push(
                                        new THREE.Vector2(
                                          a.data[s],
                                          a.data[s + 1]
                                        )
                                      );
                                    break;
                                  case 'COLOR':
                                    A.push(
                                      new THREE.Color().setRGB(
                                        a.data[s],
                                        a.data[s + 1],
                                        a.data[s + 2]
                                      )
                                    );
                                }
                            if (0 === E.length)
                              if ((r = this.vertices.input.NORMAL)) {
                                c = (a = p[r.source]).accessor.params.length;
                                for (var T = 0, L = M.length; T < L; T++)
                                  E.push(_t(a.data, M[T] * c));
                              } else e.calcNormals = !0;
                            if (
                              !x &&
                              ((x = {}), (r = this.vertices.input.TEXCOORD))
                            ) {
                              m.push(r.set),
                                (c = (a = p[r.source]).accessor.params.length);
                              for (T = 0, L = M.length; T < L; T++)
                                (s = M[T] * c),
                                  void 0 === x[r.set] && (x[r.set] = []),
                                  x[r.set].push(
                                    new THREE.Vector2(
                                      a.data[s],
                                      1 - a.data[s + 1]
                                    )
                                  );
                            }
                            if (
                              0 === A.length &&
                              (r = this.vertices.input.COLOR)
                            ) {
                              c = (a = p[r.source]).accessor.params.length;
                              for (T = 0, L = M.length; T < L; T++)
                                (s = M[T] * c),
                                  A.push(
                                    new THREE.Color().setRGB(
                                      a.data[s],
                                      a.data[s + 1],
                                      a.data[s + 2]
                                    )
                                  );
                            }
                            var N,
                              D,
                              S = null,
                              C = [];
                            if (3 === l)
                              C.push(
                                new THREE.Face3(
                                  M[0],
                                  M[1],
                                  M[2],
                                  E,
                                  A.length ? A : new THREE.Color()
                                )
                              );
                            else if (4 === l)
                              C.push(
                                new THREE.Face3(
                                  M[0],
                                  M[1],
                                  M[3],
                                  E.length
                                    ? [E[0].clone(), E[1].clone(), E[3].clone()]
                                    : [],
                                  A.length
                                    ? [A[0], A[1], A[3]]
                                    : new THREE.Color()
                                )
                              ),
                                C.push(
                                  new THREE.Face3(
                                    M[1],
                                    M[2],
                                    M[3],
                                    E.length
                                      ? [
                                          E[1].clone(),
                                          E[2].clone(),
                                          E[3].clone()
                                        ]
                                      : [],
                                    A.length
                                      ? [A[1], A[2], A[3]]
                                      : new THREE.Color()
                                  )
                                );
                            else if (l > 4 && b.subdivideFaces) {
                              var _ = A.length ? A : new THREE.Color();
                              for (n = 1; n < l - 1; )
                                C.push(
                                  new THREE.Face3(
                                    M[0],
                                    M[n],
                                    M[n + 1],
                                    E.length
                                      ? [
                                          E[0].clone(),
                                          E[n++].clone(),
                                          E[n].clone()
                                        ]
                                      : [],
                                    _
                                  )
                                );
                            }
                            if (C.length)
                              for (T = 0, L = C.length; T < L; T++)
                                for (
                                  (S = C[T]).daeMaterial = t.material,
                                    e.faces.push(S),
                                    n = 0;
                                  n < m.length;
                                  n++
                                )
                                  (N = x[m[n]]),
                                    (D =
                                      l > 4
                                        ? [N[0], N[T + 1], N[T + 2]]
                                        : 4 === l
                                          ? 0 === T
                                            ? [N[0], N[1], N[3]]
                                            : [N[1].clone(), N[2], N[3].clone()]
                                          : [N[0], N[1], N[2]]),
                                    void 0 === e.faceVertexUvs[n] &&
                                      (e.faceVertexUvs[n] = []),
                                    e.faceVertexUvs[n].push(D);
                            else
                              console.log(
                                'dropped face with vcount ' +
                                  l +
                                  ' for geometry with id: ' +
                                  e.id
                              );
                            w += f * l;
                          }
                      }
                    }),
                    (X.prototype.setVertices = function(t) {
                      for (var e = 0; e < this.inputs.length; e++)
                        this.inputs[e].source === t.id &&
                          (this.inputs[e].source = t.input.POSITION.source);
                    }),
                    (X.prototype.parse = function(t) {
                      (this.material = t.getAttribute('material')),
                        (this.count = Nt(t, 'count', 0));
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'input':
                            this.inputs.push(new et().parse(t.childNodes[e]));
                            break;
                          case 'vcount':
                            this.vcount = Tt(i.textContent);
                            break;
                          case 'p':
                            this.p.push(Tt(i.textContent));
                            break;
                          case 'ph':
                            console.warn('polygon holes not yet supported!');
                        }
                      }
                      return this;
                    }),
                    (K.prototype = Object.create(X.prototype)),
                    (K.prototype.constructor = K),
                    (Z.prototype = Object.create(X.prototype)),
                    (Z.prototype.constructor = Z),
                    (J.prototype = Object.create(X.prototype)),
                    (J.prototype.constructor = J),
                    ($.prototype.parse = function(t) {
                      (this.params = []),
                        (this.source = t.getAttribute('source')),
                        (this.count = Nt(t, 'count', 0)),
                        (this.stride = Nt(t, 'stride', 0));
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if ('param' === i.nodeName) {
                          var n = {};
                          (n.name = i.getAttribute('name')),
                            (n.type = i.getAttribute('type')),
                            this.params.push(n);
                        }
                      }
                      return this;
                    }),
                    (tt.prototype.parse = function(t) {
                      this.id = t.getAttribute('id');
                      for (var e = 0; e < t.childNodes.length; e++)
                        if ('input' === t.childNodes[e].nodeName) {
                          var i = new et().parse(t.childNodes[e]);
                          this.input[i.semantic] = i;
                        }
                      return this;
                    }),
                    (et.prototype.parse = function(t) {
                      return (
                        (this.semantic = t.getAttribute('semantic')),
                        (this.source = t
                          .getAttribute('source')
                          .replace(/^#/, '')),
                        (this.set = Nt(t, 'set', -1)),
                        (this.offset = Nt(t, 'offset', 0)),
                        'TEXCOORD' === this.semantic &&
                          this.set < 0 &&
                          (this.set = 0),
                        this
                      );
                    }),
                    (it.prototype.parse = function(t) {
                      this.id = t.getAttribute('id');
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'bool_array':
                            (this.data = xt(i.textContent)),
                              (this.type = i.nodeName);
                            break;
                          case 'float_array':
                            (this.data = At(i.textContent)),
                              (this.type = i.nodeName);
                            break;
                          case 'int_array':
                            (this.data = Tt(i.textContent)),
                              (this.type = i.nodeName);
                            break;
                          case 'IDREF_array':
                          case 'Name_array':
                            (this.data = Lt(i.textContent)),
                              (this.type = i.nodeName);
                            break;
                          case 'technique_common':
                            for (var n = 0; n < i.childNodes.length; n++)
                              if ('accessor' === i.childNodes[n].nodeName) {
                                this.accessor = new $().parse(i.childNodes[n]);
                                break;
                              }
                        }
                      }
                      return this;
                    }),
                    (it.prototype.read = function() {
                      var t = [],
                        e = this.accessor.params[0];
                      switch (e.type) {
                        case 'IDREF':
                        case 'Name':
                        case 'name':
                        case 'float':
                          return this.data;
                        case 'float4x4':
                          for (var i = 0; i < this.data.length; i += 16) {
                            var n = It(this.data.slice(i, i + 16));
                            t.push(n);
                          }
                          break;
                        default:
                          console.log(
                            'ColladaLoader: Source: Read dont know how to read ' +
                              e.type +
                              '.'
                          );
                      }
                      return t;
                    }),
                    (nt.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name'));
                      for (var e = 0; e < t.childNodes.length; e++)
                        if ('instance_effect' === t.childNodes[e].nodeName) {
                          this.instance_effect = new lt().parse(
                            t.childNodes[e]
                          );
                          break;
                        }
                      return this;
                    }),
                    (rt.prototype.isColor = function() {
                      return null === this.texture;
                    }),
                    (rt.prototype.isTexture = function() {
                      return null != this.texture;
                    }),
                    (rt.prototype.parse = function(t) {
                      'transparent' === t.nodeName &&
                        (this.opaque = t.getAttribute('opaque'));
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'color':
                              var n = At(i.textContent);
                              (this.color = new THREE.Color()),
                                this.color.setRGB(n[0], n[1], n[2]),
                                (this.color.a = n[3]);
                              break;
                            case 'texture':
                              (this.texture = i.getAttribute('texture')),
                                (this.texcoord = i.getAttribute('texcoord')),
                                (this.texOpts = {
                                  offsetU: 0,
                                  offsetV: 0,
                                  repeatU: 1,
                                  repeatV: 1,
                                  wrapU: 1,
                                  wrapV: 1
                                }),
                                this.parseTexture(i);
                          }
                      }
                      return this;
                    }),
                    (rt.prototype.parseTexture = function(t) {
                      if (!t.childNodes) return this;
                      t.childNodes[1] &&
                        'extra' === t.childNodes[1].nodeName &&
                        (t = t.childNodes[1]).childNodes[1] &&
                        'technique' === t.childNodes[1].nodeName &&
                        (t = t.childNodes[1]);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'offsetU':
                          case 'offsetV':
                          case 'repeatU':
                          case 'repeatV':
                            this.texOpts[i.nodeName] = parseFloat(
                              i.textContent
                            );
                            break;
                          case 'wrapU':
                          case 'wrapV':
                            'TRUE' === i.textContent.toUpperCase()
                              ? (this.texOpts[i.nodeName] = 1)
                              : (this.texOpts[i.nodeName] = parseInt(
                                  i.textContent
                                ));
                            break;
                          default:
                            this.texOpts[i.nodeName] = i.textContent;
                        }
                      }
                      return this;
                    }),
                    (ot.prototype.parse = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'emission':
                            case 'diffuse':
                            case 'specular':
                            case 'transparent':
                              this[i.nodeName] = new rt().parse(i);
                              break;
                            case 'bump':
                              var n = i.getAttribute('bumptype');
                              n
                                ? 'heightfield' === n.toLowerCase()
                                  ? (this.bump = new rt().parse(i))
                                  : 'normalmap' === n.toLowerCase()
                                    ? (this.normal = new rt().parse(i))
                                    : (console.error(
                                        "Shader.prototype.parse: Invalid value for attribute 'bumptype' (" +
                                          n +
                                          ") - valid bumptypes are 'HEIGHTFIELD' and 'NORMALMAP' - defaulting to 'HEIGHTFIELD'"
                                      ),
                                      (this.bump = new rt().parse(i)))
                                : (console.warn(
                                    "Shader.prototype.parse: Attribute 'bumptype' missing from bump node - defaulting to 'HEIGHTFIELD'"
                                  ),
                                  (this.bump = new rt().parse(i)));
                              break;
                            case 'shininess':
                            case 'reflectivity':
                            case 'index_of_refraction':
                            case 'transparency':
                              var r = i.querySelectorAll('float');
                              r.length > 0 &&
                                (this[i.nodeName] = parseFloat(
                                  r[0].textContent
                                ));
                          }
                      }
                      return this.create(), this;
                    }),
                    (ot.prototype.create = function() {
                      var t = {},
                        e = !1;
                      if (
                        void 0 !== this.transparency &&
                        void 0 !== this.transparent
                      ) {
                        this.transparent;
                        var i =
                          (this.transparent.color.r +
                            this.transparent.color.g +
                            this.transparent.color.b) /
                          3 *
                          this.transparency;
                        i > 0 &&
                          ((e = !0), (t.transparent = !0), (t.opacity = 1 - i));
                      }
                      var n = {
                        diffuse: 'map',
                        ambient: 'lightMap',
                        specular: 'specularMap',
                        emission: 'emissionMap',
                        bump: 'bumpMap',
                        normal: 'normalMap'
                      };
                      for (var r in this)
                        switch (r) {
                          case 'ambient':
                          case 'emission':
                          case 'diffuse':
                          case 'specular':
                          case 'bump':
                          case 'normal':
                            var o = this[r];
                            if (o instanceof rt)
                              if (o.isTexture()) {
                                var a = o.texture,
                                  c = this.effect.sampler[a];
                                if (void 0 !== c && void 0 !== c.source) {
                                  var l = this.effect.surface[c.source];
                                  if (void 0 !== l) {
                                    var u = f[l.init_from];
                                    if (u) {
                                      var h,
                                        d = s + u.init_from,
                                        p = THREE.Loader.Handlers.get(d);
                                      null !== p
                                        ? (h = p.load(d))
                                        : Dt((h = new THREE.Texture()), d),
                                        'MIRROR' === c.wrap_s
                                          ? (h.wrapS =
                                              THREE.MirroredRepeatWrapping)
                                          : 'WRAP' === c.wrap_s ||
                                            o.texOpts.wrapU
                                            ? (h.wrapS = THREE.RepeatWrapping)
                                            : (h.wrapS =
                                                THREE.ClampToEdgeWrapping),
                                        'MIRROR' === c.wrap_t
                                          ? (h.wrapT =
                                              THREE.MirroredRepeatWrapping)
                                          : 'WRAP' === c.wrap_t ||
                                            o.texOpts.wrapV
                                            ? (h.wrapT = THREE.RepeatWrapping)
                                            : (h.wrapT =
                                                THREE.ClampToEdgeWrapping),
                                        (h.offset.x = o.texOpts.offsetU),
                                        (h.offset.y = o.texOpts.offsetV),
                                        (h.repeat.x = o.texOpts.repeatU),
                                        (h.repeat.y = o.texOpts.repeatV),
                                        (t[n[r]] = h),
                                        'emission' === r &&
                                          (t.emissive = 16777215);
                                    }
                                  }
                                }
                              } else
                                ('diffuse' !== r && e) ||
                                  ('emission' === r
                                    ? (t.emissive = o.color.getHex())
                                    : (t[r] = o.color.getHex()));
                            break;
                          case 'shininess':
                            t[r] = this[r];
                            break;
                          case 'reflectivity':
                            (t[r] = this[r]),
                              t[r] > 0 && (t.envMap = b.defaultEnvMap),
                              (t.combine = THREE.MixOperation);
                            break;
                          case 'index_of_refraction':
                            (t.refractionRatio = this[r]),
                              1 !== this[r] && (t.envMap = b.defaultEnvMap);
                        }
                      switch (((t.side = this.effect.doubleSided
                        ? THREE.DoubleSide
                        : THREE.FrontSide),
                      void 0 !== t.diffuse &&
                        ((t.color = t.diffuse), delete t.diffuse),
                      this.type)) {
                        case 'constant':
                          void 0 != t.emissive && (t.color = t.emissive),
                            (this.material = new THREE.MeshBasicMaterial(t));
                          break;
                        case 'phong':
                        case 'blinn':
                          this.material = new THREE.MeshPhongMaterial(t);
                          break;
                        case 'lambert':
                        default:
                          this.material = new THREE.MeshLambertMaterial(t);
                      }
                      return this.material;
                    }),
                    (st.prototype.parse = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'init_from':
                              this.init_from = i.textContent;
                              break;
                            case 'format':
                              this.format = i.textContent;
                              break;
                            default:
                              console.log(
                                'unhandled Surface prop: ' + i.nodeName
                              );
                          }
                      }
                      return this;
                    }),
                    (at.prototype.parse = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'source':
                              this.source = i.textContent;
                              break;
                            case 'minfilter':
                              this.minfilter = i.textContent;
                              break;
                            case 'magfilter':
                              this.magfilter = i.textContent;
                              break;
                            case 'mipfilter':
                              this.mipfilter = i.textContent;
                              break;
                            case 'wrap_s':
                              this.wrap_s = i.textContent;
                              break;
                            case 'wrap_t':
                              this.wrap_t = i.textContent;
                              break;
                            default:
                              console.log(
                                'unhandled Sampler2D prop: ' + i.nodeName
                              );
                          }
                      }
                      return this;
                    }),
                    (ct.prototype.create = function() {
                      if (null === this.shader) return null;
                    }),
                    (ct.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name')),
                        St(this, t),
                        (this.shader = null);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'profile_COMMON':
                              this.parseTechnique(this.parseProfileCOMMON(i));
                          }
                      }
                      return this;
                    }),
                    (ct.prototype.parseNewparam = function(t) {
                      for (
                        var e = t.getAttribute('sid'), i = 0;
                        i < t.childNodes.length;
                        i++
                      ) {
                        var n = t.childNodes[i];
                        if (1 == n.nodeType)
                          switch (n.nodeName) {
                            case 'surface':
                              this.surface[e] = new st(this).parse(n);
                              break;
                            case 'sampler2D':
                              this.sampler[e] = new at(this).parse(n);
                              break;
                            case 'extra':
                              break;
                            default:
                              console.log(n.nodeName);
                          }
                      }
                    }),
                    (ct.prototype.parseProfileCOMMON = function(t) {
                      for (var e, i = 0; i < t.childNodes.length; i++) {
                        var n = t.childNodes[i];
                        if (1 == n.nodeType)
                          switch (n.nodeName) {
                            case 'profile_COMMON':
                              this.parseProfileCOMMON(n);
                              break;
                            case 'technique':
                              e = n;
                              break;
                            case 'newparam':
                              this.parseNewparam(n);
                              break;
                            case 'image':
                              var r = new k().parse(n);
                              f[r.id] = r;
                              break;
                            case 'extra':
                              break;
                            default:
                              console.log(n.nodeName);
                          }
                      }
                      return e;
                    }),
                    (ct.prototype.parseTechnique = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'constant':
                            case 'lambert':
                            case 'blinn':
                            case 'phong':
                              this.shader = new ot(i.nodeName, this).parse(i);
                              break;
                            case 'extra':
                              this.parseExtra(i);
                          }
                      }
                    }),
                    (ct.prototype.parseExtra = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'technique':
                              this.parseExtraTechnique(i);
                          }
                      }
                    }),
                    (ct.prototype.parseExtraTechnique = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'bump':
                              this.shader.parse(t);
                          }
                      }
                    }),
                    (lt.prototype.parse = function(t) {
                      return (
                        (this.url = t.getAttribute('url').replace(/^#/, '')),
                        this
                      );
                    }),
                    (ut.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name')),
                        (this.source = {});
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'animation':
                              var n = new ut().parse(i);
                              for (var r in n.source)
                                this.source[r] = n.source[r];
                              for (var o = 0; o < n.channel.length; o++)
                                this.channel.push(n.channel[o]),
                                  this.sampler.push(n.sampler[o]);
                              break;
                            case 'source':
                              r = new it().parse(i);
                              this.source[r.id] = r;
                              break;
                            case 'sampler':
                              this.sampler.push(new dt(this).parse(i));
                              break;
                            case 'channel':
                              this.channel.push(new ht(this).parse(i));
                          }
                      }
                      return this;
                    }),
                    (ht.prototype.parse = function(t) {
                      (this.source = t
                        .getAttribute('source')
                        .replace(/^#/, '')),
                        (this.target = t.getAttribute('target'));
                      var e = this.target.split('/'),
                        i = (e.shift(), e.shift()),
                        n = i.indexOf('.') >= 0,
                        r = i.indexOf('(') >= 0;
                      if (n)
                        (e = i.split('.')),
                          (this.sid = e.shift()),
                          (this.member = e.shift());
                      else if (r) {
                        var o = i.split('(');
                        this.sid = o.shift();
                        for (var s = 0; s < o.length; s++)
                          o[s] = parseInt(o[s].replace(/\)/, ''));
                        this.arrIndices = o;
                      } else this.sid = i;
                      return (
                        (this.fullSid = i),
                        (this.dotSyntax = n),
                        (this.arrSyntax = r),
                        this
                      );
                    }),
                    (dt.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')), (this.inputs = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'input':
                              this.inputs.push(new et().parse(i));
                          }
                      }
                      return this;
                    }),
                    (dt.prototype.create = function() {
                      for (var t = 0; t < this.inputs.length; t++) {
                        var e = this.inputs[t],
                          i = this.animation.source[e.source];
                        switch (e.semantic) {
                          case 'INPUT':
                            this.input = i.read();
                            break;
                          case 'OUTPUT':
                            (this.output = i.read()),
                              (this.strideOut = i.accessor.stride);
                            break;
                          case 'INTERPOLATION':
                            this.interpolation = i.read();
                            break;
                          case 'IN_TANGENT':
                          case 'OUT_TANGENT':
                            break;
                          default:
                            console.log(e.semantic);
                        }
                      }
                      if (
                        ((this.startTime = 0),
                        (this.endTime = 0),
                        (this.duration = 0),
                        this.input.length)
                      ) {
                        (this.startTime = 1e8), (this.endTime = -1e8);
                        for (t = 0; t < this.input.length; t++)
                          (this.startTime = Math.min(
                            this.startTime,
                            this.input[t]
                          )),
                            (this.endTime = Math.max(
                              this.endTime,
                              this.input[t]
                            ));
                        this.duration = this.endTime - this.startTime;
                      }
                    }),
                    (dt.prototype.getData = function(t, e, i) {
                      var n;
                      if ('matrix' === t && 16 === this.strideOut)
                        n = this.output[e];
                      else if (this.strideOut > 1) {
                        (n = []), (e *= this.strideOut);
                        for (var r = 0; r < this.strideOut; ++r)
                          n[r] = this.output[e + r];
                        if (3 === this.strideOut)
                          switch (t) {
                            case 'rotate':
                            case 'translate':
                              Ct(n, -1);
                              break;
                            case 'scale':
                              Ct(n, 1);
                          }
                        else
                          4 === this.strideOut && 'matrix' === t && Ct(n, -1);
                      } else
                        (n = this.output[e]),
                          i &&
                            'translate' === t &&
                            (n = (function(t, e) {
                              if (!0 !== b.convertUpAxis || A === b.upAxis)
                                return e;
                              switch (t) {
                                case 'X':
                                  e = 'XtoY' === T ? -1 * e : e;
                                  break;
                                case 'Y':
                                  e = 'YtoZ' === T || 'YtoX' === T ? -1 * e : e;
                                  break;
                                case 'Z':
                                  e = 'ZtoY' === T ? -1 * e : e;
                              }
                              return e;
                            })(i, n));
                      return n;
                    }),
                    (pt.prototype.addTarget = function(t, e, i, n) {
                      this.targets.push({
                        sid: t,
                        member: i,
                        transform: e,
                        data: n
                      });
                    }),
                    (pt.prototype.apply = function(t) {
                      for (var e = 0; e < this.targets.length; ++e) {
                        var i = this.targets[e];
                        (t && i.sid !== t) ||
                          i.transform.update(i.data, i.member);
                      }
                    }),
                    (pt.prototype.getTarget = function(t) {
                      for (var e = 0; e < this.targets.length; ++e)
                        if (this.targets[e].sid === t) return this.targets[e];
                      return null;
                    }),
                    (pt.prototype.hasTarget = function(t) {
                      for (var e = 0; e < this.targets.length; ++e)
                        if (this.targets[e].sid === t) return !0;
                      return !1;
                    }),
                    (pt.prototype.interpolate = function(t, e) {
                      for (var i = 0, n = this.targets.length; i < n; i++) {
                        var r,
                          o = this.targets[i],
                          s = t.getTarget(o.sid);
                        if ('matrix' !== o.transform.type && s) {
                          var a = (e - this.time) / (t.time - this.time),
                            c = s.data,
                            l = o.data;
                          if ((a < 0 && (a = 0), a > 1 && (a = 1), l.length)) {
                            r = [];
                            for (var u = 0; u < l.length; ++u)
                              r[u] = l[u] + (c[u] - l[u]) * a;
                          } else r = l + (c - l) * a;
                        } else r = o.data;
                        o.transform.update(r, o.member);
                      }
                    }),
                    (ft.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name'));
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'optics':
                              this.parseOptics(i);
                          }
                      }
                      return this;
                    }),
                    (ft.prototype.parseOptics = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++)
                        if ('technique_common' === t.childNodes[e].nodeName)
                          for (
                            var i = t.childNodes[e], n = 0;
                            n < i.childNodes.length;
                            n++
                          )
                            if (
                              ((this.technique = i.childNodes[n].nodeName),
                              'perspective' === this.technique)
                            )
                              for (
                                var r = i.childNodes[n], o = 0;
                                o < r.childNodes.length;
                                o++
                              ) {
                                switch ((a = r.childNodes[o]).nodeName) {
                                  case 'yfov':
                                    this.yfov = a.textContent;
                                    break;
                                  case 'xfov':
                                    this.xfov = a.textContent;
                                    break;
                                  case 'znear':
                                    this.znear = a.textContent;
                                    break;
                                  case 'zfar':
                                    this.zfar = a.textContent;
                                    break;
                                  case 'aspect_ratio':
                                    this.aspect_ratio = a.textContent;
                                }
                              }
                            else if ('orthographic' === this.technique) {
                              var s = i.childNodes[n];
                              for (o = 0; o < s.childNodes.length; o++) {
                                var a;
                                switch ((a = s.childNodes[o]).nodeName) {
                                  case 'xmag':
                                    this.xmag = a.textContent;
                                    break;
                                  case 'ymag':
                                    this.ymag = a.textContent;
                                    break;
                                  case 'znear':
                                    this.znear = a.textContent;
                                    break;
                                  case 'zfar':
                                    this.zfar = a.textContent;
                                    break;
                                  case 'aspect_ratio':
                                    this.aspect_ratio = a.textContent;
                                }
                              }
                            }
                      return this;
                    }),
                    (mt.prototype.parse = function(t) {
                      return (
                        (this.url = t.getAttribute('url').replace(/^#/, '')),
                        this
                      );
                    }),
                    (gt.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name'));
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'technique_common':
                              this.parseCommon(i);
                              break;
                            case 'technique':
                              this.parseTechnique(i);
                          }
                      }
                      return this;
                    }),
                    (gt.prototype.parseCommon = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++)
                        switch (t.childNodes[e].nodeName) {
                          case 'directional':
                          case 'point':
                          case 'spot':
                          case 'ambient':
                            this.technique = t.childNodes[e].nodeName;
                            for (
                              var i = t.childNodes[e], n = 0;
                              n < i.childNodes.length;
                              n++
                            ) {
                              var r = i.childNodes[n];
                              switch (r.nodeName) {
                                case 'color':
                                  var o = At(r.textContent);
                                  (this.color = new THREE.Color(0)),
                                    this.color.setRGB(o[0], o[1], o[2]),
                                    (this.color.a = o[3]);
                                  break;
                                case 'falloff_angle':
                                  this.falloff_angle = parseFloat(
                                    r.textContent
                                  );
                                  break;
                                case 'quadratic_attenuation':
                                  var s = parseFloat(r.textContent);
                                  this.distance = s ? Math.sqrt(1 / s) : 0;
                              }
                            }
                        }
                      return this;
                    }),
                    (gt.prototype.parseTechnique = function(t) {
                      this.profile = t.getAttribute('profile');
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        switch (i.nodeName) {
                          case 'intensity':
                            this.intensity = parseFloat(i.textContent);
                        }
                      }
                      return this;
                    }),
                    (vt.prototype.parse = function(t) {
                      return (
                        (this.url = t.getAttribute('url').replace(/^#/, '')),
                        this
                      );
                    }),
                    (yt.prototype.parse = function(t) {
                      (this.id = t.getAttribute('id')),
                        (this.name = t.getAttribute('name')),
                        (this.joints = []),
                        (this.links = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'technique_common':
                              this.parseCommon(i);
                          }
                      }
                      return this;
                    }),
                    (yt.prototype.parseCommon = function(t) {
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (t.childNodes[e].nodeName) {
                            case 'joint':
                              this.joints.push(new wt().parse(i));
                              break;
                            case 'link':
                              this.links.push(new Mt().parse(i));
                          }
                      }
                      return this;
                    }),
                    (wt.prototype.parse = function(t) {
                      (this.sid = t.getAttribute('sid')),
                        (this.name = t.getAttribute('name')),
                        (this.axis = new THREE.Vector3()),
                        (this.limits = { min: 0, max: 0 }),
                        (this.type = ''),
                        (this.static = !1),
                        (this.zeroPosition = 0),
                        (this.middlePosition = 0);
                      var e = At(t.querySelector('axis').textContent);
                      this.axis = _t(e, 0);
                      var i = t.querySelector('limits min')
                          ? parseFloat(
                              t.querySelector('limits min').textContent
                            )
                          : -360,
                        n = t.querySelector('limits max')
                          ? parseFloat(
                              t.querySelector('limits max').textContent
                            )
                          : 360;
                      this.limits = { min: i, max: n };
                      for (
                        var r = ['prismatic', 'revolute'], o = 0;
                        o < r.length;
                        o++
                      ) {
                        var s = r[o];
                        t.querySelector(s) && (this.type = s);
                      }
                      return (
                        this.limits.min >= this.limits.max &&
                          (this.static = !0),
                        (this.middlePosition =
                          (this.limits.min + this.limits.max) / 2),
                        this
                      );
                    }),
                    (Mt.prototype.parse = function(t) {
                      (this.sid = t.getAttribute('sid')),
                        (this.name = t.getAttribute('name')),
                        (this.transforms = []),
                        (this.attachments = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'attachment_full':
                              this.attachments.push(new Et().parse(i));
                              break;
                            case 'rotate':
                            case 'translate':
                            case 'matrix':
                              this.transforms.push(new V().parse(i));
                          }
                      }
                      return this;
                    }),
                    (Et.prototype.parse = function(t) {
                      (this.joint = t
                        .getAttribute('joint')
                        .split('/')
                        .pop()),
                        (this.links = []);
                      for (var e = 0; e < t.childNodes.length; e++) {
                        var i = t.childNodes[e];
                        if (1 == i.nodeType)
                          switch (i.nodeName) {
                            case 'link':
                              this.links.push(new Mt().parse(i));
                              break;
                            case 'rotate':
                            case 'translate':
                            case 'matrix':
                              this.transforms.push(new V().parse(i));
                          }
                      }
                      return this;
                    }),
                    {
                      load: function(t, e, i, n) {
                        var r = 0;
                        if (
                          document.implementation &&
                          document.implementation.createDocument
                        ) {
                          var o = new XMLHttpRequest();
                          (o.onreadystatechange = function() {
                            4 === o.readyState
                              ? 0 === o.status || 200 === o.status
                                ? o.response
                                  ? ((d = e), L(o.response, void 0, t))
                                  : n
                                    ? n({ type: 'error', url: t })
                                    : console.error(
                                        'ColladaLoader: Empty or non-existing file (' +
                                          t +
                                          ')'
                                      )
                                : n
                                  ? n({ type: 'error', url: t })
                                  : console.error(
                                      'ColladaLoader: Couldn\'t load "' +
                                        t +
                                        '" (' +
                                        o.status +
                                        ')'
                                    )
                              : 3 === o.readyState &&
                                i &&
                                (0 === r &&
                                  (r = o.getResponseHeader('Content-Length')),
                                i({ total: r, loaded: o.responseText.length }));
                          }),
                            o.open('GET', t, !0),
                            o.send(null);
                        } else alert("Don't know how to parse XML!");
                      },
                      parse: L,
                      applySkin: _,
                      geometries: v,
                      options: b
                    }
                  );
                };
              },
              {}
            ],
            43: [
              function(t, e, i) {
                THREE.GLTFLoader = (function() {
                  function t(t) {
                    this.manager =
                      void 0 !== t ? t : THREE.DefaultLoadingManager;
                  }
                  t.prototype = {
                    constructor: t,
                    crossOrigin: 'Anonymous',
                    load: function(t, e, i, n) {
                      var r = this,
                        o =
                          this.path && 'string' == typeof this.path
                            ? this.path
                            : THREE.Loader.prototype.extractUrlBase(t),
                        s = new THREE.FileLoader(r.manager);
                      s.setResponseType('arraybuffer'),
                        s.load(
                          t,
                          function(t) {
                            try {
                              r.parse(t, o, e, n);
                            } catch (t) {
                              n(
                                t.constructor === Error
                                  ? t
                                  : new Error(
                                      'THREE.GLTFLoader: Unable to parse model.'
                                    )
                              );
                            }
                          },
                          i,
                          n
                        );
                    },
                    setCrossOrigin: function(t) {
                      this.crossOrigin = t;
                    },
                    setPath: function(t) {
                      this.path = t;
                    },
                    parse: function(t, s, a, c) {
                      var l,
                        u = {};
                      A(new Uint8Array(t, 0, 4)) === n
                        ? ((u[e.KHR_BINARY_GLTF] = new function(t) {
                            (this.name = e.KHR_BINARY_GLTF),
                              (this.content = null),
                              (this.body = null);
                            var i = new DataView(t, 0, r);
                            if (
                              ((this.header = {
                                magic: A(new Uint8Array(t.slice(0, 4))),
                                version: i.getUint32(4, !0),
                                length: i.getUint32(8, !0)
                              }),
                              this.header.magic !== n)
                            )
                              throw new Error(
                                'THREE.GLTFLoader: Unsupported glTF-Binary header.'
                              );
                            if (this.header.version < 2)
                              throw new Error(
                                'THREE.GLTFLoader: Legacy binary file detected. Use GLTFLoader instead.'
                              );
                            var s = new DataView(t, r),
                              a = 0;
                            for (; a < s.byteLength; ) {
                              var c = s.getUint32(a, !0);
                              a += 4;
                              var l = s.getUint32(a, !0);
                              if (((a += 4), l === o.JSON)) {
                                var u = new Uint8Array(t, r + a, c);
                                this.content = A(u);
                              } else if (l === o.BIN) {
                                var h = r + a;
                                this.body = t.slice(h, h + c);
                              }
                              a += c;
                            }
                            if (null === this.content)
                              throw new Error(
                                'THREE.GLTFLoader: JSON content not found.'
                              );
                          }(t)),
                          (l = u[e.KHR_BINARY_GLTF].content))
                        : (l = A(new Uint8Array(t)));
                      var h = JSON.parse(l);
                      void 0 === h.asset || h.asset.version[0] < 2
                        ? c(
                            new Error(
                              'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'
                            )
                          )
                        : (h.extensionsUsed &&
                            (h.extensionsUsed.indexOf(e.KHR_LIGHTS) >= 0 &&
                              (u[e.KHR_LIGHTS] = new function(t) {
                                (this.name = e.KHR_LIGHTS), (this.lights = {});
                                var i =
                                  (
                                    (t.extensions &&
                                      t.extensions[e.KHR_LIGHTS]) ||
                                    {}
                                  ).lights || {};
                                for (var n in i) {
                                  var r,
                                    o = i[n],
                                    s = new THREE.Color().fromArray(o.color);
                                  switch (o.type) {
                                    case 'directional':
                                      (r = new THREE.DirectionalLight(
                                        s
                                      )).position.set(0, 0, 1);
                                      break;
                                    case 'point':
                                      r = new THREE.PointLight(s);
                                      break;
                                    case 'spot':
                                      (r = new THREE.SpotLight(s)).position.set(
                                        0,
                                        0,
                                        1
                                      );
                                      break;
                                    case 'ambient':
                                      r = new THREE.AmbientLight(s);
                                  }
                                  r &&
                                    (void 0 !== o.constantAttenuation &&
                                      (r.intensity = o.constantAttenuation),
                                    void 0 !== o.linearAttenuation &&
                                      (r.distance = 1 / o.linearAttenuation),
                                    void 0 !== o.quadraticAttenuation &&
                                      (r.decay = o.quadraticAttenuation),
                                    void 0 !== o.fallOffAngle &&
                                      (r.angle = o.fallOffAngle),
                                    void 0 !== o.fallOffExponent &&
                                      console.warn(
                                        'THREE.GLTFLoader:: light.fallOffExponent not currently supported.'
                                      ),
                                    (r.name = o.name || 'light_' + n),
                                    (this.lights[n] = r));
                                }
                              }(h)),
                            h.extensionsUsed.indexOf(e.KHR_MATERIALS_COMMON) >=
                              0 && (u[e.KHR_MATERIALS_COMMON] = new i(h)),
                            h.extensionsUsed.indexOf(
                              e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                            ) >= 0 &&
                              (u[
                                e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                              ] = new function() {
                                return {
                                  name: e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,
                                  getMaterialType: function() {
                                    return THREE.ShaderMaterial;
                                  },
                                  extendParams: function(t, e, i) {
                                    var n = e.extensions[this.name],
                                      r = THREE.ShaderLib.standard,
                                      o = THREE.UniformsUtils.clone(r.uniforms),
                                      s = [
                                        '#ifdef USE_SPECULARMAP',
                                        '\tuniform sampler2D specularMap;',
                                        '#endif'
                                      ].join('\n'),
                                      a = [
                                        '#ifdef USE_GLOSSINESSMAP',
                                        '\tuniform sampler2D glossinessMap;',
                                        '#endif'
                                      ].join('\n'),
                                      c = [
                                        'vec3 specularFactor = specular;',
                                        '#ifdef USE_SPECULARMAP',
                                        '\tvec4 texelSpecular = texture2D( specularMap, vUv );',
                                        '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',
                                        '\tspecularFactor *= texelSpecular.rgb;',
                                        '#endif'
                                      ].join('\n'),
                                      l = [
                                        'float glossinessFactor = glossiness;',
                                        '#ifdef USE_GLOSSINESSMAP',
                                        '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',
                                        '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',
                                        '\tglossinessFactor *= texelGlossiness.a;',
                                        '#endif'
                                      ].join('\n'),
                                      u = [
                                        'PhysicalMaterial material;',
                                        'material.diffuseColor = diffuseColor.rgb;',
                                        'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',
                                        'material.specularColor = specularFactor.rgb;'
                                      ].join('\n'),
                                      h = r.fragmentShader
                                        .replace(
                                          '#include <specularmap_fragment>',
                                          ''
                                        )
                                        .replace(
                                          'uniform float roughness;',
                                          'uniform vec3 specular;'
                                        )
                                        .replace(
                                          'uniform float metalness;',
                                          'uniform float glossiness;'
                                        )
                                        .replace(
                                          '#include <roughnessmap_pars_fragment>',
                                          s
                                        )
                                        .replace(
                                          '#include <metalnessmap_pars_fragment>',
                                          a
                                        )
                                        .replace(
                                          '#include <roughnessmap_fragment>',
                                          c
                                        )
                                        .replace(
                                          '#include <metalnessmap_fragment>',
                                          l
                                        )
                                        .replace(
                                          '#include <lights_physical_fragment>',
                                          u
                                        );
                                    delete o.roughness,
                                      delete o.metalness,
                                      delete o.roughnessMap,
                                      delete o.metalnessMap,
                                      (o.specular = {
                                        value: new THREE.Color().setHex(1118481)
                                      }),
                                      (o.glossiness = { value: 0.5 }),
                                      (o.specularMap = { value: null }),
                                      (o.glossinessMap = { value: null }),
                                      (t.vertexShader = r.vertexShader),
                                      (t.fragmentShader = h),
                                      (t.uniforms = o),
                                      (t.defines = { STANDARD: '' }),
                                      (t.color = new THREE.Color(1, 1, 1)),
                                      (t.opacity = 1);
                                    var d = [];
                                    if (Array.isArray(n.diffuseFactor)) {
                                      var p = n.diffuseFactor;
                                      t.color.fromArray(p), (t.opacity = p[3]);
                                    }
                                    if (
                                      (void 0 !== n.diffuseTexture &&
                                        d.push(
                                          i.assignTexture(
                                            t,
                                            'map',
                                            n.diffuseTexture.index
                                          )
                                        ),
                                      (t.emissive = new THREE.Color(0, 0, 0)),
                                      (t.glossiness =
                                        void 0 !== n.glossinessFactor
                                          ? n.glossinessFactor
                                          : 1),
                                      (t.specular = new THREE.Color(1, 1, 1)),
                                      Array.isArray(n.specularFactor) &&
                                        t.specular.fromArray(n.specularFactor),
                                      void 0 !== n.specularGlossinessTexture)
                                    ) {
                                      var f = n.specularGlossinessTexture.index;
                                      d.push(
                                        i.assignTexture(t, 'glossinessMap', f)
                                      ),
                                        d.push(
                                          i.assignTexture(t, 'specularMap', f)
                                        );
                                    }
                                    return Promise.all(d);
                                  },
                                  createMaterial: function(t) {
                                    var e = new THREE.ShaderMaterial({
                                      defines: t.defines,
                                      vertexShader: t.vertexShader,
                                      fragmentShader: t.fragmentShader,
                                      uniforms: t.uniforms,
                                      fog: !0,
                                      lights: !0,
                                      opacity: t.opacity,
                                      transparent: t.transparent
                                    });
                                    return (
                                      (e.isGLTFSpecularGlossinessMaterial = !0),
                                      (e.color = t.color),
                                      (e.map = void 0 === t.map ? null : t.map),
                                      (e.lightMap = null),
                                      (e.lightMapIntensity = 1),
                                      (e.aoMap =
                                        void 0 === t.aoMap ? null : t.aoMap),
                                      (e.aoMapIntensity = 1),
                                      (e.emissive = t.emissive),
                                      (e.emissiveIntensity = 1),
                                      (e.emissiveMap =
                                        void 0 === t.emissiveMap
                                          ? null
                                          : t.emissiveMap),
                                      (e.bumpMap =
                                        void 0 === t.bumpMap
                                          ? null
                                          : t.bumpMap),
                                      (e.bumpScale = 1),
                                      (e.normalMap =
                                        void 0 === t.normalMap
                                          ? null
                                          : t.normalMap),
                                      (e.normalScale = new THREE.Vector2(1, 1)),
                                      (e.displacementMap = null),
                                      (e.displacementScale = 1),
                                      (e.displacementBias = 0),
                                      (e.specularMap =
                                        void 0 === t.specularMap
                                          ? null
                                          : t.specularMap),
                                      (e.specular = t.specular),
                                      (e.glossinessMap =
                                        void 0 === t.glossinessMap
                                          ? null
                                          : t.glossinessMap),
                                      (e.glossiness = t.glossiness),
                                      (e.alphaMap = null),
                                      (e.envMap =
                                        void 0 === t.envMap ? null : t.envMap),
                                      (e.envMapIntensity = 1),
                                      (e.refractionRatio = 0.98),
                                      (e.extensions.derivatives = !0),
                                      e
                                    );
                                  },
                                  refreshUniforms: function(t, e, i, n, r, o) {
                                    var s,
                                      a = r.uniforms,
                                      c = r.defines;
                                    if (
                                      ((a.opacity.value = r.opacity),
                                      a.diffuse.value.copy(r.color),
                                      a.emissive.value
                                        .copy(r.emissive)
                                        .multiplyScalar(r.emissiveIntensity),
                                      (a.map.value = r.map),
                                      (a.specularMap.value = r.specularMap),
                                      (a.alphaMap.value = r.alphaMap),
                                      (a.lightMap.value = r.lightMap),
                                      (a.lightMapIntensity.value =
                                        r.lightMapIntensity),
                                      (a.aoMap.value = r.aoMap),
                                      (a.aoMapIntensity.value =
                                        r.aoMapIntensity),
                                      r.map
                                        ? (s = r.map)
                                        : r.specularMap
                                          ? (s = r.specularMap)
                                          : r.displacementMap
                                            ? (s = r.displacementMap)
                                            : r.normalMap
                                              ? (s = r.normalMap)
                                              : r.bumpMap
                                                ? (s = r.bumpMap)
                                                : r.glossinessMap
                                                  ? (s = r.glossinessMap)
                                                  : r.alphaMap
                                                    ? (s = r.alphaMap)
                                                    : r.emissiveMap &&
                                                      (s = r.emissiveMap),
                                      void 0 !== s)
                                    ) {
                                      s.isWebGLRenderTarget && (s = s.texture);
                                      var l = s.offset,
                                        u = s.repeat;
                                      a.offsetRepeat.value.set(
                                        l.x,
                                        l.y,
                                        u.x,
                                        u.y
                                      );
                                    }
                                    (a.envMap.value = r.envMap),
                                      (a.envMapIntensity.value =
                                        r.envMapIntensity),
                                      (a.flipEnvMap.value =
                                        r.envMap && r.envMap.isCubeTexture
                                          ? -1
                                          : 1),
                                      (a.refractionRatio.value =
                                        r.refractionRatio),
                                      a.specular.value.copy(r.specular),
                                      (a.glossiness.value = r.glossiness),
                                      (a.glossinessMap.value = r.glossinessMap),
                                      (a.emissiveMap.value = r.emissiveMap),
                                      (a.bumpMap.value = r.bumpMap),
                                      (a.normalMap.value = r.normalMap),
                                      (a.displacementMap.value =
                                        r.displacementMap),
                                      (a.displacementScale.value =
                                        r.displacementScale),
                                      (a.displacementBias.value =
                                        r.displacementBias),
                                      null !== a.glossinessMap.value &&
                                        void 0 === c.USE_GLOSSINESSMAP &&
                                        ((c.USE_GLOSSINESSMAP = ''),
                                        (c.USE_ROUGHNESSMAP = '')),
                                      null === a.glossinessMap.value &&
                                        void 0 !== c.USE_GLOSSINESSMAP &&
                                        (delete c.USE_GLOSSINESSMAP,
                                        delete c.USE_ROUGHNESSMAP);
                                  }
                                };
                              }())),
                          console.time('GLTFLoader'),
                          new L(h, u, {
                            path: s || this.path,
                            crossOrigin: this.crossOrigin
                          }).parse(function(t, e, i, n) {
                            console.timeEnd('GLTFLoader'),
                              a({
                                scene: t,
                                scenes: e,
                                cameras: i,
                                animations: n
                              });
                          }, c));
                    }
                  };
                  var e = {
                    KHR_BINARY_GLTF: 'KHR_binary_glTF',
                    KHR_LIGHTS: 'KHR_lights',
                    KHR_MATERIALS_COMMON: 'KHR_materials_common',
                    KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:
                      'KHR_materials_pbrSpecularGlossiness'
                  };
                  function i(t) {
                    this.name = e.KHR_MATERIALS_COMMON;
                  }
                  (i.prototype.getMaterialType = function(t) {
                    switch (t.extensions[this.name].type) {
                      case 'commonBlinn':
                      case 'commonPhong':
                        return THREE.MeshPhongMaterial;
                      case 'commonLambert':
                        return THREE.MeshLambertMaterial;
                      case 'commonConstant':
                      default:
                        return THREE.MeshBasicMaterial;
                    }
                  }),
                    (i.prototype.extendParams = function(t, e, i) {
                      var n = e.extensions[this.name],
                        r = [],
                        o = [];
                      switch (n.type) {
                        case 'commonBlinn':
                        case 'commonPhong':
                          o.push(
                            'diffuseFactor',
                            'diffuseTexture',
                            'specularFactor',
                            'specularTexture',
                            'shininessFactor'
                          );
                          break;
                        case 'commonLambert':
                          o.push('diffuseFactor', 'diffuseTexture');
                      }
                      var s = {};
                      return (
                        o.forEach(function(t) {
                          void 0 !== n[t] && (s[t] = n[t]);
                        }),
                        void 0 !== s.diffuseFactor &&
                          ((t.color = new THREE.Color().fromArray(
                            s.diffuseFactor
                          )),
                          (t.opacity = s.diffuseFactor[3])),
                        void 0 !== s.diffuseTexture &&
                          r.push(
                            i.assignTexture(t, 'map', s.diffuseTexture.index)
                          ),
                        void 0 !== s.specularFactor &&
                          (t.specular = new THREE.Color().fromArray(
                            s.specularFactor
                          )),
                        void 0 !== s.specularTexture &&
                          r.push(
                            i.assignTexture(
                              t,
                              'specularMap',
                              s.specularTexture.index
                            )
                          ),
                        void 0 !== s.shininessFactor &&
                          (t.shininess = s.shininessFactor),
                        Promise.all(r)
                      );
                    });
                  var n = 'glTF',
                    r = 12,
                    o = { JSON: 1313821514, BIN: 5130562 };
                  var s = 0,
                    a = 1,
                    c = 2,
                    l = 3,
                    u = 4,
                    h = 5,
                    d = 6,
                    p = (Number,
                    THREE.Matrix3,
                    THREE.Matrix4,
                    THREE.Vector2,
                    THREE.Vector3,
                    THREE.Vector4,
                    THREE.Texture,
                    {
                      5120: Int8Array,
                      5121: Uint8Array,
                      5122: Int16Array,
                      5123: Uint16Array,
                      5125: Uint32Array,
                      5126: Float32Array
                    }),
                    f = {
                      9728: THREE.NearestFilter,
                      9729: THREE.LinearFilter,
                      9984: THREE.NearestMipMapNearestFilter,
                      9985: THREE.LinearMipMapNearestFilter,
                      9986: THREE.NearestMipMapLinearFilter,
                      9987: THREE.LinearMipMapLinearFilter
                    },
                    m = {
                      33071: THREE.ClampToEdgeWrapping,
                      33648: THREE.MirroredRepeatWrapping,
                      10497: THREE.RepeatWrapping
                    },
                    g = {
                      6406: THREE.AlphaFormat,
                      6407: THREE.RGBFormat,
                      6408: THREE.RGBAFormat,
                      6409: THREE.LuminanceFormat,
                      6410: THREE.LuminanceAlphaFormat
                    },
                    v = {
                      5121: THREE.UnsignedByteType,
                      32819: THREE.UnsignedShort4444Type,
                      32820: THREE.UnsignedShort5551Type,
                      33635: THREE.UnsignedShort565Type
                    },
                    y = (THREE.BackSide,
                    THREE.FrontSide,
                    THREE.NeverDepth,
                    THREE.LessDepth,
                    THREE.EqualDepth,
                    THREE.LessEqualDepth,
                    THREE.GreaterEqualDepth,
                    THREE.NotEqualDepth,
                    THREE.GreaterEqualDepth,
                    THREE.AlwaysDepth,
                    THREE.AddEquation,
                    THREE.SubtractEquation,
                    THREE.ReverseSubtractEquation,
                    THREE.ZeroFactor,
                    THREE.OneFactor,
                    THREE.SrcColorFactor,
                    THREE.OneMinusSrcColorFactor,
                    THREE.SrcAlphaFactor,
                    THREE.OneMinusSrcAlphaFactor,
                    THREE.DstAlphaFactor,
                    THREE.OneMinusDstAlphaFactor,
                    THREE.DstColorFactor,
                    THREE.OneMinusDstColorFactor,
                    THREE.SrcAlphaSaturateFactor,
                    {
                      SCALAR: 1,
                      VEC2: 2,
                      VEC3: 3,
                      VEC4: 4,
                      MAT2: 4,
                      MAT3: 9,
                      MAT4: 16
                    }),
                    w = {
                      scale: 'scale',
                      translation: 'position',
                      rotation: 'quaternion',
                      weights: 'morphTargetInfluences'
                    },
                    M = {
                      CATMULLROMSPLINE: THREE.InterpolateSmooth,
                      CUBICSPLINE: THREE.InterpolateSmooth,
                      LINEAR: THREE.InterpolateLinear,
                      STEP: THREE.InterpolateDiscrete
                    },
                    E = 'OPAQUE';
                  function b(t, e, i) {
                    if (!t) return Promise.resolve();
                    var n,
                      r = [];
                    if (
                      '[object Array]' === Object.prototype.toString.call(t)
                    ) {
                      n = [];
                      for (var o = t.length, s = 0; s < o; s++) {
                        (c = e.call(i || this, t[s], s)) &&
                          (r.push(c),
                          c instanceof Promise
                            ? c.then(
                                function(t, e) {
                                  n[t] = e;
                                }.bind(this, s)
                              )
                            : (n[s] = c));
                      }
                    } else {
                      n = {};
                      for (var a in t) {
                        var c;
                        if (t.hasOwnProperty(a))
                          (c = e.call(i || this, t[a], a)) &&
                            (r.push(c),
                            c instanceof Promise
                              ? c.then(
                                  function(t, e) {
                                    n[t] = e;
                                  }.bind(this, a)
                                )
                              : (n[a] = c));
                      }
                    }
                    return Promise.all(r).then(function() {
                      return n;
                    });
                  }
                  function x(t, e) {
                    return 'string' != typeof t || '' === t
                      ? ''
                      : /^(https?:)?\/\//i.test(t)
                        ? t
                        : /^data:.*,.*$/i.test(t)
                          ? t
                          : /^blob:.*$/i.test(t) ? t : (e || '') + t;
                  }
                  function A(t) {
                    if (void 0 !== window.TextDecoder)
                      return new TextDecoder().decode(t);
                    for (var e = '', i = 0, n = t.length; i < n; i++)
                      e += String.fromCharCode(t[i]);
                    return e;
                  }
                  function T(t, e, i, n) {
                    var r = t.geometry,
                      o = t.material,
                      s = i.targets,
                      a = r.morphAttributes;
                    (a.position = []), (a.normal = []), (o.morphTargets = !0);
                    for (var c = 0, l = s.length; c < l; c++) {
                      var u,
                        h,
                        d = s[c],
                        p = 'morphTarget' + c;
                      if (void 0 !== d.POSITION) {
                        u = n.accessors[d.POSITION].clone();
                        for (
                          var f = r.attributes.position, m = 0, g = u.count;
                          m < g;
                          m++
                        )
                          u.setXYZ(
                            m,
                            u.getX(m) + f.getX(m),
                            u.getY(m) + f.getY(m),
                            u.getZ(m) + f.getZ(m)
                          );
                      } else u = r.attributes.position.clone();
                      if (void 0 !== d.NORMAL) {
                        (o.morphNormals = !0),
                          (h = n.accessors[d.NORMAL].clone());
                        var v = r.attributes.normal;
                        for (m = 0, g = h.count; m < g; m++)
                          h.setXYZ(
                            m,
                            h.getX(m) + v.getX(m),
                            h.getY(m) + v.getY(m),
                            h.getZ(m) + v.getZ(m)
                          );
                      } else h = r.attributes.normal.clone();
                      d.TANGENT,
                        (u.name = p),
                        (h.name = p),
                        a.position.push(u),
                        a.normal.push(h);
                    }
                    if ((t.updateMorphTargets(), void 0 !== e.weights))
                      for (c = 0, l = e.weights.length; c < l; c++)
                        t.morphTargetInfluences[c] = e.weights[c];
                  }
                  function L(t, e, i) {
                    (this.json = t || {}),
                      (this.extensions = e || {}),
                      (this.options = i || {}),
                      (this.cache = new function() {
                        var t = {};
                        return {
                          get: function(e) {
                            return t[e];
                          },
                          add: function(e, i) {
                            t[e] = i;
                          },
                          remove: function(e) {
                            delete t[e];
                          },
                          removeAll: function() {
                            t = {};
                          },
                          update: function(e, i) {
                            for (var n in t) {
                              var r = t[n];
                              r.update && r.update(e, i);
                            }
                          }
                        };
                      }());
                  }
                  return (
                    (L.prototype._withDependencies = function(t) {
                      for (var e = {}, i = 0; i < t.length; i++) {
                        var n = t[i],
                          r = 'load' + n.charAt(0).toUpperCase() + n.slice(1),
                          o = this.cache.get(n);
                        if (void 0 !== o) e[n] = o;
                        else if (this[r]) {
                          var s = this[r]();
                          this.cache.add(n, s), (e[n] = s);
                        }
                      }
                      return b(e, function(t) {
                        return t;
                      });
                    }),
                    (L.prototype.parse = function(t, e) {
                      var i = this.json;
                      this.cache.removeAll(),
                        this._withDependencies([
                          'scenes',
                          'cameras',
                          'animations'
                        ])
                          .then(function(e) {
                            var n = [];
                            for (var r in e.scenes) n.push(e.scenes[r]);
                            var o =
                                void 0 !== i.scene ? e.scenes[i.scene] : n[0],
                              s = [];
                            for (var r in e.cameras) {
                              var a = e.cameras[r];
                              s.push(a);
                            }
                            var c = [];
                            for (var r in e.animations) c.push(e.animations[r]);
                            t(o, n, s, c);
                          })
                          .catch(e);
                    }),
                    (L.prototype.getDependency = function(t, e) {
                      var i = t + ':' + e,
                        n = this.cache.get(i);
                      n ||
                        ((n = this[
                          'load' + t.charAt(0).toUpperCase() + t.slice(1)
                        ](e)),
                        this.cache.add(i, n));
                      return n;
                    }),
                    (L.prototype.loadBuffer = function(t) {
                      var i = this.json.buffers[t];
                      if (i.type && 'arraybuffer' !== i.type)
                        throw new Error(
                          'THREE.GLTFLoader: %s buffer type is not supported.',
                          i.type
                        );
                      if (void 0 === i.uri && 0 === t)
                        return Promise.resolve(
                          this.extensions[e.KHR_BINARY_GLTF].body
                        );
                      var n = this.options;
                      return new Promise(function(t) {
                        var e = new THREE.FileLoader();
                        e.setResponseType('arraybuffer'),
                          e.load(x(i.uri, n.path), t);
                      });
                    }),
                    (L.prototype.loadBufferView = function(t) {
                      var e = this.json.bufferViews[t];
                      return this.getDependency('buffer', e.buffer).then(
                        function(t) {
                          var i = e.byteLength || 0,
                            n = e.byteOffset || 0;
                          return t.slice(n, n + i);
                        }
                      );
                    }),
                    (L.prototype.loadAccessors = function() {
                      var t = this,
                        e = this.json;
                      return b(e.accessors, function(i) {
                        return t
                          .getDependency('bufferView', i.bufferView)
                          .then(function(t) {
                            var n,
                              r = y[i.type],
                              o = p[i.componentType],
                              s = o.BYTES_PER_ELEMENT,
                              a = s * r,
                              c = e.bufferViews[i.bufferView].byteStride;
                            if (c && c !== a) {
                              n = new o(t);
                              var l = new THREE.InterleavedBuffer(n, c / s);
                              return new THREE.InterleavedBufferAttribute(
                                l,
                                r,
                                i.byteOffset / s
                              );
                            }
                            return (
                              (n = new o(t, i.byteOffset, i.count * r)),
                              new THREE.BufferAttribute(n, r)
                            );
                          });
                      });
                    }),
                    (L.prototype.loadTexture = function(t) {
                      var e = this.json,
                        i = this.options,
                        n = window.URL || window.webkitURL,
                        r = e.textures[t],
                        o = e.images[r.source],
                        s = o.uri,
                        a = !1;
                      return (
                        void 0 !== o.bufferView &&
                          (s = this.getDependency(
                            'bufferView',
                            o.bufferView
                          ).then(function(t) {
                            a = !0;
                            var e = new Blob([t], { type: o.mimeType });
                            return (s = n.createObjectURL(e));
                          })),
                        Promise.resolve(s)
                          .then(function(t) {
                            var e =
                              THREE.Loader.Handlers.get(t) ||
                              new THREE.TextureLoader();
                            return (
                              e.setCrossOrigin(i.crossOrigin),
                              new Promise(function(n, r) {
                                e.load(x(t, i.path), n, void 0, r);
                              })
                            );
                          })
                          .then(function(t) {
                            void 0 !== a && n.revokeObjectURL(s),
                              (t.flipY = !1),
                              void 0 !== r.name && (t.name = r.name),
                              (t.format =
                                void 0 !== r.format
                                  ? g[r.format]
                                  : THREE.RGBAFormat),
                              void 0 !== r.internalFormat &&
                                t.format !== g[r.internalFormat] &&
                                console.warn(
                                  'THREE.GLTFLoader: Three.js does not support texture internalFormat which is different from texture format. internalFormat will be forced to be the same value as format.'
                                ),
                              (t.type =
                                void 0 !== r.type
                                  ? v[r.type]
                                  : THREE.UnsignedByteType);
                            var i = (e.samplers || {})[r.sampler] || {};
                            return (
                              (t.magFilter =
                                f[i.magFilter] || THREE.LinearFilter),
                              (t.minFilter =
                                f[i.minFilter] ||
                                THREE.LinearMipMapLinearFilter),
                              (t.wrapS = m[i.wrapS] || THREE.RepeatWrapping),
                              (t.wrapT = m[i.wrapT] || THREE.RepeatWrapping),
                              t
                            );
                          })
                      );
                    }),
                    (L.prototype.assignTexture = function(t, e, i) {
                      return this.getDependency('texture', i).then(function(i) {
                        t[e] = i;
                      });
                    }),
                    (L.prototype.loadMaterials = function() {
                      var t = this,
                        i = this.json,
                        n = this.extensions;
                      return b(i.materials, function(i) {
                        var r,
                          o = {},
                          s = i.extensions || {},
                          a = [];
                        if (s[e.KHR_MATERIALS_COMMON]) {
                          var c = n[e.KHR_MATERIALS_COMMON];
                          (r = c.getMaterialType(i)),
                            a.push(c.extendParams(o, i, t));
                        } else if (s[e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {
                          var l = n[e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];
                          (r = l.getMaterialType(i)),
                            a.push(l.extendParams(o, i, t));
                        } else if (void 0 !== i.pbrMetallicRoughness) {
                          r = THREE.MeshStandardMaterial;
                          var u = i.pbrMetallicRoughness;
                          if (
                            ((o.color = new THREE.Color(1, 1, 1)),
                            (o.opacity = 1),
                            Array.isArray(u.baseColorFactor))
                          ) {
                            var h = u.baseColorFactor;
                            o.color.fromArray(h), (o.opacity = h[3]);
                          }
                          if (
                            (void 0 !== u.baseColorTexture &&
                              a.push(
                                t.assignTexture(
                                  o,
                                  'map',
                                  u.baseColorTexture.index
                                )
                              ),
                            (o.metalness =
                              void 0 !== u.metallicFactor
                                ? u.metallicFactor
                                : 1),
                            (o.roughness =
                              void 0 !== u.roughnessFactor
                                ? u.roughnessFactor
                                : 1),
                            void 0 !== u.metallicRoughnessTexture)
                          ) {
                            var d = u.metallicRoughnessTexture.index;
                            a.push(t.assignTexture(o, 'metalnessMap', d)),
                              a.push(t.assignTexture(o, 'roughnessMap', d));
                          }
                        } else r = THREE.MeshPhongMaterial;
                        !0 === i.doubleSided && (o.side = THREE.DoubleSide);
                        var p = i.alphaMode || E;
                        return (
                          (o.transparent = p !== E),
                          void 0 !== i.normalTexture &&
                            a.push(
                              t.assignTexture(
                                o,
                                'normalMap',
                                i.normalTexture.index
                              )
                            ),
                          void 0 !== i.occlusionTexture &&
                            a.push(
                              t.assignTexture(
                                o,
                                'aoMap',
                                i.occlusionTexture.index
                              )
                            ),
                          void 0 !== i.emissiveFactor &&
                            (r === THREE.MeshBasicMaterial
                              ? (o.color = new THREE.Color().fromArray(
                                  i.emissiveFactor
                                ))
                              : (o.emissive = new THREE.Color().fromArray(
                                  i.emissiveFactor
                                ))),
                          void 0 !== i.emissiveTexture &&
                            (r === THREE.MeshBasicMaterial
                              ? a.push(
                                  t.assignTexture(
                                    o,
                                    'map',
                                    i.emissiveTexture.index
                                  )
                                )
                              : a.push(
                                  t.assignTexture(
                                    o,
                                    'emissiveMap',
                                    i.emissiveTexture.index
                                  )
                                )),
                          Promise.all(a).then(function() {
                            var t;
                            return (
                              (t =
                                r === THREE.ShaderMaterial
                                  ? n[
                                      e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                                    ].createMaterial(o)
                                  : new r(o)),
                              void 0 !== i.name && (t.name = i.name),
                              (t.normalScale.x = -1),
                              (t.userData = i.extras),
                              t
                            );
                          })
                        );
                      });
                    }),
                    (L.prototype.loadGeometries = function(t) {
                      return this._withDependencies(['accessors']).then(
                        function(e) {
                          return b(t, function(t) {
                            var i = new THREE.BufferGeometry(),
                              n = t.attributes;
                            for (var r in n) {
                              var o = n[r];
                              if (void 0 === o) return;
                              var s = e.accessors[o];
                              switch (r) {
                                case 'POSITION':
                                  i.addAttribute('position', s);
                                  break;
                                case 'NORMAL':
                                  i.addAttribute('normal', s);
                                  break;
                                case 'TEXCOORD_0':
                                case 'TEXCOORD0':
                                case 'TEXCOORD':
                                  i.addAttribute('uv', s);
                                  break;
                                case 'TEXCOORD_1':
                                  i.addAttribute('uv2', s);
                                  break;
                                case 'COLOR_0':
                                case 'COLOR0':
                                case 'COLOR':
                                  i.addAttribute('color', s);
                                  break;
                                case 'WEIGHTS_0':
                                case 'WEIGHT':
                                  i.addAttribute('skinWeight', s);
                                  break;
                                case 'JOINTS_0':
                                case 'JOINT':
                                  i.addAttribute('skinIndex', s);
                              }
                            }
                            return (
                              void 0 !== t.indices &&
                                i.setIndex(e.accessors[t.indices]),
                              i
                            );
                          });
                        }
                      );
                    }),
                    (L.prototype.loadMeshes = function() {
                      var t = this,
                        e = this.json;
                      return this._withDependencies([
                        'accessors',
                        'materials'
                      ]).then(function(i) {
                        return b(e.meshes, function(e) {
                          var n = new THREE.Group();
                          void 0 !== e.name && (n.name = e.name),
                            e.extras && (n.userData = e.extras);
                          var r = e.primitives || [];
                          return t.loadGeometries(r).then(function(t) {
                            for (var o in r) {
                              var p,
                                f = r[o],
                                m = t[o],
                                g =
                                  void 0 === f.material
                                    ? new THREE.MeshStandardMaterial({
                                        color: 16777215,
                                        emissive: 0,
                                        metalness: 1,
                                        roughness: 1,
                                        transparent: !1,
                                        depthTest: !0,
                                        side: THREE.FrontSide
                                      })
                                    : i.materials[f.material];
                              if (
                                (g.aoMap &&
                                  void 0 === m.attributes.uv2 &&
                                  void 0 !== m.attributes.uv &&
                                  (console.log(
                                    'THREE.GLTFLoader: Duplicating UVs to support aoMap.'
                                  ),
                                  m.addAttribute(
                                    'uv2',
                                    new THREE.BufferAttribute(
                                      m.attributes.uv.array,
                                      2
                                    )
                                  )),
                                void 0 !== m.attributes.color &&
                                  ((g.vertexColors = THREE.VertexColors),
                                  (g.needsUpdate = !0)),
                                void 0 === m.attributes.normal &&
                                  (void 0 !== g.flatShading
                                    ? (g.flatShading = !0)
                                    : (g.shading = THREE.FlatShading)),
                                f.mode === u || void 0 === f.mode)
                              )
                                p = new THREE.Mesh(m, g);
                              else if (f.mode === h)
                                (p = new THREE.Mesh(m, g)).drawMode =
                                  THREE.TriangleStripDrawMode;
                              else if (f.mode === d)
                                (p = new THREE.Mesh(m, g)).drawMode =
                                  THREE.TriangleFanDrawMode;
                              else if (f.mode === a)
                                p = new THREE.LineSegments(m, g);
                              else if (f.mode === l) p = new THREE.Line(m, g);
                              else if (f.mode === c)
                                p = new THREE.LineLoop(m, g);
                              else {
                                if (f.mode !== s)
                                  throw new Error(
                                    'THREE.GLTFLoader: Primitive mode unsupported: ',
                                    f.mode
                                  );
                                p = new THREE.Points(m, g);
                              }
                              (p.name = n.name + '_' + o),
                                void 0 !== f.targets && T(p, e, f, i),
                                f.extras && (p.userData = f.extras),
                                n.add(p);
                            }
                            return n;
                          });
                        });
                      });
                    }),
                    (L.prototype.loadCameras = function() {
                      return b(this.json.cameras, function(t) {
                        var e,
                          i = t[t.type];
                        if (i) {
                          if ('perspective' === t.type) {
                            var n = i.aspectRatio || 1,
                              r = i.yfov * n;
                            e = new THREE.PerspectiveCamera(
                              THREE.Math.radToDeg(r),
                              n,
                              i.znear || 1,
                              i.zfar || 2e6
                            );
                          } else
                            'orthographic' === t.type &&
                              (e = new THREE.OrthographicCamera(
                                i.xmag / -2,
                                i.xmag / 2,
                                i.ymag / 2,
                                i.ymag / -2,
                                i.znear,
                                i.zfar
                              ));
                          return (
                            void 0 !== t.name && (e.name = t.name),
                            t.extras && (e.userData = t.extras),
                            e
                          );
                        }
                        console.warn(
                          'THREE.GLTFLoader: Missing camera parameters.'
                        );
                      });
                    }),
                    (L.prototype.loadSkins = function() {
                      var t = this.json;
                      return this._withDependencies(['accessors']).then(
                        function(e) {
                          return b(t.skins, function(t) {
                            return {
                              joints: t.joints,
                              inverseBindMatrices:
                                e.accessors[t.inverseBindMatrices]
                            };
                          });
                        }
                      );
                    }),
                    (L.prototype.loadAnimations = function() {
                      var t = this.json;
                      return this._withDependencies([
                        'accessors',
                        'nodes'
                      ]).then(function(e) {
                        return b(t.animations, function(t, i) {
                          var n = [];
                          for (var r in t.channels) {
                            var o = t.channels[r],
                              s = t.samplers[o.sampler];
                            if (s) {
                              var a = o.target,
                                c = void 0 !== a.node ? a.node : a.id,
                                l =
                                  void 0 !== t.parameters
                                    ? t.parameters[s.input]
                                    : s.input,
                                u =
                                  void 0 !== t.parameters
                                    ? t.parameters[s.output]
                                    : s.output,
                                h = e.accessors[l],
                                d = e.accessors[u],
                                p = e.nodes[c];
                              if (p) {
                                var f;
                                switch ((p.updateMatrix(),
                                (p.matrixAutoUpdate = !0),
                                w[a.path])) {
                                  case w.weights:
                                    f = THREE.NumberKeyframeTrack;
                                    break;
                                  case w.rotation:
                                    f = THREE.QuaternionKeyframeTrack;
                                    break;
                                  case w.position:
                                  case w.scale:
                                  default:
                                    f = THREE.VectorKeyframeTrack;
                                }
                                var m = p.name ? p.name : p.uuid;
                                'CATMULLROMSPLINE' === s.interpolation &&
                                  console.warn(
                                    'THREE.GLTFLoader: CATMULLROMSPLINE interpolation is not supported. Using CUBICSPLINE instead.'
                                  );
                                var g =
                                    void 0 !== s.interpolation
                                      ? M[s.interpolation]
                                      : THREE.InterpolateLinear,
                                  v = [];
                                w[a.path] === w.weights
                                  ? p.traverse(function(t) {
                                      !0 === t.isMesh &&
                                        !0 === t.material.morphTargets &&
                                        v.push(t.name ? t.name : t.uuid);
                                    })
                                  : v.push(m);
                                for (var y = 0, E = v.length; y < E; y++)
                                  n.push(
                                    new f(
                                      v[y] + '.' + w[a.path],
                                      THREE.AnimationUtils.arraySlice(
                                        h.array,
                                        0
                                      ),
                                      THREE.AnimationUtils.arraySlice(
                                        d.array,
                                        0
                                      ),
                                      g
                                    )
                                  );
                              }
                            }
                          }
                          c = void 0 !== t.name ? t.name : 'animation_' + i;
                          return new THREE.AnimationClip(c, void 0, n);
                        });
                      });
                    }),
                    (L.prototype.loadNodes = function() {
                      var t = this.json,
                        i = this.extensions,
                        n = this,
                        r = t.nodes || [];
                      return (
                        (t.skins || []).forEach(function(t) {
                          t.joints.forEach(function(t) {
                            r[t].isBone = !0;
                          });
                        }),
                        b(t.nodes, function(t) {
                          var e = new THREE.Matrix4(),
                            i =
                              !0 === t.isBone
                                ? new THREE.Bone()
                                : new THREE.Object3D();
                          return (
                            void 0 !== t.name &&
                              (i.name = THREE.PropertyBinding.sanitizeNodeName(
                                t.name
                              )),
                            t.extras && (i.userData = t.extras),
                            void 0 !== t.matrix
                              ? (e.fromArray(t.matrix), i.applyMatrix(e))
                              : (void 0 !== t.translation &&
                                  i.position.fromArray(t.translation),
                                void 0 !== t.rotation &&
                                  i.quaternion.fromArray(t.rotation),
                                void 0 !== t.scale &&
                                  i.scale.fromArray(t.scale)),
                            i
                          );
                        }).then(function(r) {
                          return n
                            ._withDependencies(['meshes', 'skins', 'cameras'])
                            .then(function(n) {
                              return b(r, function(o, s) {
                                var a,
                                  c = t.nodes[s];
                                if (
                                  (void 0 !== c.mesh
                                    ? (a = [c.mesh])
                                    : void 0 !== c.meshes &&
                                      (console.warn(
                                        'THREE.GLTFLoader: Legacy glTF file detected. Nodes may have no more than one mesh.'
                                      ),
                                      (a = c.meshes)),
                                  void 0 !== a)
                                )
                                  for (var l in a) {
                                    var u = a[l],
                                      h = n.meshes[u];
                                    if (void 0 !== h) {
                                      var d = h.clone(!1);
                                      for (var p in h.children) {
                                        var f,
                                          m = h.children[p],
                                          g = m,
                                          v = m.material,
                                          y = m.geometry,
                                          w = m.morphTargetInfluences,
                                          M = m.userData,
                                          E = m.name,
                                          b = v;
                                        switch (m.type) {
                                          case 'LineSegments':
                                            m = new THREE.LineSegments(y, b);
                                            break;
                                          case 'LineLoop':
                                            m = new THREE.LineLoop(y, b);
                                            break;
                                          case 'Line':
                                            m = new THREE.Line(y, b);
                                            break;
                                          case 'Points':
                                            m = new THREE.Points(y, b);
                                            break;
                                          default:
                                            (m = new THREE.Mesh(
                                              y,
                                              b
                                            )).drawMode =
                                              g.drawMode;
                                        }
                                        if (
                                          ((m.castShadow = !0),
                                          (m.morphTargetInfluences = w),
                                          (m.userData = M),
                                          (m.name = E),
                                          void 0 !== c.skin &&
                                            (f = n.skins[c.skin]),
                                          f)
                                        ) {
                                          var x = y;
                                          ((b = v).skinning = !0),
                                            ((m = new THREE.SkinnedMesh(
                                              x,
                                              b
                                            )).castShadow = !0),
                                            (m.userData = M),
                                            (m.name = E);
                                          for (
                                            var A = [],
                                              T = [],
                                              L = 0,
                                              N = f.joints.length;
                                            L < N;
                                            L++
                                          ) {
                                            var D = f.joints[L],
                                              S = r[D];
                                            if (S) {
                                              A.push(S);
                                              var C =
                                                  f.inverseBindMatrices.array,
                                                _ = new THREE.Matrix4().fromArray(
                                                  C,
                                                  16 * L
                                                );
                                              T.push(_);
                                            } else
                                              console.warn(
                                                'THREE.GLTFLoader: Joint "%s" could not be found.',
                                                D
                                              );
                                          }
                                          m.bind(
                                            new THREE.Skeleton(A, T),
                                            m.matrixWorld
                                          );
                                        }
                                        d.add(m);
                                      }
                                      o.add(d);
                                    } else
                                      console.warn(
                                        'THREE.GLTFLoader: Could not find node "' +
                                          u +
                                          '".'
                                      );
                                  }
                                if (void 0 !== c.camera) {
                                  var I = n.cameras[c.camera];
                                  o.add(I);
                                }
                                if (
                                  c.extensions &&
                                  c.extensions[e.KHR_LIGHTS] &&
                                  void 0 !== c.extensions[e.KHR_LIGHTS].light
                                ) {
                                  var j = i[e.KHR_LIGHTS].lights;
                                  o.add(j[c.extensions[e.KHR_LIGHTS].light]);
                                }
                                return o;
                              });
                            });
                        })
                      );
                    }),
                    (L.prototype.loadScenes = function() {
                      var t = this.json,
                        i = this.extensions;
                      function n(e, i, r) {
                        var o = r[e];
                        i.add(o);
                        var s = t.nodes[e];
                        if (s.children)
                          for (
                            var a = s.children, c = 0, l = a.length;
                            c < l;
                            c++
                          ) {
                            n(a[c], o, r);
                          }
                      }
                      return this._withDependencies(['nodes']).then(function(
                        r
                      ) {
                        return b(t.scenes, function(t) {
                          var o = new THREE.Scene();
                          void 0 !== t.name && (o.name = t.name),
                            t.extras && (o.userData = t.extras);
                          for (
                            var s = t.nodes || [], a = 0, c = s.length;
                            a < c;
                            a++
                          ) {
                            n(s[a], o, r.nodes);
                          }
                          if (
                            (o.traverse(function(t) {
                              t.material &&
                                t.material.isGLTFSpecularGlossinessMaterial &&
                                (t.onBeforeRender =
                                  i[
                                    e.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS
                                  ].refreshUniforms);
                            }),
                            t.extensions &&
                              t.extensions[e.KHR_LIGHTS] &&
                              void 0 !== t.extensions[e.KHR_LIGHTS].light)
                          ) {
                            var l = i[e.KHR_LIGHTS].lights;
                            o.add(l[t.extensions[e.KHR_LIGHTS].light]);
                          }
                          return o;
                        });
                      });
                    }),
                    t
                  );
                })();
              },
              {}
            ],
            44: [
              function(t, e, i) {
                (THREE.MTLLoader = function(t) {
                  this.manager = void 0 !== t ? t : THREE.DefaultLoadingManager;
                }),
                  (THREE.MTLLoader.prototype = {
                    constructor: THREE.MTLLoader,
                    load: function(t, e, i, n) {
                      var r = this,
                        o = new THREE.FileLoader(this.manager);
                      o.setPath(this.path),
                        o.load(
                          t,
                          function(t) {
                            e(r.parse(t));
                          },
                          i,
                          n
                        );
                    },
                    setPath: function(t) {
                      this.path = t;
                    },
                    setTexturePath: function(t) {
                      this.texturePath = t;
                    },
                    setBaseUrl: function(t) {
                      console.warn(
                        'THREE.MTLLoader: .setBaseUrl() is deprecated. Use .setTexturePath( path ) for texture path or .setPath( path ) for general base path instead.'
                      ),
                        this.setTexturePath(t);
                    },
                    setCrossOrigin: function(t) {
                      this.crossOrigin = t;
                    },
                    setMaterialOptions: function(t) {
                      this.materialOptions = t;
                    },
                    parse: function(t) {
                      for (
                        var e = t.split('\n'), i = {}, n = /\s+/, r = {}, o = 0;
                        o < e.length;
                        o++
                      ) {
                        var s = e[o];
                        if (
                          0 !== (s = s.trim()).length &&
                          '#' !== s.charAt(0)
                        ) {
                          var a = s.indexOf(' '),
                            c = a >= 0 ? s.substring(0, a) : s;
                          c = c.toLowerCase();
                          var l = a >= 0 ? s.substring(a + 1) : '';
                          if (((l = l.trim()), 'newmtl' === c))
                            (i = { name: l }), (r[l] = i);
                          else if (i)
                            if ('ka' === c || 'kd' === c || 'ks' === c) {
                              var u = l.split(n, 3);
                              i[c] = [
                                parseFloat(u[0]),
                                parseFloat(u[1]),
                                parseFloat(u[2])
                              ];
                            } else i[c] = l;
                        }
                      }
                      var h = new THREE.MTLLoader.MaterialCreator(
                        this.texturePath || this.path,
                        this.materialOptions
                      );
                      return (
                        h.setCrossOrigin(this.crossOrigin),
                        h.setManager(this.manager),
                        h.setMaterials(r),
                        h
                      );
                    }
                  }),
                  (THREE.MTLLoader.MaterialCreator = function(t, e) {
                    (this.baseUrl = t || ''),
                      (this.options = e),
                      (this.materialsInfo = {}),
                      (this.materials = {}),
                      (this.materialsArray = []),
                      (this.nameLookup = {}),
                      (this.side =
                        this.options && this.options.side
                          ? this.options.side
                          : THREE.FrontSide),
                      (this.wrap =
                        this.options && this.options.wrap
                          ? this.options.wrap
                          : THREE.RepeatWrapping);
                  }),
                  (THREE.MTLLoader.MaterialCreator.prototype = {
                    constructor: THREE.MTLLoader.MaterialCreator,
                    crossOrigin: 'Anonymous',
                    setCrossOrigin: function(t) {
                      this.crossOrigin = t;
                    },
                    setManager: function(t) {
                      this.manager = t;
                    },
                    setMaterials: function(t) {
                      (this.materialsInfo = this.convert(t)),
                        (this.materials = {}),
                        (this.materialsArray = []),
                        (this.nameLookup = {});
                    },
                    convert: function(t) {
                      if (!this.options) return t;
                      var e = {};
                      for (var i in t) {
                        var n = t[i],
                          r = {};
                        e[i] = r;
                        for (var o in n) {
                          var s = !0,
                            a = n[o],
                            c = o.toLowerCase();
                          switch (c) {
                            case 'kd':
                            case 'ka':
                            case 'ks':
                              this.options &&
                                this.options.normalizeRGB &&
                                (a = [a[0] / 255, a[1] / 255, a[2] / 255]),
                                this.options &&
                                  this.options.ignoreZeroRGBs &&
                                  0 === a[0] &&
                                  0 === a[1] &&
                                  0 === a[2] &&
                                  (s = !1);
                          }
                          s && (r[c] = a);
                        }
                      }
                      return e;
                    },
                    preload: function() {
                      for (var t in this.materialsInfo) this.create(t);
                    },
                    getIndex: function(t) {
                      return this.nameLookup[t];
                    },
                    getAsArray: function() {
                      var t = 0;
                      for (var e in this.materialsInfo)
                        (this.materialsArray[t] = this.create(e)),
                          (this.nameLookup[e] = t),
                          t++;
                      return this.materialsArray;
                    },
                    create: function(t) {
                      return (
                        void 0 === this.materials[t] && this.createMaterial_(t),
                        this.materials[t]
                      );
                    },
                    createMaterial_: function(t) {
                      var e = this,
                        i = this.materialsInfo[t],
                        n = { name: t, side: this.side };
                      function r(t, i) {
                        if (!n[t]) {
                          var r,
                            o,
                            s = e.getTextureParams(i, n),
                            a = e.loadTexture(
                              ((r = e.baseUrl),
                              'string' != typeof (o = s.url) || '' === o
                                ? ''
                                : /^https?:\/\//i.test(o) ? o : r + o)
                            );
                          a.repeat.copy(s.scale),
                            a.offset.copy(s.offset),
                            (a.wrapS = e.wrap),
                            (a.wrapT = e.wrap),
                            (n[t] = a);
                        }
                      }
                      for (var o in i) {
                        var s,
                          a = i[o];
                        if ('' !== a)
                          switch (o.toLowerCase()) {
                            case 'kd':
                              n.color = new THREE.Color().fromArray(a);
                              break;
                            case 'ks':
                              n.specular = new THREE.Color().fromArray(a);
                              break;
                            case 'map_kd':
                              r('map', a);
                              break;
                            case 'map_ks':
                              r('specularMap', a);
                              break;
                            case 'norm':
                              r('normalMap', a);
                              break;
                            case 'map_bump':
                            case 'bump':
                              r('bumpMap', a);
                              break;
                            case 'ns':
                              n.shininess = parseFloat(a);
                              break;
                            case 'd':
                              (s = parseFloat(a)) < 1 &&
                                ((n.opacity = s), (n.transparent = !0));
                              break;
                            case 'tr':
                              (s = parseFloat(a)) > 0 &&
                                ((n.opacity = 1 - s), (n.transparent = !0));
                          }
                      }
                      return (
                        (this.materials[t] = new THREE.MeshPhongMaterial(n)),
                        this.materials[t]
                      );
                    },
                    getTextureParams: function(t, e) {
                      var i,
                        n = {
                          scale: new THREE.Vector2(1, 1),
                          offset: new THREE.Vector2(0, 0)
                        },
                        r = t.split(/\s+/);
                      return (
                        (i = r.indexOf('-bm')) >= 0 &&
                          ((e.bumpScale = parseFloat(r[i + 1])),
                          r.splice(i, 2)),
                        (i = r.indexOf('-s')) >= 0 &&
                          (n.scale.set(
                            parseFloat(r[i + 1]),
                            parseFloat(r[i + 2])
                          ),
                          r.splice(i, 4)),
                        (i = r.indexOf('-o')) >= 0 &&
                          (n.offset.set(
                            parseFloat(r[i + 1]),
                            parseFloat(r[i + 2])
                          ),
                          r.splice(i, 4)),
                        (n.url = r.join(' ').trim()),
                        n
                      );
                    },
                    loadTexture: function(t, e, i, n, r) {
                      var o,
                        s = THREE.Loader.Handlers.get(t),
                        a =
                          void 0 !== this.manager
                            ? this.manager
                            : THREE.DefaultLoadingManager;
                      return (
                        null === s && (s = new THREE.TextureLoader(a)),
                        s.setCrossOrigin && s.setCrossOrigin(this.crossOrigin),
                        (o = s.load(t, i, n, r)),
                        void 0 !== e && (o.mapping = e),
                        o
                      );
                    }
                  });
              },
              {}
            ],
            45: [
              function(t, e, i) {
                THREE.OBJLoader = (function() {
                  var t = /^[og]\s*(.+)?/,
                    e = /^mtllib /,
                    i = /^usemtl /;
                  function n(t) {
                    (this.manager =
                      void 0 !== t ? t : THREE.DefaultLoadingManager),
                      (this.materials = null);
                  }
                  return (
                    (n.prototype = {
                      constructor: n,
                      load: function(t, e, i, n) {
                        var r = this,
                          o = new THREE.FileLoader(r.manager);
                        o.setPath(this.path),
                          o.load(
                            t,
                            function(t) {
                              e(r.parse(t));
                            },
                            i,
                            n
                          );
                      },
                      setPath: function(t) {
                        this.path = t;
                      },
                      setMaterials: function(t) {
                        return (this.materials = t), this;
                      },
                      parse: function(n) {
                        console.time('OBJLoader');
                        var r = new function() {
                          var t = {
                            objects: [],
                            object: {},
                            vertices: [],
                            normals: [],
                            uvs: [],
                            materialLibraries: [],
                            startObject: function(t, e) {
                              if (
                                this.object &&
                                !1 === this.object.fromDeclaration
                              )
                                return (
                                  (this.object.name = t),
                                  void (this.object.fromDeclaration = !1 !== e)
                                );
                              var i =
                                this.object &&
                                'function' == typeof this.object.currentMaterial
                                  ? this.object.currentMaterial()
                                  : void 0;
                              if (
                                (this.object &&
                                  'function' == typeof this.object._finalize &&
                                  this.object._finalize(!0),
                                (this.object = {
                                  name: t || '',
                                  fromDeclaration: !1 !== e,
                                  geometry: {
                                    vertices: [],
                                    normals: [],
                                    uvs: []
                                  },
                                  materials: [],
                                  smooth: !0,
                                  startMaterial: function(t, e) {
                                    var i = this._finalize(!1);
                                    i &&
                                      (i.inherited || i.groupCount <= 0) &&
                                      this.materials.splice(i.index, 1);
                                    var n = {
                                      index: this.materials.length,
                                      name: t || '',
                                      mtllib:
                                        Array.isArray(e) && e.length > 0
                                          ? e[e.length - 1]
                                          : '',
                                      smooth:
                                        void 0 !== i ? i.smooth : this.smooth,
                                      groupStart: void 0 !== i ? i.groupEnd : 0,
                                      groupEnd: -1,
                                      groupCount: -1,
                                      inherited: !1,
                                      clone: function(t) {
                                        var e = {
                                          index:
                                            'number' == typeof t
                                              ? t
                                              : this.index,
                                          name: this.name,
                                          mtllib: this.mtllib,
                                          smooth: this.smooth,
                                          groupStart: 0,
                                          groupEnd: -1,
                                          groupCount: -1,
                                          inherited: !1
                                        };
                                        return (
                                          (e.clone = this.clone.bind(e)), e
                                        );
                                      }
                                    };
                                    return this.materials.push(n), n;
                                  },
                                  currentMaterial: function() {
                                    if (this.materials.length > 0)
                                      return this.materials[
                                        this.materials.length - 1
                                      ];
                                  },
                                  _finalize: function(t) {
                                    var e = this.currentMaterial();
                                    if (
                                      (e &&
                                        -1 === e.groupEnd &&
                                        ((e.groupEnd =
                                          this.geometry.vertices.length / 3),
                                        (e.groupCount =
                                          e.groupEnd - e.groupStart),
                                        (e.inherited = !1)),
                                      t && this.materials.length > 1)
                                    )
                                      for (
                                        var i = this.materials.length - 1;
                                        i >= 0;
                                        i--
                                      )
                                        this.materials[i].groupCount <= 0 &&
                                          this.materials.splice(i, 1);
                                    return (
                                      t &&
                                        0 === this.materials.length &&
                                        this.materials.push({
                                          name: '',
                                          smooth: this.smooth
                                        }),
                                      e
                                    );
                                  }
                                }),
                                i && i.name && 'function' == typeof i.clone)
                              ) {
                                var n = i.clone(0);
                                (n.inherited = !0),
                                  this.object.materials.push(n);
                              }
                              this.objects.push(this.object);
                            },
                            finalize: function() {
                              this.object &&
                                'function' == typeof this.object._finalize &&
                                this.object._finalize(!0);
                            },
                            parseVertexIndex: function(t, e) {
                              var i = parseInt(t, 10);
                              return 3 * (i >= 0 ? i - 1 : i + e / 3);
                            },
                            parseNormalIndex: function(t, e) {
                              var i = parseInt(t, 10);
                              return 3 * (i >= 0 ? i - 1 : i + e / 3);
                            },
                            parseUVIndex: function(t, e) {
                              var i = parseInt(t, 10);
                              return 2 * (i >= 0 ? i - 1 : i + e / 2);
                            },
                            addVertex: function(t, e, i) {
                              var n = this.vertices,
                                r = this.object.geometry.vertices;
                              r.push(n[t + 0], n[t + 1], n[t + 2]),
                                r.push(n[e + 0], n[e + 1], n[e + 2]),
                                r.push(n[i + 0], n[i + 1], n[i + 2]);
                            },
                            addVertexLine: function(t) {
                              var e = this.vertices;
                              this.object.geometry.vertices.push(
                                e[t + 0],
                                e[t + 1],
                                e[t + 2]
                              );
                            },
                            addNormal: function(t, e, i) {
                              var n = this.normals,
                                r = this.object.geometry.normals;
                              r.push(n[t + 0], n[t + 1], n[t + 2]),
                                r.push(n[e + 0], n[e + 1], n[e + 2]),
                                r.push(n[i + 0], n[i + 1], n[i + 2]);
                            },
                            addUV: function(t, e, i) {
                              var n = this.uvs,
                                r = this.object.geometry.uvs;
                              r.push(n[t + 0], n[t + 1]),
                                r.push(n[e + 0], n[e + 1]),
                                r.push(n[i + 0], n[i + 1]);
                            },
                            addUVLine: function(t) {
                              var e = this.uvs;
                              this.object.geometry.uvs.push(e[t + 0], e[t + 1]);
                            },
                            addFace: function(t, e, i, n, r, o, s, a, c) {
                              var l = this.vertices.length,
                                u = this.parseVertexIndex(t, l),
                                h = this.parseVertexIndex(e, l),
                                d = this.parseVertexIndex(i, l);
                              if ((this.addVertex(u, h, d), void 0 !== n)) {
                                var p = this.uvs.length;
                                (u = this.parseUVIndex(n, p)),
                                  (h = this.parseUVIndex(r, p)),
                                  (d = this.parseUVIndex(o, p)),
                                  this.addUV(u, h, d);
                              }
                              if (void 0 !== s) {
                                var f = this.normals.length;
                                (u = this.parseNormalIndex(s, f)),
                                  (h =
                                    s === a ? u : this.parseNormalIndex(a, f)),
                                  (d =
                                    s === c ? u : this.parseNormalIndex(c, f)),
                                  this.addNormal(u, h, d);
                              }
                            },
                            addLineGeometry: function(t, e) {
                              this.object.geometry.type = 'Line';
                              for (
                                var i = this.vertices.length,
                                  n = this.uvs.length,
                                  r = 0,
                                  o = t.length;
                                r < o;
                                r++
                              )
                                this.addVertexLine(
                                  this.parseVertexIndex(t[r], i)
                                );
                              var s = 0;
                              for (o = e.length; s < o; s++)
                                this.addUVLine(this.parseUVIndex(e[s], n));
                            }
                          };
                          return t.startObject('', !1), t;
                        }();
                        -1 !== n.indexOf('\r\n') &&
                          (n = n.replace(/\r\n/g, '\n')),
                          -1 !== n.indexOf('\\\n') &&
                            (n = n.replace(/\\\n/g, ''));
                        for (
                          var o = n.split('\n'),
                            s = '',
                            a = '',
                            c = [],
                            l = 'function' == typeof ''.trimLeft,
                            u = 0,
                            h = o.length;
                          u < h;
                          u++
                        )
                          if (
                            ((s = o[u]),
                            0 !== (s = l ? s.trimLeft() : s.trim()).length &&
                              '#' !== (a = s.charAt(0)))
                          )
                            if ('v' === a) {
                              var d = s.split(/\s+/);
                              switch (d[0]) {
                                case 'v':
                                  r.vertices.push(
                                    parseFloat(d[1]),
                                    parseFloat(d[2]),
                                    parseFloat(d[3])
                                  );
                                  break;
                                case 'vn':
                                  r.normals.push(
                                    parseFloat(d[1]),
                                    parseFloat(d[2]),
                                    parseFloat(d[3])
                                  );
                                  break;
                                case 'vt':
                                  r.uvs.push(
                                    parseFloat(d[1]),
                                    parseFloat(d[2])
                                  );
                              }
                            } else if ('f' === a) {
                              for (
                                var p = s
                                    .substr(1)
                                    .trim()
                                    .split(/\s+/),
                                  f = [],
                                  m = 0,
                                  g = p.length;
                                m < g;
                                m++
                              ) {
                                var v = p[m];
                                if (v.length > 0) {
                                  var y = v.split('/');
                                  f.push(y);
                                }
                              }
                              var w = f[0];
                              for (m = 1, g = f.length - 1; m < g; m++) {
                                var M = f[m],
                                  E = f[m + 1];
                                r.addFace(
                                  w[0],
                                  M[0],
                                  E[0],
                                  w[1],
                                  M[1],
                                  E[1],
                                  w[2],
                                  M[2],
                                  E[2]
                                );
                              }
                            } else if ('l' === a) {
                              var b = s
                                  .substring(1)
                                  .trim()
                                  .split(' '),
                                x = [],
                                A = [];
                              if (-1 === s.indexOf('/')) x = b;
                              else
                                for (var T = 0, L = b.length; T < L; T++) {
                                  var N = b[T].split('/');
                                  '' !== N[0] && x.push(N[0]),
                                    '' !== N[1] && A.push(N[1]);
                                }
                              r.addLineGeometry(x, A);
                            } else if (null !== (c = t.exec(s))) {
                              var D = (' ' + c[0].substr(1).trim()).substr(1);
                              r.startObject(D);
                            } else if (i.test(s))
                              r.object.startMaterial(
                                s.substring(7).trim(),
                                r.materialLibraries
                              );
                            else if (e.test(s))
                              r.materialLibraries.push(s.substring(7).trim());
                            else {
                              if ('s' !== a) {
                                if ('\0' === s) continue;
                                throw new Error("Unexpected line: '" + s + "'");
                              }
                              if ((c = s.split(' ')).length > 1) {
                                var S = c[1].trim().toLowerCase();
                                r.object.smooth = '0' !== S && 'off' !== S;
                              } else r.object.smooth = !0;
                              (F = r.object.currentMaterial()) &&
                                (F.smooth = r.object.smooth);
                            }
                        r.finalize();
                        var C = new THREE.Group();
                        C.materialLibraries = [].concat(r.materialLibraries);
                        for (u = 0, h = r.objects.length; u < h; u++) {
                          var _ = r.objects[u],
                            I = _.geometry,
                            j = _.materials,
                            O = 'Line' === I.type;
                          if (0 !== I.vertices.length) {
                            var R = new THREE.BufferGeometry();
                            R.addAttribute(
                              'position',
                              new THREE.BufferAttribute(
                                new Float32Array(I.vertices),
                                3
                              )
                            ),
                              I.normals.length > 0
                                ? R.addAttribute(
                                    'normal',
                                    new THREE.BufferAttribute(
                                      new Float32Array(I.normals),
                                      3
                                    )
                                  )
                                : R.computeVertexNormals(),
                              I.uvs.length > 0 &&
                                R.addAttribute(
                                  'uv',
                                  new THREE.BufferAttribute(
                                    new Float32Array(I.uvs),
                                    2
                                  )
                                );
                            for (
                              var z, k = [], B = 0, P = j.length;
                              B < P;
                              B++
                            ) {
                              var U = j[B],
                                F = void 0;
                              if (
                                null !== this.materials &&
                                ((F = this.materials.create(U.name)),
                                O &&
                                  F &&
                                  !(F instanceof THREE.LineBasicMaterial))
                              ) {
                                var H = new THREE.LineBasicMaterial();
                                H.copy(F), (F = H);
                              }
                              F ||
                                ((F = O
                                  ? new THREE.LineBasicMaterial()
                                  : new THREE.MeshPhongMaterial()).name =
                                  U.name),
                                (F.flatShading = !U.smooth),
                                k.push(F);
                            }
                            if (k.length > 1) {
                              for (B = 0, P = j.length; B < P; B++) {
                                U = j[B];
                                R.addGroup(U.groupStart, U.groupCount, B);
                              }
                              z = O
                                ? new THREE.LineSegments(R, k)
                                : new THREE.Mesh(R, k);
                            } else
                              z = O
                                ? new THREE.LineSegments(R, k[0])
                                : new THREE.Mesh(R, k[0]);
                            (z.name = _.name), C.add(z);
                          }
                        }
                        return console.timeEnd('OBJLoader'), C;
                      }
                    }),
                    n
                  );
                })();
              },
              {}
            ],
            46: [
              function(t, e, i) {
                ((i = e.exports = function(t) {
                  return t.replace(/^\s*|\s*$/g, '');
                }).left = function(t) {
                  return t.replace(/^\s*/, '');
                }),
                  (i.right = function(t) {
                    return t.replace(/\s*$/, '');
                  });
              },
              {}
            ],
            47: [
              function(t, e, i) {
                e.exports = {
                  _args: [
                    [
                      {
                        raw: 'webvr-polyfill@^0.9.36',
                        scope: null,
                        escapedName: 'webvr-polyfill',
                        name: 'webvr-polyfill',
                        rawSpec: '^0.9.36',
                        spec: '>=0.9.36 <0.10.0',
                        type: 'range'
                      },
                      'X:\\Development\\aframe'
                    ]
                  ],
                  _from: 'webvr-polyfill@>=0.9.36 <0.10.0',
                  _id: 'webvr-polyfill@0.9.38',
                  _inCache: !0,
                  _location: '/webvr-polyfill',
                  _nodeVersion: '8.1.4',
                  _npmOperationalInternal: {
                    host: 's3://npm-registry-packages',
                    tmp:
                      'tmp/webvr-polyfill-0.9.38.tgz_1505328121599_0.8887633208651096'
                  },
                  _npmUser: { name: 'jsantell', email: 'jsantell@gmail.com' },
                  _npmVersion: '5.4.1',
                  _phantomChildren: {},
                  _requested: {
                    raw: 'webvr-polyfill@^0.9.36',
                    scope: null,
                    escapedName: 'webvr-polyfill',
                    name: 'webvr-polyfill',
                    rawSpec: '^0.9.36',
                    spec: '>=0.9.36 <0.10.0',
                    type: 'range'
                  },
                  _requiredBy: ['/'],
                  _resolved:
                    'https://registry.npmjs.org/webvr-polyfill/-/webvr-polyfill-0.9.38.tgz',
                  _shasum: '740099a2f268a56a0bf18181fb57395efad70712',
                  _shrinkwrap: null,
                  _spec: 'webvr-polyfill@^0.9.36',
                  _where: 'X:\\Development\\aframe',
                  authors: [
                    'Boris Smus <boris@smus.com>',
                    'Brandon Jones <tojiro@gmail.com>',
                    'Jordan Santell <jordan@jsantell.com>'
                  ],
                  bugs: {
                    url: 'https://github.com/googlevr/webvr-polyfill/issues'
                  },
                  dependencies: {},
                  description:
                    'Use WebVR today, on mobile or desktop, without requiring a special browser build.',
                  devDependencies: {
                    chai: '^3.5.0',
                    jsdom: '^9.12.0',
                    mocha: '^3.2.0',
                    semver: '^5.3.0',
                    webpack: '^2.6.1',
                    'webpack-dev-server': '^2.4.5'
                  },
                  directories: {},
                  dist: {
                    integrity:
                      'sha512-HABweqWYE0suk6P5TdHlagJK56HSecB5xKj6ZshocrxSj9UmNOCjCRv4vFYHCaFZKtuKWa8niRHVbJ3Vo7JYDg==',
                    shasum: '740099a2f268a56a0bf18181fb57395efad70712',
                    tarball:
                      'https://registry.npmjs.org/webvr-polyfill/-/webvr-polyfill-0.9.38.tgz'
                  },
                  gitHead: '8063169c6fc52342ebe5524d7f217987f9aa9cab',
                  homepage: 'https://github.com/googlevr/webvr-polyfill',
                  keywords: ['vr', 'webvr'],
                  license: 'Apache-2.0',
                  main: 'src/node-entry',
                  maintainers: [
                    { name: 'jsantell', email: 'jsantell@gmail.com' },
                    { name: 'toji', email: 'tojiro@gmail.com' },
                    { name: 'smus', email: 'boris@smus.com' }
                  ],
                  name: 'webvr-polyfill',
                  optionalDependencies: {},
                  readme: 'ERROR: No README data found!',
                  repository: {
                    type: 'git',
                    url: 'git+https://github.com/googlevr/webvr-polyfill.git'
                  },
                  scripts: {
                    build: 'webpack',
                    start: 'npm run watch',
                    test: 'mocha',
                    watch: 'webpack-dev-server'
                  },
                  version: '0.9.38'
                };
              },
              {}
            ],
            48: [
              function(t, e, i) {
                var n = t('./util.js'),
                  r = t('./wakelock.js'),
                  o = 1e3,
                  s = !1,
                  a = [0, 0, 0.5, 1],
                  c = [0.5, 0, 0.5, 1];
                function l() {
                  (this.isPolyfilled = !0),
                    (this.displayId = o++),
                    (this.displayName = 'webvr-polyfill displayName'),
                    (this.depthNear = 0.01),
                    (this.depthFar = 1e4),
                    (this.isConnected = !0),
                    (this.isPresenting = !1),
                    (this.capabilities = {
                      hasPosition: !1,
                      hasOrientation: !1,
                      hasExternalDisplay: !1,
                      canPresent: !1,
                      maxLayers: 1
                    }),
                    (this.stageParameters = null),
                    (this.waitingForPresent_ = !1),
                    (this.layer_ = null),
                    (this.fullscreenElement_ = null),
                    (this.fullscreenWrapper_ = null),
                    (this.fullscreenElementCachedStyle_ = null),
                    (this.fullscreenEventTarget_ = null),
                    (this.fullscreenChangeHandler_ = null),
                    (this.fullscreenErrorHandler_ = null),
                    (this.wakelock_ = new r());
                }
                function u() {
                  (this.isPolyfilled = !0),
                    (this.hardwareUnitId = 'webvr-polyfill hardwareUnitId'),
                    (this.deviceId = 'webvr-polyfill deviceId'),
                    (this.deviceName = 'webvr-polyfill deviceName');
                }
                function h() {}
                function d() {}
                (l.prototype.getFrameData = function(t) {
                  return n.frameDataFromPose(t, this.getPose(), this);
                }),
                  (l.prototype.getPose = function() {
                    return this.getImmediatePose();
                  }),
                  (l.prototype.requestAnimationFrame = function(t) {
                    return window.requestAnimationFrame(t);
                  }),
                  (l.prototype.cancelAnimationFrame = function(t) {
                    return window.cancelAnimationFrame(t);
                  }),
                  (l.prototype.wrapForFullscreen = function(t) {
                    if (n.isIOS()) return t;
                    if (!this.fullscreenWrapper_) {
                      this.fullscreenWrapper_ = document.createElement('div');
                      var e = [
                        'height: ' +
                          Math.min(screen.height, screen.width) +
                          'px !important',
                        'top: 0 !important',
                        'left: 0 !important',
                        'right: 0 !important',
                        'border: 0',
                        'margin: 0',
                        'padding: 0',
                        'z-index: 999999 !important',
                        'position: fixed'
                      ];
                      this.fullscreenWrapper_.setAttribute(
                        'style',
                        e.join('; ') + ';'
                      ),
                        this.fullscreenWrapper_.classList.add(
                          'webvr-polyfill-fullscreen-wrapper'
                        );
                    }
                    if (this.fullscreenElement_ == t)
                      return this.fullscreenWrapper_;
                    this.removeFullscreenWrapper(),
                      (this.fullscreenElement_ = t);
                    var i = this.fullscreenElement_.parentElement;
                    i.insertBefore(
                      this.fullscreenWrapper_,
                      this.fullscreenElement_
                    ),
                      i.removeChild(this.fullscreenElement_),
                      this.fullscreenWrapper_.insertBefore(
                        this.fullscreenElement_,
                        this.fullscreenWrapper_.firstChild
                      ),
                      (this.fullscreenElementCachedStyle_ = this.fullscreenElement_.getAttribute(
                        'style'
                      ));
                    var r = this;
                    return (
                      (function() {
                        if (r.fullscreenElement_) {
                          var t = [
                            'position: absolute',
                            'top: 0',
                            'left: 0',
                            'width: ' +
                              Math.max(screen.width, screen.height) +
                              'px',
                            'height: ' +
                              Math.min(screen.height, screen.width) +
                              'px',
                            'border: 0',
                            'margin: 0',
                            'padding: 0'
                          ];
                          r.fullscreenElement_.setAttribute(
                            'style',
                            t.join('; ') + ';'
                          );
                        }
                      })(),
                      this.fullscreenWrapper_
                    );
                  }),
                  (l.prototype.removeFullscreenWrapper = function() {
                    if (this.fullscreenElement_) {
                      var t = this.fullscreenElement_;
                      this.fullscreenElementCachedStyle_
                        ? t.setAttribute(
                            'style',
                            this.fullscreenElementCachedStyle_
                          )
                        : t.removeAttribute('style'),
                        (this.fullscreenElement_ = null),
                        (this.fullscreenElementCachedStyle_ = null);
                      var e = this.fullscreenWrapper_.parentElement;
                      return (
                        this.fullscreenWrapper_.removeChild(t),
                        e.insertBefore(t, this.fullscreenWrapper_),
                        e.removeChild(this.fullscreenWrapper_),
                        t
                      );
                    }
                  }),
                  (l.prototype.requestPresent = function(t) {
                    var e = this.isPresenting,
                      i = this;
                    return (
                      t instanceof Array ||
                        (s ||
                          (console.warn(
                            'Using a deprecated form of requestPresent. Should pass in an array of VRLayers.'
                          ),
                          (s = !0)),
                        (t = [t])),
                      new Promise(function(r, o) {
                        if (i.capabilities.canPresent)
                          if (
                            0 == t.length ||
                            t.length > i.capabilities.maxLayers
                          )
                            o(new Error('Invalid number of layers.'));
                          else {
                            var s = t[0];
                            if (s.source) {
                              var l = s.leftBounds || a,
                                u = s.rightBounds || c;
                              if (e) {
                                var h = i.layer_;
                                h.source !== s.source && (h.source = s.source);
                                for (var d = 0; d < 4; d++)
                                  (h.leftBounds[d] = l[d]),
                                    (h.rightBounds[d] = u[d]);
                                r();
                              } else {
                                if (
                                  ((i.layer_ = {
                                    predistorted: s.predistorted,
                                    source: s.source,
                                    leftBounds: l.slice(0),
                                    rightBounds: u.slice(0)
                                  }),
                                  (i.waitingForPresent_ = !1),
                                  i.layer_ && i.layer_.source)
                                ) {
                                  var p = i.wrapForFullscreen(i.layer_.source);
                                  i.addFullscreenListeners_(
                                    p,
                                    function() {
                                      var t = n.getFullscreenElement();
                                      (i.isPresenting = p === t),
                                        i.isPresenting
                                          ? (screen.orientation &&
                                              screen.orientation.lock &&
                                              screen.orientation
                                                .lock('landscape-primary')
                                                .catch(function(t) {
                                                  console.error(
                                                    'screen.orientation.lock() failed due to',
                                                    t.message
                                                  );
                                                }),
                                            (i.waitingForPresent_ = !1),
                                            i.beginPresent_(),
                                            r())
                                          : (screen.orientation &&
                                              screen.orientation.unlock &&
                                              screen.orientation.unlock(),
                                            i.removeFullscreenWrapper(),
                                            i.wakelock_.release(),
                                            i.endPresent_(),
                                            i.removeFullscreenListeners_()),
                                        i.fireVRDisplayPresentChange_();
                                    },
                                    function() {
                                      i.waitingForPresent_ &&
                                        (i.removeFullscreenWrapper(),
                                        i.removeFullscreenListeners_(),
                                        i.wakelock_.release(),
                                        (i.waitingForPresent_ = !1),
                                        (i.isPresenting = !1),
                                        o(new Error('Unable to present.')));
                                    }
                                  ),
                                    n.requestFullscreen(p)
                                      ? (i.wakelock_.request(),
                                        (i.waitingForPresent_ = !0))
                                      : (n.isIOS() || n.isWebViewAndroid()) &&
                                        (i.wakelock_.request(),
                                        (i.isPresenting = !0),
                                        i.beginPresent_(),
                                        i.fireVRDisplayPresentChange_(),
                                        r());
                                }
                                i.waitingForPresent_ ||
                                  n.isIOS() ||
                                  (n.exitFullscreen(),
                                  o(new Error('Unable to present.')));
                              }
                            } else r();
                          }
                        else
                          o(
                            new Error('VRDisplay is not capable of presenting.')
                          );
                      })
                    );
                  }),
                  (l.prototype.exitPresent = function() {
                    var t = this.isPresenting,
                      e = this;
                    return (
                      (this.isPresenting = !1),
                      (this.layer_ = null),
                      this.wakelock_.release(),
                      new Promise(function(i, r) {
                        t
                          ? (!n.exitFullscreen() &&
                              n.isIOS() &&
                              (e.endPresent_(),
                              e.fireVRDisplayPresentChange_()),
                            n.isWebViewAndroid() &&
                              (e.removeFullscreenWrapper(),
                              e.removeFullscreenListeners_(),
                              e.endPresent_(),
                              e.fireVRDisplayPresentChange_()),
                            i())
                          : r(new Error('Was not presenting to VRDisplay.'));
                      })
                    );
                  }),
                  (l.prototype.getLayers = function() {
                    return this.layer_ ? [this.layer_] : [];
                  }),
                  (l.prototype.fireVRDisplayPresentChange_ = function() {
                    var t = new CustomEvent('vrdisplaypresentchange', {
                      detail: { display: this }
                    });
                    window.dispatchEvent(t);
                  }),
                  (l.prototype.fireVRDisplayConnect_ = function() {
                    var t = new CustomEvent('vrdisplayconnect', {
                      detail: { display: this }
                    });
                    window.dispatchEvent(t);
                  }),
                  (l.prototype.addFullscreenListeners_ = function(t, e, i) {
                    this.removeFullscreenListeners_(),
                      (this.fullscreenEventTarget_ = t),
                      (this.fullscreenChangeHandler_ = e),
                      (this.fullscreenErrorHandler_ = i),
                      e &&
                        (document.fullscreenEnabled
                          ? t.addEventListener('fullscreenchange', e, !1)
                          : document.webkitFullscreenEnabled
                            ? t.addEventListener(
                                'webkitfullscreenchange',
                                e,
                                !1
                              )
                            : document.mozFullScreenEnabled
                              ? document.addEventListener(
                                  'mozfullscreenchange',
                                  e,
                                  !1
                                )
                              : document.msFullscreenEnabled &&
                                t.addEventListener(
                                  'msfullscreenchange',
                                  e,
                                  !1
                                )),
                      i &&
                        (document.fullscreenEnabled
                          ? t.addEventListener('fullscreenerror', i, !1)
                          : document.webkitFullscreenEnabled
                            ? t.addEventListener('webkitfullscreenerror', i, !1)
                            : document.mozFullScreenEnabled
                              ? document.addEventListener(
                                  'mozfullscreenerror',
                                  i,
                                  !1
                                )
                              : document.msFullscreenEnabled &&
                                t.addEventListener('msfullscreenerror', i, !1));
                  }),
                  (l.prototype.removeFullscreenListeners_ = function() {
                    if (this.fullscreenEventTarget_) {
                      var t = this.fullscreenEventTarget_;
                      if (this.fullscreenChangeHandler_) {
                        var e = this.fullscreenChangeHandler_;
                        t.removeEventListener('fullscreenchange', e, !1),
                          t.removeEventListener(
                            'webkitfullscreenchange',
                            e,
                            !1
                          ),
                          document.removeEventListener(
                            'mozfullscreenchange',
                            e,
                            !1
                          ),
                          t.removeEventListener('msfullscreenchange', e, !1);
                      }
                      if (this.fullscreenErrorHandler_) {
                        var i = this.fullscreenErrorHandler_;
                        t.removeEventListener('fullscreenerror', i, !1),
                          t.removeEventListener('webkitfullscreenerror', i, !1),
                          document.removeEventListener(
                            'mozfullscreenerror',
                            i,
                            !1
                          ),
                          t.removeEventListener('msfullscreenerror', i, !1);
                      }
                      (this.fullscreenEventTarget_ = null),
                        (this.fullscreenChangeHandler_ = null),
                        (this.fullscreenErrorHandler_ = null);
                    }
                  }),
                  (l.prototype.beginPresent_ = function() {}),
                  (l.prototype.endPresent_ = function() {}),
                  (l.prototype.submitFrame = function(t) {}),
                  (l.prototype.getEyeParameters = function(t) {
                    return null;
                  }),
                  (h.prototype = new u()),
                  (d.prototype = new u()),
                  (e.exports.VRFrameData = function() {
                    (this.leftProjectionMatrix = new Float32Array(16)),
                      (this.leftViewMatrix = new Float32Array(16)),
                      (this.rightProjectionMatrix = new Float32Array(16)),
                      (this.rightViewMatrix = new Float32Array(16)),
                      (this.pose = null);
                  }),
                  (e.exports.VRDisplay = l),
                  (e.exports.VRDevice = u),
                  (e.exports.HMDVRDevice = h),
                  (e.exports.PositionSensorVRDevice = d);
              },
              { './util.js': 68, './wakelock.js': 70 }
            ],
            49: [
              function(t, e, i) {
                var n = t('./cardboard-ui.js'),
                  r = t('./util.js'),
                  o = t('./deps/wglu-preserve-state.js'),
                  s = [
                    'attribute vec2 position;',
                    'attribute vec3 texCoord;',
                    'varying vec2 vTexCoord;',
                    'uniform vec4 viewportOffsetScale[2];',
                    'void main() {',
                    '  vec4 viewport = viewportOffsetScale[int(texCoord.z)];',
                    '  vTexCoord = (texCoord.xy * viewport.zw) + viewport.xy;',
                    '  gl_Position = vec4( position, 1.0, 1.0 );',
                    '}'
                  ].join('\n'),
                  a = [
                    'precision mediump float;',
                    'uniform sampler2D diffuse;',
                    'varying vec2 vTexCoord;',
                    'void main() {',
                    '  gl_FragColor = texture2D(diffuse, vTexCoord);',
                    '}'
                  ].join('\n');
                function c(t) {
                  (this.gl = t),
                    (this.ctxAttribs = t.getContextAttributes()),
                    (this.meshWidth = 20),
                    (this.meshHeight = 20),
                    (this.bufferScale = window.WebVRConfig.BUFFER_SCALE),
                    (this.bufferWidth = t.drawingBufferWidth),
                    (this.bufferHeight = t.drawingBufferHeight),
                    (this.realBindFramebuffer = t.bindFramebuffer),
                    (this.realEnable = t.enable),
                    (this.realDisable = t.disable),
                    (this.realColorMask = t.colorMask),
                    (this.realClearColor = t.clearColor),
                    (this.realViewport = t.viewport),
                    r.isIOS() ||
                      ((this.realCanvasWidth = Object.getOwnPropertyDescriptor(
                        t.canvas.__proto__,
                        'width'
                      )),
                      (this.realCanvasHeight = Object.getOwnPropertyDescriptor(
                        t.canvas.__proto__,
                        'height'
                      ))),
                    (this.isPatched = !1),
                    (this.lastBoundFramebuffer = null),
                    (this.cullFace = !1),
                    (this.depthTest = !1),
                    (this.blend = !1),
                    (this.scissorTest = !1),
                    (this.stencilTest = !1),
                    (this.viewport = [0, 0, 0, 0]),
                    (this.colorMask = [!0, !0, !0, !0]),
                    (this.clearColor = [0, 0, 0, 0]),
                    (this.attribs = { position: 0, texCoord: 1 }),
                    (this.program = r.linkProgram(t, s, a, this.attribs)),
                    (this.uniforms = r.getProgramUniforms(t, this.program)),
                    (this.viewportOffsetScale = new Float32Array(8)),
                    this.setTextureBounds(),
                    (this.vertexBuffer = t.createBuffer()),
                    (this.indexBuffer = t.createBuffer()),
                    (this.indexCount = 0),
                    (this.renderTarget = t.createTexture()),
                    (this.framebuffer = t.createFramebuffer()),
                    (this.depthStencilBuffer = null),
                    (this.depthBuffer = null),
                    (this.stencilBuffer = null),
                    this.ctxAttribs.depth && this.ctxAttribs.stencil
                      ? (this.depthStencilBuffer = t.createRenderbuffer())
                      : this.ctxAttribs.depth
                        ? (this.depthBuffer = t.createRenderbuffer())
                        : this.ctxAttribs.stencil &&
                          (this.stencilBuffer = t.createRenderbuffer()),
                    this.patch(),
                    this.onResize(),
                    window.WebVRConfig.CARDBOARD_UI_DISABLED ||
                      (this.cardboardUI = new n(t));
                }
                (c.prototype.destroy = function() {
                  var t = this.gl;
                  this.unpatch(),
                    t.deleteProgram(this.program),
                    t.deleteBuffer(this.vertexBuffer),
                    t.deleteBuffer(this.indexBuffer),
                    t.deleteTexture(this.renderTarget),
                    t.deleteFramebuffer(this.framebuffer),
                    this.depthStencilBuffer &&
                      t.deleteRenderbuffer(this.depthStencilBuffer),
                    this.depthBuffer && t.deleteRenderbuffer(this.depthBuffer),
                    this.stencilBuffer &&
                      t.deleteRenderbuffer(this.stencilBuffer),
                    this.cardboardUI && this.cardboardUI.destroy();
                }),
                  (c.prototype.onResize = function() {
                    var t = this.gl,
                      e = this,
                      i = [
                        t.RENDERBUFFER_BINDING,
                        t.TEXTURE_BINDING_2D,
                        t.TEXTURE0
                      ];
                    o(t, i, function(t) {
                      e.realBindFramebuffer.call(t, t.FRAMEBUFFER, null),
                        e.scissorTest && e.realDisable.call(t, t.SCISSOR_TEST),
                        e.realColorMask.call(t, !0, !0, !0, !0),
                        e.realViewport.call(
                          t,
                          0,
                          0,
                          t.drawingBufferWidth,
                          t.drawingBufferHeight
                        ),
                        e.realClearColor.call(t, 0, 0, 0, 1),
                        t.clear(t.COLOR_BUFFER_BIT),
                        e.realBindFramebuffer.call(
                          t,
                          t.FRAMEBUFFER,
                          e.framebuffer
                        ),
                        t.bindTexture(t.TEXTURE_2D, e.renderTarget),
                        t.texImage2D(
                          t.TEXTURE_2D,
                          0,
                          e.ctxAttribs.alpha ? t.RGBA : t.RGB,
                          e.bufferWidth,
                          e.bufferHeight,
                          0,
                          e.ctxAttribs.alpha ? t.RGBA : t.RGB,
                          t.UNSIGNED_BYTE,
                          null
                        ),
                        t.texParameteri(
                          t.TEXTURE_2D,
                          t.TEXTURE_MAG_FILTER,
                          t.LINEAR
                        ),
                        t.texParameteri(
                          t.TEXTURE_2D,
                          t.TEXTURE_MIN_FILTER,
                          t.LINEAR
                        ),
                        t.texParameteri(
                          t.TEXTURE_2D,
                          t.TEXTURE_WRAP_S,
                          t.CLAMP_TO_EDGE
                        ),
                        t.texParameteri(
                          t.TEXTURE_2D,
                          t.TEXTURE_WRAP_T,
                          t.CLAMP_TO_EDGE
                        ),
                        t.framebufferTexture2D(
                          t.FRAMEBUFFER,
                          t.COLOR_ATTACHMENT0,
                          t.TEXTURE_2D,
                          e.renderTarget,
                          0
                        ),
                        e.ctxAttribs.depth && e.ctxAttribs.stencil
                          ? (t.bindRenderbuffer(
                              t.RENDERBUFFER,
                              e.depthStencilBuffer
                            ),
                            t.renderbufferStorage(
                              t.RENDERBUFFER,
                              t.DEPTH_STENCIL,
                              e.bufferWidth,
                              e.bufferHeight
                            ),
                            t.framebufferRenderbuffer(
                              t.FRAMEBUFFER,
                              t.DEPTH_STENCIL_ATTACHMENT,
                              t.RENDERBUFFER,
                              e.depthStencilBuffer
                            ))
                          : e.ctxAttribs.depth
                            ? (t.bindRenderbuffer(
                                t.RENDERBUFFER,
                                e.depthBuffer
                              ),
                              t.renderbufferStorage(
                                t.RENDERBUFFER,
                                t.DEPTH_COMPONENT16,
                                e.bufferWidth,
                                e.bufferHeight
                              ),
                              t.framebufferRenderbuffer(
                                t.FRAMEBUFFER,
                                t.DEPTH_ATTACHMENT,
                                t.RENDERBUFFER,
                                e.depthBuffer
                              ))
                            : e.ctxAttribs.stencil &&
                              (t.bindRenderbuffer(
                                t.RENDERBUFFER,
                                e.stencilBuffer
                              ),
                              t.renderbufferStorage(
                                t.RENDERBUFFER,
                                t.STENCIL_INDEX8,
                                e.bufferWidth,
                                e.bufferHeight
                              ),
                              t.framebufferRenderbuffer(
                                t.FRAMEBUFFER,
                                t.STENCIL_ATTACHMENT,
                                t.RENDERBUFFER,
                                e.stencilBuffer
                              )),
                        !t.checkFramebufferStatus(t.FRAMEBUFFER) ===
                          t.FRAMEBUFFER_COMPLETE &&
                          console.error('Framebuffer incomplete!'),
                        e.realBindFramebuffer.call(
                          t,
                          t.FRAMEBUFFER,
                          e.lastBoundFramebuffer
                        ),
                        e.scissorTest && e.realEnable.call(t, t.SCISSOR_TEST),
                        e.realColorMask.apply(t, e.colorMask),
                        e.realViewport.apply(t, e.viewport),
                        e.realClearColor.apply(t, e.clearColor);
                    }),
                      this.cardboardUI && this.cardboardUI.onResize();
                  }),
                  (c.prototype.patch = function() {
                    if (!this.isPatched) {
                      var t = this,
                        e = this.gl.canvas,
                        i = this.gl;
                      r.isIOS() ||
                        ((e.width = r.getScreenWidth() * this.bufferScale),
                        (e.height = r.getScreenHeight() * this.bufferScale),
                        Object.defineProperty(e, 'width', {
                          configurable: !0,
                          enumerable: !0,
                          get: function() {
                            return t.bufferWidth;
                          },
                          set: function(i) {
                            (t.bufferWidth = i),
                              t.realCanvasWidth.set.call(e, i),
                              t.onResize();
                          }
                        }),
                        Object.defineProperty(e, 'height', {
                          configurable: !0,
                          enumerable: !0,
                          get: function() {
                            return t.bufferHeight;
                          },
                          set: function(i) {
                            (t.bufferHeight = i),
                              t.realCanvasHeight.set.call(e, i),
                              t.onResize();
                          }
                        })),
                        (this.lastBoundFramebuffer = i.getParameter(
                          i.FRAMEBUFFER_BINDING
                        )),
                        null == this.lastBoundFramebuffer &&
                          ((this.lastBoundFramebuffer = this.framebuffer),
                          this.gl.bindFramebuffer(
                            i.FRAMEBUFFER,
                            this.framebuffer
                          )),
                        (this.gl.bindFramebuffer = function(e, n) {
                          (t.lastBoundFramebuffer = n || t.framebuffer),
                            t.realBindFramebuffer.call(
                              i,
                              e,
                              t.lastBoundFramebuffer
                            );
                        }),
                        (this.cullFace = i.getParameter(i.CULL_FACE)),
                        (this.depthTest = i.getParameter(i.DEPTH_TEST)),
                        (this.blend = i.getParameter(i.BLEND)),
                        (this.scissorTest = i.getParameter(i.SCISSOR_TEST)),
                        (this.stencilTest = i.getParameter(i.STENCIL_TEST)),
                        (i.enable = function(e) {
                          switch (e) {
                            case i.CULL_FACE:
                              t.cullFace = !0;
                              break;
                            case i.DEPTH_TEST:
                              t.depthTest = !0;
                              break;
                            case i.BLEND:
                              t.blend = !0;
                              break;
                            case i.SCISSOR_TEST:
                              t.scissorTest = !0;
                              break;
                            case i.STENCIL_TEST:
                              t.stencilTest = !0;
                          }
                          t.realEnable.call(i, e);
                        }),
                        (i.disable = function(e) {
                          switch (e) {
                            case i.CULL_FACE:
                              t.cullFace = !1;
                              break;
                            case i.DEPTH_TEST:
                              t.depthTest = !1;
                              break;
                            case i.BLEND:
                              t.blend = !1;
                              break;
                            case i.SCISSOR_TEST:
                              t.scissorTest = !1;
                              break;
                            case i.STENCIL_TEST:
                              t.stencilTest = !1;
                          }
                          t.realDisable.call(i, e);
                        }),
                        (this.colorMask = i.getParameter(i.COLOR_WRITEMASK)),
                        (i.colorMask = function(e, n, r, o) {
                          (t.colorMask[0] = e),
                            (t.colorMask[1] = n),
                            (t.colorMask[2] = r),
                            (t.colorMask[3] = o),
                            t.realColorMask.call(i, e, n, r, o);
                        }),
                        (this.clearColor = i.getParameter(i.COLOR_CLEAR_VALUE)),
                        (i.clearColor = function(e, n, r, o) {
                          (t.clearColor[0] = e),
                            (t.clearColor[1] = n),
                            (t.clearColor[2] = r),
                            (t.clearColor[3] = o),
                            t.realClearColor.call(i, e, n, r, o);
                        }),
                        (this.viewport = i.getParameter(i.VIEWPORT)),
                        (i.viewport = function(e, n, r, o) {
                          (t.viewport[0] = e),
                            (t.viewport[1] = n),
                            (t.viewport[2] = r),
                            (t.viewport[3] = o),
                            t.realViewport.call(i, e, n, r, o);
                        }),
                        (this.isPatched = !0),
                        r.safariCssSizeWorkaround(e);
                    }
                  }),
                  (c.prototype.unpatch = function() {
                    if (this.isPatched) {
                      var t = this.gl,
                        e = this.gl.canvas;
                      r.isIOS() ||
                        (Object.defineProperty(
                          e,
                          'width',
                          this.realCanvasWidth
                        ),
                        Object.defineProperty(
                          e,
                          'height',
                          this.realCanvasHeight
                        )),
                        (e.width = this.bufferWidth),
                        (e.height = this.bufferHeight),
                        (t.bindFramebuffer = this.realBindFramebuffer),
                        (t.enable = this.realEnable),
                        (t.disable = this.realDisable),
                        (t.colorMask = this.realColorMask),
                        (t.clearColor = this.realClearColor),
                        (t.viewport = this.realViewport),
                        this.lastBoundFramebuffer == this.framebuffer &&
                          t.bindFramebuffer(t.FRAMEBUFFER, null),
                        (this.isPatched = !1),
                        setTimeout(function() {
                          r.safariCssSizeWorkaround(e);
                        }, 1);
                    }
                  }),
                  (c.prototype.setTextureBounds = function(t, e) {
                    t || (t = [0, 0, 0.5, 1]),
                      e || (e = [0.5, 0, 0.5, 1]),
                      (this.viewportOffsetScale[0] = t[0]),
                      (this.viewportOffsetScale[1] = t[1]),
                      (this.viewportOffsetScale[2] = t[2]),
                      (this.viewportOffsetScale[3] = t[3]),
                      (this.viewportOffsetScale[4] = e[0]),
                      (this.viewportOffsetScale[5] = e[1]),
                      (this.viewportOffsetScale[6] = e[2]),
                      (this.viewportOffsetScale[7] = e[3]);
                  }),
                  (c.prototype.submitFrame = function() {
                    var t = this.gl,
                      e = this,
                      i = [];
                    if (
                      (window.WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS ||
                        i.push(
                          t.CURRENT_PROGRAM,
                          t.ARRAY_BUFFER_BINDING,
                          t.ELEMENT_ARRAY_BUFFER_BINDING,
                          t.TEXTURE_BINDING_2D,
                          t.TEXTURE0
                        ),
                      o(t, i, function(t) {
                        e.realBindFramebuffer.call(t, t.FRAMEBUFFER, null),
                          e.cullFace && e.realDisable.call(t, t.CULL_FACE),
                          e.depthTest && e.realDisable.call(t, t.DEPTH_TEST),
                          e.blend && e.realDisable.call(t, t.BLEND),
                          e.scissorTest &&
                            e.realDisable.call(t, t.SCISSOR_TEST),
                          e.stencilTest &&
                            e.realDisable.call(t, t.STENCIL_TEST),
                          e.realColorMask.call(t, !0, !0, !0, !0),
                          e.realViewport.call(
                            t,
                            0,
                            0,
                            t.drawingBufferWidth,
                            t.drawingBufferHeight
                          ),
                          (e.ctxAttribs.alpha || r.isIOS()) &&
                            (e.realClearColor.call(t, 0, 0, 0, 1),
                            t.clear(t.COLOR_BUFFER_BIT)),
                          t.useProgram(e.program),
                          t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, e.indexBuffer),
                          t.bindBuffer(t.ARRAY_BUFFER, e.vertexBuffer),
                          t.enableVertexAttribArray(e.attribs.position),
                          t.enableVertexAttribArray(e.attribs.texCoord),
                          t.vertexAttribPointer(
                            e.attribs.position,
                            2,
                            t.FLOAT,
                            !1,
                            20,
                            0
                          ),
                          t.vertexAttribPointer(
                            e.attribs.texCoord,
                            3,
                            t.FLOAT,
                            !1,
                            20,
                            8
                          ),
                          t.activeTexture(t.TEXTURE0),
                          t.uniform1i(e.uniforms.diffuse, 0),
                          t.bindTexture(t.TEXTURE_2D, e.renderTarget),
                          t.uniform4fv(
                            e.uniforms.viewportOffsetScale,
                            e.viewportOffsetScale
                          ),
                          t.drawElements(
                            t.TRIANGLES,
                            e.indexCount,
                            t.UNSIGNED_SHORT,
                            0
                          ),
                          e.cardboardUI && e.cardboardUI.renderNoState(),
                          e.realBindFramebuffer.call(
                            e.gl,
                            t.FRAMEBUFFER,
                            e.framebuffer
                          ),
                          e.ctxAttribs.preserveDrawingBuffer ||
                            (e.realClearColor.call(t, 0, 0, 0, 0),
                            t.clear(t.COLOR_BUFFER_BIT)),
                          window.WebVRConfig.DIRTY_SUBMIT_FRAME_BINDINGS ||
                            e.realBindFramebuffer.call(
                              t,
                              t.FRAMEBUFFER,
                              e.lastBoundFramebuffer
                            ),
                          e.cullFace && e.realEnable.call(t, t.CULL_FACE),
                          e.depthTest && e.realEnable.call(t, t.DEPTH_TEST),
                          e.blend && e.realEnable.call(t, t.BLEND),
                          e.scissorTest && e.realEnable.call(t, t.SCISSOR_TEST),
                          e.stencilTest && e.realEnable.call(t, t.STENCIL_TEST),
                          e.realColorMask.apply(t, e.colorMask),
                          e.realViewport.apply(t, e.viewport),
                          (!e.ctxAttribs.alpha &&
                            e.ctxAttribs.preserveDrawingBuffer) ||
                            e.realClearColor.apply(t, e.clearColor);
                      }),
                      r.isIOS())
                    ) {
                      var n = t.canvas;
                      (n.width == e.bufferWidth &&
                        n.height == e.bufferHeight) ||
                        ((e.bufferWidth = n.width),
                        (e.bufferHeight = n.height),
                        e.onResize());
                    }
                  }),
                  (c.prototype.updateDeviceInfo = function(t) {
                    var e = this.gl,
                      i = this,
                      n = [
                        e.ARRAY_BUFFER_BINDING,
                        e.ELEMENT_ARRAY_BUFFER_BINDING
                      ];
                    o(e, n, function(e) {
                      var n = i.computeMeshVertices_(
                        i.meshWidth,
                        i.meshHeight,
                        t
                      );
                      if (
                        (e.bindBuffer(e.ARRAY_BUFFER, i.vertexBuffer),
                        e.bufferData(e.ARRAY_BUFFER, n, e.STATIC_DRAW),
                        !i.indexCount)
                      ) {
                        var r = i.computeMeshIndices_(
                          i.meshWidth,
                          i.meshHeight
                        );
                        e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, i.indexBuffer),
                          e.bufferData(
                            e.ELEMENT_ARRAY_BUFFER,
                            r,
                            e.STATIC_DRAW
                          ),
                          (i.indexCount = r.length);
                      }
                    });
                  }),
                  (c.prototype.computeMeshVertices_ = function(t, e, i) {
                    for (
                      var n = new Float32Array(2 * t * e * 5),
                        o = i.getLeftEyeVisibleTanAngles(),
                        s = i.getLeftEyeNoLensTanAngles(),
                        a = i.getLeftEyeVisibleScreenRect(s),
                        c = 0,
                        l = 0;
                      l < 2;
                      l++
                    ) {
                      for (var u = 0; u < e; u++)
                        for (var h = 0; h < t; h++, c++) {
                          var d = h / (t - 1),
                            p = u / (e - 1),
                            f = d,
                            m = p,
                            g = r.lerp(o[0], o[2], d),
                            v = r.lerp(o[3], o[1], p),
                            y = Math.sqrt(g * g + v * v),
                            w = i.distortion.distortInverse(y),
                            M = v * w / y;
                          (d = (g * w / y - s[0]) / (s[2] - s[0])),
                            (p = (M - s[3]) / (s[1] - s[3]));
                          i.device.widthMeters, i.device.heightMeters;
                          (d = 2 * (a.x + d * a.width - 0.5)),
                            (p = 2 * (a.y + p * a.height - 0.5)),
                            (n[5 * c + 0] = d),
                            (n[5 * c + 1] = p),
                            (n[5 * c + 2] = f),
                            (n[5 * c + 3] = m),
                            (n[5 * c + 4] = l);
                        }
                      var E = o[2] - o[0];
                      (o[0] = -(E + o[0])),
                        (o[2] = E - o[2]),
                        (E = s[2] - s[0]),
                        (s[0] = -(E + s[0])),
                        (s[2] = E - s[2]),
                        (a.x = 1 - (a.x + a.width));
                    }
                    return n;
                  }),
                  (c.prototype.computeMeshIndices_ = function(t, e) {
                    for (
                      var i = new Uint16Array(2 * (t - 1) * (e - 1) * 6),
                        n = t / 2,
                        r = e / 2,
                        o = 0,
                        s = 0,
                        a = 0;
                      a < 2;
                      a++
                    )
                      for (var c = 0; c < e; c++)
                        for (var l = 0; l < t; l++, o++)
                          0 != l &&
                            0 != c &&
                            (l <= n == c <= r
                              ? ((i[s++] = o),
                                (i[s++] = o - t - 1),
                                (i[s++] = o - t),
                                (i[s++] = o - t - 1),
                                (i[s++] = o),
                                (i[s++] = o - 1))
                              : ((i[s++] = o - 1),
                                (i[s++] = o - t),
                                (i[s++] = o),
                                (i[s++] = o - t),
                                (i[s++] = o - 1),
                                (i[s++] = o - t - 1)));
                    return i;
                  }),
                  (c.prototype.getOwnPropertyDescriptor_ = function(t, e) {
                    var i = Object.getOwnPropertyDescriptor(t, e);
                    return (
                      (void 0 !== i.get && void 0 !== i.set) ||
                        ((i.configurable = !0),
                        (i.enumerable = !0),
                        (i.get = function() {
                          return this.getAttribute(e);
                        }),
                        (i.set = function(t) {
                          this.setAttribute(e, t);
                        })),
                      i
                    );
                  }),
                  (e.exports = c);
              },
              {
                './cardboard-ui.js': 50,
                './deps/wglu-preserve-state.js': 52,
                './util.js': 68
              }
            ],
            50: [
              function(t, e, i) {
                var n = t('./util.js'),
                  r = t('./deps/wglu-preserve-state.js'),
                  o = [
                    'attribute vec2 position;',
                    'uniform mat4 projectionMat;',
                    'void main() {',
                    '  gl_Position = projectionMat * vec4( position, -1.0, 1.0 );',
                    '}'
                  ].join('\n'),
                  s = [
                    'precision mediump float;',
                    'uniform vec4 color;',
                    'void main() {',
                    '  gl_FragColor = color;',
                    '}'
                  ].join('\n'),
                  a = Math.PI / 180,
                  c = 0.3125;
                function l(t) {
                  (this.gl = t),
                    (this.attribs = { position: 0 }),
                    (this.program = n.linkProgram(t, o, s, this.attribs)),
                    (this.uniforms = n.getProgramUniforms(t, this.program)),
                    (this.vertexBuffer = t.createBuffer()),
                    (this.gearOffset = 0),
                    (this.gearVertexCount = 0),
                    (this.arrowOffset = 0),
                    (this.arrowVertexCount = 0),
                    (this.projMat = new Float32Array(16)),
                    (this.listener = null),
                    this.onResize();
                }
                (l.prototype.destroy = function() {
                  var t = this.gl;
                  this.listener &&
                    t.canvas.removeEventListener('click', this.listener, !1),
                    t.deleteProgram(this.program),
                    t.deleteBuffer(this.vertexBuffer);
                }),
                  (l.prototype.listen = function(t, e) {
                    var i = this.gl.canvas;
                    (this.listener = function(n) {
                      var r = i.clientWidth / 2;
                      n.clientX > r - 42 &&
                      n.clientX < r + 42 &&
                      n.clientY > i.clientHeight - 42
                        ? t(n)
                        : n.clientX < 42 && n.clientY < 42 && e(n);
                    }),
                      i.addEventListener('click', this.listener, !1);
                  }),
                  (l.prototype.onResize = function() {
                    var t = this.gl,
                      e = this,
                      i = [t.ARRAY_BUFFER_BINDING];
                    r(t, i, function(t) {
                      var i = [],
                        n = t.drawingBufferWidth / 2,
                        r =
                          Math.max(screen.width, screen.height) *
                          window.devicePixelRatio,
                        o = t.drawingBufferWidth / r * window.devicePixelRatio,
                        s = 4 * o / 2,
                        l = 42 * o,
                        u = 28 * o / 2,
                        h = 14 * o;
                      function d(t, e) {
                        var r = (90 - t) * a,
                          o = Math.cos(r),
                          s = Math.sin(r);
                        i.push(c * o * u + n, c * s * u + u),
                          i.push(e * o * u + n, e * s * u + u);
                      }
                      i.push(n - s, l),
                        i.push(n - s, t.drawingBufferHeight),
                        i.push(n + s, l),
                        i.push(n + s, t.drawingBufferHeight),
                        (e.gearOffset = i.length / 2);
                      for (var p = 0; p <= 6; p++) {
                        var f = 60 * p;
                        d(f, 1),
                          d(f + 12, 1),
                          d(f + 20, 0.75),
                          d(f + 40, 0.75),
                          d(f + 48, 1);
                      }
                      function m(e, n) {
                        i.push(h + e, t.drawingBufferHeight - h - n);
                      }
                      (e.gearVertexCount = i.length / 2 - e.gearOffset),
                        (e.arrowOffset = i.length / 2);
                      var g = s / Math.sin(45 * a);
                      m(0, u),
                        m(u, 0),
                        m(u + g, g),
                        m(g, u + g),
                        m(g, u - g),
                        m(0, u),
                        m(u, 2 * u),
                        m(u + g, 2 * u - g),
                        m(g, u - g),
                        m(0, u),
                        m(g, u - s),
                        m(28 * o, u - s),
                        m(g, u + s),
                        m(28 * o, u + s),
                        (e.arrowVertexCount = i.length / 2 - e.arrowOffset),
                        t.bindBuffer(t.ARRAY_BUFFER, e.vertexBuffer),
                        t.bufferData(
                          t.ARRAY_BUFFER,
                          new Float32Array(i),
                          t.STATIC_DRAW
                        );
                    });
                  }),
                  (l.prototype.render = function() {
                    var t = this.gl,
                      e = this,
                      i = [
                        t.CULL_FACE,
                        t.DEPTH_TEST,
                        t.BLEND,
                        t.SCISSOR_TEST,
                        t.STENCIL_TEST,
                        t.COLOR_WRITEMASK,
                        t.VIEWPORT,
                        t.CURRENT_PROGRAM,
                        t.ARRAY_BUFFER_BINDING
                      ];
                    r(t, i, function(t) {
                      t.disable(t.CULL_FACE),
                        t.disable(t.DEPTH_TEST),
                        t.disable(t.BLEND),
                        t.disable(t.SCISSOR_TEST),
                        t.disable(t.STENCIL_TEST),
                        t.colorMask(!0, !0, !0, !0),
                        t.viewport(
                          0,
                          0,
                          t.drawingBufferWidth,
                          t.drawingBufferHeight
                        ),
                        e.renderNoState();
                    });
                  }),
                  (l.prototype.renderNoState = function() {
                    var t = this.gl;
                    t.useProgram(this.program),
                      t.bindBuffer(t.ARRAY_BUFFER, this.vertexBuffer),
                      t.enableVertexAttribArray(this.attribs.position),
                      t.vertexAttribPointer(
                        this.attribs.position,
                        2,
                        t.FLOAT,
                        !1,
                        8,
                        0
                      ),
                      t.uniform4f(this.uniforms.color, 1, 1, 1, 1),
                      n.orthoMatrix(
                        this.projMat,
                        0,
                        t.drawingBufferWidth,
                        0,
                        t.drawingBufferHeight,
                        0.1,
                        1024
                      ),
                      t.uniformMatrix4fv(
                        this.uniforms.projectionMat,
                        !1,
                        this.projMat
                      ),
                      t.drawArrays(t.TRIANGLE_STRIP, 0, 4),
                      t.drawArrays(
                        t.TRIANGLE_STRIP,
                        this.gearOffset,
                        this.gearVertexCount
                      ),
                      t.drawArrays(
                        t.TRIANGLE_STRIP,
                        this.arrowOffset,
                        this.arrowVertexCount
                      );
                  }),
                  (e.exports = l);
              },
              { './deps/wglu-preserve-state.js': 52, './util.js': 68 }
            ],
            51: [
              function(t, e, i) {
                var n = t('./cardboard-distorter.js'),
                  r = t('./cardboard-ui.js'),
                  o = t('./device-info.js'),
                  s = t('./dpdb/dpdb.js'),
                  a = t('./sensor-fusion/fusion-pose-sensor.js'),
                  c = t('./rotate-instructions.js'),
                  l = t('./viewer-selector.js'),
                  u = t('./base.js').VRDisplay,
                  h = t('./util.js'),
                  d = 'left',
                  p = 'right';
                function f() {
                  (this.displayName = 'Cardboard VRDisplay (webvr-polyfill)'),
                    (this.capabilities.hasOrientation = !0),
                    (this.capabilities.canPresent = !0),
                    (this.bufferScale_ = window.WebVRConfig.BUFFER_SCALE),
                    (this.poseSensor_ = new a()),
                    (this.distorter_ = null),
                    (this.cardboardUI_ = null),
                    (this.dpdb_ = new s(
                      !0,
                      this.onDeviceParamsUpdated_.bind(this)
                    )),
                    (this.deviceInfo_ = new o(this.dpdb_.getDeviceParams())),
                    (this.viewerSelector_ = new l()),
                    this.viewerSelector_.onChange(
                      this.onViewerChanged_.bind(this)
                    ),
                    this.deviceInfo_.setViewer(
                      this.viewerSelector_.getCurrentViewer()
                    ),
                    window.WebVRConfig.ROTATE_INSTRUCTIONS_DISABLED ||
                      (this.rotateInstructions_ = new c()),
                    h.isIOS() &&
                      window.addEventListener(
                        'resize',
                        this.onResize_.bind(this)
                      );
                }
                (f.prototype = new u()),
                  (f.prototype.getImmediatePose = function() {
                    return {
                      position: this.poseSensor_.getPosition(),
                      orientation: this.poseSensor_.getOrientation(),
                      linearVelocity: null,
                      linearAcceleration: null,
                      angularVelocity: null,
                      angularAcceleration: null
                    };
                  }),
                  (f.prototype.resetPose = function() {
                    this.poseSensor_.resetPose();
                  }),
                  (f.prototype.getEyeParameters = function(t) {
                    var e,
                      i = [
                        0.5 * this.deviceInfo_.viewer.interLensDistance,
                        0,
                        0
                      ];
                    if (t == d)
                      (i[0] *= -1),
                        (e = this.deviceInfo_.getFieldOfViewLeftEye());
                    else {
                      if (t != p)
                        return (
                          console.error('Invalid eye provided: %s', t), null
                        );
                      e = this.deviceInfo_.getFieldOfViewRightEye();
                    }
                    return {
                      fieldOfView: e,
                      offset: i,
                      renderWidth:
                        0.5 * this.deviceInfo_.device.width * this.bufferScale_,
                      renderHeight:
                        this.deviceInfo_.device.height * this.bufferScale_
                    };
                  }),
                  (f.prototype.onDeviceParamsUpdated_ = function(t) {
                    h.isDebug() &&
                      console.log(
                        'DPDB reported that device params were updated.'
                      ),
                      this.deviceInfo_.updateDeviceParams(t),
                      this.distorter_ &&
                        this.distorter_.updateDeviceInfo(this.deviceInfo_);
                  }),
                  (f.prototype.updateBounds_ = function() {
                    this.layer_ &&
                      this.distorter_ &&
                      (this.layer_.leftBounds || this.layer_.rightBounds) &&
                      this.distorter_.setTextureBounds(
                        this.layer_.leftBounds,
                        this.layer_.rightBounds
                      );
                  }),
                  (f.prototype.beginPresent_ = function() {
                    var t = this.layer_.source.getContext('webgl');
                    t ||
                      (t = this.layer_.source.getContext('experimental-webgl')),
                      t || (t = this.layer_.source.getContext('webgl2')),
                      t &&
                        (this.layer_.predistorted
                          ? window.WebVRConfig.CARDBOARD_UI_DISABLED ||
                            ((t.canvas.width =
                              h.getScreenWidth() * this.bufferScale_),
                            (t.canvas.height =
                              h.getScreenHeight() * this.bufferScale_),
                            (this.cardboardUI_ = new r(t)))
                          : ((this.distorter_ = new n(t)),
                            this.distorter_.updateDeviceInfo(this.deviceInfo_),
                            (this.cardboardUI_ = this.distorter_.cardboardUI)),
                        this.cardboardUI_ &&
                          this.cardboardUI_.listen(
                            function(t) {
                              this.viewerSelector_.show(
                                this.layer_.source.parentElement
                              ),
                                t.stopPropagation(),
                                t.preventDefault();
                            }.bind(this),
                            function(t) {
                              this.exitPresent(),
                                t.stopPropagation(),
                                t.preventDefault();
                            }.bind(this)
                          ),
                        this.rotateInstructions_ &&
                          (h.isLandscapeMode() && h.isMobile()
                            ? this.rotateInstructions_.showTemporarily(
                                3e3,
                                this.layer_.source.parentElement
                              )
                            : this.rotateInstructions_.update()),
                        (this.orientationHandler = this.onOrientationChange_.bind(
                          this
                        )),
                        window.addEventListener(
                          'orientationchange',
                          this.orientationHandler
                        ),
                        (this.vrdisplaypresentchangeHandler = this.updateBounds_.bind(
                          this
                        )),
                        window.addEventListener(
                          'vrdisplaypresentchange',
                          this.vrdisplaypresentchangeHandler
                        ),
                        this.fireVRDisplayDeviceParamsChange_());
                  }),
                  (f.prototype.endPresent_ = function() {
                    this.distorter_ &&
                      (this.distorter_.destroy(), (this.distorter_ = null)),
                      this.cardboardUI_ &&
                        (this.cardboardUI_.destroy(),
                        (this.cardboardUI_ = null)),
                      this.rotateInstructions_ &&
                        this.rotateInstructions_.hide(),
                      this.viewerSelector_.hide(),
                      window.removeEventListener(
                        'orientationchange',
                        this.orientationHandler
                      ),
                      window.removeEventListener(
                        'vrdisplaypresentchange',
                        this.vrdisplaypresentchangeHandler
                      );
                  }),
                  (f.prototype.submitFrame = function(t) {
                    if (this.distorter_)
                      this.updateBounds_(), this.distorter_.submitFrame();
                    else if (this.cardboardUI_ && this.layer_) {
                      var e = this.layer_.source.getContext('webgl').canvas;
                      (e.width == this.lastWidth &&
                        e.height == this.lastHeight) ||
                        this.cardboardUI_.onResize(),
                        (this.lastWidth = e.width),
                        (this.lastHeight = e.height),
                        this.cardboardUI_.render();
                    }
                  }),
                  (f.prototype.onOrientationChange_ = function(t) {
                    this.viewerSelector_.hide(),
                      this.rotateInstructions_ &&
                        this.rotateInstructions_.update(),
                      this.onResize_();
                  }),
                  (f.prototype.onResize_ = function(t) {
                    if (this.layer_) {
                      var e = this.layer_.source.getContext('webgl'),
                        i = [
                          'position: absolute',
                          'top: 0',
                          'left: 0',
                          'width: ' +
                            Math.max(screen.width, screen.height) +
                            'px',
                          'height: ' +
                            Math.min(screen.height, screen.width) +
                            'px',
                          'border: 0',
                          'margin: 0',
                          'padding: 0 10px 10px 0',
                          'box-sizing: content-box'
                        ];
                      e.canvas.setAttribute('style', i.join('; ') + ';'),
                        h.safariCssSizeWorkaround(e.canvas);
                    }
                  }),
                  (f.prototype.onViewerChanged_ = function(t) {
                    this.deviceInfo_.setViewer(t),
                      this.distorter_ &&
                        this.distorter_.updateDeviceInfo(this.deviceInfo_),
                      this.fireVRDisplayDeviceParamsChange_();
                  }),
                  (f.prototype.fireVRDisplayDeviceParamsChange_ = function() {
                    var t = new CustomEvent('vrdisplaydeviceparamschange', {
                      detail: { vrdisplay: this, deviceInfo: this.deviceInfo_ }
                    });
                    window.dispatchEvent(t);
                  }),
                  (e.exports = f);
              },
              {
                './base.js': 48,
                './cardboard-distorter.js': 49,
                './cardboard-ui.js': 50,
                './device-info.js': 53,
                './dpdb/dpdb.js': 57,
                './rotate-instructions.js': 62,
                './sensor-fusion/fusion-pose-sensor.js': 64,
                './util.js': 68,
                './viewer-selector.js': 69
              }
            ],
            52: [
              function(t, e, i) {
                e.exports = function(t, e, i) {
                  if (e) {
                    for (var n = [], r = null, o = 0; o < e.length; ++o)
                      switch ((s = e[o])) {
                        case t.TEXTURE_BINDING_2D:
                        case t.TEXTURE_BINDING_CUBE_MAP:
                          if ((c = e[++o]) < t.TEXTURE0 || c > t.TEXTURE31) {
                            console.error(
                              'TEXTURE_BINDING_2D or TEXTURE_BINDING_CUBE_MAP must be followed by a valid texture unit'
                            ),
                              n.push(null, null);
                            break;
                          }
                          r || (r = t.getParameter(t.ACTIVE_TEXTURE)),
                            t.activeTexture(c),
                            n.push(t.getParameter(s), null);
                          break;
                        case t.ACTIVE_TEXTURE:
                          (r = t.getParameter(t.ACTIVE_TEXTURE)), n.push(null);
                          break;
                        default:
                          n.push(t.getParameter(s));
                      }
                    for (i(t), o = 0; o < e.length; ++o) {
                      var s = e[o],
                        a = n[o];
                      switch (s) {
                        case t.ACTIVE_TEXTURE:
                          break;
                        case t.ARRAY_BUFFER_BINDING:
                          t.bindBuffer(t.ARRAY_BUFFER, a);
                          break;
                        case t.COLOR_CLEAR_VALUE:
                          t.clearColor(a[0], a[1], a[2], a[3]);
                          break;
                        case t.COLOR_WRITEMASK:
                          t.colorMask(a[0], a[1], a[2], a[3]);
                          break;
                        case t.CURRENT_PROGRAM:
                          t.useProgram(a);
                          break;
                        case t.ELEMENT_ARRAY_BUFFER_BINDING:
                          t.bindBuffer(t.ELEMENT_ARRAY_BUFFER, a);
                          break;
                        case t.FRAMEBUFFER_BINDING:
                          t.bindFramebuffer(t.FRAMEBUFFER, a);
                          break;
                        case t.RENDERBUFFER_BINDING:
                          t.bindRenderbuffer(t.RENDERBUFFER, a);
                          break;
                        case t.TEXTURE_BINDING_2D:
                          if ((c = e[++o]) < t.TEXTURE0 || c > t.TEXTURE31)
                            break;
                          t.activeTexture(c), t.bindTexture(t.TEXTURE_2D, a);
                          break;
                        case t.TEXTURE_BINDING_CUBE_MAP:
                          var c;
                          if ((c = e[++o]) < t.TEXTURE0 || c > t.TEXTURE31)
                            break;
                          t.activeTexture(c),
                            t.bindTexture(t.TEXTURE_CUBE_MAP, a);
                          break;
                        case t.VIEWPORT:
                          t.viewport(a[0], a[1], a[2], a[3]);
                          break;
                        case t.BLEND:
                        case t.CULL_FACE:
                        case t.DEPTH_TEST:
                        case t.SCISSOR_TEST:
                        case t.STENCIL_TEST:
                          a ? t.enable(s) : t.disable(s);
                          break;
                        default:
                          console.log(
                            'No GL restore behavior for 0x' + s.toString(16)
                          );
                      }
                      r && t.activeTexture(r);
                    }
                  } else i(t);
                };
              },
              {}
            ],
            53: [
              function(t, e, i) {
                var n = t('./distortion/distortion.js'),
                  r = t('./math-util.js'),
                  o = t('./util.js');
                function s(t) {
                  (this.width = t.width || o.getScreenWidth()),
                    (this.height = t.height || o.getScreenHeight()),
                    (this.widthMeters = t.widthMeters),
                    (this.heightMeters = t.heightMeters),
                    (this.bevelMeters = t.bevelMeters);
                }
                var a = new s({
                    widthMeters: 0.11,
                    heightMeters: 0.062,
                    bevelMeters: 0.004
                  }),
                  c = new s({
                    widthMeters: 0.1038,
                    heightMeters: 0.0584,
                    bevelMeters: 0.004
                  }),
                  l = {
                    CardboardV1: new h({
                      id: 'CardboardV1',
                      label: 'Cardboard I/O 2014',
                      fov: 40,
                      interLensDistance: 0.06,
                      baselineLensDistance: 0.035,
                      screenLensDistance: 0.042,
                      distortionCoefficients: [0.441, 0.156],
                      inverseCoefficients: [
                        -0.4410035,
                        0.42756155,
                        -0.4804439,
                        0.5460139,
                        -0.58821183,
                        0.5733938,
                        -0.48303202,
                        0.33299083,
                        -0.17573841,
                        0.0651772,
                        -0.01488963,
                        0.001559834
                      ]
                    }),
                    CardboardV2: new h({
                      id: 'CardboardV2',
                      label: 'Cardboard I/O 2015',
                      fov: 60,
                      interLensDistance: 0.064,
                      baselineLensDistance: 0.035,
                      screenLensDistance: 0.039,
                      distortionCoefficients: [0.34, 0.55],
                      inverseCoefficients: [
                        -0.33836704,
                        -0.18162185,
                        0.862655,
                        -1.2462051,
                        1.0560602,
                        -0.58208317,
                        0.21609078,
                        -0.05444823,
                        0.009177956,
                        -0.0009904169,
                        6183535e-11,
                        -16981803e-13
                      ]
                    })
                  };
                function u(t) {
                  (this.viewer = l.CardboardV2),
                    this.updateDeviceParams(t),
                    (this.distortion = new n(
                      this.viewer.distortionCoefficients
                    ));
                }
                function h(t) {
                  (this.id = t.id),
                    (this.label = t.label),
                    (this.fov = t.fov),
                    (this.interLensDistance = t.interLensDistance),
                    (this.baselineLensDistance = t.baselineLensDistance),
                    (this.screenLensDistance = t.screenLensDistance),
                    (this.distortionCoefficients = t.distortionCoefficients),
                    (this.inverseCoefficients = t.inverseCoefficients);
                }
                (u.prototype.updateDeviceParams = function(t) {
                  this.device = this.determineDevice_(t) || this.device;
                }),
                  (u.prototype.getDevice = function() {
                    return this.device;
                  }),
                  (u.prototype.setViewer = function(t) {
                    (this.viewer = t),
                      (this.distortion = new n(
                        this.viewer.distortionCoefficients
                      ));
                  }),
                  (u.prototype.determineDevice_ = function(t) {
                    if (!t)
                      return o.isIOS()
                        ? (console.warn(
                            'Using fallback iOS device measurements.'
                          ),
                          c)
                        : (console.warn(
                            'Using fallback Android device measurements.'
                          ),
                          a);
                    var e = 0.0254 / t.xdpi,
                      i = 0.0254 / t.ydpi;
                    return new s({
                      widthMeters: e * o.getScreenWidth(),
                      heightMeters: i * o.getScreenHeight(),
                      bevelMeters: 0.001 * t.bevelMm
                    });
                  }),
                  (u.prototype.getDistortedFieldOfViewLeftEye = function() {
                    var t = this.viewer,
                      e = this.device,
                      i = this.distortion,
                      n = t.screenLensDistance,
                      o = (e.widthMeters - t.interLensDistance) / 2,
                      s = t.interLensDistance / 2,
                      a = t.baselineLensDistance - e.bevelMeters,
                      c = e.heightMeters - a,
                      l = r.radToDeg * Math.atan(i.distort(o / n)),
                      u = r.radToDeg * Math.atan(i.distort(s / n)),
                      h = r.radToDeg * Math.atan(i.distort(a / n)),
                      d = r.radToDeg * Math.atan(i.distort(c / n));
                    return {
                      leftDegrees: Math.min(l, t.fov),
                      rightDegrees: Math.min(u, t.fov),
                      downDegrees: Math.min(h, t.fov),
                      upDegrees: Math.min(d, t.fov)
                    };
                  }),
                  (u.prototype.getLeftEyeVisibleTanAngles = function() {
                    var t = this.viewer,
                      e = this.device,
                      i = this.distortion,
                      n = Math.tan(-r.degToRad * t.fov),
                      o = Math.tan(r.degToRad * t.fov),
                      s = Math.tan(r.degToRad * t.fov),
                      a = Math.tan(-r.degToRad * t.fov),
                      c = e.widthMeters / 4,
                      l = e.heightMeters / 2,
                      u = t.baselineLensDistance - e.bevelMeters - l,
                      h = t.interLensDistance / 2 - c,
                      d = -u,
                      p = t.screenLensDistance,
                      f = i.distort((h - c) / p),
                      m = i.distort((d + l) / p),
                      g = i.distort((h + c) / p),
                      v = i.distort((d - l) / p),
                      y = new Float32Array(4);
                    return (
                      (y[0] = Math.max(n, f)),
                      (y[1] = Math.min(o, m)),
                      (y[2] = Math.min(s, g)),
                      (y[3] = Math.max(a, v)),
                      y
                    );
                  }),
                  (u.prototype.getLeftEyeNoLensTanAngles = function() {
                    var t = this.viewer,
                      e = this.device,
                      i = this.distortion,
                      n = new Float32Array(4),
                      o = i.distortInverse(Math.tan(-r.degToRad * t.fov)),
                      s = i.distortInverse(Math.tan(r.degToRad * t.fov)),
                      a = i.distortInverse(Math.tan(r.degToRad * t.fov)),
                      c = i.distortInverse(Math.tan(-r.degToRad * t.fov)),
                      l = e.widthMeters / 4,
                      u = e.heightMeters / 2,
                      h = t.baselineLensDistance - e.bevelMeters - u,
                      d = t.interLensDistance / 2 - l,
                      p = -h,
                      f = t.screenLensDistance,
                      m = (d - l) / f,
                      g = (p + u) / f,
                      v = (d + l) / f,
                      y = (p - u) / f;
                    return (
                      (n[0] = Math.max(o, m)),
                      (n[1] = Math.min(s, g)),
                      (n[2] = Math.min(a, v)),
                      (n[3] = Math.max(c, y)),
                      n
                    );
                  }),
                  (u.prototype.getLeftEyeVisibleScreenRect = function(t) {
                    var e = this.viewer,
                      i = this.device,
                      n = e.screenLensDistance,
                      r = (i.widthMeters - e.interLensDistance) / 2,
                      o = e.baselineLensDistance - i.bevelMeters,
                      s = (t[0] * n + r) / i.widthMeters,
                      a = (t[1] * n + o) / i.heightMeters,
                      c = (t[2] * n + r) / i.widthMeters,
                      l = (t[3] * n + o) / i.heightMeters;
                    return { x: s, y: l, width: c - s, height: a - l };
                  }),
                  (u.prototype.getFieldOfViewLeftEye = function(t) {
                    return t
                      ? this.getUndistortedFieldOfViewLeftEye()
                      : this.getDistortedFieldOfViewLeftEye();
                  }),
                  (u.prototype.getFieldOfViewRightEye = function(t) {
                    var e = this.getFieldOfViewLeftEye(t);
                    return {
                      leftDegrees: e.rightDegrees,
                      rightDegrees: e.leftDegrees,
                      upDegrees: e.upDegrees,
                      downDegrees: e.downDegrees
                    };
                  }),
                  (u.prototype.getUndistortedFieldOfViewLeftEye = function() {
                    var t = this.getUndistortedParams_();
                    return {
                      leftDegrees: r.radToDeg * Math.atan(t.outerDist),
                      rightDegrees: r.radToDeg * Math.atan(t.innerDist),
                      downDegrees: r.radToDeg * Math.atan(t.bottomDist),
                      upDegrees: r.radToDeg * Math.atan(t.topDist)
                    };
                  }),
                  (u.prototype.getUndistortedViewportLeftEye = function() {
                    var t = this.getUndistortedParams_(),
                      e = this.viewer,
                      i = this.device,
                      n = e.screenLensDistance,
                      r = i.widthMeters / n,
                      o = i.heightMeters / n,
                      s = i.width / r,
                      a = i.height / o,
                      c = Math.round((t.eyePosX - t.outerDist) * s),
                      l = Math.round((t.eyePosY - t.bottomDist) * a);
                    return {
                      x: c,
                      y: l,
                      width: Math.round((t.eyePosX + t.innerDist) * s) - c,
                      height: Math.round((t.eyePosY + t.topDist) * a) - l
                    };
                  }),
                  (u.prototype.getUndistortedParams_ = function() {
                    var t = this.viewer,
                      e = this.device,
                      i = this.distortion,
                      n = t.screenLensDistance,
                      o = t.interLensDistance / 2 / n,
                      s = e.widthMeters / n,
                      a = e.heightMeters / n,
                      c = s / 2 - o,
                      l = (t.baselineLensDistance - e.bevelMeters) / n,
                      u = t.fov,
                      h = i.distortInverse(Math.tan(r.degToRad * u)),
                      d = Math.min(c, h),
                      p = Math.min(o, h),
                      f = Math.min(l, h);
                    return {
                      outerDist: d,
                      innerDist: p,
                      topDist: Math.min(a - l, h),
                      bottomDist: f,
                      eyePosX: c,
                      eyePosY: l
                    };
                  }),
                  (u.Viewers = l),
                  (e.exports = u);
              },
              {
                './distortion/distortion.js': 55,
                './math-util.js': 59,
                './util.js': 68
              }
            ],
            54: [
              function(t, e, i) {
                t('./base.js').VRDisplay;
                var n = t('./base.js').HMDVRDevice,
                  r = t('./base.js').PositionSensorVRDevice;
                function o(t) {
                  (this.display = t),
                    (this.hardwareUnitId = t.displayId),
                    (this.deviceId = 'webvr-polyfill:HMD:' + t.displayId),
                    (this.deviceName = t.displayName + ' (HMD)');
                }
                function s(t) {
                  (this.display = t),
                    (this.hardwareUnitId = t.displayId),
                    (this.deviceId =
                      'webvr-polyfill:PositionSensor: ' + t.displayId),
                    (this.deviceName = t.displayName + ' (PositionSensor)');
                }
                (o.prototype = new n()),
                  (o.prototype.getEyeParameters = function(t) {
                    var e = this.display.getEyeParameters(t);
                    return {
                      currentFieldOfView: e.fieldOfView,
                      maximumFieldOfView: e.fieldOfView,
                      minimumFieldOfView: e.fieldOfView,
                      recommendedFieldOfView: e.fieldOfView,
                      eyeTranslation: {
                        x: e.offset[0],
                        y: e.offset[1],
                        z: e.offset[2]
                      },
                      renderRect: {
                        x: 'right' == t ? e.renderWidth : 0,
                        y: 0,
                        width: e.renderWidth,
                        height: e.renderHeight
                      }
                    };
                  }),
                  (o.prototype.setFieldOfView = function(t, e, i, n) {}),
                  (s.prototype = new r()),
                  (s.prototype.getState = function() {
                    var t = this.display.getPose();
                    return {
                      position: t.position
                        ? {
                            x: t.position[0],
                            y: t.position[1],
                            z: t.position[2]
                          }
                        : null,
                      orientation: t.orientation
                        ? {
                            x: t.orientation[0],
                            y: t.orientation[1],
                            z: t.orientation[2],
                            w: t.orientation[3]
                          }
                        : null,
                      linearVelocity: null,
                      linearAcceleration: null,
                      angularVelocity: null,
                      angularAcceleration: null
                    };
                  }),
                  (s.prototype.resetState = function() {
                    return this.positionDevice.resetPose();
                  }),
                  (e.exports.VRDisplayHMDDevice = o),
                  (e.exports.VRDisplayPositionSensorDevice = s);
              },
              { './base.js': 48 }
            ],
            55: [
              function(t, e, i) {
                function n(t) {
                  this.coefficients = t;
                }
                (n.prototype.distortInverse = function(t) {
                  for (
                    var e = 0, i = 1, n = t - this.distort(e);
                    Math.abs(i - e) > 1e-4;

                  ) {
                    var r = t - this.distort(i),
                      o = i - r * ((i - e) / (r - n));
                    (e = i), (i = o), (n = r);
                  }
                  return i;
                }),
                  (n.prototype.distort = function(t) {
                    for (
                      var e = t * t, i = 0, n = 0;
                      n < this.coefficients.length;
                      n++
                    )
                      i = e * (i + this.coefficients[n]);
                    return (i + 1) * t;
                  }),
                  (e.exports = n);
              },
              {}
            ],
            56: [
              function(t, e, i) {
                e.exports = {
                  format: 1,
                  last_updated: '2017-08-27T14:39:31Z',
                  devices: [
                    {
                      type: 'android',
                      rules: [{ mdmh: 'asus/*/Nexus 7/*' }, { ua: 'Nexus 7' }],
                      dpi: [320.8, 323],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'asus/*/ASUS_Z00AD/*' },
                        { ua: 'ASUS_Z00AD' }
                      ],
                      dpi: [403, 404.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'Google/*/Pixel XL/*' },
                        { ua: 'Pixel XL' }
                      ],
                      dpi: [537.9, 533],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'Google/*/Pixel/*' }, { ua: 'Pixel' }],
                      dpi: [432.6, 436.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'HTC/*/HTC6435LVW/*' },
                        { ua: 'HTC6435LVW' }
                      ],
                      dpi: [449.7, 443.3],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'HTC/*/HTC One XL/*' },
                        { ua: 'HTC One XL' }
                      ],
                      dpi: [315.3, 314.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'htc/*/Nexus 9/*' }, { ua: 'Nexus 9' }],
                      dpi: 289,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'HTC/*/HTC One M9/*' },
                        { ua: 'HTC One M9' }
                      ],
                      dpi: [442.5, 443.3],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'HTC/*/HTC One_M8/*' },
                        { ua: 'HTC One_M8' }
                      ],
                      dpi: [449.7, 447.4],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'HTC/*/HTC One/*' }, { ua: 'HTC One' }],
                      dpi: 472.8,
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'Huawei/*/Nexus 6P/*' },
                        { ua: 'Nexus 6P' }
                      ],
                      dpi: [515.1, 518],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'LENOVO/*/Lenovo PB2-690Y/*' },
                        { ua: 'Lenovo PB2-690Y' }
                      ],
                      dpi: [457.2, 454.713],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/Nexus 5X/*' }, { ua: 'Nexus 5X' }],
                      dpi: [422, 419.9],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/LGMS345/*' }, { ua: 'LGMS345' }],
                      dpi: [221.7, 219.1],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/LG-D800/*' }, { ua: 'LG-D800' }],
                      dpi: [422, 424.1],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/LG-D850/*' }, { ua: 'LG-D850' }],
                      dpi: [537.9, 541.9],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/VS985 4G/*' }, { ua: 'VS985 4G' }],
                      dpi: [537.9, 535.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/Nexus 5/*' }, { ua: 'Nexus 5 B' }],
                      dpi: [442.4, 444.8],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/Nexus 4/*' }, { ua: 'Nexus 4' }],
                      dpi: [319.8, 318.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/LG-P769/*' }, { ua: 'LG-P769' }],
                      dpi: [240.6, 247.5],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/LGMS323/*' }, { ua: 'LGMS323' }],
                      dpi: [206.6, 204.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'LGE/*/LGLS996/*' }, { ua: 'LGLS996' }],
                      dpi: [403.4, 401.5],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'Micromax/*/4560MMX/*' },
                        { ua: '4560MMX' }
                      ],
                      dpi: [240, 219.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'Micromax/*/A250/*' },
                        { ua: 'Micromax A250' }
                      ],
                      dpi: [480, 446.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'Micromax/*/Micromax AQ4501/*' },
                        { ua: 'Micromax AQ4501' }
                      ],
                      dpi: 240,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/DROID RAZR/*' },
                        { ua: 'DROID RAZR' }
                      ],
                      dpi: [368.1, 256.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT830C/*' },
                        { ua: 'XT830C' }
                      ],
                      dpi: [254, 255.9],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1021/*' },
                        { ua: 'XT1021' }
                      ],
                      dpi: [254, 256.7],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1023/*' },
                        { ua: 'XT1023' }
                      ],
                      dpi: [254, 256.7],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1028/*' },
                        { ua: 'XT1028' }
                      ],
                      dpi: [326.6, 327.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1034/*' },
                        { ua: 'XT1034' }
                      ],
                      dpi: [326.6, 328.4],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1053/*' },
                        { ua: 'XT1053' }
                      ],
                      dpi: [315.3, 316.1],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1562/*' },
                        { ua: 'XT1562' }
                      ],
                      dpi: [403.4, 402.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/Nexus 6/*' },
                        { ua: 'Nexus 6 B' }
                      ],
                      dpi: [494.3, 489.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1063/*' },
                        { ua: 'XT1063' }
                      ],
                      dpi: [295, 296.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1064/*' },
                        { ua: 'XT1064' }
                      ],
                      dpi: [295, 295.6],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1092/*' },
                        { ua: 'XT1092' }
                      ],
                      dpi: [422, 424.1],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/XT1095/*' },
                        { ua: 'XT1095' }
                      ],
                      dpi: [422, 423.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'motorola/*/G4/*' },
                        { ua: 'Moto G (4)' }
                      ],
                      dpi: 401,
                      bw: 4,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'OnePlus/*/A0001/*' }, { ua: 'A0001' }],
                      dpi: [403.4, 401],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'OnePlus/*/ONE E1005/*' },
                        { ua: 'ONE E1005' }
                      ],
                      dpi: [442.4, 441.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'OnePlus/*/ONE A2005/*' },
                        { ua: 'ONE A2005' }
                      ],
                      dpi: [391.9, 405.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'OPPO/*/X909/*' }, { ua: 'X909' }],
                      dpi: [442.4, 444.1],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9082/*' },
                        { ua: 'GT-I9082' }
                      ],
                      dpi: [184.7, 185.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G360P/*' },
                        { ua: 'SM-G360P' }
                      ],
                      dpi: [196.7, 205.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/Nexus S/*' },
                        { ua: 'Nexus S' }
                      ],
                      dpi: [234.5, 229.8],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9300/*' },
                        { ua: 'GT-I9300' }
                      ],
                      dpi: [304.8, 303.9],
                      bw: 5,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-T230NU/*' },
                        { ua: 'SM-T230NU' }
                      ],
                      dpi: 216,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SGH-T399/*' },
                        { ua: 'SGH-T399' }
                      ],
                      dpi: [217.7, 231.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SGH-M919/*' },
                        { ua: 'SGH-M919' }
                      ],
                      dpi: [440.8, 437.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-N9005/*' },
                        { ua: 'SM-N9005' }
                      ],
                      dpi: [386.4, 387],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SAMSUNG-SM-N900A/*' },
                        { ua: 'SAMSUNG-SM-N900A' }
                      ],
                      dpi: [386.4, 387.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9500/*' },
                        { ua: 'GT-I9500' }
                      ],
                      dpi: [442.5, 443.3],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9505/*' },
                        { ua: 'GT-I9505' }
                      ],
                      dpi: 439.4,
                      bw: 4,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G900F/*' },
                        { ua: 'SM-G900F' }
                      ],
                      dpi: [415.6, 431.6],
                      bw: 5,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G900M/*' },
                        { ua: 'SM-G900M' }
                      ],
                      dpi: [415.6, 431.6],
                      bw: 5,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G800F/*' },
                        { ua: 'SM-G800F' }
                      ],
                      dpi: 326.8,
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G906S/*' },
                        { ua: 'SM-G906S' }
                      ],
                      dpi: [562.7, 572.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9300/*' },
                        { ua: 'GT-I9300' }
                      ],
                      dpi: [306.7, 304.8],
                      bw: 5,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-T535/*' },
                        { ua: 'SM-T535' }
                      ],
                      dpi: [142.6, 136.4],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-N920C/*' },
                        { ua: 'SM-N920C' }
                      ],
                      dpi: [515.1, 518.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-N920W8/*' },
                        { ua: 'SM-N920W8' }
                      ],
                      dpi: [515.1, 518.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9300I/*' },
                        { ua: 'GT-I9300I' }
                      ],
                      dpi: [304.8, 305.8],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-I9195/*' },
                        { ua: 'GT-I9195' }
                      ],
                      dpi: [249.4, 256.7],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SPH-L520/*' },
                        { ua: 'SPH-L520' }
                      ],
                      dpi: [249.4, 255.9],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SAMSUNG-SGH-I717/*' },
                        { ua: 'SAMSUNG-SGH-I717' }
                      ],
                      dpi: 285.8,
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SPH-D710/*' },
                        { ua: 'SPH-D710' }
                      ],
                      dpi: [217.7, 204.2],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/GT-N7100/*' },
                        { ua: 'GT-N7100' }
                      ],
                      dpi: 265.1,
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SCH-I605/*' },
                        { ua: 'SCH-I605' }
                      ],
                      dpi: 265.1,
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/Galaxy Nexus/*' },
                        { ua: 'Galaxy Nexus' }
                      ],
                      dpi: [315.3, 314.2],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-N910H/*' },
                        { ua: 'SM-N910H' }
                      ],
                      dpi: [515.1, 518],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-N910C/*' },
                        { ua: 'SM-N910C' }
                      ],
                      dpi: [515.2, 520.2],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G130M/*' },
                        { ua: 'SM-G130M' }
                      ],
                      dpi: [165.9, 164.8],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G928I/*' },
                        { ua: 'SM-G928I' }
                      ],
                      dpi: [515.1, 518.4],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G920F/*' },
                        { ua: 'SM-G920F' }
                      ],
                      dpi: 580.6,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G920P/*' },
                        { ua: 'SM-G920P' }
                      ],
                      dpi: [522.5, 577],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G925F/*' },
                        { ua: 'SM-G925F' }
                      ],
                      dpi: 580.6,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G925V/*' },
                        { ua: 'SM-G925V' }
                      ],
                      dpi: [522.5, 576.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G930F/*' },
                        { ua: 'SM-G930F' }
                      ],
                      dpi: 576.6,
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G935F/*' },
                        { ua: 'SM-G935F' }
                      ],
                      dpi: 533,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G950F/*' },
                        { ua: 'SM-G950F' }
                      ],
                      dpi: [562.707, 565.293],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'samsung/*/SM-G955U/*' },
                        { ua: 'SM-G955U' }
                      ],
                      dpi: [522.514, 525.762],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'Sony/*/C6903/*' }, { ua: 'C6903' }],
                      dpi: [442.5, 443.3],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'Sony/*/D6653/*' }, { ua: 'D6653' }],
                      dpi: [428.6, 427.6],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'Sony/*/E6653/*' }, { ua: 'E6653' }],
                      dpi: [428.6, 425.7],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'Sony/*/E6853/*' }, { ua: 'E6853' }],
                      dpi: [403.4, 401.9],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'Sony/*/SGP321/*' }, { ua: 'SGP321' }],
                      dpi: [224.7, 224.1],
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'TCT/*/ALCATEL ONE TOUCH Fierce/*' },
                        { ua: 'ALCATEL ONE TOUCH Fierce' }
                      ],
                      dpi: [240, 247.5],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [{ mdmh: 'THL/*/thl 5000/*' }, { ua: 'thl 5000' }],
                      dpi: [480, 443.3],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'android',
                      rules: [
                        { mdmh: 'ZTE/*/ZTE Blade L2/*' },
                        { ua: 'ZTE Blade L2' }
                      ],
                      dpi: 240,
                      bw: 3,
                      ac: 500
                    },
                    {
                      type: 'ios',
                      rules: [{ res: [640, 960] }],
                      dpi: [325.1, 328.4],
                      bw: 4,
                      ac: 1e3
                    },
                    {
                      type: 'ios',
                      rules: [{ res: [640, 1136] }],
                      dpi: [317.1, 320.2],
                      bw: 3,
                      ac: 1e3
                    },
                    {
                      type: 'ios',
                      rules: [{ res: [750, 1334] }],
                      dpi: 326.4,
                      bw: 4,
                      ac: 1e3
                    },
                    {
                      type: 'ios',
                      rules: [{ res: [1242, 2208] }],
                      dpi: [453.6, 458.4],
                      bw: 4,
                      ac: 1e3
                    },
                    {
                      type: 'ios',
                      rules: [{ res: [1125, 2001] }],
                      dpi: [410.9, 415.4],
                      bw: 4,
                      ac: 1e3
                    }
                  ]
                };
              },
              {}
            ],
            57: [
              function(t, e, i) {
                var n = t('./dpdb.json'),
                  r = t('../util.js'),
                  o = 'https://dpdb.webvr.rocks/dpdb.json';
                function s(t, e) {
                  if (((this.dpdb = n), this.recalculateDeviceParams_(), t)) {
                    this.onDeviceParamsUpdated = e;
                    var i = new XMLHttpRequest(),
                      r = this;
                    i.open('GET', o, !0),
                      i.addEventListener('load', function() {
                        (r.loading = !1),
                          i.status >= 200 && i.status <= 299
                            ? ((r.dpdb = JSON.parse(i.response)),
                              r.recalculateDeviceParams_())
                            : console.error('Error loading online DPDB!');
                      }),
                      i.send();
                  }
                }
                function a(t) {
                  (this.xdpi = t.xdpi),
                    (this.ydpi = t.ydpi),
                    (this.bevelMm = t.bevelMm);
                }
                (s.prototype.getDeviceParams = function() {
                  return this.deviceParams;
                }),
                  (s.prototype.recalculateDeviceParams_ = function() {
                    var t = this.calcDeviceParams_();
                    t
                      ? ((this.deviceParams = t),
                        this.onDeviceParamsUpdated &&
                          this.onDeviceParamsUpdated(this.deviceParams))
                      : console.error(
                          'Failed to recalculate device parameters.'
                        );
                  }),
                  (s.prototype.calcDeviceParams_ = function() {
                    var t = this.dpdb;
                    if (!t) return console.error('DPDB not available.'), null;
                    if (1 != t.format)
                      return (
                        console.error('DPDB has unexpected format version.'),
                        null
                      );
                    if (!t.devices || !t.devices.length)
                      return (
                        console.error('DPDB does not have a devices section.'),
                        null
                      );
                    var e =
                        navigator.userAgent || navigator.vendor || window.opera,
                      i = r.getScreenWidth(),
                      n = r.getScreenHeight();
                    if (!t.devices)
                      return (
                        console.error('DPDB has no devices section.'), null
                      );
                    for (var o = 0; o < t.devices.length; o++) {
                      var s = t.devices[o];
                      if (s.rules)
                        if ('ios' == s.type || 'android' == s.type) {
                          if (r.isIOS() == ('ios' == s.type)) {
                            for (var c = !1, l = 0; l < s.rules.length; l++) {
                              var u = s.rules[l];
                              if (this.matchRule_(u, e, i, n)) {
                                c = !0;
                                break;
                              }
                            }
                            if (c)
                              return new a({
                                xdpi: s.dpi[0] || s.dpi,
                                ydpi: s.dpi[1] || s.dpi,
                                bevelMm: s.bw
                              });
                          }
                        } else
                          console.warn('Device[' + o + '] has invalid type.');
                      else
                        console.warn('Device[' + o + '] has no rules section.');
                    }
                    return console.warn('No DPDB device match.'), null;
                  }),
                  (s.prototype.matchRule_ = function(t, e, i, n) {
                    if (!t.ua && !t.res) return !1;
                    if (t.ua && e.indexOf(t.ua) < 0) return !1;
                    if (t.res) {
                      if (!t.res[0] || !t.res[1]) return !1;
                      var r = t.res[0],
                        o = t.res[1];
                      if (
                        Math.min(i, n) != Math.min(r, o) ||
                        Math.max(i, n) != Math.max(r, o)
                      )
                        return !1;
                    }
                    return !0;
                  }),
                  (e.exports = s);
              },
              { '../util.js': 68, './dpdb.json': 56 }
            ],
            58: [
              function(t, e, i) {
                var n = t('./util.js'),
                  r = t('./webvr-polyfill.js').WebVRPolyfill;
                (window.WebVRConfig = n.extend(
                  {
                    FORCE_ENABLE_VR: !1,
                    K_FILTER: 0.98,
                    PREDICTION_TIME_S: 0.04,
                    TOUCH_PANNER_DISABLED: !0,
                    CARDBOARD_UI_DISABLED: !1,
                    ROTATE_INSTRUCTIONS_DISABLED: !1,
                    YAW_ONLY: !1,
                    MOUSE_KEYBOARD_CONTROLS_DISABLED: !1,
                    DEFER_INITIALIZATION: !1,
                    ENABLE_DEPRECATED_API: !1,
                    BUFFER_SCALE: 0.5,
                    DIRTY_SUBMIT_FRAME_BINDINGS: !1,
                    ALWAYS_APPEND_POLYFILL_DISPLAY: !1,
                    GET_VR_DISPLAYS_TIMEOUT: 1e3
                  },
                  window.WebVRConfig
                )),
                  window.WebVRConfig.DEFER_INITIALIZATION
                    ? (window.InitializeWebVRPolyfill = function() {
                        new r();
                      })
                    : new r(),
                  (window.WebVRPolyfill = r);
              },
              { './util.js': 68, './webvr-polyfill.js': 71 }
            ],
            59: [
              function(t, e, i) {
                var n,
                  r,
                  o = window.MathUtil || {};
                (o.degToRad = Math.PI / 180),
                  (o.radToDeg = 180 / Math.PI),
                  (o.Vector2 = function(t, e) {
                    (this.x = t || 0), (this.y = e || 0);
                  }),
                  (o.Vector2.prototype = {
                    constructor: o.Vector2,
                    set: function(t, e) {
                      return (this.x = t), (this.y = e), this;
                    },
                    copy: function(t) {
                      return (this.x = t.x), (this.y = t.y), this;
                    },
                    subVectors: function(t, e) {
                      return (this.x = t.x - e.x), (this.y = t.y - e.y), this;
                    }
                  }),
                  (o.Vector3 = function(t, e, i) {
                    (this.x = t || 0), (this.y = e || 0), (this.z = i || 0);
                  }),
                  (o.Vector3.prototype = {
                    constructor: o.Vector3,
                    set: function(t, e, i) {
                      return (this.x = t), (this.y = e), (this.z = i), this;
                    },
                    copy: function(t) {
                      return (
                        (this.x = t.x), (this.y = t.y), (this.z = t.z), this
                      );
                    },
                    length: function() {
                      return Math.sqrt(
                        this.x * this.x + this.y * this.y + this.z * this.z
                      );
                    },
                    normalize: function() {
                      var t = this.length();
                      if (0 !== t) {
                        var e = 1 / t;
                        this.multiplyScalar(e);
                      } else (this.x = 0), (this.y = 0), (this.z = 0);
                      return this;
                    },
                    multiplyScalar: function(t) {
                      (this.x *= t), (this.y *= t), (this.z *= t);
                    },
                    applyQuaternion: function(t) {
                      var e = this.x,
                        i = this.y,
                        n = this.z,
                        r = t.x,
                        o = t.y,
                        s = t.z,
                        a = t.w,
                        c = a * e + o * n - s * i,
                        l = a * i + s * e - r * n,
                        u = a * n + r * i - o * e,
                        h = -r * e - o * i - s * n;
                      return (
                        (this.x = c * a + h * -r + l * -s - u * -o),
                        (this.y = l * a + h * -o + u * -r - c * -s),
                        (this.z = u * a + h * -s + c * -o - l * -r),
                        this
                      );
                    },
                    dot: function(t) {
                      return this.x * t.x + this.y * t.y + this.z * t.z;
                    },
                    crossVectors: function(t, e) {
                      var i = t.x,
                        n = t.y,
                        r = t.z,
                        o = e.x,
                        s = e.y,
                        a = e.z;
                      return (
                        (this.x = n * a - r * s),
                        (this.y = r * o - i * a),
                        (this.z = i * s - n * o),
                        this
                      );
                    }
                  }),
                  (o.Quaternion = function(t, e, i, n) {
                    (this.x = t || 0),
                      (this.y = e || 0),
                      (this.z = i || 0),
                      (this.w = void 0 !== n ? n : 1);
                  }),
                  (o.Quaternion.prototype = {
                    constructor: o.Quaternion,
                    set: function(t, e, i, n) {
                      return (
                        (this.x = t),
                        (this.y = e),
                        (this.z = i),
                        (this.w = n),
                        this
                      );
                    },
                    copy: function(t) {
                      return (
                        (this.x = t.x),
                        (this.y = t.y),
                        (this.z = t.z),
                        (this.w = t.w),
                        this
                      );
                    },
                    setFromEulerXYZ: function(t, e, i) {
                      var n = Math.cos(t / 2),
                        r = Math.cos(e / 2),
                        o = Math.cos(i / 2),
                        s = Math.sin(t / 2),
                        a = Math.sin(e / 2),
                        c = Math.sin(i / 2);
                      return (
                        (this.x = s * r * o + n * a * c),
                        (this.y = n * a * o - s * r * c),
                        (this.z = n * r * c + s * a * o),
                        (this.w = n * r * o - s * a * c),
                        this
                      );
                    },
                    setFromEulerYXZ: function(t, e, i) {
                      var n = Math.cos(t / 2),
                        r = Math.cos(e / 2),
                        o = Math.cos(i / 2),
                        s = Math.sin(t / 2),
                        a = Math.sin(e / 2),
                        c = Math.sin(i / 2);
                      return (
                        (this.x = s * r * o + n * a * c),
                        (this.y = n * a * o - s * r * c),
                        (this.z = n * r * c - s * a * o),
                        (this.w = n * r * o + s * a * c),
                        this
                      );
                    },
                    setFromAxisAngle: function(t, e) {
                      var i = e / 2,
                        n = Math.sin(i);
                      return (
                        (this.x = t.x * n),
                        (this.y = t.y * n),
                        (this.z = t.z * n),
                        (this.w = Math.cos(i)),
                        this
                      );
                    },
                    multiply: function(t) {
                      return this.multiplyQuaternions(this, t);
                    },
                    multiplyQuaternions: function(t, e) {
                      var i = t.x,
                        n = t.y,
                        r = t.z,
                        o = t.w,
                        s = e.x,
                        a = e.y,
                        c = e.z,
                        l = e.w;
                      return (
                        (this.x = i * l + o * s + n * c - r * a),
                        (this.y = n * l + o * a + r * s - i * c),
                        (this.z = r * l + o * c + i * a - n * s),
                        (this.w = o * l - i * s - n * a - r * c),
                        this
                      );
                    },
                    inverse: function() {
                      return (
                        (this.x *= -1),
                        (this.y *= -1),
                        (this.z *= -1),
                        this.normalize(),
                        this
                      );
                    },
                    normalize: function() {
                      var t = Math.sqrt(
                        this.x * this.x +
                          this.y * this.y +
                          this.z * this.z +
                          this.w * this.w
                      );
                      return (
                        0 === t
                          ? ((this.x = 0),
                            (this.y = 0),
                            (this.z = 0),
                            (this.w = 1))
                          : ((t = 1 / t),
                            (this.x = this.x * t),
                            (this.y = this.y * t),
                            (this.z = this.z * t),
                            (this.w = this.w * t)),
                        this
                      );
                    },
                    slerp: function(t, e) {
                      if (0 === e) return this;
                      if (1 === e) return this.copy(t);
                      var i = this.x,
                        n = this.y,
                        r = this.z,
                        o = this.w,
                        s = o * t.w + i * t.x + n * t.y + r * t.z;
                      if (
                        (s < 0
                          ? ((this.w = -t.w),
                            (this.x = -t.x),
                            (this.y = -t.y),
                            (this.z = -t.z),
                            (s = -s))
                          : this.copy(t),
                        s >= 1)
                      )
                        return (
                          (this.w = o),
                          (this.x = i),
                          (this.y = n),
                          (this.z = r),
                          this
                        );
                      var a = Math.acos(s),
                        c = Math.sqrt(1 - s * s);
                      if (Math.abs(c) < 0.001)
                        return (
                          (this.w = 0.5 * (o + this.w)),
                          (this.x = 0.5 * (i + this.x)),
                          (this.y = 0.5 * (n + this.y)),
                          (this.z = 0.5 * (r + this.z)),
                          this
                        );
                      var l = Math.sin((1 - e) * a) / c,
                        u = Math.sin(e * a) / c;
                      return (
                        (this.w = o * l + this.w * u),
                        (this.x = i * l + this.x * u),
                        (this.y = n * l + this.y * u),
                        (this.z = r * l + this.z * u),
                        this
                      );
                    },
                    setFromUnitVectors: function(t, e) {
                      return (
                        void 0 === n && (n = new o.Vector3()),
                        (r = t.dot(e) + 1) < 1e-6
                          ? ((r = 0),
                            Math.abs(t.x) > Math.abs(t.z)
                              ? n.set(-t.y, t.x, 0)
                              : n.set(0, -t.z, t.y))
                          : n.crossVectors(t, e),
                        (this.x = n.x),
                        (this.y = n.y),
                        (this.z = n.z),
                        (this.w = r),
                        this.normalize(),
                        this
                      );
                    }
                  }),
                  (e.exports = o);
              },
              {}
            ],
            60: [
              function(t, e, i) {
                var n = t('./base.js').VRDisplay,
                  r = t('./math-util.js'),
                  o = t('./util.js');
                function s() {
                  (this.displayName =
                    'Mouse and Keyboard VRDisplay (webvr-polyfill)'),
                    (this.capabilities.hasOrientation = !0),
                    window.addEventListener(
                      'keydown',
                      this.onKeyDown_.bind(this)
                    ),
                    window.addEventListener(
                      'mousemove',
                      this.onMouseMove_.bind(this)
                    ),
                    window.addEventListener(
                      'mousedown',
                      this.onMouseDown_.bind(this)
                    ),
                    window.addEventListener(
                      'mouseup',
                      this.onMouseUp_.bind(this)
                    ),
                    (this.phi_ = 0),
                    (this.theta_ = 0),
                    (this.targetAngle_ = null),
                    (this.angleAnimation_ = null),
                    (this.orientation_ = new r.Quaternion()),
                    (this.rotateStart_ = new r.Vector2()),
                    (this.rotateEnd_ = new r.Vector2()),
                    (this.rotateDelta_ = new r.Vector2()),
                    (this.isDragging_ = !1),
                    (this.orientationOut_ = new Float32Array(4));
                }
                (s.prototype = new n()),
                  (s.prototype.getImmediatePose = function() {
                    return (
                      this.orientation_.setFromEulerYXZ(
                        this.phi_,
                        this.theta_,
                        0
                      ),
                      (this.orientationOut_[0] = this.orientation_.x),
                      (this.orientationOut_[1] = this.orientation_.y),
                      (this.orientationOut_[2] = this.orientation_.z),
                      (this.orientationOut_[3] = this.orientation_.w),
                      {
                        position: null,
                        orientation: this.orientationOut_,
                        linearVelocity: null,
                        linearAcceleration: null,
                        angularVelocity: null,
                        angularAcceleration: null
                      }
                    );
                  }),
                  (s.prototype.onKeyDown_ = function(t) {
                    38 == t.keyCode
                      ? this.animatePhi_(this.phi_ + 0.15)
                      : 39 == t.keyCode
                        ? this.animateTheta_(this.theta_ - 0.15)
                        : 40 == t.keyCode
                          ? this.animatePhi_(this.phi_ - 0.15)
                          : 37 == t.keyCode &&
                            this.animateTheta_(this.theta_ + 0.15);
                  }),
                  (s.prototype.animateTheta_ = function(t) {
                    this.animateKeyTransitions_('theta_', t);
                  }),
                  (s.prototype.animatePhi_ = function(t) {
                    (t = o.clamp(t, -Math.PI / 2, Math.PI / 2)),
                      this.animateKeyTransitions_('phi_', t);
                  }),
                  (s.prototype.animateKeyTransitions_ = function(t, e) {
                    this.angleAnimation_ &&
                      cancelAnimationFrame(this.angleAnimation_);
                    var i = this[t],
                      n = new Date();
                    this.angleAnimation_ = requestAnimationFrame(
                      function r() {
                        var o = new Date() - n;
                        if (o >= 80)
                          return (
                            (this[t] = e),
                            void cancelAnimationFrame(this.angleAnimation_)
                          );
                        this.angleAnimation_ = requestAnimationFrame(
                          r.bind(this)
                        );
                        var s = o / 80;
                        this[t] = i + (e - i) * s;
                      }.bind(this)
                    );
                  }),
                  (s.prototype.onMouseDown_ = function(t) {
                    this.rotateStart_.set(t.clientX, t.clientY),
                      (this.isDragging_ = !0);
                  }),
                  (s.prototype.onMouseMove_ = function(t) {
                    if (this.isDragging_ || this.isPointerLocked_()) {
                      if (this.isPointerLocked_()) {
                        var e = t.movementX || t.mozMovementX || 0,
                          i = t.movementY || t.mozMovementY || 0;
                        this.rotateEnd_.set(
                          this.rotateStart_.x - e,
                          this.rotateStart_.y - i
                        );
                      } else this.rotateEnd_.set(t.clientX, t.clientY);
                      this.rotateDelta_.subVectors(
                        this.rotateEnd_,
                        this.rotateStart_
                      ),
                        this.rotateStart_.copy(this.rotateEnd_),
                        (this.phi_ +=
                          2 *
                          Math.PI *
                          this.rotateDelta_.y /
                          screen.height *
                          0.3),
                        (this.theta_ +=
                          2 *
                          Math.PI *
                          this.rotateDelta_.x /
                          screen.width *
                          0.5),
                        (this.phi_ = o.clamp(
                          this.phi_,
                          -Math.PI / 2,
                          Math.PI / 2
                        ));
                    }
                  }),
                  (s.prototype.onMouseUp_ = function(t) {
                    this.isDragging_ = !1;
                  }),
                  (s.prototype.isPointerLocked_ = function() {
                    return (
                      void 0 !==
                      (document.pointerLockElement ||
                        document.mozPointerLockElement ||
                        document.webkitPointerLockElement)
                    );
                  }),
                  (s.prototype.resetPose = function() {
                    (this.phi_ = 0), (this.theta_ = 0);
                  }),
                  (e.exports = s);
              },
              { './base.js': 48, './math-util.js': 59, './util.js': 68 }
            ],
            61: [
              function(t, e, n) {
                (function(e) {
                  void 0 !== e &&
                    e.window &&
                    ((e.document = e.window.document),
                    (e.navigator = e.window.navigator)),
                    t('./main');
                }.call(
                  this,
                  void 0 !== i
                    ? i
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window ? window : {}
                ));
              },
              { './main': 58 }
            ],
            62: [
              function(t, e, i) {
                var n = t('./util.js');
                function r() {
                  this.loadIcon_();
                  var t = document.createElement('div');
                  ((o = t.style).position = 'fixed'),
                    (o.top = 0),
                    (o.right = 0),
                    (o.bottom = 0),
                    (o.left = 0),
                    (o.backgroundColor = 'gray'),
                    (o.fontFamily = 'sans-serif'),
                    (o.zIndex = 1e6);
                  var e = document.createElement('img');
                  (e.src = this.icon),
                    ((o = e.style).marginLeft = '25%'),
                    (o.marginTop = '25%'),
                    (o.width = '50%'),
                    t.appendChild(e);
                  var i = document.createElement('div');
                  ((o = i.style).textAlign = 'center'),
                    (o.fontSize = '16px'),
                    (o.lineHeight = '24px'),
                    (o.margin = '24px 25%'),
                    (o.width = '50%'),
                    (i.innerHTML =
                      'Place your phone into your Cardboard viewer.'),
                    t.appendChild(i);
                  var n = document.createElement('div');
                  ((o = n.style).backgroundColor = '#CFD8DC'),
                    (o.position = 'fixed'),
                    (o.bottom = 0),
                    (o.width = '100%'),
                    (o.height = '48px'),
                    (o.padding = '14px 24px'),
                    (o.boxSizing = 'border-box'),
                    (o.color = '#656A6B'),
                    t.appendChild(n);
                  var r = document.createElement('div');
                  (r.style.float = 'left'),
                    (r.innerHTML = 'No Cardboard viewer?');
                  var o,
                    s = document.createElement('a');
                  (s.href =
                    'https://www.google.com/get/cardboard/get-cardboard/'),
                    (s.innerHTML = 'get one'),
                    (s.target = '_blank'),
                    ((o = s.style).float = 'right'),
                    (o.fontWeight = 600),
                    (o.textTransform = 'uppercase'),
                    (o.borderLeft = '1px solid gray'),
                    (o.paddingLeft = '24px'),
                    (o.textDecoration = 'none'),
                    (o.color = '#656A6B'),
                    n.appendChild(r),
                    n.appendChild(s),
                    (this.overlay = t),
                    (this.text = i),
                    this.hide();
                }
                (r.prototype.show = function(t) {
                  t || this.overlay.parentElement
                    ? t &&
                      (this.overlay.parentElement &&
                        this.overlay.parentElement != t &&
                        this.overlay.parentElement.removeChild(this.overlay),
                      t.appendChild(this.overlay))
                    : document.body.appendChild(this.overlay),
                    (this.overlay.style.display = 'block');
                  var e = this.overlay.querySelector('img').style;
                  n.isLandscapeMode()
                    ? ((e.width = '20%'),
                      (e.marginLeft = '40%'),
                      (e.marginTop = '3%'))
                    : ((e.width = '50%'),
                      (e.marginLeft = '25%'),
                      (e.marginTop = '25%'));
                }),
                  (r.prototype.hide = function() {
                    this.overlay.style.display = 'none';
                  }),
                  (r.prototype.showTemporarily = function(t, e) {
                    this.show(e),
                      (this.timer = setTimeout(this.hide.bind(this), t));
                  }),
                  (r.prototype.disableShowTemporarily = function() {
                    clearTimeout(this.timer);
                  }),
                  (r.prototype.update = function() {
                    this.disableShowTemporarily(),
                      !n.isLandscapeMode() && n.isMobile()
                        ? this.show()
                        : this.hide();
                  }),
                  (r.prototype.loadIcon_ = function() {
                    this.icon = n.base64(
                      'image/svg+xml',
                      ''
                    );
                  }),
                  (e.exports = r);
              },
              { './util.js': 68 }
            ],
            63: [
              function(t, e, i) {
                var n = t('./sensor-sample.js'),
                  r = t('../math-util.js'),
                  o = t('../util.js');
                function s(t) {
                  (this.kFilter = t),
                    (this.currentAccelMeasurement = new n()),
                    (this.currentGyroMeasurement = new n()),
                    (this.previousGyroMeasurement = new n()),
                    o.isIOS()
                      ? (this.filterQ = new r.Quaternion(-1, 0, 0, 1))
                      : (this.filterQ = new r.Quaternion(1, 0, 0, 1)),
                    (this.previousFilterQ = new r.Quaternion()),
                    this.previousFilterQ.copy(this.filterQ),
                    (this.accelQ = new r.Quaternion()),
                    (this.isOrientationInitialized = !1),
                    (this.estimatedGravity = new r.Vector3()),
                    (this.measuredGravity = new r.Vector3()),
                    (this.gyroIntegralQ = new r.Quaternion());
                }
                (s.prototype.addAccelMeasurement = function(t, e) {
                  this.currentAccelMeasurement.set(t, e);
                }),
                  (s.prototype.addGyroMeasurement = function(t, e) {
                    this.currentGyroMeasurement.set(t, e);
                    var i = e - this.previousGyroMeasurement.timestampS;
                    o.isTimestampDeltaValid(i) && this.run_(),
                      this.previousGyroMeasurement.copy(
                        this.currentGyroMeasurement
                      );
                  }),
                  (s.prototype.run_ = function() {
                    if (!this.isOrientationInitialized)
                      return (
                        (this.accelQ = this.accelToQuaternion_(
                          this.currentAccelMeasurement.sample
                        )),
                        this.previousFilterQ.copy(this.accelQ),
                        void (this.isOrientationInitialized = !0)
                      );
                    var t =
                        this.currentGyroMeasurement.timestampS -
                        this.previousGyroMeasurement.timestampS,
                      e = this.gyroToQuaternionDelta_(
                        this.currentGyroMeasurement.sample,
                        t
                      );
                    this.gyroIntegralQ.multiply(e),
                      this.filterQ.copy(this.previousFilterQ),
                      this.filterQ.multiply(e);
                    var i = new r.Quaternion();
                    i.copy(this.filterQ),
                      i.inverse(),
                      this.estimatedGravity.set(0, 0, -1),
                      this.estimatedGravity.applyQuaternion(i),
                      this.estimatedGravity.normalize(),
                      this.measuredGravity.copy(
                        this.currentAccelMeasurement.sample
                      ),
                      this.measuredGravity.normalize();
                    var n = new r.Quaternion();
                    n.setFromUnitVectors(
                      this.estimatedGravity,
                      this.measuredGravity
                    ),
                      n.inverse(),
                      o.isDebug() &&
                        console.log(
                          'Delta: %d deg, G_est: (%s, %s, %s), G_meas: (%s, %s, %s)',
                          r.radToDeg * o.getQuaternionAngle(n),
                          this.estimatedGravity.x.toFixed(1),
                          this.estimatedGravity.y.toFixed(1),
                          this.estimatedGravity.z.toFixed(1),
                          this.measuredGravity.x.toFixed(1),
                          this.measuredGravity.y.toFixed(1),
                          this.measuredGravity.z.toFixed(1)
                        );
                    var s = new r.Quaternion();
                    s.copy(this.filterQ),
                      s.multiply(n),
                      this.filterQ.slerp(s, 1 - this.kFilter),
                      this.previousFilterQ.copy(this.filterQ);
                  }),
                  (s.prototype.getOrientation = function() {
                    return this.filterQ;
                  }),
                  (s.prototype.accelToQuaternion_ = function(t) {
                    var e = new r.Vector3();
                    e.copy(t), e.normalize();
                    var i = new r.Quaternion();
                    return (
                      i.setFromUnitVectors(new r.Vector3(0, 0, -1), e),
                      i.inverse(),
                      i
                    );
                  }),
                  (s.prototype.gyroToQuaternionDelta_ = function(t, e) {
                    var i = new r.Quaternion(),
                      n = new r.Vector3();
                    return (
                      n.copy(t),
                      n.normalize(),
                      i.setFromAxisAngle(n, t.length() * e),
                      i
                    );
                  }),
                  (e.exports = s);
              },
              {
                '../math-util.js': 59,
                '../util.js': 68,
                './sensor-sample.js': 66
              }
            ],
            64: [
              function(t, e, i) {
                var n = t('./complementary-filter.js'),
                  r = t('./pose-predictor.js'),
                  o = t('../touch-panner.js'),
                  s = t('../math-util.js'),
                  a = t('../util.js');
                function c() {
                  (this.deviceId = 'webvr-polyfill:fused'),
                    (this.deviceName =
                      'VR Position Device (webvr-polyfill:fused)'),
                    (this.accelerometer = new s.Vector3()),
                    (this.gyroscope = new s.Vector3()),
                    this.start(),
                    (this.filter = new n(window.WebVRConfig.K_FILTER)),
                    (this.posePredictor = new r(
                      window.WebVRConfig.PREDICTION_TIME_S
                    )),
                    (this.touchPanner = new o()),
                    (this.filterToWorldQ = new s.Quaternion()),
                    a.isIOS()
                      ? this.filterToWorldQ.setFromAxisAngle(
                          new s.Vector3(1, 0, 0),
                          Math.PI / 2
                        )
                      : this.filterToWorldQ.setFromAxisAngle(
                          new s.Vector3(1, 0, 0),
                          -Math.PI / 2
                        ),
                    (this.inverseWorldToScreenQ = new s.Quaternion()),
                    (this.worldToScreenQ = new s.Quaternion()),
                    (this.originalPoseAdjustQ = new s.Quaternion()),
                    this.originalPoseAdjustQ.setFromAxisAngle(
                      new s.Vector3(0, 0, 1),
                      -window.orientation * Math.PI / 180
                    ),
                    this.setScreenTransform_(),
                    a.isLandscapeMode() &&
                      this.filterToWorldQ.multiply(this.inverseWorldToScreenQ),
                    (this.resetQ = new s.Quaternion()),
                    (this.isFirefoxAndroid = a.isFirefoxAndroid()),
                    (this.isIOS = a.isIOS()),
                    (this.orientationOut_ = new Float32Array(4));
                }
                (c.prototype.getPosition = function() {
                  return null;
                }),
                  (c.prototype.getOrientation = function() {
                    var t = this.filter.getOrientation();
                    this.predictedQ = this.posePredictor.getPrediction(
                      t,
                      this.gyroscope,
                      this.previousTimestampS
                    );
                    var e = new s.Quaternion();
                    return (
                      e.copy(this.filterToWorldQ),
                      e.multiply(this.resetQ),
                      window.WebVRConfig.TOUCH_PANNER_DISABLED ||
                        e.multiply(this.touchPanner.getOrientation()),
                      e.multiply(this.predictedQ),
                      e.multiply(this.worldToScreenQ),
                      window.WebVRConfig.YAW_ONLY &&
                        ((e.x = 0), (e.z = 0), e.normalize()),
                      (this.orientationOut_[0] = e.x),
                      (this.orientationOut_[1] = e.y),
                      (this.orientationOut_[2] = e.z),
                      (this.orientationOut_[3] = e.w),
                      this.orientationOut_
                    );
                  }),
                  (c.prototype.resetPose = function() {
                    this.resetQ.copy(this.filter.getOrientation()),
                      (this.resetQ.x = 0),
                      (this.resetQ.y = 0),
                      (this.resetQ.z *= -1),
                      this.resetQ.normalize(),
                      a.isLandscapeMode() &&
                        this.resetQ.multiply(this.inverseWorldToScreenQ),
                      this.resetQ.multiply(this.originalPoseAdjustQ),
                      window.WebVRConfig.TOUCH_PANNER_DISABLED ||
                        this.touchPanner.resetSensor();
                  }),
                  (c.prototype.onDeviceMotion_ = function(t) {
                    this.updateDeviceMotion_(t);
                  }),
                  (c.prototype.updateDeviceMotion_ = function(t) {
                    var e = t.accelerationIncludingGravity,
                      i = t.rotationRate,
                      n = t.timeStamp / 1e3,
                      r = n - this.previousTimestampS;
                    if (r <= a.MIN_TIMESTEP || r > a.MAX_TIMESTEP)
                      return (
                        console.warn(
                          'Invalid timestamps detected. Time step between successive gyroscope sensor samples is very small or not monotonic'
                        ),
                        void (this.previousTimestampS = n)
                      );
                    this.accelerometer.set(-e.x, -e.y, -e.z),
                      this.gyroscope.set(i.alpha, i.beta, i.gamma),
                      (this.isIOS || this.isFirefoxAndroid) &&
                        this.gyroscope.multiplyScalar(Math.PI / 180),
                      this.filter.addAccelMeasurement(this.accelerometer, n),
                      this.filter.addGyroMeasurement(this.gyroscope, n),
                      (this.previousTimestampS = n);
                  }),
                  (c.prototype.onOrientationChange_ = function(t) {
                    this.setScreenTransform_();
                  }),
                  (c.prototype.onMessage_ = function(t) {
                    var e = t.data;
                    e &&
                      e.type &&
                      ('devicemotion' === e.type.toLowerCase() &&
                        this.updateDeviceMotion_(e.deviceMotionEvent));
                  }),
                  (c.prototype.setScreenTransform_ = function() {
                    switch ((this.worldToScreenQ.set(0, 0, 0, 1),
                    window.orientation)) {
                      case 0:
                        break;
                      case 90:
                        this.worldToScreenQ.setFromAxisAngle(
                          new s.Vector3(0, 0, 1),
                          -Math.PI / 2
                        );
                        break;
                      case -90:
                        this.worldToScreenQ.setFromAxisAngle(
                          new s.Vector3(0, 0, 1),
                          Math.PI / 2
                        );
                    }
                    this.inverseWorldToScreenQ.copy(this.worldToScreenQ),
                      this.inverseWorldToScreenQ.inverse();
                  }),
                  (c.prototype.start = function() {
                    (this.onDeviceMotionCallback_ = this.onDeviceMotion_.bind(
                      this
                    )),
                      (this.onOrientationChangeCallback_ = this.onOrientationChange_.bind(
                        this
                      )),
                      (this.onMessageCallback_ = this.onMessage_.bind(this)),
                      a.isIOS() &&
                        a.isInsideCrossDomainIFrame() &&
                        window.addEventListener(
                          'message',
                          this.onMessageCallback_
                        ),
                      window.addEventListener(
                        'orientationchange',
                        this.onOrientationChangeCallback_
                      ),
                      window.addEventListener(
                        'devicemotion',
                        this.onDeviceMotionCallback_
                      );
                  }),
                  (c.prototype.stop = function() {
                    window.removeEventListener(
                      'devicemotion',
                      this.onDeviceMotionCallback_
                    ),
                      window.removeEventListener(
                        'orientationchange',
                        this.onOrientationChangeCallback_
                      ),
                      window.removeEventListener(
                        'message',
                        this.onMessageCallback_
                      );
                  }),
                  (e.exports = c);
              },
              {
                '../math-util.js': 59,
                '../touch-panner.js': 67,
                '../util.js': 68,
                './complementary-filter.js': 63,
                './pose-predictor.js': 65
              }
            ],
            65: [
              function(t, e, i) {
                var n = t('../math-util'),
                  r = t('../util');
                function o(t) {
                  (this.predictionTimeS = t),
                    (this.previousQ = new n.Quaternion()),
                    (this.previousTimestampS = null),
                    (this.deltaQ = new n.Quaternion()),
                    (this.outQ = new n.Quaternion());
                }
                (o.prototype.getPrediction = function(t, e, i) {
                  if (!this.previousTimestampS)
                    return (
                      this.previousQ.copy(t), (this.previousTimestampS = i), t
                    );
                  var o = new n.Vector3();
                  o.copy(e), o.normalize();
                  var s = e.length();
                  if (s < 20 * n.degToRad)
                    return (
                      r.isDebug() &&
                        console.log(
                          'Moving slowly, at %s deg/s: no prediction',
                          (n.radToDeg * s).toFixed(1)
                        ),
                      this.outQ.copy(t),
                      this.previousQ.copy(t),
                      this.outQ
                    );
                  this.previousTimestampS;
                  var a = s * this.predictionTimeS;
                  return (
                    this.deltaQ.setFromAxisAngle(o, a),
                    this.outQ.copy(this.previousQ),
                    this.outQ.multiply(this.deltaQ),
                    this.previousQ.copy(t),
                    (this.previousTimestampS = i),
                    this.outQ
                  );
                }),
                  (e.exports = o);
              },
              { '../math-util': 59, '../util': 68 }
            ],
            66: [
              function(t, e, i) {
                function n(t, e) {
                  this.set(t, e);
                }
                (n.prototype.set = function(t, e) {
                  (this.sample = t), (this.timestampS = e);
                }),
                  (n.prototype.copy = function(t) {
                    this.set(t.sample, t.timestampS);
                  }),
                  (e.exports = n);
              },
              {}
            ],
            67: [
              function(t, e, i) {
                var n = t('./math-util.js'),
                  r = t('./util.js');
                function o() {
                  window.addEventListener(
                    'touchstart',
                    this.onTouchStart_.bind(this)
                  ),
                    window.addEventListener(
                      'touchmove',
                      this.onTouchMove_.bind(this)
                    ),
                    window.addEventListener(
                      'touchend',
                      this.onTouchEnd_.bind(this)
                    ),
                    (this.isTouching = !1),
                    (this.rotateStart = new n.Vector2()),
                    (this.rotateEnd = new n.Vector2()),
                    (this.rotateDelta = new n.Vector2()),
                    (this.theta = 0),
                    (this.orientation = new n.Quaternion());
                }
                (o.prototype.getOrientation = function() {
                  return (
                    this.orientation.setFromEulerXYZ(0, 0, this.theta),
                    this.orientation
                  );
                }),
                  (o.prototype.resetSensor = function() {
                    this.theta = 0;
                  }),
                  (o.prototype.onTouchStart_ = function(t) {
                    t.touches &&
                      1 == t.touches.length &&
                      (this.rotateStart.set(
                        t.touches[0].pageX,
                        t.touches[0].pageY
                      ),
                      (this.isTouching = !0));
                  }),
                  (o.prototype.onTouchMove_ = function(t) {
                    if (this.isTouching) {
                      this.rotateEnd.set(
                        t.touches[0].pageX,
                        t.touches[0].pageY
                      ),
                        this.rotateDelta.subVectors(
                          this.rotateEnd,
                          this.rotateStart
                        ),
                        this.rotateStart.copy(this.rotateEnd),
                        r.isIOS() && (this.rotateDelta.x *= -1);
                      var e = document.body;
                      this.theta +=
                        2 * Math.PI * this.rotateDelta.x / e.clientWidth * 0.5;
                    }
                  }),
                  (o.prototype.onTouchEnd_ = function(t) {
                    this.isTouching = !1;
                  }),
                  (e.exports = o);
              },
              { './math-util.js': 59, './util.js': 68 }
            ],
            68: [
              function(t, e, i) {
                var n,
                  r,
                  o,
                  s,
                  a = window.Util || {};
                (a.MIN_TIMESTEP = 0.001),
                  (a.MAX_TIMESTEP = 1),
                  (a.base64 = function(t, e) {
                    return 'data:' + t + ';base64,' + e;
                  }),
                  (a.clamp = function(t, e, i) {
                    return Math.min(Math.max(e, t), i);
                  }),
                  (a.lerp = function(t, e, i) {
                    return t + (e - t) * i;
                  }),
                  (a.race = function(t) {
                    return Promise.race
                      ? Promise.race(t)
                      : new Promise(function(e, i) {
                          for (var n = 0; n < t.length; n++) t[n].then(e, i);
                        });
                  }),
                  (a.isIOS = ((n = /iPad|iPhone|iPod/.test(navigator.platform)),
                  function() {
                    return n;
                  })),
                  (a.isWebViewAndroid = ((r =
                    -1 !== navigator.userAgent.indexOf('Version') &&
                    -1 !== navigator.userAgent.indexOf('Android') &&
                    -1 !== navigator.userAgent.indexOf('Chrome')),
                  function() {
                    return r;
                  })),
                  (a.isSafari = ((o = /^((?!chrome|android).)*safari/i.test(
                    navigator.userAgent
                  )),
                  function() {
                    return o;
                  })),
                  (a.isFirefoxAndroid = ((s =
                    -1 !== navigator.userAgent.indexOf('Firefox') &&
                    -1 !== navigator.userAgent.indexOf('Android')),
                  function() {
                    return s;
                  })),
                  (a.isLandscapeMode = function() {
                    return (
                      90 == window.orientation || -90 == window.orientation
                    );
                  }),
                  (a.isTimestampDeltaValid = function(t) {
                    return (
                      !isNaN(t) &&
                      (!(t <= a.MIN_TIMESTEP) && !(t > a.MAX_TIMESTEP))
                    );
                  }),
                  (a.getScreenWidth = function() {
                    return (
                      Math.max(window.screen.width, window.screen.height) *
                      window.devicePixelRatio
                    );
                  }),
                  (a.getScreenHeight = function() {
                    return (
                      Math.min(window.screen.width, window.screen.height) *
                      window.devicePixelRatio
                    );
                  }),
                  (a.requestFullscreen = function(t) {
                    if (a.isWebViewAndroid()) return !1;
                    if (t.requestFullscreen) t.requestFullscreen();
                    else if (t.webkitRequestFullscreen)
                      t.webkitRequestFullscreen();
                    else if (t.mozRequestFullScreen) t.mozRequestFullScreen();
                    else {
                      if (!t.msRequestFullscreen) return !1;
                      t.msRequestFullscreen();
                    }
                    return !0;
                  }),
                  (a.exitFullscreen = function() {
                    if (document.exitFullscreen) document.exitFullscreen();
                    else if (document.webkitExitFullscreen)
                      document.webkitExitFullscreen();
                    else if (document.mozCancelFullScreen)
                      document.mozCancelFullScreen();
                    else {
                      if (!document.msExitFullscreen) return !1;
                      document.msExitFullscreen();
                    }
                    return !0;
                  }),
                  (a.getFullscreenElement = function() {
                    return (
                      document.fullscreenElement ||
                      document.webkitFullscreenElement ||
                      document.mozFullScreenElement ||
                      document.msFullscreenElement
                    );
                  }),
                  (a.linkProgram = function(t, e, i, n) {
                    var r = t.createShader(t.VERTEX_SHADER);
                    t.shaderSource(r, e), t.compileShader(r);
                    var o = t.createShader(t.FRAGMENT_SHADER);
                    t.shaderSource(o, i), t.compileShader(o);
                    var s = t.createProgram();
                    t.attachShader(s, r), t.attachShader(s, o);
                    for (var a in n) t.bindAttribLocation(s, n[a], a);
                    return (
                      t.linkProgram(s), t.deleteShader(r), t.deleteShader(o), s
                    );
                  }),
                  (a.getProgramUniforms = function(t, e) {
                    for (
                      var i = {},
                        n = t.getProgramParameter(e, t.ACTIVE_UNIFORMS),
                        r = '',
                        o = 0;
                      o < n;
                      o++
                    ) {
                      i[
                        (r = t.getActiveUniform(e, o).name.replace('[0]', ''))
                      ] = t.getUniformLocation(e, r);
                    }
                    return i;
                  }),
                  (a.orthoMatrix = function(t, e, i, n, r, o, s) {
                    var a = 1 / (e - i),
                      c = 1 / (n - r),
                      l = 1 / (o - s);
                    return (
                      (t[0] = -2 * a),
                      (t[1] = 0),
                      (t[2] = 0),
                      (t[3] = 0),
                      (t[4] = 0),
                      (t[5] = -2 * c),
                      (t[6] = 0),
                      (t[7] = 0),
                      (t[8] = 0),
                      (t[9] = 0),
                      (t[10] = 2 * l),
                      (t[11] = 0),
                      (t[12] = (e + i) * a),
                      (t[13] = (r + n) * c),
                      (t[14] = (s + o) * l),
                      (t[15] = 1),
                      t
                    );
                  }),
                  (a.copyArray = function(t, e) {
                    for (var i = 0, n = t.length; i < n; i++) e[i] = t[i];
                  }),
                  (a.isMobile = function() {
                    var t,
                      e = !1;
                    return (
                      (t =
                        navigator.userAgent ||
                        navigator.vendor ||
                        window.opera),
                      (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                        t
                      ) ||
                        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                          t.substr(0, 4)
                        )) &&
                        (e = !0),
                      e
                    );
                  }),
                  (a.extend = function(t, e) {
                    for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
                    return t;
                  }),
                  (a.safariCssSizeWorkaround = function(t) {
                    if (a.isIOS()) {
                      var e = t.style.width,
                        i = t.style.height;
                      (t.style.width = parseInt(e) + 1 + 'px'),
                        (t.style.height = parseInt(i) + 'px'),
                        setTimeout(function() {
                          (t.style.width = e), (t.style.height = i);
                        }, 100);
                    }
                    (window.Util = a), (window.canvas = t);
                  }),
                  (a.isDebug = function() {
                    return a.getQueryParameter('debug');
                  }),
                  (a.getQueryParameter = function(t) {
                    t = t.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                    var e = new RegExp('[\\?&]' + t + '=([^&#]*)').exec(
                      location.search
                    );
                    return null === e
                      ? ''
                      : decodeURIComponent(e[1].replace(/\+/g, ' '));
                  }),
                  (a.frameDataFromPose = (function() {
                    var t = Math.PI / 180,
                      e = 0.25 * Math.PI;
                    var i = new Float32Array([0, 0, 0, 1]),
                      n = new Float32Array([0, 0, 0]);
                    function r(r, o, s, a, c) {
                      var l, u, h, d, p, f, m, g, v, y;
                      (l = r),
                        (u = a ? a.fieldOfView : null),
                        (h = c.depthNear),
                        (d = c.depthFar),
                        (p = Math.tan(u ? u.upDegrees * t : e)),
                        (f = Math.tan(u ? u.downDegrees * t : e)),
                        (m = Math.tan(u ? u.leftDegrees * t : e)),
                        (g = Math.tan(u ? u.rightDegrees * t : e)),
                        (v = 2 / (m + g)),
                        (y = 2 / (p + f)),
                        (l[0] = v),
                        (l[1] = 0),
                        (l[2] = 0),
                        (l[3] = 0),
                        (l[4] = 0),
                        (l[5] = y),
                        (l[6] = 0),
                        (l[7] = 0),
                        (l[8] = -(m - g) * v * 0.5),
                        (l[9] = (p - f) * y * 0.5),
                        (l[10] = d / (h - d)),
                        (l[11] = -1),
                        (l[12] = 0),
                        (l[13] = 0),
                        (l[14] = d * h / (h - d)),
                        (l[15] = 0);
                      var w,
                        M,
                        E,
                        b,
                        x,
                        A,
                        T,
                        L,
                        N,
                        D,
                        S,
                        C,
                        _,
                        I,
                        j,
                        O,
                        R,
                        z,
                        k,
                        B,
                        P,
                        U,
                        F,
                        H,
                        V,
                        G,
                        Y,
                        Q,
                        W,
                        q,
                        X,
                        K,
                        Z,
                        J,
                        $,
                        tt,
                        et,
                        it,
                        nt,
                        rt,
                        ot,
                        st,
                        at,
                        ct,
                        lt,
                        ut,
                        ht,
                        dt,
                        pt,
                        ft,
                        mt,
                        gt,
                        vt,
                        yt,
                        wt,
                        Mt,
                        Et,
                        bt,
                        xt,
                        At,
                        Tt,
                        Lt,
                        Nt,
                        Dt,
                        St,
                        Ct,
                        _t,
                        It,
                        jt = s.orientation || i,
                        Ot = s.position || n;
                      (w = o),
                        (E = Ot),
                        (b = (M = jt)[0]),
                        (x = M[1]),
                        (A = M[2]),
                        (T = M[3]),
                        (S = b * (L = b + b)),
                        (C = b * (N = x + x)),
                        (_ = b * (D = A + A)),
                        (I = x * N),
                        (j = x * D),
                        (O = A * D),
                        (R = T * L),
                        (z = T * N),
                        (k = T * D),
                        (w[0] = 1 - (I + O)),
                        (w[1] = C + k),
                        (w[2] = _ - z),
                        (w[3] = 0),
                        (w[4] = C - k),
                        (w[5] = 1 - (S + O)),
                        (w[6] = j + R),
                        (w[7] = 0),
                        (w[8] = _ + z),
                        (w[9] = j - R),
                        (w[10] = 1 - (S + I)),
                        (w[11] = 0),
                        (w[12] = E[0]),
                        (w[13] = E[1]),
                        (w[14] = E[2]),
                        (w[15] = 1),
                        a &&
                          ((B = o),
                          (P = o),
                          (U = a.offset),
                          ($ = U[0]),
                          (tt = U[1]),
                          (et = U[2]),
                          P === B
                            ? ((B[12] =
                                P[0] * $ + P[4] * tt + P[8] * et + P[12]),
                              (B[13] =
                                P[1] * $ + P[5] * tt + P[9] * et + P[13]),
                              (B[14] =
                                P[2] * $ + P[6] * tt + P[10] * et + P[14]),
                              (B[15] =
                                P[3] * $ + P[7] * tt + P[11] * et + P[15]))
                            : ((F = P[0]),
                              (H = P[1]),
                              (V = P[2]),
                              (G = P[3]),
                              (Y = P[4]),
                              (Q = P[5]),
                              (W = P[6]),
                              (q = P[7]),
                              (X = P[8]),
                              (K = P[9]),
                              (Z = P[10]),
                              (J = P[11]),
                              (B[0] = F),
                              (B[1] = H),
                              (B[2] = V),
                              (B[3] = G),
                              (B[4] = Y),
                              (B[5] = Q),
                              (B[6] = W),
                              (B[7] = q),
                              (B[8] = X),
                              (B[9] = K),
                              (B[10] = Z),
                              (B[11] = J),
                              (B[12] = F * $ + Y * tt + X * et + P[12]),
                              (B[13] = H * $ + Q * tt + K * et + P[13]),
                              (B[14] = V * $ + W * tt + Z * et + P[14]),
                              (B[15] = G * $ + q * tt + J * et + P[15]))),
                        (it = o),
                        (rt = (nt = o)[0]),
                        (ot = nt[1]),
                        (st = nt[2]),
                        (at = nt[3]),
                        (ct = nt[4]),
                        (lt = nt[5]),
                        (ut = nt[6]),
                        (ht = nt[7]),
                        (dt = nt[8]),
                        (pt = nt[9]),
                        (ft = nt[10]),
                        (mt = nt[11]),
                        (gt = nt[12]),
                        (vt = nt[13]),
                        (yt = nt[14]),
                        (wt = nt[15]),
                        (It =
                          (Mt = rt * lt - ot * ct) * (_t = ft * wt - mt * yt) -
                          (Et = rt * ut - st * ct) * (Ct = pt * wt - mt * vt) +
                          (bt = rt * ht - at * ct) * (St = pt * yt - ft * vt) +
                          (xt = ot * ut - st * lt) * (Dt = dt * wt - mt * gt) -
                          (At = ot * ht - at * lt) * (Nt = dt * yt - ft * gt) +
                          (Tt = st * ht - at * ut) *
                            (Lt = dt * vt - pt * gt)) &&
                          ((It = 1 / It),
                          (it[0] = (lt * _t - ut * Ct + ht * St) * It),
                          (it[1] = (st * Ct - ot * _t - at * St) * It),
                          (it[2] = (vt * Tt - yt * At + wt * xt) * It),
                          (it[3] = (ft * At - pt * Tt - mt * xt) * It),
                          (it[4] = (ut * Dt - ct * _t - ht * Nt) * It),
                          (it[5] = (rt * _t - st * Dt + at * Nt) * It),
                          (it[6] = (yt * bt - gt * Tt - wt * Et) * It),
                          (it[7] = (dt * Tt - ft * bt + mt * Et) * It),
                          (it[8] = (ct * Ct - lt * Dt + ht * Lt) * It),
                          (it[9] = (ot * Dt - rt * Ct - at * Lt) * It),
                          (it[10] = (gt * At - vt * bt + wt * Mt) * It),
                          (it[11] = (pt * bt - dt * At - mt * Mt) * It),
                          (it[12] = (lt * Nt - ct * St - ut * Lt) * It),
                          (it[13] = (rt * St - ot * Nt + st * Lt) * It),
                          (it[14] = (vt * Et - gt * xt - yt * Mt) * It),
                          (it[15] = (dt * xt - pt * Et + ft * Mt) * It));
                    }
                    return function(t, e, i) {
                      return (
                        !(!t || !e) &&
                        ((t.pose = e),
                        (t.timestamp = e.timestamp),
                        r(
                          t.leftProjectionMatrix,
                          t.leftViewMatrix,
                          e,
                          i.getEyeParameters('left'),
                          i
                        ),
                        r(
                          t.rightProjectionMatrix,
                          t.rightViewMatrix,
                          e,
                          i.getEyeParameters('right'),
                          i
                        ),
                        !0)
                      );
                    };
                  })()),
                  (a.isInsideCrossDomainIFrame = function() {
                    var t = window.self !== window.top,
                      e = a.getDomainFromUrl(document.referrer),
                      i = a.getDomainFromUrl(window.location.href);
                    return t && e !== i;
                  }),
                  (a.getDomainFromUrl = function(t) {
                    return (t.indexOf('://') > -1
                      ? t.split('/')[2]
                      : t.split('/')[0]
                    ).split(':')[0];
                  }),
                  (e.exports = a);
              },
              {}
            ],
            69: [
              function(t, e, i) {
                var n = t('./device-info.js'),
                  r = (t('./util.js'), 'CardboardV1'),
                  o = 'WEBVR_CARDBOARD_VIEWER';
                function s() {
                  try {
                    this.selectedKey = localStorage.getItem(o);
                  } catch (t) {
                    console.error('Failed to load viewer profile: %s', t);
                  }
                  this.selectedKey || (this.selectedKey = r),
                    (this.dialog = this.createDialog_(n.Viewers)),
                    (this.root = null),
                    (this.onChangeCallbacks_ = []);
                }
                (s.prototype.show = function(t) {
                  (this.root = t),
                    t.appendChild(this.dialog),
                    (this.dialog.querySelector(
                      '#' + this.selectedKey
                    ).checked = !0),
                    (this.dialog.style.display = 'block');
                }),
                  (s.prototype.hide = function() {
                    this.root &&
                      this.root.contains(this.dialog) &&
                      this.root.removeChild(this.dialog),
                      (this.dialog.style.display = 'none');
                  }),
                  (s.prototype.getCurrentViewer = function() {
                    return n.Viewers[this.selectedKey];
                  }),
                  (s.prototype.getSelectedKey_ = function() {
                    var t = this.dialog.querySelector(
                      'input[name=field]:checked'
                    );
                    return t ? t.id : null;
                  }),
                  (s.prototype.onChange = function(t) {
                    this.onChangeCallbacks_.push(t);
                  }),
                  (s.prototype.fireOnChange_ = function(t) {
                    for (var e = 0; e < this.onChangeCallbacks_.length; e++)
                      this.onChangeCallbacks_[e](t);
                  }),
                  (s.prototype.onSave_ = function() {
                    if (
                      ((this.selectedKey = this.getSelectedKey_()),
                      this.selectedKey && n.Viewers[this.selectedKey])
                    ) {
                      this.fireOnChange_(n.Viewers[this.selectedKey]);
                      try {
                        localStorage.setItem(o, this.selectedKey);
                      } catch (t) {
                        console.error('Failed to save viewer profile: %s', t);
                      }
                      this.hide();
                    } else
                      console.error(
                        'ViewerSelector.onSave_: this should never happen!'
                      );
                  }),
                  (s.prototype.createDialog_ = function(t) {
                    var e = document.createElement('div');
                    e.classList.add('webvr-polyfill-viewer-selector'),
                      (e.style.display = 'none');
                    var i = document.createElement('div');
                    ((n = i.style).position = 'fixed'),
                      (n.left = 0),
                      (n.top = 0),
                      (n.width = '100%'),
                      (n.height = '100%'),
                      (n.background = 'rgba(0, 0, 0, 0.3)'),
                      i.addEventListener('click', this.hide.bind(this));
                    var n,
                      r = document.createElement('div');
                    ((n = r.style).boxSizing = 'border-box'),
                      (n.position = 'fixed'),
                      (n.top = '24px'),
                      (n.left = '50%'),
                      (n.marginLeft = '-140px'),
                      (n.width = '280px'),
                      (n.padding = '24px'),
                      (n.overflow = 'hidden'),
                      (n.background = '#fafafa'),
                      (n.fontFamily = "'Roboto', sans-serif"),
                      (n.boxShadow = '0px 5px 20px #666'),
                      r.appendChild(this.createH1_('Select your viewer'));
                    for (var o in t)
                      r.appendChild(this.createChoice_(o, t[o].label));
                    return (
                      r.appendChild(
                        this.createButton_('Save', this.onSave_.bind(this))
                      ),
                      e.appendChild(i),
                      e.appendChild(r),
                      e
                    );
                  }),
                  (s.prototype.createH1_ = function(t) {
                    var e = document.createElement('h1'),
                      i = e.style;
                    return (
                      (i.color = 'black'),
                      (i.fontSize = '20px'),
                      (i.fontWeight = 'bold'),
                      (i.marginTop = 0),
                      (i.marginBottom = '24px'),
                      (e.innerHTML = t),
                      e
                    );
                  }),
                  (s.prototype.createChoice_ = function(t, e) {
                    var i = document.createElement('div');
                    (i.style.marginTop = '8px'), (i.style.color = 'black');
                    var n = document.createElement('input');
                    (n.style.fontSize = '30px'),
                      n.setAttribute('id', t),
                      n.setAttribute('type', 'radio'),
                      n.setAttribute('value', t),
                      n.setAttribute('name', 'field');
                    var r = document.createElement('label');
                    return (
                      (r.style.marginLeft = '4px'),
                      r.setAttribute('for', t),
                      (r.innerHTML = e),
                      i.appendChild(n),
                      i.appendChild(r),
                      i
                    );
                  }),
                  (s.prototype.createButton_ = function(t, e) {
                    var i = document.createElement('button');
                    i.innerHTML = t;
                    var n = i.style;
                    return (
                      (n.float = 'right'),
                      (n.textTransform = 'uppercase'),
                      (n.color = '#1094f7'),
                      (n.fontSize = '14px'),
                      (n.letterSpacing = 0),
                      (n.border = 0),
                      (n.background = 'none'),
                      (n.marginTop = '16px'),
                      i.addEventListener('click', e),
                      i
                    );
                  }),
                  (e.exports = s);
              },
              { './device-info.js': 53, './util.js': 68 }
            ],
            70: [
              function(t, e, i) {
                var n,
                  r = t('./util.js');
                function o() {
                  var t = document.createElement('video');
                  function e(t, e, i) {
                    var n = document.createElement('source');
                    (n.src = i), (n.type = 'video/' + e), t.appendChild(n);
                  }
                  t.setAttribute('loop', ''),
                    e(
                      t,
                      'webm',
                      r.base64(
                        'video/webm',
                        'GkXfo0AgQoaBAUL3gQFC8oEEQvOBCEKCQAR3ZWJtQoeBAkKFgQIYU4BnQI0VSalmQCgq17FAAw9CQE2AQAZ3aGFtbXlXQUAGd2hhbW15RIlACECPQAAAAAAAFlSua0AxrkAu14EBY8WBAZyBACK1nEADdW5khkAFVl9WUDglhohAA1ZQOIOBAeBABrCBCLqBCB9DtnVAIueBAKNAHIEAAIAwAQCdASoIAAgAAUAmJaQAA3AA/vz0AAA='
                      )
                    ),
                    e(
                      t,
                      'mp4',
                      r.base64(
                        'video/mp4',
                        'AAAAHGZ0eXBpc29tAAACAGlzb21pc28ybXA0MQAAAAhmcmVlAAAAG21kYXQAAAGzABAHAAABthADAowdbb9/AAAC6W1vb3YAAABsbXZoZAAAAAB8JbCAfCWwgAAAA+gAAAAAAAEAAAEAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAIVdHJhawAAAFx0a2hkAAAAD3wlsIB8JbCAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAQAAAAAAIAAAACAAAAAABsW1kaWEAAAAgbWRoZAAAAAB8JbCAfCWwgAAAA+gAAAAAVcQAAAAAAC1oZGxyAAAAAAAAAAB2aWRlAAAAAAAAAAAAAAAAVmlkZW9IYW5kbGVyAAAAAVxtaW5mAAAAFHZtaGQAAAABAAAAAAAAAAAAAAAkZGluZgAAABxkcmVmAAAAAAAAAAEAAAAMdXJsIAAAAAEAAAEcc3RibAAAALhzdHNkAAAAAAAAAAEAAACobXA0dgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIAAgASAAAAEgAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABj//wAAAFJlc2RzAAAAAANEAAEABDwgEQAAAAADDUAAAAAABS0AAAGwAQAAAbWJEwAAAQAAAAEgAMSNiB9FAEQBFGMAAAGyTGF2YzUyLjg3LjQGAQIAAAAYc3R0cwAAAAAAAAABAAAAAQAAAAAAAAAcc3RzYwAAAAAAAAABAAAAAQAAAAEAAAABAAAAFHN0c3oAAAAAAAAAEwAAAAEAAAAUc3RjbwAAAAAAAAABAAAALAAAAGB1ZHRhAAAAWG1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAG1kaXJhcHBsAAAAAAAAAAAAAAAAK2lsc3QAAAAjqXRvbwAAABtkYXRhAAAAAQAAAABMYXZmNTIuNzguMw=='
                      )
                    ),
                    (this.request = function() {
                      t.paused && t.play();
                    }),
                    (this.release = function() {
                      t.pause();
                    });
                }
                function s() {
                  var t = null;
                  (this.request = function() {
                    t ||
                      (t = setInterval(function() {
                        (window.location = window.location),
                          setTimeout(window.stop, 0);
                      }, 3e4));
                  }),
                    (this.release = function() {
                      t && (clearInterval(t), (t = null));
                    });
                }
                e.exports =
                  (n =
                    navigator.userAgent ||
                    navigator.vendor ||
                    window.opera).match(/iPhone/i) || n.match(/iPod/i)
                    ? s
                    : o;
              },
              { './util.js': 68 }
            ],
            71: [
              function(t, e, i) {
                var n = t('./util.js'),
                  r = t('./cardboard-vr-display.js'),
                  o = t('./mouse-keyboard-vr-display.js'),
                  s = t('./base.js').VRDisplay,
                  a = t('./base.js').VRFrameData,
                  c = t('./base.js').HMDVRDevice,
                  l = t('./base.js').PositionSensorVRDevice,
                  u = t('./display-wrappers.js').VRDisplayHMDDevice,
                  h = t('./display-wrappers.js').VRDisplayPositionSensorDevice,
                  d = t('../package.json').version;
                function p() {
                  (this.displays = []),
                    (this.devices = []),
                    (this.devicesPopulated = !1),
                    (this.nativeWebVRAvailable = this.isWebVRAvailable()),
                    (this.nativeLegacyWebVRAvailable = this.isDeprecatedWebVRAvailable()),
                    (this.nativeGetVRDisplaysFunc = this.nativeWebVRAvailable
                      ? navigator.getVRDisplays
                      : null),
                    this.nativeLegacyWebVRAvailable ||
                      this.nativeWebVRAvailable ||
                      (this.enablePolyfill(),
                      window.WebVRConfig.ENABLE_DEPRECATED_API &&
                        this.enableDeprecatedPolyfill()),
                    f();
                }
                function f() {
                  'VRDisplay' in window &&
                    !('VRFrameData' in window) &&
                    ((window.VRFrameData = a),
                    'depthNear' in window.VRDisplay.prototype ||
                      (window.VRDisplay.prototype.depthNear = 0.01),
                    'depthFar' in window.VRDisplay.prototype ||
                      (window.VRDisplay.prototype.depthFar = 1e4),
                    (window.VRDisplay.prototype.getFrameData = function(t) {
                      return n.frameDataFromPose(t, this.getPose(), this);
                    }));
                }
                (p.prototype.isWebVRAvailable = function() {
                  return 'getVRDisplays' in navigator;
                }),
                  (p.prototype.isDeprecatedWebVRAvailable = function() {
                    return (
                      'getVRDevices' in navigator ||
                      'mozGetVRDevices' in navigator
                    );
                  }),
                  (p.prototype.connectDisplay = function(t) {
                    t.fireVRDisplayConnect_(), this.displays.push(t);
                  }),
                  (p.prototype.populateDevices = function() {
                    if (!this.devicesPopulated) {
                      var t = null;
                      this.isCardboardCompatible() &&
                        ((t = new r()),
                        this.connectDisplay(t),
                        window.WebVRConfig.ENABLE_DEPRECATED_API &&
                          (this.devices.push(new u(t)),
                          this.devices.push(new h(t)))),
                        this.isMobile() ||
                          window.WebVRConfig.MOUSE_KEYBOARD_CONTROLS_DISABLED ||
                          ((t = new o()),
                          this.connectDisplay(t),
                          window.WebVRConfig.ENABLE_DEPRECATED_API &&
                            (this.devices.push(new u(t)),
                            this.devices.push(new h(t)))),
                        (this.devicesPopulated = !0);
                    }
                  }),
                  (p.prototype.enablePolyfill = function() {
                    if (
                      ((navigator.getVRDisplays = this.getVRDisplays.bind(
                        this
                      )),
                      this.nativeWebVRAvailable && window.VRFrameData)
                    ) {
                      var t = window.VRFrameData,
                        e = new window.VRFrameData(),
                        i = window.VRDisplay.prototype.getFrameData;
                      (window.VRFrameData = a),
                        (window.VRDisplay.prototype.getFrameData = function(r) {
                          r instanceof t
                            ? i.call(this, r)
                            : (i.call(this, e),
                              (r.pose = e.pose),
                              n.copyArray(
                                e.leftProjectionMatrix,
                                r.leftProjectionMatrix
                              ),
                              n.copyArray(
                                e.rightProjectionMatrix,
                                r.rightProjectionMatrix
                              ),
                              n.copyArray(e.leftViewMatrix, r.leftViewMatrix),
                              n.copyArray(
                                e.rightViewMatrix,
                                r.rightViewMatrix
                              ));
                        });
                    }
                    if (
                      ((window.VRDisplay = s),
                      navigator && void 0 === navigator.vrEnabled)
                    ) {
                      var r = this;
                      Object.defineProperty(navigator, 'vrEnabled', {
                        get: function() {
                          return (
                            r.isCardboardCompatible() &&
                            (r.isFullScreenAvailable() || n.isIOS())
                          );
                        }
                      });
                    }
                    'VRFrameData' in window || (window.VRFrameData = a);
                  }),
                  (p.prototype.enableDeprecatedPolyfill = function() {
                    (navigator.getVRDevices = this.getVRDevices.bind(this)),
                      (window.HMDVRDevice = c),
                      (window.PositionSensorVRDevice = l);
                  }),
                  (p.prototype.getVRDisplays = function() {
                    this.populateDevices();
                    var t,
                      e = this.displays;
                    if (!this.nativeWebVRAvailable) return Promise.resolve(e);
                    var i = this.nativeGetVRDisplaysFunc.call(navigator),
                      r = new Promise(function(e) {
                        t = setTimeout(function() {
                          console.warn(
                            'Native WebVR implementation detected, but `getVRDisplays()` failed to resolve. Falling back to polyfill.'
                          ),
                            e([]);
                        }, window.WebVRConfig.GET_VR_DISPLAYS_TIMEOUT);
                      });
                    return n.race([i, r]).then(function(i) {
                      return (
                        clearTimeout(t),
                        window.WebVRConfig.ALWAYS_APPEND_POLYFILL_DISPLAY
                          ? i.concat(e)
                          : i.length > 0 ? i : e
                      );
                    });
                  }),
                  (p.prototype.getVRDevices = function() {
                    console.warn(
                      'getVRDevices is deprecated. Please update your code to use getVRDisplays instead.'
                    );
                    var t = this;
                    return new Promise(function(e, i) {
                      try {
                        if (!t.devicesPopulated) {
                          if (t.nativeWebVRAvailable)
                            return navigator.getVRDisplays(function(i) {
                              for (var n = 0; n < i.length; ++n)
                                t.devices.push(new u(i[n])),
                                  t.devices.push(new h(i[n]));
                              (t.devicesPopulated = !0), e(t.devices);
                            }, i);
                          if (t.nativeLegacyWebVRAvailable)
                            return (navigator.getVRDDevices ||
                              navigator.mozGetVRDevices)(function(i) {
                              for (var n = 0; n < i.length; ++n)
                                i[n] instanceof c && t.devices.push(i[n]),
                                  i[n] instanceof l && t.devices.push(i[n]);
                              (t.devicesPopulated = !0), e(t.devices);
                            }, i);
                        }
                        t.populateDevices(), e(t.devices);
                      } catch (t) {
                        i(t);
                      }
                    });
                  }),
                  (p.prototype.NativeVRFrameData = window.VRFrameData),
                  (p.prototype.isMobile = function() {
                    return (
                      /Android/i.test(navigator.userAgent) ||
                      /iPhone|iPad|iPod/i.test(navigator.userAgent)
                    );
                  }),
                  (p.prototype.isCardboardCompatible = function() {
                    return (
                      this.isMobile() || window.WebVRConfig.FORCE_ENABLE_VR
                    );
                  }),
                  (p.prototype.isFullScreenAvailable = function() {
                    return (
                      document.fullscreenEnabled ||
                      document.mozFullScreenEnabled ||
                      document.webkitFullscreenEnabled ||
                      !1
                    );
                  }),
                  (p.InstallWebVRSpecShim = f),
                  (p.version = d),
                  (e.exports.WebVRPolyfill = p);
              },
              {
                '../package.json': 47,
                './base.js': 48,
                './cardboard-vr-display.js': 51,
                './display-wrappers.js': 54,
                './mouse-keyboard-vr-display.js': 60,
                './util.js': 68
              }
            ],
            72: [
              function(t, e, i) {
                var n = /\n/,
                  r = '\n',
                  o = /\s/;
                function s(t, e, i, n) {
                  var r = a17408.indexOf(e, i);
                  return -1 === r || r > n ? n : r;
                }
                function a(t) {
                  return o.test(t);
                }
                function c(t, e, i, n) {
                  return { start: e, end: e + Math.min(n, i - e) };
                }
                (e.exports = function(t, i) {
                  return e.exports
                    .lines(t, i)
                    .map(function(e) {
                      return t.substring(e.start, e.end);
                    })
                    .join('\n');
                }),
                  (e.exports.lines = function(t, e) {
                    if (0 === (e = e || {}).width && 'nowrap' !== e.mode)
                      return [];
                    t = t || '';
                    var i =
                        'number' == typeof e.width ? e.width : Number.MAX_VALUE,
                      o = Math.max(0, e.start || 0),
                      l = 'number' == typeof e.end ? e.end : t.length,
                      u = e.mode,
                      h = e.measure || c;
                    return 'pre' === u
                      ? (function(t, e, i, r, o) {
                          for (
                            var s = [], a = i, c = i;
                            c < r && c < e.length;
                            c++
                          ) {
                            var l = e.charAt(c),
                              u = n.test(l);
                            if (u || c === r - 1) {
                              var h = u ? c : c + 1,
                                d = t(e, a, h, o);
                              s.push(d), (a = c + 1);
                            }
                          }
                          return s;
                        })(h, t, o, l, i)
                      : (function(t, e, i, n, o, c) {
                          var l = [],
                            u = o;
                          'nowrap' === c && (u = Number.MAX_VALUE);
                          for (; i < n && i < e.length; ) {
                            for (
                              var h = s(e, r, i, n);
                              i < h && a(e.charAt(i));

                            )
                              i++;
                            var d = t(e, i, h, u),
                              p = i + (d.end - d.start),
                              f = p + r.length;
                            if (p < h) {
                              for (; p > i && !a(e.charAt(p)); ) p--;
                              if (p === i) f > i + r.length && f--, (p = f);
                              else
                                for (
                                  f = p;
                                  p > i && a(e.charAt(p - r.length));

                                )
                                  p--;
                            }
                            if (p >= i) {
                              var m = t(e, i, p, u);
                              l.push(m);
                            }
                            i = f;
                          }
                          return l;
                        })(h, t, o, l, i, u);
                  });
              },
              {}
            ],
            73: [
              function(t, e, i) {
                'use strict';
                var n = t('global/window'),
                  r = t('is-function'),
                  o = t('parse-headers'),
                  s = t('xtend');
                function a(t, e, i) {
                  var n = t;
                  return (
                    r(e)
                      ? ((i = e), 'string' == typeof t && (n = { uri: t }))
                      : (n = s(e, { uri: t })),
                    (n.callback = i),
                    n
                  );
                }
                function c(t, e, i) {
                  return l((e = a(t, e, i)));
                }
                function l(t) {
                  if (void 0 === t.callback)
                    throw new Error('callback argument missing');
                  var e = !1,
                    i = function(i, n, r) {
                      e || ((e = !0), t.callback(i, n, r));
                    };
                  function n(t) {
                    return (
                      clearTimeout(u),
                      t instanceof Error ||
                        (t = new Error(
                          '' + (t || 'Unknown XMLHttpRequest Error')
                        )),
                      (t.statusCode = 0),
                      i(t, v)
                    );
                  }
                  function r() {
                    if (!a) {
                      var e;
                      clearTimeout(u),
                        (e =
                          t.useXDR && void 0 === l.status
                            ? 200
                            : 1223 === l.status ? 204 : l.status);
                      var n = v,
                        r = null;
                      return (
                        0 !== e
                          ? ((n = {
                              body: (function() {
                                var t = void 0;
                                if (
                                  ((t = l.response
                                    ? l.response
                                    : l.responseText ||
                                      (function(t) {
                                        if ('document' === t.responseType)
                                          return t.responseXML;
                                        var e =
                                          t.responseXML &&
                                          'parsererror' ===
                                            t.responseXML.documentElement
                                              .nodeName;
                                        return '' !== t.responseType || e
                                          ? null
                                          : t.responseXML;
                                      })(l)),
                                  g)
                                )
                                  try {
                                    t = JSON.parse(t);
                                  } catch (t) {}
                                return t;
                              })(),
                              statusCode: e,
                              method: d,
                              headers: {},
                              url: h,
                              rawRequest: l
                            }),
                            l.getAllResponseHeaders &&
                              (n.headers = o(l.getAllResponseHeaders())))
                          : (r = new Error('Internal XMLHttpRequest Error')),
                        i(r, n, n.body)
                      );
                    }
                  }
                  var s,
                    a,
                    l = t.xhr || null;
                  l ||
                    (l =
                      t.cors || t.useXDR
                        ? new c.XDomainRequest()
                        : new c.XMLHttpRequest());
                  var u,
                    h = (l.url = t.uri || t.url),
                    d = (l.method = t.method || 'GET'),
                    p = t.body || t.data,
                    f = (l.headers = t.headers || {}),
                    m = !!t.sync,
                    g = !1,
                    v = {
                      body: void 0,
                      headers: {},
                      statusCode: 0,
                      method: d,
                      url: h,
                      rawRequest: l
                    };
                  if (
                    ('json' in t &&
                      !1 !== t.json &&
                      ((g = !0),
                      f.accept || f.Accept || (f.Accept = 'application/json'),
                      'GET' !== d &&
                        'HEAD' !== d &&
                        (f['content-type'] ||
                          f['Content-Type'] ||
                          (f['Content-Type'] = 'application/json'),
                        (p = JSON.stringify(!0 === t.json ? p : t.json)))),
                    (l.onreadystatechange = function() {
                      4 === l.readyState && setTimeout(r, 0);
                    }),
                    (l.onload = r),
                    (l.onerror = n),
                    (l.onprogress = function() {}),
                    (l.onabort = function() {
                      a = !0;
                    }),
                    (l.ontimeout = n),
                    l.open(d, h, !m, t.username, t.password),
                    m || (l.withCredentials = !!t.withCredentials),
                    !m &&
                      t.timeout > 0 &&
                      (u = setTimeout(function() {
                        if (!a) {
                          (a = !0), l.abort('timeout');
                          var t = new Error('XMLHttpRequest timeout');
                          (t.code = 'ETIMEDOUT'), n(t);
                        }
                      }, t.timeout)),
                    l.setRequestHeader)
                  )
                    for (s in f)
                      f.hasOwnProperty(s) && l.setRequestHeader(s, f[s]);
                  else if (
                    t.headers &&
                    !(function(t) {
                      for (var e in t) if (t.hasOwnProperty(e)) return !1;
                      return !0;
                    })(t.headers)
                  )
                    throw new Error(
                      'Headers cannot be set on an XDomainRequest object'
                    );
                  return (
                    'responseType' in t && (l.responseType = t.responseType),
                    'beforeSend' in t &&
                      'function' == typeof t.beforeSend &&
                      t.beforeSend(l),
                    l.send(p || null),
                    l
                  );
                }
                (e.exports = c),
                  (c.XMLHttpRequest = n.XMLHttpRequest || function() {}),
                  (c.XDomainRequest =
                    'withCredentials' in new c.XMLHttpRequest()
                      ? c.XMLHttpRequest
                      : n.XDomainRequest),
                  (function(t, e) {
                    for (var i = 0; i < t.length; i++) e(t[i]);
                  })(
                    ['get', 'put', 'post', 'patch', 'head', 'delete'],
                    function(t) {
                      c['delete' === t ? 'del' : t] = function(e, i, n) {
                        return (
                          ((i = a(e, i, n)).method = t.toUpperCase()), l(i)
                        );
                      };
                    }
                  );
              },
              {
                'global/window': 17,
                'is-function': 21,
                'parse-headers': 31,
                xtend: 75
              }
            ],
            74: [
              function(t, e, i) {
                e.exports =
                  void 0 !== self.DOMParser
                    ? function(t) {
                        return new self.DOMParser().parseFromString(
                          t,
                          'application/xml'
                        );
                      }
                    : void 0 !== self.ActiveXObject &&
                      new self.ActiveXObject('Microsoft.XMLDOM')
                      ? function(t) {
                          var e = new self.ActiveXObject('Microsoft.XMLDOM');
                          return (e.async = 'false'), e.loadXML(t), e;
                        }
                      : function(t) {
                          var e = document.createElement('div');
                          return (e.innerHTML = t), e;
                        };
              },
              {}
            ],
            75: [
              function(t, e, i) {
                e.exports = function() {
                  for (var t = {}, e = 0; e < arguments.length; e++) {
                    var i = arguments[e];
                    for (var r in i) n.call(i, r) && (t[r] = i[r]);
                  }
                  return t;
                };
                var n = Object.prototype.hasOwnProperty;
              },
              {}
            ],
            76: [
              function(t, e, i) {
                e.exports = {
                  name: 'aframe',
                  version: '0.7.1',
                  description:
                    'A web framework for building virtual reality experiences.',
                  homepage: 'https://aframe.io/',
                  main: 'dist/aframe-master.js',
                  scripts: {
                    browserify:
                      "browserify src/index.js -s 'AFRAME' -p browserify-derequire",
                    build:
                      'shx mkdir -p build/ && npm run browserify -- --debug -t [envify --INSPECTOR_VERSION dev] -o build/aframe.js',
                    codecov: 'codecov',
                    dev:
                      'npm run build && cross-env INSPECTOR_VERSION=dev node ./scripts/budo -t envify',
                    dist:
                      'node scripts/updateVersionLog.js && npm run dist:min && npm run dist:max',
                    'dist:max':
                      'npm run browserify -s -- --debug | exorcist dist/aframe-master.js.map > dist/aframe-master.js',
                    'dist:min':
                      'npm run browserify -s -- --debug -p [minifyify --map aframe-master.min.js.map --output dist/aframe-master.min.js.map] -o dist/aframe-master.min.js',
                    docs: 'markserv --dir docs --port 9001',
                    preghpages: 'node ./scripts/preghpages.js',
                    ghpages: 'ghpages -p gh-pages/',
                    lint: 'semistandard -v | snazzy',
                    'lint:fix': 'semistandard --fix',
                    precommit: 'npm run lint',
                    prerelease: 'node scripts/release.js 0.6.1 0.7.0',
                    start: 'npm run dev',
                    test: 'karma start ./tests/karma.conf.js',
                    'test:docs': 'node scripts/docsLint.js',
                    'test:firefox': 'npm test -- --browsers Firefox',
                    'test:chrome': 'npm test -- --browsers Chrome',
                    'test:node': 'mocha --ui tdd tests/node'
                  },
                  repository: 'aframevr/aframe',
                  license: 'MIT',
                  dependencies: {
                    '@tweenjs/tween.js': '^16.8.0',
                    'browserify-css': '^0.8.2',
                    debug: 'ngokevin/debug#noTimestamp',
                    'deep-assign': '^2.0.0',
                    'document-register-element':
                      'dmarcos/document-register-element#8ccc532b7',
                    envify: '^3.4.1',
                    'load-bmfont': '^1.2.3',
                    'object-assign': '^4.0.1',
                    present: '0.0.6',
                    'promise-polyfill': '^3.1.0',
                    'style-attr': '^1.0.2',
                    three: '^0.87.0',
                    'three-bmfont-text': '^2.1.0',
                    'webvr-polyfill': '^0.9.36'
                  },
                  devDependencies: {
                    browserify: '^13.1.0',
                    'browserify-derequire': '^0.9.4',
                    'browserify-istanbul': '^2.0.0',
                    budo: '^9.2.0',
                    chai: '^3.5.0',
                    'chai-shallow-deep-equal': '^1.4.0',
                    chalk: '^1.1.3',
                    codecov: '^1.0.1',
                    'cross-env': '^5.0.1',
                    exorcist: '^0.4.0',
                    ghpages: '0.0.8',
                    'git-rev': '^0.2.1',
                    glob: '^7.1.1',
                    husky: '^0.11.7',
                    istanbul: '^0.4.5',
                    jsdom: '^9.11.0',
                    karma: '1.4.1',
                    'karma-browserify': '^5.1.0',
                    'karma-chai-shallow-deep-equal': '0.0.4',
                    'karma-chrome-launcher': '^2.0.0',
                    'karma-coverage': '^1.1.1',
                    'karma-env-preprocessor': '^0.1.1',
                    'karma-firefox-launcher': '^1.0.0',
                    'karma-mocha': '^1.1.1',
                    'karma-mocha-reporter': '^2.1.0',
                    'karma-sinon-chai': '1.2.4',
                    lolex: '^1.5.1',
                    markserv: '0.0.20',
                    minifyify: '^7.3.3',
                    mocha: '^3.0.2',
                    'mozilla-download': '^1.1.1',
                    'replace-in-file': '^2.5.3',
                    semistandard: '^9.0.0',
                    shelljs: '^0.7.7',
                    shx: '^0.2.2',
                    sinon: '^1.17.5',
                    'sinon-chai': '2.8.0',
                    snazzy: '^5.0.0',
                    'too-wordy': 'ngokevin/too-wordy',
                    uglifyjs: '^2.4.10',
                    'write-good': '^0.9.1'
                  },
                  link: !0,
                  browserify: { transform: ['browserify-css', 'envify'] },
                  semistandard: {
                    ignore: [
                      'build/**',
                      'dist/**',
                      'examples/**/shaders/*.js',
                      '**/vendor/**'
                    ]
                  },
                  keywords: [
                    '3d',
                    'aframe',
                    'cardboard',
                    'components',
                    'oculus',
                    'three',
                    'three.js',
                    'rift',
                    'vive',
                    'vr',
                    'web-components',
                    'webvr'
                  ],
                  'browserify-css': { minify: !0 },
                  engines: { node: '>= 4.6.0', npm: '^2.15.9' }
                };
              },
              {}
            ],
            77: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../lib/three'),
                  o = t('../utils/'),
                  s = o.bind,
                  a = o.device.checkHasPositionalTracking;
                e.exports.Component = n('camera', {
                  schema: {
                    active: { default: !0 },
                    far: { default: 1e4 },
                    fov: { default: 80, min: 0 },
                    near: { default: 0.005, min: 0 },
                    userHeight: { default: 0, min: 0 },
                    zoom: { default: 1, min: 0 }
                  },
                  init: function() {
                    var t,
                      e = this.el,
                      i = e.sceneEl;
                    (this.savedPose = null),
                      (t = this.camera = new r.PerspectiveCamera()),
                      e.setObject3D('camera', t),
                      (this.onEnterVR = s(this.onEnterVR, this)),
                      (this.onExitVR = s(this.onExitVR, this)),
                      i.addEventListener('enter-vr', this.onEnterVR),
                      i.addEventListener('exit-vr', this.onExitVR);
                  },
                  update: function(t) {
                    var e = this.el,
                      i = this.data,
                      n = this.camera,
                      r = this.system;
                    this.addHeightOffset(t.userHeight),
                      (n.aspect =
                        i.aspect || window.innerWidth / window.innerHeight),
                      (n.far = i.far),
                      (n.fov = i.fov),
                      (n.near = i.near),
                      (n.zoom = i.zoom),
                      n.updateProjectionMatrix(),
                      (t && t.active === i.active) ||
                        (i.active && r.activeCameraEl !== e
                          ? r.setActiveCamera(e)
                          : i.active ||
                            r.activeCameraEl !== e ||
                            r.disableActiveCamera());
                  },
                  remove: function() {
                    var t = this.el.sceneEl;
                    this.el.removeObject3D('camera'),
                      t.removeEventListener('enter-vr', this.onEnterVR),
                      t.removeEventListener('exit-vr', this.onExitVR);
                  },
                  onEnterVR: function() {
                    this.saveCameraPose(), this.removeHeightOffset();
                  },
                  onExitVR: function() {
                    this.restoreCameraPose();
                  },
                  addHeightOffset: function(t) {
                    var e,
                      i = this.el,
                      n = this.data.userHeight;
                    (t = t || 0),
                      (e = i.getAttribute('position') || { x: 0, y: 0, z: 0 }),
                      i.setAttribute('position', {
                        x: e.x,
                        y: e.y - t + n,
                        z: e.z
                      });
                  },
                  removeHeightOffset: function() {
                    var t,
                      e,
                      i = this.el,
                      n = this.data.userHeight;
                    (e =
                      void 0 !== this.hasPositionalTracking
                        ? this.hasPositionalTracking
                        : a()),
                      n &&
                        e &&
                        ((t = i.getAttribute('position') || {
                          x: 0,
                          y: 0,
                          z: 0
                        }),
                        i.setAttribute('position', {
                          x: t.x,
                          y: t.y - n,
                          z: t.z
                        }));
                  },
                  saveCameraPose: function() {
                    var t = this.el,
                      e =
                        void 0 !== this.hasPositionalTracking
                          ? this.hasPositionalTracking
                          : a();
                    !this.savedPose &&
                      e &&
                      (this.savedPose = {
                        position: t.getAttribute('position'),
                        rotation: t.getAttribute('rotation')
                      });
                  },
                  restoreCameraPose: function() {
                    var t = this.el,
                      e = this.savedPose,
                      i =
                        void 0 !== this.hasPositionalTracking
                          ? this.hasPositionalTracking
                          : a();
                    e &&
                      i &&
                      (t.setAttribute('position', e.position),
                      t.setAttribute('rotation', e.rotation),
                      (this.savedPose = null));
                  }
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/': 195
              }
            ],
            78: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../lib/three');
                e.exports.Component = n('collada-model', {
                  schema: { type: 'asset' },
                  init: function() {
                    (this.model = null),
                      (this.loader = new r.ColladaLoader()),
                      (this.loader.options.convertUpAxis = !0);
                  },
                  update: function() {
                    var t = this,
                      e = this.el,
                      i = this.data;
                    i &&
                      (this.remove(),
                      this.loader.load(i, function(i) {
                        (t.model = i.scene),
                          e.setObject3D('mesh', t.model),
                          e.emit('model-loaded', {
                            format: 'collada',
                            model: t.model
                          });
                      }));
                  },
                  remove: function() {
                    this.model && this.el.removeObject3D('mesh');
                  }
                });
              },
              { '../core/component': 125, '../lib/three': 173 }
            ],
            79: [
              function(t, e, i) {
                var n,
                  r,
                  o,
                  s,
                  a = t('../core/component').registerComponent,
                  c = t('../utils/'),
                  l = c.bind,
                  u = 'click',
                  h = 'fusing',
                  d = 'mouseenter',
                  p = 'mousedown',
                  f = 'mouseleave',
                  m = 'mouseup',
                  g = 'cursor-fusing',
                  v = 'cursor-hovering',
                  y = 'cursor-hovered',
                  w = {
                    DOWN: ['mousedown', 'touchstart'],
                    UP: ['mouseup', 'touchend']
                  };
                e.exports.Component = a('cursor', {
                  dependencies: ['raycaster'],
                  schema: {
                    downEvents: { default: [] },
                    fuse: { default: c.device.isMobile() },
                    fuseTimeout: { default: 1500, min: 0 },
                    upEvents: { default: [] },
                    rayOrigin: { default: 'entity', oneOf: ['mouse', 'entity'] }
                  },
                  init: function() {
                    var t = this;
                    (this.fuseTimeout = void 0),
                      (this.cursorDownEl = null),
                      (this.intersection = null),
                      (this.intersectedEl = null),
                      (this.canvasBounds = document.body.getBoundingClientRect()),
                      (this.updateCanvasBounds = c.debounce(function() {
                        t.canvasBounds = t.el.sceneEl.canvas.getBoundingClientRect();
                      }, 200)),
                      (this.onCursorDown = l(this.onCursorDown, this)),
                      (this.onCursorUp = l(this.onCursorUp, this)),
                      (this.onIntersection = l(this.onIntersection, this)),
                      (this.onIntersectionCleared = l(
                        this.onIntersectionCleared,
                        this
                      )),
                      (this.onMouseMove = l(this.onMouseMove, this));
                  },
                  update: function(t) {
                    this.data.rayOrigin !== t.rayOrigin &&
                      this.updateMouseEventListeners();
                  },
                  play: function() {
                    this.addEventListeners();
                  },
                  pause: function() {
                    this.removeEventListeners();
                  },
                  remove: function() {
                    var t = this.el;
                    t.removeState(v),
                      t.removeState(g),
                      clearTimeout(this.fuseTimeout),
                      this.intersectedEl && this.intersectedEl.removeState(y),
                      this.removeEventListeners();
                  },
                  addEventListeners: function() {
                    var t,
                      e = this.data,
                      i = this.el,
                      n = this;
                    function r() {
                      (t = i.sceneEl.canvas),
                        w.DOWN.forEach(function(e) {
                          t.addEventListener(e, n.onCursorDown);
                        }),
                        w.UP.forEach(function(e) {
                          t.addEventListener(e, n.onCursorUp);
                        });
                    }
                    (t = i.sceneEl.canvas)
                      ? r()
                      : i.sceneEl.addEventListener('render-target-loaded', r),
                      e.downEvents.forEach(function(t) {
                        i.addEventListener(t, n.onCursorDown);
                      }),
                      e.upEvents.forEach(function(t) {
                        i.addEventListener(t, n.onCursorUp);
                      }),
                      i.addEventListener(
                        'raycaster-intersection',
                        this.onIntersection
                      ),
                      i.addEventListener(
                        'raycaster-intersection-cleared',
                        this.onIntersectionCleared
                      ),
                      window.addEventListener(
                        'resize',
                        this.updateCanvasBounds
                      );
                  },
                  removeEventListeners: function() {
                    var t,
                      e = this.data,
                      i = this.el,
                      n = this;
                    (t = i.sceneEl.canvas) &&
                      (w.DOWN.forEach(function(e) {
                        t.removeEventListener(e, n.onCursorDown);
                      }),
                      w.UP.forEach(function(e) {
                        t.removeEventListener(e, n.onCursorUp);
                      })),
                      e.downEvents.forEach(function(t) {
                        i.removeEventListener(t, n.onCursorDown);
                      }),
                      e.upEvents.forEach(function(t) {
                        i.removeEventListener(t, n.onCursorUp);
                      }),
                      i.removeEventListener(
                        'raycaster-intersection',
                        this.onIntersection
                      ),
                      i.removeEventListener(
                        'raycaster-intersection-cleared',
                        this.onIntersectionCleared
                      ),
                      window.removeEventListener('mousemove', this.onMouseMove),
                      window.removeEventListener(
                        'resize',
                        this.updateCanvasBounds
                      );
                  },
                  updateMouseEventListeners: function() {
                    var t = this.el;
                    window.removeEventListener('mousemove', this.onMouseMove),
                      t.setAttribute('raycaster', 'useWorldCoordinates', !1),
                      'mouse' === this.data.rayOrigin &&
                        (window.addEventListener(
                          'mousemove',
                          this.onMouseMove,
                          !1
                        ),
                        t.setAttribute('raycaster', 'useWorldCoordinates', !0),
                        this.updateCanvasBounds());
                  },
                  onMouseMove: ((n = new THREE.Vector2()),
                  (r = new THREE.Vector3()),
                  (o = new THREE.Vector3()),
                  (s = { origin: r, direction: o }),
                  function(t) {
                    var e = this.el.sceneEl.camera;
                    e.parent.updateMatrixWorld(), e.updateMatrixWorld();
                    var i = this.canvasBounds,
                      a = t.clientX - i.left,
                      c = t.clientY - i.top;
                    (n.x = a / i.width * 2 - 1),
                      (n.y = -c / i.height * 2 + 1),
                      r.setFromMatrixPosition(e.matrixWorld),
                      o
                        .set(n.x, n.y, 0.5)
                        .unproject(e)
                        .sub(r)
                        .normalize(),
                      this.el.setAttribute('raycaster', s);
                  }),
                  onCursorDown: function(t) {
                    this.twoWayEmit(p),
                      (this.cursorDownEl = this.intersectedEl);
                  },
                  onCursorUp: function(t) {
                    this.twoWayEmit(m),
                      this.cursorDownEl &&
                        this.cursorDownEl !== this.intersectedEl &&
                        this.cursorDownEl.emit(m, {
                          cursorEl: this.el,
                          intersection: null
                        }),
                      !this.data.fuse &&
                        this.intersectedEl &&
                        this.cursorDownEl === this.intersectedEl &&
                        this.twoWayEmit(u),
                      (this.cursorDownEl = null);
                  },
                  onIntersection: function(t) {
                    var e,
                      i,
                      n,
                      r = this,
                      o = this.el,
                      s = this.data;
                    (e = t.detail.els[0] === o ? 1 : 0),
                      (n = t.detail.intersections[e]),
                      (i = t.detail.els[e]) &&
                        (this.intersectedEl !== i
                          ? (this.intersectedEl &&
                              this.clearCurrentIntersection(),
                            (this.intersection = n),
                            (this.intersectedEl = i),
                            o.addState(v),
                            i.addState(y),
                            r.twoWayEmit(d),
                            0 !== s.fuseTimeout &&
                              s.fuse &&
                              (o.addState(g),
                              this.twoWayEmit(h),
                              (this.fuseTimeout = setTimeout(function() {
                                o.removeState(g), r.twoWayEmit(u);
                              }, s.fuseTimeout))))
                          : (this.intersection = n));
                  },
                  onIntersectionCleared: function(t) {
                    var e = this.el,
                      i = t.detail.el;
                    e !== i &&
                      i === this.intersectedEl &&
                      this.clearCurrentIntersection();
                  },
                  clearCurrentIntersection: function() {
                    var t = this.el;
                    this.intersectedEl.removeState(y),
                      t.removeState(v),
                      t.removeState(g),
                      this.twoWayEmit(f),
                      (this.intersection = null),
                      (this.intersectedEl = null),
                      clearTimeout(this.fuseTimeout);
                  },
                  twoWayEmit: function(t) {
                    var e = this.el,
                      i = this.intersectedEl,
                      n = this.intersection;
                    e.emit(t, { intersectedEl: i, intersection: n }),
                      i && i.emit(t, { cursorEl: e, intersection: n });
                  }
                });
              },
              { '../core/component': 125, '../utils/': 195 }
            ],
            80: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../utils/bind'),
                  o = t('../utils/tracked-controls')
                    .checkControllerPresentAndSetup,
                  s = t('../utils/tracked-controls').emitIfAxesChanged,
                  a = 'Daydream Controller';
                e.exports.Component = n('daydream-controls', {
                  schema: {
                    hand: { default: '' },
                    buttonColor: { type: 'color', default: '#000000' },
                    buttonTouchedColor: { type: 'color', default: '#777777' },
                    buttonHighlightColor: { type: 'color', default: '#FFFFFF' },
                    model: { default: !0 },
                    rotationOffset: { default: 0 },
                    armModel: { default: !0 }
                  },
                  mapping: {
                    axes: { trackpad: [0, 1] },
                    buttons: ['trackpad', 'menu', 'system']
                  },
                  bindMethods: function() {
                    (this.onModelLoaded = r(this.onModelLoaded, this)),
                      (this.onControllersUpdate = r(
                        this.onControllersUpdate,
                        this
                      )),
                      (this.checkIfControllerPresent = r(
                        this.checkIfControllerPresent,
                        this
                      )),
                      (this.removeControllersUpdateListener = r(
                        this.removeControllersUpdateListener,
                        this
                      )),
                      (this.onAxisMoved = r(this.onAxisMoved, this)),
                      (this.onGamepadConnectionEvent = r(
                        this.onGamepadConnectionEvent,
                        this
                      ));
                  },
                  init: function() {
                    var t = this;
                    (this.animationActive = 'pointing'),
                      (this.onButtonChanged = r(this.onButtonChanged, this)),
                      (this.onButtonDown = function(e) {
                        t.onButtonEvent(e.detail.id, 'down');
                      }),
                      (this.onButtonUp = function(e) {
                        t.onButtonEvent(e.detail.id, 'up');
                      }),
                      (this.onButtonTouchStart = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchstart');
                      }),
                      (this.onButtonTouchEnd = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchend');
                      }),
                      (this.onAxisMoved = r(this.onAxisMoved, this)),
                      (this.controllerPresent = !1),
                      (this.everGotGamepadEvent = !1),
                      (this.lastControllerCheck = 0),
                      this.bindMethods(),
                      (this.checkControllerPresentAndSetup = o),
                      (this.emitIfAxesChanged = s);
                  },
                  addEventListeners: function() {
                    var t = this.el;
                    t.addEventListener('buttonchanged', this.onButtonChanged),
                      t.addEventListener('buttondown', this.onButtonDown),
                      t.addEventListener('buttonup', this.onButtonUp),
                      t.addEventListener('touchstart', this.onButtonTouchStart),
                      t.addEventListener('touchend', this.onButtonTouchEnd),
                      t.addEventListener('model-loaded', this.onModelLoaded),
                      t.addEventListener('axismove', this.onAxisMoved),
                      (this.controllerEventsActive = !0);
                  },
                  removeEventListeners: function() {
                    var t = this.el;
                    t.removeEventListener(
                      'buttonchanged',
                      this.onButtonChanged
                    ),
                      t.removeEventListener('buttondown', this.onButtonDown),
                      t.removeEventListener('buttonup', this.onButtonUp),
                      t.removeEventListener(
                        'touchstart',
                        this.onButtonTouchStart
                      ),
                      t.removeEventListener('touchend', this.onButtonTouchEnd),
                      t.removeEventListener('model-loaded', this.onModelLoaded),
                      t.removeEventListener('axismove', this.onAxisMoved),
                      (this.controllerEventsActive = !1);
                  },
                  checkIfControllerPresent: function() {
                    this.checkControllerPresentAndSetup(this, a, {
                      hand: this.data.hand
                    });
                  },
                  onGamepadConnectionEvent: function(t) {
                    (this.everGotGamepadEvent = !0),
                      this.checkIfControllerPresent();
                  },
                  play: function() {
                    this.checkIfControllerPresent(),
                      this.addControllersUpdateListener(),
                      window.addEventListener(
                        'gamepadconnected',
                        this.onGamepadConnectionEvent,
                        !1
                      ),
                      window.addEventListener(
                        'gamepaddisconnected',
                        this.onGamepadConnectionEvent,
                        !1
                      );
                  },
                  pause: function() {
                    this.removeEventListeners(),
                      this.removeControllersUpdateListener(),
                      window.removeEventListener(
                        'gamepadconnected',
                        this.onGamepadConnectionEvent,
                        !1
                      ),
                      window.removeEventListener(
                        'gamepaddisconnected',
                        this.onGamepadConnectionEvent,
                        !1
                      );
                  },
                  injectTrackedControls: function() {
                    var t = this.el,
                      e = this.data;
                    t.setAttribute('tracked-controls', {
                      armModel: e.armModel,
                      hand: e.hand,
                      idPrefix: a,
                      rotationOffset: e.rotationOffset
                    }),
                      this.data.model &&
                        this.el.setAttribute('obj-model', {
                          obj:
                            'https://cdn.aframe.io/controllers/google/vr_controller_daydream.obj',
                          mtl:
                            'https://cdn.aframe.io/controllers/google/vr_controller_daydream.mtl'
                        });
                  },
                  addControllersUpdateListener: function() {
                    this.el.sceneEl.addEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  removeControllersUpdateListener: function() {
                    this.el.sceneEl.removeEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  onControllersUpdate: function() {
                    this.everGotGamepadEvent || this.checkIfControllerPresent();
                  },
                  onModelLoaded: function(t) {
                    var e,
                      i = t.detail.model;
                    this.data.model &&
                      (((e = this.buttonMeshes = {}).menu = i.getObjectByName(
                        'AppButton_AppButton_Cylinder.004'
                      )),
                      (e.system = i.getObjectByName(
                        'HomeButton_HomeButton_Cylinder.005'
                      )),
                      (e.trackpad = i.getObjectByName(
                        'TouchPad_TouchPad_Cylinder.003'
                      )),
                      i.position.set(0, 0, -0.04));
                  },
                  onAxisMoved: function(t) {
                    this.emitIfAxesChanged(this, this.mapping.axes, t);
                  },
                  onButtonChanged: function(t) {
                    var e = this.mapping.buttons[t.detail.id];
                    e && this.el.emit(e + 'changed', t.detail.state);
                  },
                  onButtonEvent: function(t, e) {
                    var i,
                      n = this.mapping.buttons[t];
                    if (Array.isArray(n))
                      for (i = 0; i < n.length; i++) this.el.emit(n[i] + e);
                    else this.el.emit(n + e);
                    this.updateModel(n, e);
                  },
                  updateModel: function(t, e) {
                    var i;
                    if (this.data.model)
                      if (Array.isArray(t))
                        for (i = 0; i < t.length; i++)
                          this.updateButtonModel(t[i], e);
                      else this.updateButtonModel(t, e);
                  },
                  updateButtonModel: function(t, e) {
                    var i = this.buttonMeshes;
                    if (i && i[t]) {
                      var n;
                      switch (e) {
                        case 'down':
                          n = this.data.buttonHighlightColor;
                          break;
                        case 'touchstart':
                          n = this.data.buttonTouchedColor;
                          break;
                        default:
                          n = this.data.buttonColor;
                      }
                      i[t].material.color.set(n);
                    }
                  }
                });
              },
              {
                '../core/component': 125,
                '../utils/bind': 189,
                '../utils/tracked-controls': 199
              }
            ],
            81: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../utils/bind'),
                  o = t('../utils/tracked-controls')
                    .checkControllerPresentAndSetup,
                  s = t('../utils/tracked-controls').emitIfAxesChanged;
                e.exports.Component = n('gearvr-controls', {
                  schema: {
                    hand: { default: '' },
                    buttonColor: { type: 'color', default: '#000000' },
                    buttonTouchedColor: { type: 'color', default: '#777777' },
                    buttonHighlightColor: { type: 'color', default: '#FFFFFF' },
                    model: { default: !0 },
                    rotationOffset: { default: 0 },
                    armModel: { default: !0 }
                  },
                  mapping: {
                    axes: { trackpad: [0, 1] },
                    buttons: ['trackpad', 'trigger']
                  },
                  bindMethods: function() {
                    (this.onModelLoaded = r(this.onModelLoaded, this)),
                      (this.onControllersUpdate = r(
                        this.onControllersUpdate,
                        this
                      )),
                      (this.checkIfControllerPresent = r(
                        this.checkIfControllerPresent,
                        this
                      )),
                      (this.removeControllersUpdateListener = r(
                        this.removeControllersUpdateListener,
                        this
                      )),
                      (this.onAxisMoved = r(this.onAxisMoved, this));
                  },
                  init: function() {
                    var t = this;
                    (this.animationActive = 'pointing'),
                      (this.onButtonChanged = r(this.onButtonChanged, this)),
                      (this.onButtonDown = function(e) {
                        t.onButtonEvent(e.detail.id, 'down');
                      }),
                      (this.onButtonUp = function(e) {
                        t.onButtonEvent(e.detail.id, 'up');
                      }),
                      (this.onButtonTouchStart = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchstart');
                      }),
                      (this.onButtonTouchEnd = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchend');
                      }),
                      (this.onAxisMoved = r(this.onAxisMoved, this)),
                      (this.controllerPresent = !1),
                      (this.everGotGamepadEvent = !1),
                      (this.lastControllerCheck = 0),
                      this.bindMethods(),
                      (this.checkControllerPresentAndSetup = o),
                      (this.emitIfAxesChanged = s);
                  },
                  addEventListeners: function() {
                    var t = this.el;
                    t.addEventListener('buttonchanged', this.onButtonChanged),
                      t.addEventListener('buttondown', this.onButtonDown),
                      t.addEventListener('buttonup', this.onButtonUp),
                      t.addEventListener('touchstart', this.onButtonTouchStart),
                      t.addEventListener('touchend', this.onButtonTouchEnd),
                      t.addEventListener('model-loaded', this.onModelLoaded),
                      t.addEventListener('axismove', this.onAxisMoved),
                      (this.controllerEventsActive = !0),
                      this.addControllersUpdateListener();
                  },
                  removeEventListeners: function() {
                    var t = this.el;
                    t.removeEventListener(
                      'buttonchanged',
                      this.onButtonChanged
                    ),
                      t.removeEventListener('buttondown', this.onButtonDown),
                      t.removeEventListener('buttonup', this.onButtonUp),
                      t.removeEventListener(
                        'touchstart',
                        this.onButtonTouchStart
                      ),
                      t.removeEventListener('touchend', this.onButtonTouchEnd),
                      t.removeEventListener('model-loaded', this.onModelLoaded),
                      t.removeEventListener('axismove', this.onAxisMoved),
                      (this.controllerEventsActive = !1),
                      this.removeControllersUpdateListener();
                  },
                  checkIfControllerPresent: function() {
                    this.checkControllerPresentAndSetup(
                      this,
                      'Gear VR',
                      this.data.hand ? { hand: this.data.hand } : {}
                    );
                  },
                  play: function() {
                    this.checkIfControllerPresent(),
                      this.addControllersUpdateListener();
                  },
                  pause: function() {
                    this.removeEventListeners(),
                      this.removeControllersUpdateListener();
                  },
                  injectTrackedControls: function() {
                    var t = this.el,
                      e = this.data;
                    t.setAttribute('tracked-controls', {
                      armModel: e.armModel,
                      idPrefix: 'Gear VR',
                      rotationOffset: e.rotationOffset
                    }),
                      this.data.model &&
                        this.el.setAttribute('obj-model', {
                          obj:
                            'https://cdn.aframe.io/controllers/samsung/gear_vr_controller.obj',
                          mtl:
                            'https://cdn.aframe.io/controllers/samsung/gear_vr_controller.mtl'
                        });
                  },
                  addControllersUpdateListener: function() {
                    this.el.sceneEl.addEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  removeControllersUpdateListener: function() {
                    this.el.sceneEl.removeEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  onControllersUpdate: function() {
                    this.checkIfControllerPresent();
                  },
                  onModelLoaded: function(t) {
                    var e,
                      i = t.detail.model;
                    this.data.model &&
                      (((e = this.buttonMeshes = {}).trigger = i.getObjectByName(
                        'Trigger'
                      )),
                      (e.trackpad = i.getObjectByName('Touchpad')));
                  },
                  onButtonChanged: function(t) {
                    var e = this.mapping.buttons[t.detail.id];
                    e && this.el.emit(e + 'changed', t.detail.state);
                  },
                  onButtonEvent: function(t, e) {
                    var i,
                      n = this.mapping.buttons[t];
                    if (Array.isArray(n))
                      for (i = 0; i < n.length; i++) this.el.emit(n[i] + e);
                    else this.el.emit(n + e);
                    this.updateModel(n, e);
                  },
                  onAxisMoved: function(t) {
                    this.emitIfAxesChanged(this, this.mapping.axes, t);
                  },
                  updateModel: function(t, e) {
                    var i;
                    if (this.data.model)
                      if (Array.isArray(t))
                        for (i = 0; i < t.length; i++)
                          this.updateButtonModel(t[i], e);
                      else this.updateButtonModel(t, e);
                  },
                  updateButtonModel: function(t, e) {
                    var i = this.buttonMeshes;
                    if (i && i[t]) {
                      var n;
                      switch (e) {
                        case 'down':
                          n = this.data.buttonHighlightColor;
                          break;
                        case 'touchstart':
                          n = this.data.buttonTouchedColor;
                          break;
                        default:
                          n = this.data.buttonColor;
                      }
                      i[t].material.color.set(n);
                    }
                  }
                });
              },
              {
                '../core/component': 125,
                '../utils/bind': 189,
                '../utils/tracked-controls': 199
              }
            ],
            82: [
              function(t, e, i) {
                var n = t('../utils/debug'),
                  r = t('../core/geometry').geometries,
                  o = t('../core/geometry').geometryNames,
                  s = t('../core/component').registerComponent,
                  a = t('../lib/three'),
                  c = new a.Geometry(),
                  l = n('components:geometry:warn');
                e.exports.Component = s('geometry', {
                  schema: {
                    buffer: { default: !0 },
                    mergeTo: { type: 'selector' },
                    primitive: { default: 'box', oneOf: o },
                    skipCache: { default: !1 }
                  },
                  init: function() {
                    this.geometry = null;
                  },
                  update: function(t) {
                    var e = this.data,
                      i = this.el.getOrCreateObject3D('mesh', a.Mesh),
                      n = this.system;
                    this.geometry &&
                      (n.unuseGeometry(t), (this.geometry = null)),
                      (this.geometry = i.geometry = n.getOrCreateGeometry(e)),
                      e.mergeTo && this.mergeTo(e.mergeTo);
                  },
                  mergeTo: function(t) {
                    var e,
                      i = this.el,
                      n = i.getObject3D('mesh');
                    if (t && t.isEntity)
                      if (t !== i) {
                        if (!(e = t.getObject3D('mesh')))
                          return (
                            (e = t.getOrCreateObject3D('mesh', a.Mesh)),
                            void t.setAttribute(
                              'material',
                              i.getAttribute('material')
                            )
                          );
                        e.geometry instanceof a.Geometry != !1 &&
                        n.geometry instanceof a.Geometry != !1
                          ? !1 !== this.data.skipCache
                            ? (n.parent.updateMatrixWorld(),
                              e.geometry.merge(n.geometry, n.matrixWorld),
                              i.emit('geometry-merged', { mergeTarget: t }),
                              i.parentNode.removeChild(i))
                            : l(
                                'Cached geometries are not allowed to merge. Set `skipCache` to true'
                              )
                          : l(
                              'Geometry merge is only available for `THREE.Geometry` types. Check that both of the merging geometry and the target geometry have `buffer` set to false'
                            );
                      } else
                        l(
                          'Source and target geometries cannot be the same for merge'
                        );
                    else
                      l('There is not a valid entity to merge the geometry to');
                  },
                  remove: function() {
                    this.system.unuseGeometry(this.data),
                      (this.el.getObject3D('mesh').geometry = c),
                      (this.geometry = null);
                  },
                  updateSchema: function(t) {
                    var e = t.primitive,
                      i = this.data && this.data.primitive,
                      n = r[e] && r[e].schema;
                    if (!n)
                      throw new Error('Unknown geometry schema `' + e + '`');
                    (i && i === e) || this.extendSchema(n);
                  }
                });
              },
              {
                '../core/component': 125,
                '../core/geometry': 126,
                '../lib/three': 173,
                '../utils/debug': 191
              }
            ],
            83: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../lib/three'),
                  o = t('../utils/').debug('components:gltf-model:warn');
                e.exports.Component = n('gltf-model', {
                  schema: { type: 'model' },
                  init: function() {
                    (this.model = null), (this.loader = new r.GLTFLoader());
                  },
                  update: function() {
                    var t = this,
                      e = this.el,
                      i = this.data;
                    i &&
                      (this.remove(),
                      this.loader.load(
                        i,
                        function(i) {
                          (t.model = i.scene || i.scenes[0]),
                            (t.model.animations = i.animations),
                            e.setObject3D('mesh', t.model),
                            e.emit('model-loaded', {
                              format: 'gltf',
                              model: t.model
                            });
                        },
                        void 0,
                        function(t) {
                          var n =
                            t && t.message
                              ? t.message
                              : 'Failed to load glTF model';
                          o(n),
                            e.emit('model-error', { format: 'gltf', src: i });
                        }
                      ));
                  },
                  remove: function() {
                    this.model && this.el.removeObject3D('mesh');
                  }
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/': 195
              }
            ],
            84: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = {
                    left:
                      'https://cdn.aframe.io/controllers/oculus-hands/v2/leftHand.json',
                    right:
                      'https://cdn.aframe.io/controllers/oculus-hands/v2/rightHand.json'
                  },
                  o = {
                    open: 'Open',
                    point: 'Point',
                    pointThumb: 'Point + Thumb',
                    fist: 'Fist',
                    hold: 'Hold',
                    thumbUp: 'Thumb Up'
                  },
                  s = {};
                function a(t, e) {
                  var i;
                  if (t)
                    return 'grip' === (i = s[t])
                      ? i + (e ? 'close' : 'open')
                      : 'point' === i || 'thumb' === i
                        ? i + (e ? 'up' : 'down')
                        : 'pointing' === i || 'pistol' === i
                          ? i + (e ? 'start' : 'end')
                          : void 0;
                }
                (s[o.fist] = 'grip'),
                  (s[o.thumbUp] = 'pistol'),
                  (s[o.point] = 'pointing'),
                  (s[o.thumb] = 'thumb'),
                  (e.exports.Component = n('hand-controls', {
                    schema: { default: 'left' },
                    init: function() {
                      var t = this,
                        e = this.el;
                      (this.gesture = o.open),
                        (this.pressedButtons = {}),
                        (this.touchedButtons = {}),
                        (this.loader = new THREE.ObjectLoader()),
                        this.loader.setCrossOrigin('anonymous'),
                        (this.onGripDown = function() {
                          t.handleButton('grip', 'down');
                        }),
                        (this.onGripUp = function() {
                          t.handleButton('grip', 'up');
                        }),
                        (this.onTrackpadDown = function() {
                          t.handleButton('trackpad', 'down');
                        }),
                        (this.onTrackpadUp = function() {
                          t.handleButton('trackpad', 'up');
                        }),
                        (this.onTrackpadTouchStart = function() {
                          t.handleButton('trackpad', 'touchstart');
                        }),
                        (this.onTrackpadTouchEnd = function() {
                          t.handleButton('trackpad', 'touchend');
                        }),
                        (this.onTriggerDown = function() {
                          t.handleButton('trigger', 'down');
                        }),
                        (this.onTriggerUp = function() {
                          t.handleButton('trigger', 'up');
                        }),
                        (this.onTriggerTouchStart = function() {
                          t.handleButton('trigger', 'touchstart');
                        }),
                        (this.onTriggerTouchEnd = function() {
                          t.handleButton('trigger', 'touchend');
                        }),
                        (this.onGripTouchStart = function() {
                          t.handleButton('grip', 'touchstart');
                        }),
                        (this.onGripTouchEnd = function() {
                          t.handleButton('grip', 'touchend');
                        }),
                        (this.onThumbstickDown = function() {
                          t.handleButton('thumbstick', 'down');
                        }),
                        (this.onThumbstickUp = function() {
                          t.handleButton('thumbstick', 'up');
                        }),
                        (this.onAorXTouchStart = function() {
                          t.handleButton('AorX', 'touchstart');
                        }),
                        (this.onAorXTouchEnd = function() {
                          t.handleButton('AorX', 'touchend');
                        }),
                        (this.onBorYTouchStart = function() {
                          t.handleButton('BorY', 'touchstart');
                        }),
                        (this.onBorYTouchEnd = function() {
                          t.handleButton('BorY', 'touchend');
                        }),
                        (this.onSurfaceTouchStart = function() {
                          t.handleButton('surface', 'touchstart');
                        }),
                        (this.onSurfaceTouchEnd = function() {
                          t.handleButton('surface', 'touchend');
                        }),
                        (this.onControllerConnected = function() {
                          t.setModelVisibility(!0);
                        }),
                        (this.onControllerDisconnected = function() {
                          t.setModelVisibility(!1);
                        }),
                        e.addEventListener(
                          'controllerconnected',
                          this.onControllerConnected
                        ),
                        e.addEventListener(
                          'controllerdisconnected',
                          this.onControllerDisconnected
                        );
                    },
                    play: function() {
                      this.addEventListeners();
                    },
                    pause: function() {
                      this.removeEventListeners();
                    },
                    tick: function(t, e) {
                      var i = this.el.getObject3D('mesh');
                      i && i.mixer && i.mixer.update(e / 1e3);
                    },
                    addEventListeners: function() {
                      var t = this.el;
                      t.addEventListener('gripdown', this.onGripDown),
                        t.addEventListener('gripup', this.onGripUp),
                        t.addEventListener('trackpaddown', this.onTrackpadDown),
                        t.addEventListener('trackpadup', this.onTrackpadUp),
                        t.addEventListener(
                          'trackpadtouchstart',
                          this.onTrackpadTouchStart
                        ),
                        t.addEventListener(
                          'trackpadtouchend',
                          this.onTrackpadTouchEnd
                        ),
                        t.addEventListener('triggerdown', this.onTriggerDown),
                        t.addEventListener('triggerup', this.onTriggerUp),
                        t.addEventListener(
                          'triggertouchstart',
                          this.onTriggerTouchStart
                        ),
                        t.addEventListener(
                          'triggertouchend',
                          this.onTriggerTouchEnd
                        ),
                        t.addEventListener(
                          'griptouchstart',
                          this.onGripTouchStart
                        ),
                        t.addEventListener('griptouchend', this.onGripTouchEnd),
                        t.addEventListener(
                          'thumbstickdown',
                          this.onThumbstickDown
                        ),
                        t.addEventListener('thumbstickup', this.onThumbstickUp),
                        t.addEventListener(
                          'abuttontouchstart',
                          this.onAorXTouchStart
                        ),
                        t.addEventListener(
                          'abuttontouchend',
                          this.onAorXTouchEnd
                        ),
                        t.addEventListener(
                          'bbuttontouchstart',
                          this.onBorYTouchStart
                        ),
                        t.addEventListener(
                          'bbuttontouchend',
                          this.onBorYTouchEnd
                        ),
                        t.addEventListener(
                          'xbuttontouchstart',
                          this.onAorXTouchStart
                        ),
                        t.addEventListener(
                          'xbuttontouchend',
                          this.onAorXTouchEnd
                        ),
                        t.addEventListener(
                          'ybuttontouchstart',
                          this.onBorYTouchStart
                        ),
                        t.addEventListener(
                          'ybuttontouchend',
                          this.onBorYTouchEnd
                        ),
                        t.addEventListener(
                          'surfacetouchstart',
                          this.onSurfaceTouchStart
                        ),
                        t.addEventListener(
                          'surfacetouchend',
                          this.onSurfaceTouchEnd
                        );
                    },
                    removeEventListeners: function() {
                      var t = this.el;
                      t.removeEventListener('gripdown', this.onGripDown),
                        t.removeEventListener('gripup', this.onGripUp),
                        t.removeEventListener(
                          'trackpaddown',
                          this.onTrackpadDown
                        ),
                        t.removeEventListener('trackpadup', this.onTrackpadUp),
                        t.removeEventListener(
                          'trackpadtouchstart',
                          this.onTrackpadTouchStart
                        ),
                        t.removeEventListener(
                          'trackpadtouchend',
                          this.onTrackpadTouchEnd
                        ),
                        t.removeEventListener(
                          'triggerdown',
                          this.onTriggerDown
                        ),
                        t.removeEventListener('triggerup', this.onTriggerUp),
                        t.removeEventListener(
                          'triggertouchstart',
                          this.onTriggerTouchStart
                        ),
                        t.removeEventListener(
                          'triggertouchend',
                          this.onTriggerTouchEnd
                        ),
                        t.removeEventListener(
                          'griptouchstart',
                          this.onGripTouchStart
                        ),
                        t.removeEventListener(
                          'griptouchend',
                          this.onGripTouchEnd
                        ),
                        t.removeEventListener(
                          'thumbstickdown',
                          this.onThumbstickDown
                        ),
                        t.removeEventListener(
                          'thumbstickup',
                          this.onThumbstickUp
                        ),
                        t.removeEventListener(
                          'abuttontouchstart',
                          this.onAorXTouchStart
                        ),
                        t.removeEventListener(
                          'abuttontouchend',
                          this.onAorXTouchEnd
                        ),
                        t.removeEventListener(
                          'bbuttontouchstart',
                          this.onBorYTouchStart
                        ),
                        t.removeEventListener(
                          'bbuttontouchend',
                          this.onBorYTouchEnd
                        ),
                        t.removeEventListener(
                          'xbuttontouchstart',
                          this.onAorXTouchStart
                        ),
                        t.removeEventListener(
                          'xbuttontouchend',
                          this.onAorXTouchEnd
                        ),
                        t.removeEventListener(
                          'ybuttontouchstart',
                          this.onBorYTouchStart
                        ),
                        t.removeEventListener(
                          'ybuttontouchend',
                          this.onBorYTouchEnd
                        ),
                        t.removeEventListener(
                          'surfacetouchstart',
                          this.onSurfaceTouchStart
                        ),
                        t.removeEventListener(
                          'surfacetouchend',
                          this.onSurfaceTouchEnd
                        );
                    },
                    update: function(t) {
                      var e,
                        i = this.el,
                        n = this.data;
                      (e = {
                        hand: n,
                        model: !1,
                        rotationOffset: 'left' === n ? 90 : -90
                      }),
                        n !== t &&
                          this.loader.load(r[n], function(t) {
                            var n = t.getObjectByName('Hand');
                            (n.material.skinning = !0),
                              (n.mixer = new THREE.AnimationMixer(n)),
                              i.setObject3D('mesh', n),
                              n.position.set(0, 0, 0),
                              n.rotation.set(0, 0, 0),
                              (n.visible = !1),
                              i.setAttribute('vive-controls', e),
                              i.setAttribute('oculus-touch-controls', e),
                              i.setAttribute('windows-motion-controls', e);
                          });
                    },
                    remove: function() {
                      this.el.removeObject3D('mesh');
                    },
                    handleButton: function(t, e) {
                      var i,
                        n = 'down' === e,
                        r = 'touchstart' === e;
                      if (0 === e.indexOf('touch')) {
                        if (r === this.touchedButtons[t]) return;
                        this.touchedButtons[t] = r;
                      } else {
                        if (n === this.pressedButtons[t]) return;
                        this.pressedButtons[t] = n;
                      }
                      (i = this.gesture),
                        (this.gesture = this.determineGesture()),
                        this.gesture !== i &&
                          (this.animateGesture(this.gesture, i),
                          this.emitGestureEvents(this.gesture, i));
                    },
                    determineGesture: function() {
                      var t,
                        e,
                        i,
                        n = this.pressedButtons.grip,
                        r =
                          this.pressedButtons.surface ||
                          this.touchedButtons.surface,
                        s =
                          this.pressedButtons.trackpad ||
                          this.touchedButtons.trackpad,
                        a =
                          this.pressedButtons.trigger ||
                          this.touchedButtons.trigger,
                        c =
                          this.touchedButtons.AorX || this.touchedButtons.BorY,
                        l = ((e = this.el.components['tracked-controls']),
                        (i = e && e.controller && e.controller.id) &&
                          0 === i.indexOf('OpenVR '));
                      return (
                        n
                          ? (t = l
                              ? o.fist
                              : r || c || s
                                ? a ? o.fist : o.point
                                : a ? o.thumbUp : o.pointThumb)
                          : a
                            ? (t = l ? o.fist : o.hold)
                            : l && s && (t = o.point),
                        t
                      );
                    },
                    animateGesture: function(t, e) {
                      t
                        ? this.playAnimation(t || o.open, e, !1)
                        : this.playAnimation(e, e, !0);
                    },
                    emitGestureEvents: function(t, e) {
                      var i,
                        n = this.el;
                      e !== t &&
                        ((i = a(e, !1)) && n.emit(i),
                        (i = a(t, !0)) && n.emit(i));
                    },
                    playAnimation: function(t, e, i) {
                      var n,
                        r,
                        o = this.el.getObject3D('mesh');
                      if (o) {
                        if (
                          (((r = o.mixer.clipAction(t)).clampWhenFinished = !0),
                          (r.loop = THREE.PingPong),
                          (r.repetitions = 0),
                          (r.timeScale = i ? -1 : 1),
                          (r.weight = 1),
                          !e || t === e)
                        )
                          return o.mixer.stopAllAction(), void r.play();
                        (n = o.mixer.clipAction(e)),
                          o.mixer.stopAllAction(),
                          (n.weight = 0.15),
                          n.play(),
                          r.play(),
                          n.crossFadeTo(r, 0.15, !0);
                      }
                    },
                    setModelVisibility: function(t) {
                      var e = this.el.getObject3D('mesh');
                      e && (e.visible = t);
                    }
                  }));
              },
              { '../core/component': 125 }
            ],
            85: [
              function(t, e, i) {
                t('./camera'),
                  t('./collada-model'),
                  t('./cursor'),
                  t('./daydream-controls'),
                  t('./gearvr-controls'),
                  t('./geometry'),
                  t('./gltf-model'),
                  t('./hand-controls'),
                  t('./laser-controls'),
                  t('./light'),
                  t('./line'),
                  t('./link'),
                  t('./look-controls'),
                  t('./material'),
                  t('./obj-model'),
                  t('./oculus-touch-controls'),
                  t('./position'),
                  t('./raycaster'),
                  t('./rotation'),
                  t('./scale'),
                  t('./shadow'),
                  t('./sound'),
                  t('./text'),
                  t('./tracked-controls'),
                  t('./visible'),
                  t('./vive-controls'),
                  t('./wasd-controls'),
                  t('./windows-motion-controls'),
                  t('./scene/debug'),
                  t('./scene/embedded'),
                  t('./scene/inspector'),
                  t('./scene/fog'),
                  t('./scene/keyboard-shortcuts'),
                  t('./scene/pool'),
                  t('./scene/screenshot'),
                  t('./scene/stats'),
                  t('./scene/vr-mode-ui');
              },
              {
                './camera': 77,
                './collada-model': 78,
                './cursor': 79,
                './daydream-controls': 80,
                './gearvr-controls': 81,
                './geometry': 82,
                './gltf-model': 83,
                './hand-controls': 84,
                './laser-controls': 86,
                './light': 87,
                './line': 88,
                './link': 89,
                './look-controls': 90,
                './material': 91,
                './obj-model': 92,
                './oculus-touch-controls': 93,
                './position': 94,
                './raycaster': 95,
                './rotation': 96,
                './scale': 97,
                './scene/debug': 98,
                './scene/embedded': 99,
                './scene/fog': 100,
                './scene/inspector': 101,
                './scene/keyboard-shortcuts': 102,
                './scene/pool': 103,
                './scene/screenshot': 104,
                './scene/stats': 105,
                './scene/vr-mode-ui': 106,
                './shadow': 107,
                './sound': 108,
                './text': 109,
                './tracked-controls': 110,
                './visible': 111,
                './vive-controls': 112,
                './wasd-controls': 113,
                './windows-motion-controls': 114
              }
            ],
            86: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../utils/');
                n('laser-controls', {
                  schema: { hand: { default: 'right' } },
                  init: function() {
                    var t = this.config,
                      e = this.data,
                      i = this.el,
                      n = this;
                    function o(e) {
                      var o = t[e.detail.name];
                      if (o) {
                        var s = r.extend({ showLine: !0 }, o.raycaster || {});
                        e.detail.rayOrigin &&
                          ((s.origin = e.detail.rayOrigin.origin),
                          (s.direction = e.detail.rayOrigin.direction),
                          (s.showLine = !0)),
                          e.detail.rayOrigin || !n.modelReady
                            ? i.setAttribute('raycaster', s)
                            : i.setAttribute('raycaster', 'showLine', !0),
                          i.setAttribute(
                            'cursor',
                            r.extend({ fuse: !1 }, o.cursor)
                          );
                      }
                    }
                    i.setAttribute('daydream-controls', { hand: e.hand }),
                      i.setAttribute('gearvr-controls', { hand: e.hand }),
                      i.setAttribute('oculus-touch-controls', { hand: e.hand }),
                      i.setAttribute('vive-controls', { hand: e.hand }),
                      i.setAttribute('windows-motion-controls', {
                        hand: e.hand
                      }),
                      i.addEventListener('controllerconnected', o),
                      i.addEventListener('controllerdisconnected', function() {
                        i.setAttribute('raycaster', 'showLine', !1);
                      }),
                      i.addEventListener('controllermodelready', function(t) {
                        o(t), (n.modelReady = !0);
                      });
                  },
                  config: {
                    'daydream-controls': {
                      cursor: {
                        downEvents: ['trackpaddown'],
                        upEvents: ['trackpadup']
                      }
                    },
                    'gearvr-controls': {
                      cursor: {
                        downEvents: ['trackpaddown'],
                        upEvents: ['trackpadup']
                      },
                      raycaster: { origin: { x: 0, y: 5e-4, z: 0 } }
                    },
                    'oculus-touch-controls': {
                      cursor: {
                        downEvents: ['triggerdown'],
                        upEvents: ['triggerup']
                      },
                      raycaster: {
                        origin: { x: 0.001, y: 0, z: 0.065 },
                        direction: { x: 0, y: -0.8, z: -1 }
                      }
                    },
                    'vive-controls': {
                      cursor: {
                        downEvents: ['triggerdown'],
                        upEvents: ['triggerup']
                      }
                    },
                    'windows-motion-controls': {
                      cursor: {
                        downEvents: ['triggerdown'],
                        upEvents: ['triggerup']
                      },
                      raycaster: { showLine: !1 }
                    }
                  }
                });
              },
              { '../core/component': 125, '../utils/': 195 }
            ],
            87: [
              function(t, e, i) {
                var n = t('../utils/bind'),
                  r = t('../utils').diff,
                  o = t('../utils/debug'),
                  s = t('../core/component').registerComponent,
                  a = t('../lib/three'),
                  c = a.Math.degToRad,
                  l = o('components:light:warn');
                e.exports.Component = s('light', {
                  schema: {
                    angle: { default: 60, if: { type: ['spot'] } },
                    color: { type: 'color' },
                    groundColor: {
                      type: 'color',
                      if: { type: ['hemisphere'] }
                    },
                    decay: { default: 1, if: { type: ['point', 'spot'] } },
                    distance: {
                      default: 0,
                      min: 0,
                      if: { type: ['point', 'spot'] }
                    },
                    intensity: {
                      default: 1,
                      min: 0,
                      if: {
                        type: [
                          'ambient',
                          'directional',
                          'hemisphere',
                          'point',
                          'spot'
                        ]
                      }
                    },
                    penumbra: {
                      default: 0,
                      min: 0,
                      max: 1,
                      if: { type: ['spot'] }
                    },
                    type: {
                      default: 'directional',
                      oneOf: [
                        'ambient',
                        'directional',
                        'hemisphere',
                        'point',
                        'spot'
                      ]
                    },
                    target: {
                      type: 'selector',
                      if: { type: ['spot', 'directional'] }
                    },
                    castShadow: {
                      default: !1,
                      if: { type: ['point', 'spot', 'directional'] }
                    },
                    shadowBias: { default: 0, if: { castShadow: !0 } },
                    shadowCameraFar: { default: 500, if: { castShadow: !0 } },
                    shadowCameraFov: { default: 90, if: { castShadow: !0 } },
                    shadowCameraNear: { default: 0.5, if: { castShadow: !0 } },
                    shadowCameraTop: { default: 5, if: { castShadow: !0 } },
                    shadowCameraRight: { default: 5, if: { castShadow: !0 } },
                    shadowCameraBottom: { default: -5, if: { castShadow: !0 } },
                    shadowCameraLeft: { default: -5, if: { castShadow: !0 } },
                    shadowCameraVisible: {
                      default: !1,
                      if: { castShadow: !0 }
                    },
                    shadowMapHeight: { default: 512, if: { castShadow: !0 } },
                    shadowMapWidth: { default: 512, if: { castShadow: !0 } }
                  },
                  init: function() {
                    var t = this.el;
                    (this.light = null),
                      (this.defaultTarget = null),
                      this.system.registerLight(t);
                  },
                  update: function(t) {
                    var e = this.data,
                      i = r(e, t),
                      o = this.light,
                      s = this;
                    if (!o || 'type' in i)
                      this.setLight(this.data), this.updateShadow();
                    else {
                      var a = !1;
                      Object.keys(i).forEach(function(t) {
                        var i = e[t];
                        switch (t) {
                          case 'color':
                            o.color.set(i);
                            break;
                          case 'groundColor':
                            o.groundColor.set(i);
                            break;
                          case 'angle':
                            o.angle = c(i);
                            break;
                          case 'target':
                            null === i
                              ? ('spot' !== e.type &&
                                  'directional' !== e.type) ||
                                (o.target = s.defaultTarget)
                              : i.hasLoaded
                                ? s.onSetTarget(i, o)
                                : i.addEventListener(
                                    'loaded',
                                    n(s.onSetTarget, s, i, o)
                                  );
                            break;
                          case 'castShadow':
                          case 'shadowBias':
                          case 'shadowCameraFar':
                          case 'shadowCameraFov':
                          case 'shadowCameraNear':
                          case 'shadowCameraTop':
                          case 'shadowCameraRight':
                          case 'shadowCameraBottom':
                          case 'shadowCameraLeft':
                          case 'shadowCameraVisible':
                          case 'shadowMapHeight':
                          case 'shadowMapWidth':
                            a || (s.updateShadow(), (a = !0));
                            break;
                          default:
                            o[t] = i;
                        }
                      });
                    }
                  },
                  setLight: function(t) {
                    var e = this.el,
                      i = this.getLight(t);
                    i &&
                      (this.light && e.removeObject3D('light'),
                      (this.light = i),
                      (this.light.el = e),
                      e.setObject3D('light', this.light),
                      ('spot' !== t.type &&
                        'directional' !== t.type &&
                        'hemisphere' !== t.type) ||
                        e.getObject3D('light').translateY(-1),
                      'spot' === t.type &&
                        (e.setObject3D('light-target', this.defaultTarget),
                        e.getObject3D('light-target').position.set(0, 0, -1)));
                  },
                  updateShadow: function() {
                    var t = this.el,
                      e = this.data,
                      i = this.light;
                    i.castShadow = e.castShadow;
                    var n = t.getObject3D('cameraHelper');
                    if (
                      (e.shadowCameraVisible && !n
                        ? t.setObject3D(
                            'cameraHelper',
                            new a.CameraHelper(i.shadow.camera)
                          )
                        : !e.shadowCameraVisible &&
                          n &&
                          t.removeObject3D('cameraHelper'),
                      !e.castShadow)
                    )
                      return i;
                    (i.shadow.bias = e.shadowBias),
                      (i.shadow.mapSize.height = e.shadowMapHeight),
                      (i.shadow.mapSize.width = e.shadowMapWidth),
                      (i.shadow.camera.near = e.shadowCameraNear),
                      (i.shadow.camera.far = e.shadowCameraFar),
                      i.shadow.camera instanceof a.OrthographicCamera
                        ? ((i.shadow.camera.top = e.shadowCameraTop),
                          (i.shadow.camera.right = e.shadowCameraRight),
                          (i.shadow.camera.bottom = e.shadowCameraBottom),
                          (i.shadow.camera.left = e.shadowCameraLeft))
                        : (i.shadow.camera.fov = e.shadowCameraFov),
                      i.shadow.camera.updateProjectionMatrix(),
                      n && n.update();
                  },
                  getLight: function(t) {
                    var e = t.angle,
                      i = new a.Color(t.color).getHex(),
                      r = t.decay,
                      o = t.distance,
                      s = new a.Color(t.groundColor).getHex(),
                      u = t.intensity,
                      h = t.type,
                      d = t.target,
                      p = null;
                    switch (h.toLowerCase()) {
                      case 'ambient':
                        return new a.AmbientLight(i, u);
                      case 'directional':
                        return (
                          (p = new a.DirectionalLight(i, u)),
                          (this.defaultTarget = p.target),
                          d &&
                            (d.hasLoaded
                              ? this.onSetTarget(d, p)
                              : d.addEventListener(
                                  'loaded',
                                  n(this.onSetTarget, this, d, p)
                                )),
                          p
                        );
                      case 'hemisphere':
                        return new a.HemisphereLight(i, s, u);
                      case 'point':
                        return new a.PointLight(i, u, o, r);
                      case 'spot':
                        return (
                          (p = new a.SpotLight(i, u, o, c(e), t.penumbra, r)),
                          (this.defaultTarget = p.target),
                          d &&
                            (d.hasLoaded
                              ? this.onSetTarget(d, p)
                              : d.addEventListener(
                                  'loaded',
                                  n(this.onSetTarget, this, d, p)
                                )),
                          p
                        );
                      default:
                        l(
                          '%s is not a valid light type. Choose from ambient, directional, hemisphere, point, spot.',
                          h
                        );
                    }
                  },
                  onSetTarget: function(t, e) {
                    e.target = t.object3D;
                  },
                  remove: function() {
                    var t = this.el;
                    t.removeObject3D('light'),
                      t.getObject3D('cameraHelper') &&
                        t.removeObject3D('cameraHelper');
                  }
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils': 195,
                '../utils/bind': 189,
                '../utils/debug': 191
              }
            ],
            88: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent;
                function r(t, e) {
                  return (
                    !(!t || !e) && (t.x === e.x && t.y === e.y && t.z === e.z)
                  );
                }
                e.exports.Component = n('line', {
                  schema: {
                    start: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },
                    end: { type: 'vec3', default: { x: 0, y: 0, z: 0 } },
                    color: { type: 'color', default: '#74BEC1' },
                    opacity: { type: 'number', default: 1 },
                    visible: { default: !0 }
                  },
                  multiple: !0,
                  init: function() {
                    var t,
                      e,
                      i = this.data;
                    (e = this.material = new THREE.LineBasicMaterial({
                      color: i.color,
                      opacity: i.opacity,
                      transparent: i.opacity < 1,
                      visible: i.visible
                    })),
                      (t = this.geometry = new THREE.BufferGeometry()).addAttribute(
                        'position',
                        new THREE.BufferAttribute(new Float32Array(6), 3)
                      ),
                      (this.line = new THREE.Line(t, e)),
                      this.el.setObject3D(this.attrName, this.line);
                  },
                  update: function(t) {
                    var e = this.data,
                      i = this.geometry,
                      n = !1,
                      o = this.material,
                      s = i.attributes.position.array;
                    r(e.start, t.start) ||
                      ((s[0] = e.start.x),
                      (s[1] = e.start.y),
                      (s[2] = e.start.z),
                      (n = !0)),
                      r(e.end, t.end) ||
                        ((s[3] = e.end.x),
                        (s[4] = e.end.y),
                        (s[5] = e.end.z),
                        (n = !0)),
                      n &&
                        ((i.attributes.position.needsUpdate = !0),
                        i.computeBoundingSphere()),
                      o.color.setStyle(e.color),
                      (o.opacity = e.opacity),
                      (o.transparent = e.opacity < 1),
                      (o.visible = e.visible);
                  },
                  remove: function() {
                    this.el.removeObject3D('line', this.line);
                  }
                });
              },
              { '../core/component': 125 }
            ],
            89: [
              function(t, e, i) {
                var n,
                  r,
                  o,
                  s,
                  a,
                  c,
                  l,
                  u,
                  h = t('../core/component').registerComponent,
                  d = t('../core/shader').registerShader,
                  p = t('../lib/three');
                (e.exports.Component = h('link', {
                  schema: {
                    color: { default: 'white', type: 'color' },
                    highlighted: { default: !1 },
                    highlightedColor: { default: '#24CAFF', type: 'color' },
                    href: { default: '' },
                    image: { type: 'asset' },
                    on: { default: 'click' },
                    peekMode: { default: !1 },
                    title: { default: '' },
                    visualAspectEnabled: { default: !0 }
                  },
                  init: function() {
                    (this.navigate = this.navigate.bind(this)),
                      (this.previousQuaternion = void 0),
                      (this.hiddenEls = []),
                      this.initVisualAspect();
                  },
                  update: function(t) {
                    var e = this.data,
                      i = this.el,
                      n = e.highlighted ? e.highlightedColor : e.color;
                    i.setAttribute('material', 'strokeColor', n),
                      e.on !== t.on && this.updateEventListener(),
                      e.visualAspectEnabled &&
                        void 0 !== t.peekMode &&
                        e.peekMode !== t.peekMode &&
                        this.updatePeekMode(),
                      e.image &&
                        t.image !== e.image &&
                        i.setAttribute(
                          'material',
                          'pano',
                          'string' == typeof e.image ? e.image : e.image.src
                        );
                  },
                  updatePeekMode: function() {
                    var t = this.el,
                      e = this.sphereEl;
                    this.data.peekMode
                      ? (this.hideAll(),
                        (t.getObject3D('mesh').visible = !1),
                        e.setAttribute('visible', !0))
                      : (this.showAll(),
                        (t.getObject3D('mesh').visible = !0),
                        e.setAttribute('visible', !1));
                  },
                  play: function() {
                    this.updateEventListener();
                  },
                  pause: function() {
                    this.removeEventListener();
                  },
                  updateEventListener: function() {
                    var t = this.el;
                    t.isPlaying &&
                      (this.removeEventListener(),
                      t.addEventListener(this.data.on, this.navigate));
                  },
                  removeEventListener: function() {
                    var t = this.data.on;
                    t && this.el.removeEventListener(t, this.navigate);
                  },
                  initVisualAspect: function() {
                    var t,
                      e,
                      i,
                      n = this.el;
                    this.data.visualAspectEnabled &&
                      ((t = this.textEl =
                        this.textEl || document.createElement('a-entity')),
                      (e = this.sphereEl =
                        this.sphereEl || document.createElement('a-entity')),
                      (i = this.semiSphereEl =
                        this.semiSphereEl ||
                        document.createElement('a-entity')),
                      n.setAttribute('geometry', {
                        primitive: 'circle',
                        radius: 1,
                        segments: 64
                      }),
                      n.setAttribute('material', {
                        shader: 'portal',
                        pano: this.data.image,
                        side: 'double'
                      }),
                      t.setAttribute('text', {
                        color: 'white',
                        align: 'center',
                        font: 'kelsonsans',
                        value: this.data.title || this.data.href,
                        width: 4
                      }),
                      t.setAttribute('position', '0 1.5 0'),
                      n.appendChild(t),
                      i.setAttribute('geometry', {
                        primitive: 'sphere',
                        radius: 1,
                        phiStart: 0,
                        segmentsWidth: 64,
                        segmentsHeight: 64,
                        phiLength: 180,
                        thetaStart: 0,
                        thetaLength: 360
                      }),
                      i.setAttribute('material', {
                        shader: 'portal',
                        borderEnabled: 0,
                        pano: this.data.image,
                        side: 'back'
                      }),
                      i.setAttribute('rotation', '0 180 0'),
                      i.setAttribute('position', '0 0 0'),
                      i.setAttribute('visible', !1),
                      n.appendChild(i),
                      e.setAttribute('geometry', {
                        primitive: 'sphere',
                        radius: 10,
                        segmentsWidth: 64,
                        segmentsHeight: 64
                      }),
                      e.setAttribute('material', {
                        shader: 'portal',
                        borderEnabled: 0,
                        pano: this.data.image,
                        side: 'back'
                      }),
                      e.setAttribute('visible', !1),
                      n.appendChild(e));
                  },
                  navigate: function() {
                    window.location = this.data.href;
                  },
                  tick: ((a = new p.Vector3()),
                  (c = new p.Vector3()),
                  (l = new p.Vector3()),
                  (u = new p.Quaternion()),
                  function() {
                    if (this.data.visualAspectEnabled) {
                      var t,
                        e,
                        i = this.el,
                        n = i.object3D,
                        r = i.sceneEl.camera,
                        o = this.textEl;
                      if (
                        (n.updateMatrixWorld(),
                        r.parent.updateMatrixWorld(),
                        r.updateMatrixWorld(),
                        n.matrix.decompose(a, u, l),
                        a.setFromMatrixPosition(n.matrixWorld),
                        c.setFromMatrixPosition(r.matrixWorld),
                        (e = a.distanceTo(c)),
                        (this.previousQuaternion =
                          this.previousQuaternion || u.clone()),
                        e > 20)
                      )
                        n.lookAt(c);
                      else {
                        if (
                          ((t = this.calculateCameraPortalOrientation()),
                          e < 0.5)
                        ) {
                          if (!0 === this.semiSphereEl.getAttribute('visible'))
                            return;
                          o.setAttribute('text', 'width', 1.5),
                            t <= 0
                              ? (o.setAttribute('position', '0 0 0.75'),
                                o.setAttribute('rotation', '0 180 0'),
                                this.semiSphereEl.setAttribute(
                                  'rotation',
                                  '0 0 0'
                                ))
                              : (o.setAttribute('position', '0 0 -0.75'),
                                o.setAttribute('rotation', '0 0 0'),
                                this.semiSphereEl.setAttribute(
                                  'rotation',
                                  '0 180 0'
                                )),
                            (i.getObject3D('mesh').visible = !1),
                            this.semiSphereEl.setAttribute('visible', !0),
                            (this.peekCameraPortalOrientation = t);
                        } else
                          t <= 0
                            ? o.setAttribute('rotation', '0 180 0')
                            : o.setAttribute('rotation', '0 0 0'),
                            o.setAttribute('text', 'width', 5),
                            o.setAttribute('position', '0 1.5 0'),
                            (i.getObject3D('mesh').visible = !0),
                            this.semiSphereEl.setAttribute('visible', !1),
                            (this.peekCameraPortalOrientation = void 0);
                        this.previousQuaternion &&
                          (n.quaternion.copy(this.previousQuaternion),
                          (this.previousQuaternion = void 0));
                      }
                    }
                  }),
                  hideAll: function() {
                    var t = this.el,
                      e = this.hiddenEls,
                      i = this;
                    e.length > 0 ||
                      t.sceneEl.object3D.traverse(function(n) {
                        (n && n.el && n.el.hasAttribute('link-controls')) ||
                          (n.el &&
                            n !== t.sceneEl.object3D &&
                            n.el !== t &&
                            n.el !== i.sphereEl &&
                            n.el !== t.sceneEl.cameraEl &&
                            !1 !== n.el.getAttribute('visible') &&
                            n.el !== i.textEl &&
                            n.el !== i.semiSphereEl &&
                            (n.el.setAttribute('visible', !1), e.push(n.el)));
                      });
                  },
                  showAll: function() {
                    this.hiddenEls.forEach(function(t) {
                      t.setAttribute('visible', !0);
                    }),
                      (this.hiddenEls = []);
                  },
                  calculateCameraPortalOrientation: ((n = new p.Matrix4()),
                  (r = new p.Vector3()),
                  (o = new p.Vector3(0, 0, 1)),
                  (s = new p.Vector3(0, 0, 0)),
                  function() {
                    var t = this.el,
                      e = t.sceneEl.camera;
                    return (
                      r.set(0, 0, 0),
                      o.set(0, 0, 1),
                      s.set(0, 0, 0),
                      t.object3D.matrixWorld.extractRotation(n),
                      o.applyMatrix4(n),
                      t.object3D.updateMatrixWorld(),
                      t.object3D.localToWorld(s),
                      e.parent.parent.updateMatrixWorld(),
                      e.parent.updateMatrixWorld(),
                      e.updateMatrixWorld(),
                      e.localToWorld(r),
                      r.sub(s).normalize(),
                      o.normalize(),
                      Math.sign(o.dot(r))
                    );
                  }),
                  remove: function() {
                    this.removeEventListener();
                  }
                })),
                  d('portal', {
                    schema: {
                      pano: { type: 'map', is: 'uniform' },
                      borderEnabled: { default: 1, type: 'int', is: 'uniform' },
                      strokeColor: {
                        default: 'white',
                        type: 'color',
                        is: 'uniform'
                      }
                    },
                    vertexShader: [
                      'vec3 portalPosition;',
                      'varying vec3 vWorldPosition;',
                      'varying float vDistanceToCenter;',
                      'varying float vDistance;',
                      'void main() {',
                      'vDistanceToCenter = clamp(length(position - vec3(0.0, 0.0, 0.0)), 0.0, 1.0);',
                      'portalPosition = (modelMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;',
                      'vDistance = length(portalPosition - cameraPosition);',
                      'vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;',
                      'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                      '}'
                    ].join('\n'),
                    fragmentShader: [
                      '#define RECIPROCAL_PI2 0.15915494',
                      'uniform sampler2D pano;',
                      'uniform vec3 strokeColor;',
                      'uniform float borderEnabled;',
                      'varying float vDistanceToCenter;',
                      'varying float vDistance;',
                      'varying vec3 vWorldPosition;',
                      'void main() {',
                      'vec3 direction = normalize(vWorldPosition - cameraPosition);',
                      'vec2 sampleUV;',
                      'float borderThickness = clamp(exp(-vDistance / 50.0), 0.6, 0.95);',
                      'sampleUV.y = saturate(direction.y * 0.5  + 0.5);',
                      'sampleUV.x = atan(direction.z, -direction.x) * -RECIPROCAL_PI2 + 0.5;',
                      'if (vDistanceToCenter > borderThickness && borderEnabled == 1.0) {',
                      'gl_FragColor = vec4(strokeColor, 1.0);',
                      '} else {',
                      'gl_FragColor = mix(texture2D(pano, sampleUV), vec4(0.93, 0.17, 0.36, 1.0), clamp(pow((vDistance / 15.0), 2.0), 0.0, 1.0));',
                      '}',
                      '}'
                    ].join('\n')
                  });
              },
              {
                '../core/component': 125,
                '../core/shader': 134,
                '../lib/three': 173
              }
            ],
            90: [
              function(t, e, i) {
                var n,
                  r = t('../core/component').registerComponent,
                  o = t('../lib/three'),
                  s = t('../constants').DEFAULT_CAMERA_HEIGHT,
                  a = t('../utils/bind'),
                  c = Math.PI / 2,
                  l = o.Math.radToDeg;
                e.exports.Component = r('look-controls', {
                  dependencies: ['position', 'rotation'],
                  schema: {
                    enabled: { default: !0 },
                    touchEnabled: { default: !0 },
                    hmdEnabled: { default: !0 },
                    reverseMouseDrag: { default: !1 },
                    standing: { default: !0 }
                  },
                  init: function() {
                    var t = this.el.sceneEl;
                    (this.previousHMDPosition = new o.Vector3()),
                      (this.hmdQuaternion = new o.Quaternion()),
                      (this.hmdEuler = new o.Euler()),
                      (this.position = new o.Vector3()),
                      (this.rotation = {}),
                      this.setupMouseControls(),
                      this.setupHMDControls(),
                      this.bindMethods(),
                      t.addEventListener('exit-vr', this.onExitVR);
                  },
                  update: function(t) {
                    var e = this.data;
                    e.enabled !== t.enabled && this.updateGrabCursor(e.enabled),
                      !t ||
                        e.hmdEnabled ||
                        t.hmdEnabled ||
                        (this.pitchObject.rotation.set(0, 0, 0),
                        this.yawObject.rotation.set(0, 0, 0));
                  },
                  tick: function(t) {
                    var e = this.data;
                    e.enabled &&
                      ((this.controls.standing = e.standing),
                      (this.controls.userHeight = this.getUserHeight()),
                      this.controls.update(),
                      this.updateOrientation(),
                      this.updatePosition());
                  },
                  getUserHeight: function() {
                    var t = this.el;
                    return (
                      (t.hasAttribute('camera') &&
                        t.getAttribute('camera').userHeight) ||
                      s
                    );
                  },
                  play: function() {
                    this.addEventListeners();
                  },
                  pause: function() {
                    this.removeEventListeners();
                  },
                  remove: function() {
                    this.removeEventListeners();
                  },
                  bindMethods: function() {
                    (this.onMouseDown = a(this.onMouseDown, this)),
                      (this.onMouseMove = a(this.onMouseMove, this)),
                      (this.onMouseUp = a(this.onMouseUp, this)),
                      (this.onTouchStart = a(this.onTouchStart, this)),
                      (this.onTouchMove = a(this.onTouchMove, this)),
                      (this.onTouchEnd = a(this.onTouchEnd, this)),
                      (this.onExitVR = a(this.onExitVR, this));
                  },
                  setupMouseControls: function() {
                    (this.mouseDown = !1),
                      (this.pitchObject = new o.Object3D()),
                      (this.yawObject = new o.Object3D()),
                      (this.yawObject.position.y = 10),
                      this.yawObject.add(this.pitchObject);
                  },
                  setupHMDControls: function() {
                    (this.dolly = new o.Object3D()),
                      (this.euler = new o.Euler()),
                      (this.controls = new o.VRControls(this.dolly)),
                      (this.controls.userHeight = 0);
                  },
                  addEventListeners: function() {
                    var t = this.el.sceneEl,
                      e = t.canvas;
                    e
                      ? (e.addEventListener('mousedown', this.onMouseDown, !1),
                        window.addEventListener(
                          'mousemove',
                          this.onMouseMove,
                          !1
                        ),
                        window.addEventListener('mouseup', this.onMouseUp, !1),
                        e.addEventListener('touchstart', this.onTouchStart),
                        window.addEventListener('touchmove', this.onTouchMove),
                        window.addEventListener('touchend', this.onTouchEnd))
                      : t.addEventListener(
                          'render-target-loaded',
                          a(this.addEventListeners, this)
                        );
                  },
                  removeEventListeners: function() {
                    var t = this.el.sceneEl,
                      e = t && t.canvas;
                    e &&
                      (e.removeEventListener('mousedown', this.onMouseDown),
                      e.removeEventListener('mousemove', this.onMouseMove),
                      e.removeEventListener('mouseup', this.onMouseUp),
                      e.removeEventListener('mouseout', this.onMouseUp),
                      e.removeEventListener('touchstart', this.onTouchStart),
                      e.removeEventListener('touchmove', this.onTouchMove),
                      e.removeEventListener('touchend', this.onTouchEnd));
                  },
                  updateOrientation: function() {
                    var t,
                      e,
                      i,
                      n = this.hmdEuler,
                      r = this.hmdQuaternion,
                      o = this.pitchObject,
                      s = this.yawObject,
                      a = this.el.sceneEl,
                      c = this.rotation;
                    (r = r.copy(this.dolly.quaternion)),
                      n.setFromQuaternion(r, 'YXZ'),
                      a.isMobile
                        ? ((c.x = l(n.x) + l(o.rotation.x)),
                          (c.y = l(n.y) + l(s.rotation.y)),
                          (c.z = l(n.z)))
                        : a.is('vr-mode') &&
                          (0 !== (i = n).x || 0 !== i.y || 0 !== i.z) &&
                          this.data.hmdEnabled
                          ? ((c.x = l(n.x)), (c.y = l(n.y)), (c.z = l(n.z)))
                          : ((t = this.el.getAttribute('rotation')),
                            (e = this.calculateDeltaRotation()),
                            this.data.reverseMouseDrag
                              ? ((c.x = t.x - e.x),
                                (c.y = t.y - e.y),
                                (c.z = t.z))
                              : ((c.x = t.x + e.x),
                                (c.y = t.y + e.y),
                                (c.z = t.z))),
                      this.el.setAttribute('rotation', c);
                  },
                  calculateDeltaRotation: function() {
                    var t,
                      e = l(this.pitchObject.rotation.x),
                      i = l(this.yawObject.rotation.y);
                    return (
                      (t = {
                        x: e - (this.previousRotationX || 0),
                        y: i - (this.previousRotationY || 0)
                      }),
                      (this.previousRotationX = e),
                      (this.previousRotationY = i),
                      t
                    );
                  },
                  updatePosition: function() {
                    var t,
                      e,
                      i = this.el,
                      n = this.position,
                      r = this.previousHMDPosition;
                    this.el.sceneEl.is('vr-mode') &&
                      ((t = this.calculateHMDPosition()),
                      (e = i.getAttribute('position')),
                      n
                        .copy(e)
                        .sub(r)
                        .add(t),
                      i.setAttribute('position', n),
                      r.copy(t));
                  },
                  calculateHMDPosition: ((n = new o.Vector3()),
                  function() {
                    return (
                      this.dolly.updateMatrix(),
                      n.setFromMatrixPosition(this.dolly.matrix),
                      n
                    );
                  }),
                  onMouseMove: function(t) {
                    var e,
                      i,
                      n = this.pitchObject,
                      r = this.yawObject,
                      o = this.previousMouseEvent;
                    this.mouseDown &&
                      this.data.enabled &&
                      ((e = t.movementX || t.mozMovementX),
                      (i = t.movementY || t.mozMovementY),
                      (void 0 !== e && void 0 !== i) ||
                        ((e = t.screenX - o.screenX),
                        (i = t.screenY - o.screenY)),
                      (this.previousMouseEvent = t),
                      (r.rotation.y -= 0.002 * e),
                      (n.rotation.x -= 0.002 * i),
                      (n.rotation.x = Math.max(-c, Math.min(c, n.rotation.x))));
                  },
                  onMouseDown: function(t) {
                    this.data.enabled &&
                      0 === t.button &&
                      ((this.mouseDown = !0),
                      (this.previousMouseEvent = t),
                      document.body.classList.add('a-grabbing'));
                  },
                  onMouseUp: function() {
                    (this.mouseDown = !1),
                      document.body.classList.remove('a-grabbing');
                  },
                  onTouchStart: function(t) {
                    1 === t.touches.length &&
                      this.data.touchEnabled &&
                      ((this.touchStart = {
                        x: t.touches[0].pageX,
                        y: t.touches[0].pageY
                      }),
                      (this.touchStarted = !0));
                  },
                  onTouchMove: function(t) {
                    var e,
                      i = this.el.sceneEl.canvas,
                      n = this.yawObject;
                    this.touchStarted &&
                      this.data.touchEnabled &&
                      ((e =
                        2 *
                        Math.PI *
                        (t.touches[0].pageX - this.touchStart.x) /
                        i.clientWidth),
                      (n.rotation.y -= 0.5 * e),
                      (this.touchStart = {
                        x: t.touches[0].pageX,
                        y: t.touches[0].pageY
                      }));
                  },
                  onTouchEnd: function() {
                    this.touchStarted = !1;
                  },
                  onExitVR: function() {
                    this.previousHMDPosition.set(0, 0, 0);
                  },
                  updateGrabCursor: function(t) {
                    var e = this.el.sceneEl;
                    function i() {
                      e.canvas.classList.add('a-grab-cursor');
                    }
                    function n() {
                      e.canvas.classList.remove('a-grab-cursor');
                    }
                    e.canvas
                      ? t ? i() : n()
                      : t
                        ? e.addEventListener('render-target-loaded', i)
                        : e.addEventListener('render-target-loaded', n);
                  }
                });
              },
              {
                '../constants': 116,
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/bind': 189
              }
            ],
            91: [
              function(t, e, i) {
                var n = t('../utils/'),
                  r = t('../core/component'),
                  o = t('../lib/three'),
                  s = t('../core/shader'),
                  a = n.debug('components:material:error'),
                  c = r.registerComponent,
                  l = s.shaders,
                  u = s.shaderNames;
                function h(t, e) {
                  t.dispose(), e.unregisterMaterial(t);
                }
                e.exports.Component = c('material', {
                  schema: {
                    alphaTest: { default: 0, min: 0, max: 1 },
                    depthTest: { default: !0 },
                    depthWrite: { default: !0 },
                    flatShading: { default: !1 },
                    npot: { default: !1 },
                    offset: { type: 'vec2', default: { x: 0, y: 0 } },
                    opacity: { default: 1, min: 0, max: 1 },
                    repeat: { type: 'vec2', default: { x: 1, y: 1 } },
                    shader: { default: 'standard', oneOf: u },
                    side: {
                      default: 'front',
                      oneOf: ['front', 'back', 'double']
                    },
                    transparent: { default: !1 },
                    vertexColors: {
                      type: 'string',
                      default: 'none',
                      oneOf: ['face', 'vertex']
                    },
                    visible: { default: !0 }
                  },
                  init: function() {
                    this.material = null;
                  },
                  update: function(t) {
                    var e = this.data;
                    (this.shader && e.shader === t.shader) ||
                      this.updateShader(e.shader),
                      this.shader.update(this.data),
                      this.updateMaterial(t);
                  },
                  updateSchema: function(t) {
                    var e = t.shader,
                      i = this.data && this.data.shader,
                      n = e || i,
                      r = l[n] && l[n].schema;
                    r || a('Unknown shader schema ' + n),
                      (i && e === i) ||
                        (this.extendSchema(r), this.updateBehavior());
                  },
                  updateBehavior: function() {
                    var t = this.schema,
                      e = this,
                      i = this.el.sceneEl,
                      n = {},
                      r = function(t, i) {
                        Object.keys(n).forEach(function(e) {
                          n[e] = t;
                        }),
                          e.shader.update(n);
                      };
                    (this.tick = void 0),
                      Object.keys(t).forEach(function(i) {
                        'time' === t[i].type && ((e.tick = r), (n[i] = !0));
                      }),
                      i &&
                        (this.tick
                          ? i.addBehavior(this)
                          : i.removeBehavior(this));
                  },
                  updateShader: function(t) {
                    var e,
                      i = this.data,
                      n = l[t] && l[t].Shader;
                    if (!n) throw new Error('Unknown shader ' + t);
                    ((e = this.shader = new n()).el = this.el),
                      e.init(i),
                      this.setMaterial(e.material),
                      this.updateSchema(i);
                  },
                  updateMaterial: function(t) {
                    var e = this.data,
                      i = this.material;
                    (i.alphaTest = e.alphaTest),
                      (i.depthTest = !1 !== e.depthTest),
                      (i.depthWrite = !1 !== e.depthWrite),
                      (i.opacity = e.opacity),
                      (i.flatShading = e.flatShading),
                      (i.side = (function(t) {
                        switch (t) {
                          case 'back':
                            return o.BackSide;
                          case 'double':
                            return o.DoubleSide;
                          default:
                            return o.FrontSide;
                        }
                      })(e.side)),
                      (i.transparent = !1 !== e.transparent || e.opacity < 1),
                      (i.vertexColors = (function(t) {
                        switch (t) {
                          case 'face':
                            return o.FaceColors;
                          case 'vertex':
                            return o.VertexColors;
                          default:
                            return o.NoColors;
                        }
                      })(e.vertexColors)),
                      (i.visible = e.visible),
                      !Object.keys(t).length ||
                        (t.alphaTest === e.alphaTest &&
                          t.side === e.side &&
                          t.vertexColors === e.vertexColors) ||
                        (i.needsUpdate = !0);
                  },
                  remove: function() {
                    var t = new o.MeshBasicMaterial(),
                      e = this.material,
                      i = this.el.getObject3D('mesh');
                    i && (i.material = t), h(e, this.system);
                  },
                  setMaterial: function(t) {
                    var e = this.el.getOrCreateObject3D('mesh', o.Mesh),
                      i = this.system;
                    this.material && h(this.material, i),
                      (this.material = e.material = t),
                      i.registerMaterial(t);
                  }
                });
              },
              {
                '../core/component': 125,
                '../core/shader': 134,
                '../lib/three': 173,
                '../utils/': 195
              }
            ],
            92: [
              function(t, e, i) {
                var n = t('../utils/debug'),
                  r = t('../core/component').registerComponent,
                  o = t('../lib/three'),
                  s = n('components:obj-model:warn');
                e.exports.Component = r('obj-model', {
                  schema: { mtl: { type: 'model' }, obj: { type: 'model' } },
                  init: function() {
                    (this.model = null),
                      (this.objLoader = new o.OBJLoader()),
                      (this.mtlLoader = new o.MTLLoader(
                        this.objLoader.manager
                      )),
                      (this.mtlLoader.crossOrigin = '');
                  },
                  update: function() {
                    var t = this.data;
                    t.obj && (this.remove(), this.loadObj(t.obj, t.mtl));
                  },
                  remove: function() {
                    this.model && this.el.removeObject3D('mesh');
                  },
                  loadObj: function(t, e) {
                    var i = this,
                      n = this.el,
                      r = this.mtlLoader,
                      a = this.objLoader;
                    if (e)
                      return (
                        n.hasAttribute('material') &&
                          s(
                            'Material component properties are ignored when a .MTL is provided'
                          ),
                        r.setTexturePath(e.substr(0, e.lastIndexOf('/') + 1)),
                        void r.load(e, function(e) {
                          e.preload(),
                            a.setMaterials(e),
                            a.load(t, function(t) {
                              (i.model = t),
                                n.setObject3D('mesh', t),
                                n.emit('model-loaded', {
                                  format: 'obj',
                                  model: t
                                });
                            });
                        })
                      );
                    a.load(t, function(t) {
                      var e = n.components.material;
                      e &&
                        t.traverse(function(t) {
                          t instanceof o.Mesh && (t.material = e.material);
                        }),
                        (i.model = t),
                        n.setObject3D('mesh', t),
                        n.emit('model-loaded', { format: 'obj', model: t });
                    });
                  }
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/debug': 191
              }
            ],
            93: [
              function(t, e, i) {
                var n = t('../utils/bind'),
                  r = t('../core/component').registerComponent,
                  o = t('../utils/tracked-controls'),
                  s = { x: 0, y: -0.015, z: 0.04 };
                e.exports.Component = r('oculus-touch-controls', {
                  schema: {
                    hand: { default: 'left' },
                    buttonColor: { type: 'color', default: '#999' },
                    buttonTouchColor: { type: 'color', default: '#8AB' },
                    buttonHighlightColor: { type: 'color', default: '#2DF' },
                    model: { default: !0 },
                    rotationOffset: { default: 0 }
                  },
                  mapping: {
                    left: {
                      axes: { thumbstick: [0, 1] },
                      buttons: [
                        'thumbstick',
                        'trigger',
                        'grip',
                        'xbutton',
                        'ybutton',
                        'surface'
                      ]
                    },
                    right: {
                      axes: { thumbstick: [0, 1] },
                      buttons: [
                        'thumbstick',
                        'trigger',
                        'grip',
                        'abutton',
                        'bbutton',
                        'surface'
                      ]
                    }
                  },
                  bindMethods: function() {
                    (this.onModelLoaded = n(this.onModelLoaded, this)),
                      (this.onControllersUpdate = n(
                        this.onControllersUpdate,
                        this
                      )),
                      (this.checkIfControllerPresent = n(
                        this.checkIfControllerPresent,
                        this
                      )),
                      (this.onAxisMoved = n(this.onAxisMoved, this));
                  },
                  init: function() {
                    var t = this;
                    (this.onButtonChanged = n(this.onButtonChanged, this)),
                      (this.onButtonDown = function(e) {
                        t.onButtonEvent(e.detail.id, 'down');
                      }),
                      (this.onButtonUp = function(e) {
                        t.onButtonEvent(e.detail.id, 'up');
                      }),
                      (this.onButtonTouchStart = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchstart');
                      }),
                      (this.onButtonTouchEnd = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchend');
                      }),
                      (this.controllerPresent = !1),
                      (this.lastControllerCheck = 0),
                      (this.previousButtonValues = {}),
                      this.bindMethods(),
                      (this.emitIfAxesChanged = o.emitIfAxesChanged),
                      (this.checkControllerPresentAndSetup =
                        o.checkControllerPresentAndSetup);
                  },
                  addEventListeners: function() {
                    var t = this.el;
                    t.addEventListener('buttonchanged', this.onButtonChanged),
                      t.addEventListener('buttondown', this.onButtonDown),
                      t.addEventListener('buttonup', this.onButtonUp),
                      t.addEventListener('touchstart', this.onButtonTouchStart),
                      t.addEventListener('touchend', this.onButtonTouchEnd),
                      t.addEventListener('axismove', this.onAxisMoved),
                      t.addEventListener('model-loaded', this.onModelLoaded),
                      (this.controllerEventsActive = !0);
                  },
                  removeEventListeners: function() {
                    var t = this.el;
                    t.removeEventListener(
                      'buttonchanged',
                      this.onButtonChanged
                    ),
                      t.removeEventListener('buttondown', this.onButtonDown),
                      t.removeEventListener('buttonup', this.onButtonUp),
                      t.removeEventListener(
                        'touchstart',
                        this.onButtonTouchStart
                      ),
                      t.removeEventListener('touchend', this.onButtonTouchEnd),
                      t.removeEventListener('axismove', this.onAxisMoved),
                      t.removeEventListener('model-loaded', this.onModelLoaded),
                      (this.controllerEventsActive = !1);
                  },
                  checkIfControllerPresent: function() {
                    this.checkControllerPresentAndSetup(this, 'Oculus Touch', {
                      hand: this.data.hand
                    });
                  },
                  play: function() {
                    this.checkIfControllerPresent(),
                      this.addControllersUpdateListener();
                  },
                  pause: function() {
                    this.removeEventListeners(),
                      this.removeControllersUpdateListener();
                  },
                  updateControllerModel: function() {
                    var t, e;
                    this.data.model &&
                      ('right' === this.data.hand
                        ? ((t =
                            'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-right.obj)'),
                          (e =
                            'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-right.mtl)'))
                        : ((t =
                            'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-left.obj)'),
                          (e =
                            'url(https://cdn.aframe.io/controllers/oculus/oculus-touch-controller-left.mtl)')),
                      this.el.setAttribute('obj-model', { obj: t, mtl: e }));
                  },
                  injectTrackedControls: function() {
                    var t = this.data,
                      e = 'right' === t.hand ? -90 : 90;
                    this.el.setAttribute('tracked-controls', {
                      id:
                        'right' === t.hand
                          ? 'Oculus Touch (Right)'
                          : 'Oculus Touch (Left)',
                      controller: 0,
                      rotationOffset:
                        -999 !== t.rotationOffset ? t.rotationOffset : e
                    }),
                      this.updateControllerModel();
                  },
                  addControllersUpdateListener: function() {
                    this.el.sceneEl.addEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  removeControllersUpdateListener: function() {
                    this.el.sceneEl.removeEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  onControllersUpdate: function() {
                    this.checkIfControllerPresent();
                  },
                  onButtonChanged: function(t) {
                    var e,
                      i = this.mapping[this.data.hand].buttons[t.detail.id],
                      n = this.buttonMeshes;
                    i &&
                      (('trigger' !== i && 'grip' !== i) ||
                        (e = t.detail.state.value),
                      n &&
                        ('trigger' === i &&
                          n.trigger &&
                          (n.trigger.rotation.x = -e * (Math.PI / 24)),
                        'grip' === i &&
                          n.grip &&
                          (n.grip.rotation.y =
                            ('left' === this.data.hand ? -1 : 1) *
                            e *
                            (Math.PI / 60))),
                      this.el.emit(i + 'changed', t.detail.state));
                  },
                  onModelLoaded: function(t) {
                    var e,
                      i = t.detail.model;
                    if (this.data.model) {
                      var n = 'left' === this.data.hand;
                      ((e = this.buttonMeshes = {}).grip = i.getObjectByName(
                        n
                          ? 'buttonHand_oculus-touch-controller-left.004'
                          : 'buttonHand_oculus-touch-controller-right.005'
                      )),
                        (e.thumbstick = i.getObjectByName(
                          n
                            ? 'stick_oculus-touch-controller-left.007'
                            : 'stick_oculus-touch-controller-right.004'
                        )),
                        (e.trigger = i.getObjectByName(
                          n
                            ? 'buttonTrigger_oculus-touch-controller-left.005'
                            : 'buttonTrigger_oculus-touch-controller-right.006'
                        )),
                        (e.xbutton = i.getObjectByName(
                          'buttonX_oculus-touch-controller-left.002'
                        )),
                        (e.abutton = i.getObjectByName(
                          'buttonA_oculus-touch-controller-right.002'
                        )),
                        (e.ybutton = i.getObjectByName(
                          'buttonY_oculus-touch-controller-left.001'
                        )),
                        (e.bbutton = i.getObjectByName(
                          'buttonB_oculus-touch-controller-right.003'
                        )),
                        (i.position = s);
                    }
                  },
                  onButtonEvent: function(t, e) {
                    var i,
                      n = this.mapping[this.data.hand].buttons[t];
                    if (Array.isArray(n))
                      for (i = 0; i < n.length; i++) this.el.emit(n[i] + e);
                    else this.el.emit(n + e);
                    this.updateModel(n, e);
                  },
                  onAxisMoved: function(t) {
                    this.emitIfAxesChanged(
                      this,
                      this.mapping[this.data.hand].axes,
                      t
                    );
                  },
                  updateModel: function(t, e) {
                    var i;
                    if (Array.isArray(t))
                      for (i = 0; i < t.length; i++)
                        this.updateButtonModel(t[i], e);
                    else this.updateButtonModel(t, e);
                  },
                  updateButtonModel: function(t, e) {
                    var i =
                        'up' === e || 'touchend' === e
                          ? this.data.buttonColor
                          : 'touchstart' === e
                            ? this.data.buttonTouchColor
                            : this.data.buttonHighlightColor,
                      n = this.buttonMeshes;
                    this.data.model && n && n[t] && n[t].material.color.set(i);
                  }
                });
              },
              {
                '../core/component': 125,
                '../utils/bind': 189,
                '../utils/tracked-controls': 199
              }
            ],
            94: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent;
                e.exports.Component = n('position', {
                  schema: { type: 'vec3' },
                  update: function() {
                    var t = this.el.object3D,
                      e = this.data;
                    t.position.set(e.x, e.y, e.z);
                  }
                });
              },
              { '../core/component': 125 }
            ],
            95: [
              function(t, e, i) {
                var n,
                  r,
                  o,
                  s,
                  a,
                  c,
                  l = t('../core/component').registerComponent,
                  u = t('../lib/three'),
                  h = t('../utils/').bind,
                  d = new u.Vector3();
                e.exports.Component = l('raycaster', {
                  schema: {
                    direction: { type: 'vec3', default: { x: 0, y: 0, z: -1 } },
                    far: { default: 1e3 },
                    interval: { default: 100 },
                    near: { default: 0 },
                    objects: { default: '' },
                    origin: { type: 'vec3' },
                    recursive: { default: !0 },
                    showLine: { default: !1 },
                    useWorldCoordinates: { default: !1 }
                  },
                  init: function() {
                    (this.lineData = {}),
                      (this.lineEndVec3 = new u.Vector3()),
                      (this.unitLineEndVec3 = new u.Vector3()),
                      (this.intersectedEls = []),
                      (this.objects = null),
                      (this.prevCheckTime = void 0),
                      (this.prevIntersectedEls = []),
                      (this.raycaster = new u.Raycaster()),
                      this.updateOriginDirection(),
                      (this.refreshObjects = h(this.refreshObjects, this)),
                      (this.refreshOnceChildLoaded = h(
                        this.refreshOnceChildLoaded,
                        this
                      ));
                  },
                  update: function(t) {
                    var e = this.data,
                      i = this.el,
                      n = this.raycaster;
                    (n.far = e.far),
                      (n.near = e.near),
                      !e.showLine ||
                        (e.far === t.far &&
                          e.origin === t.origin &&
                          e.direction === t.direction &&
                          e.showLine === t.showLine) ||
                        (this.unitLineEndVec3
                          .copy(e.origin)
                          .add(e.direction)
                          .normalize(),
                        this.drawLine()),
                      !e.showLine && t.showLine && i.removeAttribute('line'),
                      this.refreshObjects();
                  },
                  play: function() {
                    this.el.sceneEl.addEventListener(
                      'loaded',
                      this.refreshObjects
                    ),
                      this.el.sceneEl.addEventListener(
                        'child-attached',
                        this.refreshOnceChildLoaded
                      ),
                      this.el.sceneEl.addEventListener(
                        'child-detached',
                        this.refreshObjects
                      );
                  },
                  pause: function() {
                    this.el.sceneEl.removeEventListener(
                      'loaded',
                      this.refreshObjects
                    ),
                      this.el.sceneEl.removeEventListener(
                        'child-attached',
                        this.refreshOnceChildLoaded
                      ),
                      this.el.sceneEl.removeEventListener(
                        'child-detached',
                        this.refreshObjects
                      );
                  },
                  remove: function() {
                    this.data.showLine && this.el.removeAttribute('line');
                  },
                  refreshOnceChildLoaded: function(t) {
                    var e = this,
                      i = t.detail.el;
                    i &&
                      (i.hasLoaded
                        ? this.refreshObjects()
                        : i.addEventListener('loaded', function t(n) {
                            i.removeEventListener('loaded', t),
                              e.refreshObjects();
                          }));
                  },
                  refreshObjects: function() {
                    var t,
                      e,
                      i,
                      n = this.data,
                      r = n.objects
                        ? this.el.sceneEl.querySelectorAll(n.objects)
                        : null;
                    if (r)
                      for (i = [], e = 0; e < r.length; e++)
                        i.push(r[e].object3D);
                    else i = this.el.sceneEl.object3D.children;
                    for (this.objects = [], e = 0; e < i.length; e++)
                      (t = i[e].children) &&
                        this.objects.push.apply(this.objects, t);
                  },
                  tick: ((c = []),
                  function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o = this.el,
                      s = this.data,
                      a = this.intersectedEls,
                      l = this.prevCheckTime,
                      u = this.prevIntersectedEls;
                    if (!(l && t - l < s.interval)) {
                      for (
                        this.prevCheckTime = t,
                          (function(t, e) {
                            var i;
                            for (t.length = e.length, i = 0; i < e.length; i++)
                              t[i] = e[i];
                          })(this.prevIntersectedEls, this.intersectedEls),
                          this.updateOriginDirection(),
                          r = this.raycaster.intersectObjects(
                            this.objects,
                            s.recursive
                          ),
                          c.length = 0,
                          e = 0;
                        e < r.length;
                        e++
                      )
                        (i = r[e]),
                          (s.showLine && i.object === o.getObject3D('line')) ||
                            (i.object.el && c.push(i));
                      for (a.length = c.length, e = 0; e < c.length; e++)
                        a[e] = c[e].object.el;
                      for (e = 0; e < c.length; e++)
                        c[e].object.el.emit('raycaster-intersected', {
                          el: o,
                          intersection: c[e]
                        });
                      for (
                        c.length &&
                          o.emit('raycaster-intersection', {
                            els: a,
                            intersections: c
                          }),
                          e = 0;
                        e < u.length;
                        e++
                      ) {
                        if (-1 !== a.indexOf(u[e])) return;
                        o.emit('raycaster-intersection-cleared', { el: u[e] }),
                          u[e].emit('raycaster-intersected-cleared', { el: o });
                      }
                      s.showLine &&
                        (c.length &&
                          (n =
                            c[0].object.el === o && c[1]
                              ? c[1].distance
                              : c[0].distance),
                        this.drawLine(n));
                    }
                  }),
                  updateOriginDirection: ((o = new u.Vector3()),
                  (s = new u.Quaternion()),
                  (a = new u.Vector3()),
                  function() {
                    var t = this.el,
                      e = this.data;
                    e.useWorldCoordinates
                      ? this.raycaster.set(e.origin, e.direction)
                      : (t.object3D.updateMatrixWorld(),
                        t.object3D.matrixWorld.decompose(a, s, d),
                        (0 === e.origin.x &&
                          0 === e.origin.y &&
                          0 === e.origin.z) ||
                          (a = t.object3D.localToWorld(a.copy(e.origin))),
                        o
                          .copy(e.direction)
                          .add(e.origin)
                          .applyQuaternion(s)
                          .normalize(),
                        this.raycaster.set(a, o));
                  }),
                  drawLine: ((n = new u.Vector3()),
                  (r = {}),
                  function(t) {
                    var e = this.data,
                      i = this.el;
                    void 0 === t && (t = e.far === 1 / 0 ? 1e3 : e.far),
                      (r.start = e.origin),
                      (r.end = n.copy(this.unitLineEndVec3).multiplyScalar(t)),
                      i.setAttribute('line', r);
                  })
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/': 195
              }
            ],
            96: [
              function(t, e, i) {
                var n = t('../lib/three').Math.degToRad,
                  r = t('../core/component').registerComponent;
                e.exports.Component = r('rotation', {
                  schema: { type: 'vec3' },
                  update: function() {
                    var t = this.data,
                      e = this.el.object3D;
                    e.rotation.set(n(t.x), n(t.y), n(t.z)),
                      (e.rotation.order = 'YXZ');
                  }
                });
              },
              { '../core/component': 125, '../lib/three': 173 }
            ],
            97: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent;
                e.exports.Component = n('scale', {
                  schema: { type: 'vec3', default: { x: 1, y: 1, z: 1 } },
                  update: function() {
                    var t = this.data,
                      e = this.el.object3D,
                      i = 0 === t.x ? 1e-5 : t.x,
                      n = 0 === t.y ? 1e-5 : t.y,
                      r = 0 === t.z ? 1e-5 : t.z;
                    e.scale.set(i, n, r);
                  }
                });
              },
              { '../core/component': 125 }
            ],
            98: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent;
                e.exports.Component = n('debug', { schema: { default: !0 } });
              },
              { '../../core/component': 125 }
            ],
            99: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent;
                e.exports.Component = n('embedded', {
                  dependencies: ['vr-mode-ui'],
                  schema: { default: !0 },
                  update: function() {
                    var t = this.el,
                      e = t.querySelector('.a-enter-vr');
                    !0 === this.data
                      ? (e && e.classList.add('embedded'),
                        t.removeFullScreenStyles())
                      : (e && e.classList.remove('embedded'),
                        t.addFullScreenStyles());
                  }
                });
              },
              { '../../core/component': 125 }
            ],
            100: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent,
                  r = t('../../lib/three'),
                  o = t('../../utils/debug')('components:fog:warn');
                e.exports.Component = n('fog', {
                  schema: {
                    color: { type: 'color', default: '#000' },
                    density: { default: 25e-5 },
                    far: { default: 1e3, min: 0 },
                    near: { default: 1, min: 0 },
                    type: {
                      default: 'linear',
                      oneOf: ['linear', 'exponential']
                    }
                  },
                  update: function() {
                    var t = this.data,
                      e = this.el,
                      i = this.el.object3D.fog;
                    if (e.isScene)
                      return i && t.type === i.name
                        ? void Object.keys(this.schema).forEach(function(e) {
                            var n = t[e];
                            'color' === e && (n = new r.Color(n)), (i[e] = n);
                          })
                        : ((e.object3D.fog = (function(t) {
                            var e;
                            e =
                              'exponential' === t.type
                                ? new r.FogExp2(t.color, t.density)
                                : new r.Fog(t.color, t.near, t.far);
                            return (e.name = t.type), e;
                          })(t)),
                          void e.systems.material.updateMaterials());
                    o('Fog component can only be applied to <a-scene>');
                  },
                  remove: function() {
                    var t = this.el.object3D.fog;
                    t && ((t.far = 0), (t.near = 0.1));
                  }
                });
              },
              {
                '../../core/component': 125,
                '../../lib/three': 173,
                '../../utils/debug': 191
              }
            ],
            101: [
              function(t, e, i) {
                (function(i) {
                  var n = t('../../constants').AFRAME_INJECTED,
                    r = t('../../utils/bind'),
                    o = t('../../../package'),
                    s = t('../../core/component').registerComponent;
                  var a,
                    c,
                    l =
                      'https://unpkg.com/aframe-inspector@' +
                      ((a = o.version),
                      ((c = a.split('.'))[2] = 'x'),
                      c.join('.')) +
                      '/dist/aframe-inspector.min.js',
                    u =
                      'dev' === i.env.INSPECTOR_VERSION
                        ? 'https://aframe.io/aframe-inspector/dist/aframe-inspector.js'
                        : l;
                  e.exports.Component = s('inspector', {
                    schema: { url: { default: u } },
                    init: function() {
                      (this.onKeydown = r(this.onKeydown, this)),
                        (this.onMessage = r(this.onMessage, this)),
                        this.initOverlay(),
                        window.addEventListener('keydown', this.onKeydown),
                        window.addEventListener('message', this.onMessage);
                    },
                    initOverlay: function() {
                      (this.loadingMessageEl = document.createElement('div')),
                        this.loadingMessageEl.classList.add(
                          'a-inspector-loader'
                        ),
                        (this.loadingMessageEl.innerHTML =
                          'Loading Inspector<span class="dots"><span>.</span><span>.</span><span>.</span></span>');
                    },
                    remove: function() {
                      this.removeEventListeners();
                    },
                    onKeydown: function(t) {
                      var e = 73 === t.keyCode && t.ctrlKey && t.altKey;
                      this.data && e && this.injectInspector();
                    },
                    showLoader: function() {
                      document.body.appendChild(this.loadingMessageEl);
                    },
                    hideLoader: function() {
                      document.body.removeChild(this.loadingMessageEl);
                    },
                    onMessage: function(t) {
                      'INJECT_AFRAME_INSPECTOR' === t.data &&
                        this.injectInspector();
                    },
                    injectInspector: function() {
                      var t,
                        e = this;
                      AFRAME.INSPECTOR ||
                        AFRAME.inspectorInjected ||
                        (this.showLoader(),
                        ((t = document.createElement(
                          'script'
                        )).src = this.data.url),
                        t.setAttribute('data-name', 'aframe-inspector'),
                        t.setAttribute(n, ''),
                        (t.onload = function() {
                          AFRAME.INSPECTOR.open(),
                            e.hideLoader(),
                            e.removeEventListeners();
                        }),
                        (t.onerror = function() {
                          e.loadingMessageEl.innerHTML =
                            'Error loading Inspector';
                        }),
                        document.head.appendChild(t),
                        (AFRAME.inspectorInjected = !0));
                    },
                    removeEventListeners: function() {
                      window.removeEventListener('keydown', this.onKeydown),
                        window.removeEventListener('message', this.onMessage);
                    }
                  });
                }.call(this, t('_process')));
              },
              {
                '../../../package': 76,
                '../../constants': 116,
                '../../core/component': 125,
                '../../utils/bind': 189,
                _process: 6
              }
            ],
            102: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent,
                  r = t('../../utils/').shouldCaptureKeyEvent;
                e.exports.Component = n('keyboard-shortcuts', {
                  schema: { enterVR: { default: !0 }, exitVR: { default: !0 } },
                  init: function() {
                    var t = this,
                      e = this.el;
                    this.listener = window.addEventListener(
                      'keyup',
                      function(i) {
                        r(i) &&
                          (t.enterVREnabled && 70 === i.keyCode && e.enterVR(),
                          t.enterVREnabled && 27 === i.keyCode && e.exitVR());
                      },
                      !1
                    );
                  },
                  update: function(t) {
                    var e = this.data;
                    this.enterVREnabled = e.enterVR;
                  },
                  remove: function() {
                    window.removeEventListener('keyup', this.listener);
                  }
                });
              },
              { '../../core/component': 125, '../../utils/': 195 }
            ],
            103: [
              function(t, e, i) {
                var n = t('../../utils/debug'),
                  r = t('../../core/component').registerComponent,
                  o = n('components:pool:warn');
                e.exports.Component = r('pool', {
                  schema: {
                    mixin: { default: '' },
                    size: { default: 0 },
                    dynamic: { default: !1 }
                  },
                  multiple: !0,
                  initPool: function() {
                    var t;
                    if (this.data.mixin)
                      for (
                        this.availableEls = [], this.usedEls = [], t = 0;
                        t < this.data.size;
                        ++t
                      )
                        this.createEntity();
                  },
                  update: function(t) {
                    var e = this.data;
                    (t.mixin === e.mixin && t.size === e.size) ||
                      this.initPool();
                  },
                  createEntity: function() {
                    var t = document.createElement('a-entity');
                    (t.play = this.wrapPlay(t.play)),
                      t.setAttribute('mixin', this.data.mixin),
                      t.setAttribute('visible', !1),
                      this.el.appendChild(t),
                      this.availableEls.push(t);
                  },
                  wrapPlay: function(t) {
                    var e = this.usedEls;
                    return function() {
                      -1 !== e.indexOf(this) && t.call(this);
                    };
                  },
                  requestEntity: function() {
                    var t;
                    if (0 === this.availableEls.length) {
                      if (!1 === this.data.dynamic)
                        return void o(
                          'Requested entity from empty pool ' + this.name
                        );
                      o(
                        'Requested entity from empty pool. This pool is dynamicand will resize automatically. You might want to increase its initial size' +
                          this.name
                      ),
                        this.createEntity();
                    }
                    return (
                      (t = this.availableEls.shift()),
                      this.usedEls.push(t),
                      t.setAttribute('visible', !0),
                      t
                    );
                  },
                  returnEntity: function(t) {
                    var e = this.usedEls.indexOf(t);
                    -1 !== e
                      ? (this.usedEls.splice(e, 1),
                        this.availableEls.push(t),
                        t.setAttribute('visible', !1),
                        t.pause())
                      : o(
                          'The returned entity was not previously pooled from ' +
                            this.name
                        );
                  }
                });
              },
              { '../../core/component': 125, '../../utils/debug': 191 }
            ],
            104: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent,
                  r = t('../../lib/three'),
                  o = [
                    'attribute vec3 position;',
                    'attribute vec2 uv;',
                    'uniform mat4 projectionMatrix;',
                    'uniform mat4 modelViewMatrix;',
                    'varying vec2 vUv;',
                    'void main()  {',
                    '  vUv = vec2( 1.- uv.x, uv.y );',
                    '  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );',
                    '}'
                  ].join('\n'),
                  s = [
                    'precision mediump float;',
                    'uniform samplerCube map;',
                    'varying vec2 vUv;',
                    '#define M_PI 3.141592653589793238462643383279',
                    'void main() {',
                    '  vec2 uv = vUv;',
                    '  float longitude = uv.x * 2. * M_PI - M_PI + M_PI / 2.;',
                    '  float latitude = uv.y * M_PI;',
                    '  vec3 dir = vec3(',
                    '    - sin( longitude ) * sin( latitude ),',
                    '    cos( latitude ),',
                    '    - cos( longitude ) * sin( latitude )',
                    '  );',
                    '  normalize( dir );',
                    '  gl_FragColor = vec4( textureCube( map, dir ).rgb, 1.0 );',
                    '}'
                  ].join('\n');
                e.exports.Component = n('screenshot', {
                  schema: {
                    width: { default: 4096 },
                    height: { default: 2048 }
                  },
                  init: function() {
                    var t = this.el,
                      e = this;
                    function i() {
                      var i = t.renderer.getContext();
                      (e.cubeMapSize = i.getParameter(
                        i.MAX_CUBE_MAP_TEXTURE_SIZE
                      )),
                        (e.material = new r.RawShaderMaterial({
                          uniforms: { map: { type: 't', value: null } },
                          vertexShader: o,
                          fragmentShader: s,
                          side: r.DoubleSide
                        })),
                        (e.quad = new r.Mesh(
                          new r.PlaneBufferGeometry(1, 1),
                          e.material
                        )),
                        (e.quad.visible = !1),
                        (e.camera = new r.OrthographicCamera(
                          -0.5,
                          0.5,
                          0.5,
                          -0.5,
                          -1e4,
                          1e4
                        )),
                        (e.canvas = document.createElement('canvas')),
                        (e.ctx = e.canvas.getContext('2d')),
                        t.camera && t.camera.add(e.quad),
                        (e.onKeyDown = e.onKeyDown.bind(e)),
                        (e.onCameraActive = e.onCameraActive.bind(e)),
                        t.addEventListener(
                          'camera-set-active',
                          e.onCameraActive
                        );
                    }
                    t.renderer
                      ? i()
                      : t.addEventListener('render-target-loaded', i);
                  },
                  getRenderTarget: function(t, e) {
                    return new r.WebGLRenderTarget(t, e, {
                      minFilter: r.LinearFilter,
                      magFilter: r.LinearFilter,
                      wrapS: r.ClampToEdgeWrapping,
                      wrapT: r.ClampToEdgeWrapping,
                      format: r.RGBAFormat,
                      type: r.UnsignedByteType
                    });
                  },
                  resize: function(t, e) {
                    this.quad.scale.set(t, e, 1),
                      (this.camera.left = -1 * t / 2),
                      (this.camera.right = t / 2),
                      (this.camera.top = e / 2),
                      (this.camera.bottom = -1 * e / 2),
                      this.camera.updateProjectionMatrix(),
                      (this.canvas.width = t),
                      (this.canvas.height = e);
                  },
                  play: function() {
                    window.addEventListener('keydown', this.onKeyDown);
                  },
                  onCameraActive: function(t) {
                    var e = this.quad.parent;
                    e && e.remove(this.quad),
                      t.detail.cameraEl.getObject3D('camera').add(this.quad);
                  },
                  onKeyDown: function(t) {
                    var e = 83 === t.keyCode && t.ctrlKey && t.altKey;
                    if (this.data && e) {
                      var i = t.shiftKey ? 'equirectangular' : 'perspective';
                      this.capture(i);
                    }
                  },
                  setCapture: function(t) {
                    var e,
                      i,
                      n,
                      o = this.el;
                    return (
                      'perspective' === t
                        ? ((this.quad.visible = !1),
                          (i = o.camera),
                          (e = {
                            width: this.data.width,
                            height: this.data.height
                          }))
                        : ((i = this.camera).position.copy(
                            o.camera.getWorldPosition()
                          ),
                          i.rotation.copy(o.camera.getWorldRotation()),
                          (n = new r.CubeCamera(
                            o.camera.near,
                            o.camera.far,
                            Math.min(this.cubeMapSize, 2048)
                          )).position.copy(o.camera.getWorldPosition()),
                          n.rotation.copy(o.camera.getWorldRotation()),
                          n.updateCubeMap(o.renderer, o.object3D),
                          (this.quad.material.uniforms.map.value =
                            n.renderTarget.texture),
                          (e = {
                            width: this.data.width,
                            height: this.data.height
                          }),
                          (this.quad.visible = !0)),
                      { camera: i, size: e, projection: t }
                    );
                  },
                  capture: function(t) {
                    var e = this.setCapture(t);
                    this.renderCapture(e.camera, e.size, e.projection),
                      this.saveCapture();
                  },
                  getCanvas: function(t) {
                    var e = this.setCapture(t);
                    return (
                      this.renderCapture(e.camera, e.size, e.projection),
                      this.canvas
                    );
                  },
                  renderCapture: function(t, e, i) {
                    var n,
                      r,
                      o,
                      s = this.el.renderer.autoClear,
                      a = this.el,
                      c = this.el.renderer;
                    (r = this.getRenderTarget(e.width, e.height)),
                      (o = new Uint8Array(4 * e.width * e.height)),
                      this.resize(e.width, e.height),
                      (c.autoClear = !0),
                      c.render(a.object3D, t, r, !0),
                      (c.autoClear = s),
                      c.readRenderTargetPixels(r, 0, 0, e.width, e.height, o),
                      'perspective' === i &&
                        (o = this.flipPixelsVertically(o, e.width, e.height)),
                      (n = new ImageData(
                        new Uint8ClampedArray(o),
                        e.width,
                        e.height
                      )),
                      (this.quad.visible = !1),
                      this.ctx.putImageData(n, 0, 0);
                  },
                  flipPixelsVertically: function(t, e, i) {
                    for (var n = t.slice(0), r = 0; r < e; ++r)
                      for (var o = 0; o < i; ++o)
                        (n[4 * r + o * e * 4] = t[4 * r + (i - o) * e * 4]),
                          (n[4 * r + 1 + o * e * 4] =
                            t[4 * r + 1 + (i - o) * e * 4]),
                          (n[4 * r + 2 + o * e * 4] =
                            t[4 * r + 2 + (i - o) * e * 4]),
                          (n[4 * r + 3 + o * e * 4] =
                            t[4 * r + 3 + (i - o) * e * 4]);
                    return n;
                  },
                  saveCapture: function() {
                    this.canvas.toBlob(function(t) {
                      var e =
                          'screenshot-' +
                          document.title.toLowerCase() +
                          '-' +
                          Date.now() +
                          '.png',
                        i = document.createElement('a'),
                        n = URL.createObjectURL(t);
                      (i.href = n),
                        i.setAttribute('download', e),
                        (i.innerHTML = 'downloading...'),
                        (i.style.display = 'none'),
                        document.body.appendChild(i),
                        setTimeout(function() {
                          i.click(), document.body.removeChild(i);
                        }, 1);
                    }, 'image/png');
                  }
                });
              },
              { '../../core/component': 125, '../../lib/three': 173 }
            ],
            105: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent,
                  r = t('../../../vendor/rStats'),
                  o = t('../../utils');
                t('../../../vendor/rStats.extras'), t('../../lib/rStatsAframe');
                var s = window.aframeStats,
                  a = o.bind,
                  c = window.threeStats;
                e.exports.Component = n('stats', {
                  schema: { default: !0 },
                  init: function() {
                    var t,
                      e,
                      i,
                      n,
                      l = this.el;
                    'false' !== o.getUrlParameter('stats') &&
                      ((this.stats = ((e = new c((t = l).renderer)),
                      (i = new s(t)),
                      (n = t.isMobile ? [] : [e, i]),
                      new r({
                        css: [],
                        values: { fps: { caption: 'fps', below: 30 } },
                        groups: [
                          { caption: 'Framerate', values: ['fps', 'raf'] }
                        ],
                        plugins: n
                      }))),
                      (this.statsEl = document.querySelector('.rs-base')),
                      (this.hideBound = a(this.hide, this)),
                      (this.showBound = a(this.show, this)),
                      l.addEventListener('enter-vr', this.hideBound),
                      l.addEventListener('exit-vr', this.showBound));
                  },
                  update: function() {
                    if (this.stats)
                      return this.data ? this.show() : this.hide();
                  },
                  remove: function() {
                    this.el.removeEventListener('enter-vr', this.hideBound),
                      this.el.removeEventListener('exit-vr', this.showBound),
                      this.statsEl &&
                        this.statsEl.parentNode.removeChild(this.statsEl);
                  },
                  tick: function() {
                    var t = this.stats;
                    t && (t('rAF').tick(), t('FPS').frame(), t().update());
                  },
                  hide: function() {
                    this.statsEl.classList.add('a-hidden');
                  },
                  show: function() {
                    this.statsEl.classList.remove('a-hidden');
                  }
                });
              },
              {
                '../../../vendor/rStats': 203,
                '../../../vendor/rStats.extras': 202,
                '../../core/component': 125,
                '../../lib/rStatsAframe': 172,
                '../../utils': 195
              }
            ],
            106: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent,
                  r = t('../../constants/'),
                  o = t('../../utils/'),
                  s = o.bind,
                  a = 'a-enter-vr',
                  c = 'a-enter-vr-button',
                  l = 'a-hidden',
                  u = 'a-orientation-modal';
                e.exports.Component = n('vr-mode-ui', {
                  dependencies: ['canvas'],
                  schema: { enabled: { default: !0 } },
                  init: function() {
                    var t = this,
                      e = this.el;
                    'false' !== o.getUrlParameter('ui') &&
                      ((this.enterVR = s(e.enterVR, e)),
                      (this.exitVR = s(e.exitVR, e)),
                      (this.insideLoader = !1),
                      (this.enterVREl = null),
                      (this.orientationModalEl = null),
                      e.addEventListener(
                        'enter-vr',
                        s(this.updateEnterVRInterface, this)
                      ),
                      e.addEventListener(
                        'exit-vr',
                        s(this.updateEnterVRInterface, this)
                      ),
                      window.addEventListener('message', function(e) {
                        'loaderReady' === e.data.type &&
                          ((t.insideLoader = !0), t.remove());
                      }),
                      window.addEventListener(
                        'orientationchange',
                        s(this.toggleOrientationModalIfNeeded, this)
                      ));
                  },
                  update: function() {
                    var t,
                      e,
                      i,
                      n = this.el;
                    if (
                      !this.data.enabled ||
                      this.insideLoader ||
                      'false' === o.getUrlParameter('ui')
                    )
                      return this.remove();
                    this.enterVREl ||
                      this.orientationModalEl ||
                      ((this.enterVREl = ((t = this.enterVR),
                      (i = document.createElement('div')).classList.add(a),
                      i.setAttribute(r.AFRAME_INJECTED, ''),
                      ((e = document.createElement('button')).className = c),
                      e.setAttribute(
                        'title',
                        'Enter VR mode with a headset or fullscreen mode on a desktop. Visit https://webvr.rocks or https://webvr.info for more information.'
                      ),
                      e.setAttribute(r.AFRAME_INJECTED, ''),
                      i.appendChild(e),
                      e.addEventListener('click', function(e) {
                        t();
                      }),
                      i)),
                      n.appendChild(this.enterVREl),
                      (this.orientationModalEl = (function(t) {
                        var e = document.createElement('div');
                        (e.className = u),
                          e.classList.add(l),
                          e.setAttribute(r.AFRAME_INJECTED, '');
                        var i = document.createElement('button');
                        return (
                          i.setAttribute(r.AFRAME_INJECTED, ''),
                          (i.innerHTML = 'Exit VR'),
                          i.addEventListener('click', t),
                          e.appendChild(i),
                          e
                        );
                      })(this.exitVR)),
                      n.appendChild(this.orientationModalEl),
                      this.updateEnterVRInterface());
                  },
                  remove: function() {
                    [this.enterVREl, this.orientationModalEl].forEach(function(
                      t
                    ) {
                      t && t.parentNode.removeChild(t);
                    });
                  },
                  updateEnterVRInterface: function() {
                    this.toggleEnterVRButtonIfNeeded(),
                      this.toggleOrientationModalIfNeeded();
                  },
                  toggleEnterVRButtonIfNeeded: function() {
                    var t = this.el;
                    this.enterVREl &&
                      (t.is('vr-mode')
                        ? this.enterVREl.classList.add(l)
                        : this.enterVREl.classList.remove(l));
                  },
                  toggleOrientationModalIfNeeded: function() {
                    var t = this.el,
                      e = this.orientationModalEl;
                    e &&
                      t.isMobile &&
                      (!o.device.isLandscape() && t.is('vr-mode')
                        ? e.classList.remove(l)
                        : e.classList.add(l));
                  }
                });
              },
              {
                '../../constants/': 116,
                '../../core/component': 125,
                '../../utils/': 195
              }
            ],
            107: [
              function(t, e, i) {
                var n = t('../core/component'),
                  r = t('../lib/three'),
                  o = t('../utils/bind'),
                  s = n.registerComponent;
                e.exports.Component = s('shadow', {
                  schema: { cast: { default: !0 }, receive: { default: !0 } },
                  init: function() {
                    (this.onMeshChanged = o(this.update, this)),
                      this.el.addEventListener(
                        'object3dset',
                        this.onMeshChanged
                      ),
                      this.system.setShadowMapEnabled(!0);
                  },
                  update: function() {
                    var t = this.data;
                    this.updateDescendants(t.cast, t.receive);
                  },
                  remove: function() {
                    this.el.removeEventListener(
                      'object3dset',
                      this.onMeshChanged
                    ),
                      this.updateDescendants(!1, !1);
                  },
                  updateDescendants: function(t, e) {
                    var i = this.el.sceneEl;
                    this.el.object3D.traverse(function(n) {
                      if (
                        n instanceof r.Mesh &&
                        ((n.castShadow = t),
                        (n.receiveShadow = e),
                        i.hasLoaded && n.material)
                      )
                        for (
                          var o = n.material.materials || [n.material], s = 0;
                          s < o.length;
                          s++
                        )
                          o[s].needsUpdate = !0;
                    });
                  }
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/bind': 189
              }
            ],
            108: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../utils/debug'),
                  o = t('../utils/bind'),
                  s = t('../lib/three'),
                  a = r('components:sound:warn');
                e.exports.Component = n('sound', {
                  schema: {
                    autoplay: { default: !1 },
                    distanceModel: {
                      default: 'inverse',
                      oneOf: ['linear', 'inverse', 'exponential']
                    },
                    loop: { default: !1 },
                    maxDistance: { default: 1e4 },
                    on: { default: '' },
                    poolSize: { default: 1 },
                    positional: { default: !0 },
                    refDistance: { default: 1 },
                    rolloffFactor: { default: 1 },
                    src: { type: 'audio' },
                    volume: { default: 1 }
                  },
                  multiple: !0,
                  init: function() {
                    (this.listener = null),
                      (this.audioLoader = new s.AudioLoader()),
                      (this.pool = new s.Group()),
                      (this.loaded = !1),
                      (this.mustPlay = !1),
                      (this.playSound = o(this.playSound, this));
                  },
                  update: function(t) {
                    var e = this.data,
                      i = e.src !== t.src;
                    if (i) {
                      if (!e.src)
                        return void a(
                          'Audio source was not specified with `src`'
                        );
                      this.setupSound();
                    }
                    if (
                      (this.pool.children.forEach(function(t) {
                        e.positional &&
                          (t.setDistanceModel(e.distanceModel),
                          t.setMaxDistance(e.maxDistance),
                          t.setRefDistance(e.refDistance),
                          t.setRolloffFactor(e.rolloffFactor)),
                          t.setLoop(e.loop),
                          t.setVolume(e.volume),
                          (t.isPaused = !1);
                      }),
                      e.on !== t.on && this.updateEventListener(t.on),
                      i)
                    ) {
                      var n = this;
                      (this.loaded = !1),
                        this.audioLoader.load(e.src, function(t) {
                          n.pool.children.forEach(function(e) {
                            e.setBuffer(t);
                          }),
                            (n.loaded = !0),
                            s.Cache.remove(e.src),
                            (n.data.autoplay || n.mustPlay) && n.playSound(),
                            n.el.emit('sound-loaded');
                        });
                    }
                  },
                  pause: function() {
                    this.stopSound(), this.removeEventListener();
                  },
                  play: function() {
                    this.data.autoplay && this.playSound(),
                      this.updateEventListener();
                  },
                  remove: function() {
                    this.removeEventListener(),
                      this.el.removeObject3D(this.attrName);
                    try {
                      this.pool.children.forEach(function(t) {
                        t.disconnect();
                      });
                    } catch (t) {
                      a('Audio source not properly disconnected');
                    }
                  },
                  updateEventListener: function(t) {
                    var e = this.el;
                    t && e.removeEventListener(t, this.playSound),
                      e.addEventListener(this.data.on, this.playSound);
                  },
                  removeEventListener: function() {
                    this.el.removeEventListener(this.data.on, this.playSound);
                  },
                  setupSound: function() {
                    var t = this.el,
                      e = t.sceneEl;
                    this.pool.children.length > 0 &&
                      (this.stopSound(), t.removeObject3D('sound'));
                    var i = (this.listener =
                      e.audioListener || new s.AudioListener());
                    (e.audioListener = i),
                      e.camera && e.camera.add(i),
                      e.addEventListener('camera-set-active', function(t) {
                        t.detail.cameraEl.getObject3D('camera').add(i);
                      }),
                      (this.pool = new s.Group());
                    for (var n = 0; n < this.data.poolSize; n++) {
                      var r = this.data.positional
                        ? new s.PositionalAudio(i)
                        : new s.Audio(i);
                      this.pool.add(r);
                    }
                    t.setObject3D(this.attrName, this.pool),
                      this.pool.children.forEach(function(e) {
                        e.onEnded = function() {
                          (e.isPlaying = !1),
                            t.emit('sound-ended', { index: n });
                        };
                      });
                  },
                  pauseSound: function() {
                    (this.isPlaying = !1),
                      this.pool.children.forEach(function(t) {
                        t.source &&
                          t.source.buffer &&
                          t.isPlaying &&
                          !t.isPaused &&
                          ((t.isPaused = !0), t.pause());
                      });
                  },
                  playSound: function() {
                    if (!this.loaded)
                      return (
                        a(
                          'Sound not loaded yet. It will be played once it finished loading'
                        ),
                        void (this.mustPlay = !0)
                      );
                    var t = !1;
                    (this.isPlaying = !0),
                      this.pool.children.forEach(function(e) {
                        if (!e.isPlaying && e.buffer && !t)
                          return e.play(), (e.isPaused = !1), void (t = !0);
                      }),
                      t
                        ? (this.mustPlay = !1)
                        : a(
                            'All the sounds are playing. If you need to play more sounds simultaneously consider increasing the size of pool with the `poolSize` attribute.',
                            this.el
                          );
                  },
                  stopSound: function() {
                    (this.isPlaying = !1),
                      this.pool.children.forEach(function(t) {
                        t.source && t.source.buffer && t.stop();
                      });
                  }
                });
              },
              {
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/bind': 189,
                '../utils/debug': 191
              }
            ],
            109: [
              function(t, e, i) {
                var n = t('three-bmfont-text'),
                  r = t('load-bmfont'),
                  o = t('path'),
                  s = t('../core/component').registerComponent,
                  a = t('../core/shader'),
                  c = t('../lib/three'),
                  l = t('../utils/'),
                  u = l.debug('components:text:error'),
                  h = a.shaders,
                  d = l.debug('components:text:warn'),
                  p = 'https://cdn.aframe.io/fonts/',
                  f = {
                    aileronsemibold: p + 'Aileron-Semibold.fnt',
                    dejavu: p + 'DejaVu-sdf.fnt',
                    exo2bold: p + 'Exo2Bold.fnt',
                    exo2semibold: p + 'Exo2SemiBold.fnt',
                    kelsonsans: p + 'KelsonSans.fnt',
                    monoid: p + 'Monoid.fnt',
                    mozillavr: p + 'mozillavr.fnt',
                    roboto: p + 'Roboto-msdf.json',
                    sourcecodepro: p + 'SourceCodePro.fnt'
                  },
                  m = ['roboto'];
                e.exports.FONTS = f;
                var g = new function() {
                    var t = (this.cache = {});
                    this.get = function(e, i) {
                      return e in t ? t[e] : ((t[e] = i()), t[e]);
                    };
                  }(),
                  v = {};
                function y(t) {
                  return (
                    void 0 !== (t = l.clone(t)).lineHeight &&
                      ((t.lineHeight = parseFloat(t.lineHeight)),
                      isFinite(t.lineHeight) || (t.lineHeight = void 0)),
                    void 0 !== t.width &&
                      ((t.width = parseFloat(t.width)),
                      isFinite(t.width) || (t.width = void 0)),
                    t
                  );
                }
                function w(t, e) {
                  t.side = e.side;
                }
                function M(t, e, i) {
                  return t || (0.5 + e) * i;
                }
                e.exports.Component = s('text', {
                  multiple: !0,
                  schema: {
                    align: {
                      type: 'string',
                      default: 'left',
                      oneOf: ['left', 'right', 'center']
                    },
                    alphaTest: { default: 0.5 },
                    anchor: {
                      default: 'center',
                      oneOf: ['left', 'right', 'center', 'align']
                    },
                    baseline: {
                      default: 'center',
                      oneOf: ['top', 'center', 'bottom']
                    },
                    color: { type: 'color', default: '#FFF' },
                    font: { type: 'string', default: 'roboto' },
                    fontImage: { type: 'string' },
                    height: { type: 'number' },
                    letterSpacing: { type: 'number', default: 0 },
                    lineHeight: { type: 'number' },
                    opacity: { type: 'number', default: 1 },
                    shader: { default: 'sdf', oneOf: h },
                    side: {
                      default: 'front',
                      oneOf: ['front', 'back', 'double']
                    },
                    tabSize: { default: 4 },
                    transparent: { default: !0 },
                    value: { type: 'string' },
                    whiteSpace: {
                      default: 'normal',
                      oneOf: ['normal', 'pre', 'nowrap']
                    },
                    width: { type: 'number' },
                    wrapCount: { type: 'number', default: 40 },
                    wrapPixels: { type: 'number' },
                    yOffset: { type: 'number', default: 0 },
                    zOffset: { type: 'number', default: 0.001 }
                  },
                  init: function() {
                    (this.texture = new c.Texture()),
                      (this.texture.anisotropy = 16),
                      (this.geometry = n()),
                      this.createOrUpdateMaterial(),
                      (this.mesh = new c.Mesh(this.geometry, this.material)),
                      this.el.setObject3D(this.attrName, this.mesh);
                  },
                  update: function(t) {
                    var e = y(this.data),
                      i = this.currentFont;
                    this.createOrUpdateMaterial(),
                      t.font === e.font
                        ? i &&
                          (this.updateGeometry(this.geometry, e, i),
                          this.updateLayout(e))
                        : this.updateFont();
                  },
                  remove: function() {
                    this.geometry.dispose(),
                      (this.geometry = null),
                      this.el.removeObject3D(this.attrName),
                      this.material.dispose(),
                      (this.material = null),
                      this.texture.dispose(),
                      (this.texture = null),
                      this.shaderObject && delete this.shaderObject;
                  },
                  createOrUpdateMaterial: function() {
                    var t,
                      e,
                      i,
                      n,
                      r,
                      o,
                      s,
                      a,
                      l = this.data,
                      u = this.material;
                    if (
                      ((n = l.shader),
                      -1 !== m.indexOf(l.font) || l.font.indexOf('-msdf.') >= 0
                        ? (n = 'msdf')
                        : l.font in f &&
                          -1 === m.indexOf(l.font) &&
                          (n = 'sdf'),
                      (t = (this.shaderObject && this.shaderObject.name) !== n),
                      (i = {
                        alphaTest: l.alphaTest,
                        color: l.color,
                        map: this.texture,
                        opacity: l.opacity,
                        side: (function(t) {
                          switch (t) {
                            case 'back':
                              return c.BackSide;
                            case 'double':
                              return c.DoubleSide;
                            default:
                              return c.FrontSide;
                          }
                        })(l.side),
                        transparent: l.transparent
                      }),
                      !t)
                    )
                      return (
                        this.shaderObject.update(i),
                        (u.transparent = i.transparent),
                        void w(u, i)
                      );
                    (r = this.el),
                      (o = i),
                      ((a = new h[n].Shader()).el = r),
                      a.init(o),
                      a.update(o),
                      ((s = a.material).transparent = o.transparent),
                      (e = { material: s, shader: a }),
                      (this.material = e.material),
                      (this.shaderObject = e.shader),
                      w(this.material, i),
                      this.mesh && (this.mesh.material = this.material);
                  },
                  updateFont: function() {
                    var t,
                      e = this.data,
                      i = this.el,
                      n = this.geometry,
                      s = this;
                    e.font || d('No font specified. Using the default font.'),
                      (this.mesh.visible = !1),
                      (t = this.lookupFont(e.font || 'roboto') || e.font),
                      g
                        .get(t, function() {
                          return (
                            (i = t),
                            (n = e.yOffset),
                            new Promise(function(t, e) {
                              r(i, function(r, o) {
                                if (r)
                                  return u('Error loading font', i), void e(r);
                                i.indexOf('/Roboto-msdf.json') >= 0 && (n = 30),
                                  n &&
                                    o.chars.map(function(t) {
                                      t.yoffset += n;
                                    }),
                                  t(o);
                              });
                            })
                          );
                          var i, n;
                        })
                        .then(function(r) {
                          var a, l, h, d, p, f;
                          if (1 !== r.pages.length)
                            throw new Error(
                              'Currently only single-page bitmap fonts are supported.'
                            );
                          v[t] ||
                            (r.widthFactor = v[r] = ((d = 0),
                            (p = 0),
                            (f = 0),
                            (h = r).chars.map(function(t) {
                              (d += t.xadvance),
                                t.id >= 48 &&
                                  t.id <= 57 &&
                                  (f++, (p += t.xadvance));
                            }),
                            f ? p / f : d / h.chars.length)),
                            (a = y(e)),
                            s.updateGeometry(n, s.data, r),
                            (s.currentFont = r),
                            s.updateLayout(a),
                            (l =
                              e.fontImage ||
                              t.replace(/(\.fnt)|(\.json)/, '.png') ||
                              o.dirname(e.font) + '/' + r.pages[0]),
                            g
                              .get(l, function() {
                                return (
                                  (t = l),
                                  new Promise(function(e, i) {
                                    new c.ImageLoader().load(
                                      t,
                                      function(t) {
                                        e(t);
                                      },
                                      void 0,
                                      function() {
                                        u('Error loading font image', t),
                                          i(null);
                                      }
                                    );
                                  })
                                );
                                var t;
                              })
                              .then(function(t) {
                                (s.mesh.visible = !0),
                                  (s.texture.image = t),
                                  (s.texture.needsUpdate = !0),
                                  i.emit('textfontset', {
                                    font: e.font,
                                    fontObj: r
                                  });
                              })
                              .catch(function(t) {
                                throw (u(t), t);
                              });
                        })
                        .catch(function(t) {
                          throw (u(t), t);
                        });
                  },
                  updateLayout: function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o,
                      s,
                      a,
                      c = this.el,
                      l = this.geometry,
                      u = c.getAttribute('geometry'),
                      h = l.layout,
                      d = this.mesh;
                    if (
                      ((u = c.getAttribute('geometry')),
                      (n =
                        (r =
                          (o = t.width || (u && u.width) || 1) /
                          M(
                            t.wrapPixels,
                            t.wrapCount,
                            this.currentFont.widthFactor
                          )) *
                        (h.height + h.descender)),
                      u &&
                        (u.width || c.setAttribute('geometry', 'width', o),
                        u.height || c.setAttribute('geometry', 'height', n)),
                      'left' ===
                        (e = 'align' === t.anchor ? t.align : t.anchor))
                    )
                      s = 0;
                    else if ('right' === e) s = -1 * h.width;
                    else {
                      if ('center' !== e)
                        throw new TypeError(
                          'Invalid text.anchor property value',
                          e
                        );
                      s = -1 * h.width / 2;
                    }
                    if ('bottom' === (i = t.baseline)) a = 0;
                    else if ('top' === i) a = -1 * h.height + h.ascender;
                    else {
                      if ('center' !== i)
                        throw new TypeError(
                          'Invalid text.baseline property value',
                          i
                        );
                      a = -1 * h.height / 2;
                    }
                    (d.position.x = s * r),
                      (d.position.y = a * r),
                      (d.position.z = t.zOffset),
                      d.scale.set(r, -1 * r, r),
                      this.geometry.computeBoundingSphere();
                  },
                  lookupFont: function(t) {
                    return f[t];
                  },
                  updateGeometry: function(t, e, i) {
                    t.update(
                      l.extend({}, e, {
                        font: i,
                        width: M(e.wrapPixels, e.wrapCount, i.widthFactor),
                        text: e.value
                          .toString()
                          .replace(/\\n/g, '\n')
                          .replace(/\\t/g, '\t'),
                        lineHeight: e.lineHeight || i.common.lineHeight
                      })
                    );
                  }
                });
              },
              {
                '../core/component': 125,
                '../core/shader': 134,
                '../lib/three': 173,
                '../utils/': 195,
                'load-bmfont': 24,
                path: 32,
                'three-bmfont-text': 37
              }
            ],
            110: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../utils/tracked-controls'),
                  o = t('../lib/three'),
                  s = t('../constants').DEFAULT_CAMERA_HEIGHT,
                  a = t('../constants').DEFAULT_HANDEDNESS,
                  c = 0.175,
                  l = -0.3,
                  u = -0.03,
                  h = 0,
                  d = 0,
                  p = -0.175;
                e.exports.Component = n('tracked-controls', {
                  schema: {
                    controller: { default: 0 },
                    id: { type: 'string', default: '' },
                    hand: { type: 'string', default: '' },
                    idPrefix: { type: 'string', default: '' },
                    rotationOffset: { default: 0 },
                    armModel: { default: !0 },
                    headElement: { type: 'selector' }
                  },
                  init: function() {
                    (this.axis = [0, 0, 0]),
                      (this.buttonStates = {}),
                      (this.targetControllerNumber = this.data.controller),
                      (this.dolly = new o.Object3D()),
                      (this.controllerEuler = new o.Euler()),
                      (this.controllerEuler.order = 'YXZ'),
                      (this.controllerPosition = new o.Vector3()),
                      (this.controllerQuaternion = new o.Quaternion()),
                      (this.deltaControllerPosition = new o.Vector3()),
                      (this.position = new o.Vector3()),
                      (this.rotation = {}),
                      (this.standingMatrix = new o.Matrix4()),
                      (this.previousControllerPosition = new o.Vector3()),
                      this.updateGamepad();
                  },
                  tick: function(t, e) {
                    var i = this.el.getObject3D('mesh');
                    i && i.update && i.update(e / 1e3),
                      this.updateGamepad(),
                      this.updatePose(),
                      this.updateButtons();
                  },
                  defaultUserHeight: function() {
                    return s;
                  },
                  getHeadElement: function() {
                    return this.data.headElement || this.el.sceneEl.camera.el;
                  },
                  updateGamepad: function() {
                    var t = this.data,
                      e = r.findMatchingController(
                        this.system.controllers,
                        t.id,
                        t.idPrefix,
                        t.hand,
                        t.controller
                      );
                    this.controller = e;
                  },
                  applyArmModel: function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o,
                      s,
                      f = this.controller,
                      m = this.controllerEuler,
                      g = this.controllerQuaternion,
                      v = this.deltaControllerPosition;
                    (r = (n = this.getHeadElement()).object3D),
                      (s =
                        ((i = n.components.camera) ? i.data.userHeight : 0) ||
                        this.defaultUserHeight()),
                      (o = f.pose),
                      (e = (f ? f.hand : void 0) || a),
                      t.copy(r.position),
                      v.set(
                        c * ('left' === e ? -1 : 'right' === e ? 1 : 0),
                        l,
                        u
                      ),
                      v.multiplyScalar(s),
                      v.applyAxisAngle(r.up, r.rotation.y),
                      t.add(v),
                      v.set(h, d, p),
                      v.multiplyScalar(s),
                      o.orientation
                        ? g.fromArray(o.orientation)
                        : g.copy(r.quaternion),
                      m.setFromQuaternion(g),
                      m.set(m.x, m.y, 0),
                      v.applyEuler(m),
                      t.add(v);
                  },
                  updatePose: function() {
                    var t,
                      e,
                      i = this.controller,
                      n = this.controllerEuler,
                      r = this.controllerPosition,
                      s = this.previousControllerPosition,
                      a = this.dolly,
                      c = this.el,
                      l = this.standingMatrix,
                      u = this.system.vrDisplay,
                      h = this.getHeadElement().components.camera,
                      d =
                        (h ? h.data.userHeight : 0) || this.defaultUserHeight();
                    i &&
                      (null !== (e = i.pose).orientation &&
                        a.quaternion.fromArray(e.orientation),
                      null !== e.position
                        ? a.position.fromArray(e.position)
                        : this.data.armModel && this.applyArmModel(a.position),
                      null != e.position && u
                        ? u.stageParameters
                          ? (l.fromArray(
                              u.stageParameters.sittingToStandingTransform
                            ),
                            a.matrix.compose(a.position, a.quaternion, a.scale),
                            a.matrix.multiplyMatrices(l, a.matrix))
                          : ((a.position.y += d),
                            a.matrix.compose(a.position, a.quaternion, a.scale))
                        : a.matrix.compose(a.position, a.quaternion, a.scale),
                      n.setFromRotationMatrix(a.matrix),
                      r.setFromMatrixPosition(a.matrix),
                      (this.rotation.x = o.Math.radToDeg(n.x)),
                      (this.rotation.y = o.Math.radToDeg(n.y)),
                      (this.rotation.z =
                        o.Math.radToDeg(n.z) + this.data.rotationOffset),
                      c.setAttribute('rotation', this.rotation),
                      (t = c.getAttribute('position')),
                      this.position
                        .copy(t)
                        .sub(s)
                        .add(r),
                      c.setAttribute('position', this.position),
                      s.copy(r));
                  },
                  updateButtons: function() {
                    var t,
                      e,
                      i = this.controller;
                    if (i) {
                      for (e = 0; e < i.buttons.length; ++e)
                        this.buttonStates[e] ||
                          (this.buttonStates[e] = {
                            pressed: !1,
                            touched: !1,
                            value: 0
                          }),
                          (t = i.buttons[e]),
                          this.handleButton(e, t);
                      this.handleAxes();
                    }
                  },
                  handleButton: function(t, e) {
                    return (
                      !!(
                        this.handlePress(t, e) ||
                        this.handleTouch(t, e) ||
                        this.handleValue(t, e)
                      ) &&
                      (this.el.emit('buttonchanged', { id: t, state: e }), !0)
                    );
                  },
                  handleAxes: function() {
                    var t,
                      e = !1,
                      i = this.controller.axes,
                      n = this.axis,
                      r = [];
                    for (t = 0; t < i.length; ++t)
                      r.push(n[t] !== i[t]), r[t] && (e = !0);
                    return (
                      !!e &&
                      ((this.axis = i.slice()),
                      this.el.emit('axismove', { axis: this.axis, changed: r }),
                      !0)
                    );
                  },
                  handlePress: function(t, e) {
                    var i,
                      n = this.buttonStates[t];
                    return (
                      e.pressed !== n.pressed &&
                      ((i = e.pressed ? 'down' : 'up'),
                      this.el.emit('button' + i, { id: t, state: e }),
                      (n.pressed = e.pressed),
                      !0)
                    );
                  },
                  handleTouch: function(t, e) {
                    var i,
                      n = this.buttonStates[t];
                    return (
                      e.touched !== n.touched &&
                      ((i = e.touched ? 'start' : 'end'),
                      this.el.emit('touch' + i, { id: t, state: e }, !0, {
                        touches: []
                      }),
                      (n.touched = e.touched),
                      !0)
                    );
                  },
                  handleValue: function(t, e) {
                    var i = this.buttonStates[t];
                    return e.value !== i.value && ((i.value = e.value), !0);
                  }
                });
              },
              {
                '../constants': 116,
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/tracked-controls': 199
              }
            ],
            111: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent;
                e.exports.Component = n('visible', {
                  schema: { default: !0 },
                  update: function() {
                    this.el.object3D.visible = this.data;
                  }
                });
              },
              { '../core/component': 125 }
            ],
            112: [
              function(t, e, i) {
                var n = t('../core/component').registerComponent,
                  r = t('../utils/'),
                  o = r.bind,
                  s = r.trackedControls.checkControllerPresentAndSetup,
                  a = r.trackedControls.emitIfAxesChanged;
                e.exports.Component = n('vive-controls', {
                  schema: {
                    hand: { default: 'left' },
                    buttonColor: { type: 'color', default: '#FAFAFA' },
                    buttonHighlightColor: { type: 'color', default: '#22D1EE' },
                    model: { default: !0 },
                    rotationOffset: { default: 0 }
                  },
                  mapping: {
                    axes: { trackpad: [0, 1] },
                    buttons: ['trackpad', 'trigger', 'grip', 'menu', 'system']
                  },
                  init: function() {
                    var t = this;
                    (this.animationActive = 'pointing'),
                      (this.checkControllerPresentAndSetup = s),
                      (this.controllerPresent = !1),
                      (this.emitIfAxesChanged = a),
                      (this.lastControllerCheck = 0),
                      (this.onButtonChanged = o(this.onButtonChanged, this)),
                      (this.onButtonDown = function(e) {
                        t.onButtonEvent(e.detail.id, 'down');
                      }),
                      (this.onButtonUp = function(e) {
                        t.onButtonEvent(e.detail.id, 'up');
                      }),
                      (this.onButtonTouchEnd = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchend');
                      }),
                      (this.onButtonTouchStart = function(e) {
                        t.onButtonEvent(e.detail.id, 'touchstart');
                      }),
                      (this.onAxisMoved = o(this.onAxisMoved, this)),
                      (this.previousButtonValues = {}),
                      this.bindMethods();
                  },
                  play: function() {
                    this.checkIfControllerPresent(),
                      this.addControllersUpdateListener();
                  },
                  pause: function() {
                    this.removeEventListeners(),
                      this.removeControllersUpdateListener();
                  },
                  bindMethods: function() {
                    (this.onModelLoaded = o(this.onModelLoaded, this)),
                      (this.onControllersUpdate = o(
                        this.onControllersUpdate,
                        this
                      )),
                      (this.checkIfControllerPresent = o(
                        this.checkIfControllerPresent,
                        this
                      )),
                      (this.removeControllersUpdateListener = o(
                        this.removeControllersUpdateListener,
                        this
                      )),
                      (this.onAxisMoved = o(this.onAxisMoved, this));
                  },
                  addEventListeners: function() {
                    var t = this.el;
                    t.addEventListener('buttonchanged', this.onButtonChanged),
                      t.addEventListener('buttondown', this.onButtonDown),
                      t.addEventListener('buttonup', this.onButtonUp),
                      t.addEventListener('touchend', this.onButtonTouchEnd),
                      t.addEventListener('touchstart', this.onButtonTouchStart),
                      t.addEventListener('model-loaded', this.onModelLoaded),
                      t.addEventListener('axismove', this.onAxisMoved),
                      (this.controllerEventsActive = !0);
                  },
                  removeEventListeners: function() {
                    var t = this.el;
                    t.removeEventListener(
                      'buttonchanged',
                      this.onButtonChanged
                    ),
                      t.removeEventListener('buttondown', this.onButtonDown),
                      t.removeEventListener('buttonup', this.onButtonUp),
                      t.removeEventListener('touchend', this.onButtonTouchEnd),
                      t.removeEventListener(
                        'touchstart',
                        this.onButtonTouchStart
                      ),
                      t.removeEventListener('model-loaded', this.onModelLoaded),
                      t.removeEventListener('axismove', this.onAxisMoved),
                      (this.controllerEventsActive = !1);
                  },
                  checkIfControllerPresent: function() {
                    var t = this.data,
                      e = 'right' === t.hand ? 0 : 'left' === t.hand ? 1 : 2;
                    this.checkControllerPresentAndSetup(this, 'OpenVR ', {
                      index: e
                    });
                  },
                  injectTrackedControls: function() {
                    var t = this.el,
                      e = this.data;
                    t.setAttribute('tracked-controls', {
                      idPrefix: 'OpenVR ',
                      controller:
                        'right' === e.hand ? 0 : 'left' === e.hand ? 1 : 2,
                      rotationOffset: e.rotationOffset
                    }),
                      this.data.model &&
                        this.el.setAttribute('obj-model', {
                          obj:
                            'https://cdn.aframe.io/controllers/vive/vr_controller_vive.obj',
                          mtl:
                            'https://cdn.aframe.io/controllers/vive/vr_controller_vive.mtl'
                        });
                  },
                  addControllersUpdateListener: function() {
                    this.el.sceneEl.addEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  removeControllersUpdateListener: function() {
                    this.el.sceneEl.removeEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  onControllersUpdate: function() {
                    this.checkIfControllerPresent();
                  },
                  onButtonChanged: function(t) {
                    var e,
                      i = this.mapping.buttons[t.detail.id],
                      n = this.buttonMeshes;
                    i &&
                      ('trigger' === i &&
                        ((e = t.detail.state.value),
                        n &&
                          n.trigger &&
                          (n.trigger.rotation.x = -e * (Math.PI / 12))),
                      this.el.emit(i + 'changed', t.detail.state));
                  },
                  onModelLoaded: function(t) {
                    var e,
                      i = t.detail.model,
                      n = this;
                    this.data.model &&
                      (((e = this.buttonMeshes = {}).grip = {
                        left: i.getObjectByName('leftgrip'),
                        right: i.getObjectByName('rightgrip')
                      }),
                      (e.menu = i.getObjectByName('menubutton')),
                      (e.system = i.getObjectByName('systembutton')),
                      (e.trackpad = i.getObjectByName('touchpad')),
                      (e.trigger = i.getObjectByName('trigger')),
                      Object.keys(e).forEach(function(t) {
                        n.setButtonColor(t, n.data.buttonColor);
                      }),
                      i.position.set(0, -0.015, 0.04));
                  },
                  onAxisMoved: function(t) {
                    this.emitIfAxesChanged(this, this.mapping.axes, t);
                  },
                  onButtonEvent: function(t, e) {
                    var i,
                      n,
                      r = this.mapping.buttons[t],
                      o = -1 !== e.indexOf('touch');
                    if (Array.isArray(r))
                      for (n = 0; n < r.length; n++) this.el.emit(r[n] + e);
                    else this.el.emit(r + e);
                    if (this.data.model && !o)
                      if (
                        ((i =
                          'up' === e
                            ? this.data.buttonColor
                            : this.data.buttonHighlightColor),
                        Array.isArray(r))
                      )
                        for (n = 0; n < r.length; n++)
                          this.setButtonColor(r[n], i);
                      else this.setButtonColor(r, i);
                  },
                  setButtonColor: function(t, e) {
                    var i = this.buttonMeshes;
                    if (i)
                      return 'grip' === t
                        ? (i.grip.left.material.color.set(e),
                          void i.grip.right.material.color.set(e))
                        : void i[t].material.color.set(e);
                  }
                });
              },
              { '../core/component': 125, '../utils/': 195 }
            ],
            113: [
              function(t, e, i) {
                var n,
                  r,
                  o = t('../constants').keyboardevent.KEYCODE_TO_CODE,
                  s = t('../core/component').registerComponent,
                  a = t('../lib/three'),
                  c = t('../utils/'),
                  l = c.bind,
                  u = c.shouldCaptureKeyEvent,
                  h = [
                    'KeyW',
                    'KeyA',
                    'KeyS',
                    'KeyD',
                    'ArrowUp',
                    'ArrowLeft',
                    'ArrowRight',
                    'ArrowDown'
                  ];
                e.exports.Component = s('wasd-controls', {
                  schema: {
                    acceleration: { default: 65 },
                    adAxis: { default: 'x', oneOf: ['x', 'y', 'z'] },
                    adEnabled: { default: !0 },
                    adInverted: { default: !1 },
                    easing: { default: 20 },
                    enabled: { default: !0 },
                    fly: { default: !1 },
                    wsAxis: { default: 'z', oneOf: ['x', 'y', 'z'] },
                    wsEnabled: { default: !0 },
                    wsInverted: { default: !1 }
                  },
                  init: function() {
                    (this.keys = {}),
                      (this.position = {}),
                      (this.velocity = new a.Vector3()),
                      (this.onBlur = l(this.onBlur, this)),
                      (this.onFocus = l(this.onFocus, this)),
                      (this.onKeyDown = l(this.onKeyDown, this)),
                      (this.onKeyUp = l(this.onKeyUp, this)),
                      (this.onVisibilityChange = l(
                        this.onVisibilityChange,
                        this
                      )),
                      this.attachVisibilityEventListeners();
                  },
                  tick: function(t, e) {
                    var i,
                      n,
                      r = this.data,
                      o = this.el,
                      s = this.position,
                      a = this.velocity;
                    (a[r.adAxis] ||
                      a[r.wsAxis] ||
                      !(function(t) {
                        var e;
                        for (e in t) return !1;
                        return !0;
                      })(this.keys)) &&
                      ((e /= 1e3),
                      this.updateVelocity(e),
                      (a[r.adAxis] || a[r.wsAxis]) &&
                        ((i = o.getAttribute('position')),
                        (n = this.getMovementVector(e)),
                        (s.x = i.x + n.x),
                        (s.y = i.y + n.y),
                        (s.z = i.z + n.z),
                        o.setAttribute('position', s)));
                  },
                  remove: function() {
                    this.removeKeyEventListeners(),
                      this.removeVisibilityEventListeners();
                  },
                  play: function() {
                    this.attachKeyEventListeners();
                  },
                  pause: function() {
                    (this.keys = {}), this.removeKeyEventListeners();
                  },
                  updateVelocity: function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o,
                      s = this.data,
                      a = this.keys,
                      c = this.velocity;
                    if (((i = s.adAxis), (r = s.wsAxis), t > 0.2))
                      return (c[i] = 0), void (c[r] = 0);
                    0 !== c[i] && (c[i] -= c[i] * s.easing * t),
                      0 !== c[r] && (c[r] -= c[r] * s.easing * t),
                      Math.abs(c[i]) < 1e-5 && (c[i] = 0),
                      Math.abs(c[r]) < 1e-5 && (c[r] = 0),
                      s.enabled &&
                        ((e = s.acceleration),
                        s.adEnabled &&
                          ((n = s.adInverted ? -1 : 1),
                          (a.KeyA || a.ArrowLeft) && (c[i] -= n * e * t),
                          (a.KeyD || a.ArrowRight) && (c[i] += n * e * t)),
                        s.wsEnabled &&
                          ((o = s.wsInverted ? -1 : 1),
                          (a.KeyW || a.ArrowUp) && (c[r] -= o * e * t),
                          (a.KeyS || a.ArrowDown) && (c[r] += o * e * t)));
                  },
                  getMovementVector: ((n = new a.Vector3(0, 0, 0)),
                  (r = new a.Euler(0, 0, 0, 'YXZ')),
                  function(t) {
                    var e,
                      i = this.el.getAttribute('rotation'),
                      o = this.velocity;
                    return (
                      n.copy(o),
                      n.multiplyScalar(t),
                      i
                        ? ((e = this.data.fly ? i.x : 0),
                          r.set(a.Math.degToRad(e), a.Math.degToRad(i.y), 0),
                          n.applyEuler(r),
                          n)
                        : n
                    );
                  }),
                  attachVisibilityEventListeners: function() {
                    window.addEventListener('blur', this.onBlur),
                      window.addEventListener('focus', this.onFocus),
                      document.addEventListener(
                        'visibilitychange',
                        this.onVisibilityChange
                      );
                  },
                  removeVisibilityEventListeners: function() {
                    window.removeEventListener('blur', this.onBlur),
                      window.removeEventListener('focus', this.onFocus),
                      document.removeEventListener(
                        'visibilitychange',
                        this.onVisibilityChange
                      );
                  },
                  attachKeyEventListeners: function() {
                    window.addEventListener('keydown', this.onKeyDown),
                      window.addEventListener('keyup', this.onKeyUp);
                  },
                  removeKeyEventListeners: function() {
                    window.removeEventListener('keydown', this.onKeyDown),
                      window.removeEventListener('keyup', this.onKeyUp);
                  },
                  onBlur: function() {
                    this.pause();
                  },
                  onFocus: function() {
                    this.play();
                  },
                  onVisibilityChange: function() {
                    document.hidden ? this.onBlur() : this.onFocus();
                  },
                  onKeyDown: function(t) {
                    var e;
                    u(t) &&
                      ((e = t.code || o[t.keyCode]),
                      -1 !== h.indexOf(e) && (this.keys[e] = !0));
                  },
                  onKeyUp: function(t) {
                    var e;
                    (e = t.code || o[t.keyCode]), delete this.keys[e];
                  }
                });
              },
              {
                '../constants': 116,
                '../core/component': 125,
                '../lib/three': 173,
                '../utils/': 195
              }
            ],
            114: [
              function(t, e, i) {
                var n,
                  r,
                  o,
                  s = t('../utils/bind'),
                  a = t('../core/component').registerComponent,
                  c = t('../utils/tracked-controls'),
                  l = t('../utils/'),
                  u = l.debug('components:windows-motion-controls:debug'),
                  h = l.debug('components:windows-motion-controls:warn'),
                  d = t('../constants').DEFAULT_HANDEDNESS,
                  p = {
                    left: 'left.glb',
                    right: 'right.glb',
                    default: 'universal.glb'
                  },
                  f = 'Spatial Controller (Spatial Interaction Source) ',
                  m = /([0-9a-zA-Z]+-[0-9a-zA-Z]+)$/;
                e.exports.Component = a('windows-motion-controls', {
                  schema: {
                    hand: { default: d },
                    pair: { default: 0 },
                    model: { default: !0 },
                    hideDisconnected: { default: !0 }
                  },
                  mapping: {
                    axes: { thumbstick: [0, 1], trackpad: [2, 3] },
                    buttons: [
                      'thumbstick',
                      'trigger',
                      'grip',
                      'menu',
                      'trackpad'
                    ],
                    axisMeshNames: [
                      'THUMBSTICK_X',
                      'THUMBSTICK_Y',
                      'TOUCHPAD_TOUCH_X',
                      'TOUCHPAD_TOUCH_Y'
                    ],
                    buttonMeshNames: {
                      trigger: 'SELECT',
                      menu: 'MENU',
                      grip: 'GRASP',
                      thumbstick: 'THUMBSTICK_PRESS',
                      trackpad: 'TOUCHPAD_PRESS'
                    },
                    pointingPoseMeshName: 'POINTING_POSE'
                  },
                  bindMethods: function() {
                    (this.onModelError = s(this.onModelError, this)),
                      (this.onModelLoaded = s(this.onModelLoaded, this)),
                      (this.onControllersUpdate = s(
                        this.onControllersUpdate,
                        this
                      )),
                      (this.checkIfControllerPresent = s(
                        this.checkIfControllerPresent,
                        this
                      )),
                      (this.onAxisMoved = s(this.onAxisMoved, this));
                  },
                  init: function() {
                    var t = this,
                      e = this.el;
                    (this.onButtonChanged = s(this.onButtonChanged, this)),
                      (this.onButtonDown = function(e) {
                        t.onButtonEvent(e, 'down');
                      }),
                      (this.onButtonUp = function(e) {
                        t.onButtonEvent(e, 'up');
                      }),
                      (this.onButtonTouchStart = function(e) {
                        t.onButtonEvent(e, 'touchstart');
                      }),
                      (this.onButtonTouchEnd = function(e) {
                        t.onButtonEvent(e, 'touchend');
                      }),
                      (this.onControllerConnected = function() {
                        t.setModelVisibility(!0);
                      }),
                      (this.onControllerDisconnected = function() {
                        t.setModelVisibility(!1);
                      }),
                      (this.controllerPresent = !1),
                      (this.lastControllerCheck = 0),
                      (this.previousButtonValues = {}),
                      this.bindMethods(),
                      (this.loadedMeshInfo = {
                        buttonMeshes: null,
                        axisMeshes: null
                      }),
                      (this.rayOrigin = {
                        origin: new THREE.Vector3(),
                        direction: new THREE.Vector3(0, 0, -1),
                        createdFromMesh: !1
                      }),
                      (this.emitIfAxesChanged = c.emitIfAxesChanged),
                      (this.checkControllerPresentAndSetup =
                        c.checkControllerPresentAndSetup),
                      e.addEventListener(
                        'controllerconnected',
                        this.onControllerConnected
                      ),
                      e.addEventListener(
                        'controllerdisconnected',
                        this.onControllerDisconnected
                      );
                  },
                  addEventListeners: function() {
                    var t = this.el;
                    t.addEventListener('buttonchanged', this.onButtonChanged),
                      t.addEventListener('buttondown', this.onButtonDown),
                      t.addEventListener('buttonup', this.onButtonUp),
                      t.addEventListener('touchstart', this.onButtonTouchStart),
                      t.addEventListener('touchend', this.onButtonTouchEnd),
                      t.addEventListener('axismove', this.onAxisMoved),
                      t.addEventListener('model-error', this.onModelError),
                      t.addEventListener('model-loaded', this.onModelLoaded),
                      (this.controllerEventsActive = !0);
                  },
                  removeEventListeners: function() {
                    var t = this.el;
                    t.removeEventListener(
                      'buttonchanged',
                      this.onButtonChanged
                    ),
                      t.removeEventListener('buttondown', this.onButtonDown),
                      t.removeEventListener('buttonup', this.onButtonUp),
                      t.removeEventListener(
                        'touchstart',
                        this.onButtonTouchStart
                      ),
                      t.removeEventListener('touchend', this.onButtonTouchEnd),
                      t.removeEventListener('axismove', this.onAxisMoved),
                      t.removeEventListener('model-error', this.onModelError),
                      t.removeEventListener('model-loaded', this.onModelLoaded),
                      (this.controllerEventsActive = !1);
                  },
                  checkIfControllerPresent: function() {
                    this.checkControllerPresentAndSetup(this, f, {
                      hand: this.data.hand,
                      index: this.data.pair
                    });
                  },
                  play: function() {
                    this.checkIfControllerPresent(),
                      this.addControllersUpdateListener();
                  },
                  pause: function() {
                    this.removeEventListeners(),
                      this.removeControllersUpdateListener();
                  },
                  updateControllerModel: function() {
                    if (this.data.model && !this.rayOrigin.createdFromMesh) {
                      var t = this.createControllerModelUrl();
                      this.loadModel(t);
                    } else this.modelReady();
                  },
                  createControllerModelUrl: function(t) {
                    var e = this.el.components['tracked-controls'],
                      i = e ? e.controller : null,
                      n = 'default',
                      r = this.data.hand;
                    if (i && ((r = i.hand), !t)) {
                      var o = i.id.match(m);
                      n = (o && o[0]) || n;
                    }
                    return (
                      'https://cdn.aframe.io/controllers/microsoft/' +
                      n +
                      '/' +
                      (p[r] || p.default)
                    );
                  },
                  injectTrackedControls: function() {
                    var t = this.data;
                    this.el.setAttribute('tracked-controls', {
                      idPrefix: f,
                      controller: t.pair,
                      hand: t.hand,
                      armModel: !1
                    }),
                      this.updateControllerModel();
                  },
                  addControllersUpdateListener: function() {
                    this.el.sceneEl.addEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  removeControllersUpdateListener: function() {
                    this.el.sceneEl.removeEventListener(
                      'controllersupdated',
                      this.onControllersUpdate,
                      !1
                    );
                  },
                  onControllersUpdate: function() {
                    this.checkIfControllerPresent();
                  },
                  onModelError: function(t) {
                    var e = this.createControllerModelUrl(!0);
                    t.detail.src !== e
                      ? (h(
                          'Failed to load controller model for device, attempting to load default.'
                        ),
                        this.loadModel(e))
                      : h('Failed to load default controller model.');
                  },
                  loadModel: function(t) {
                    this.el.setAttribute('gltf-model', 'url(' + t + ')');
                  },
                  onModelLoaded: function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o = (this.controllerModel = t.detail.model),
                      s = this.loadedMeshInfo;
                    if (
                      (u('Processing model'),
                      (s.buttonMeshes = {}),
                      (s.axisMeshes = {}),
                      o)
                    ) {
                      for (e = 0; e < this.mapping.buttons.length; e++)
                        (i = this.mapping.buttonMeshNames[
                          this.mapping.buttons[e]
                        ])
                          ? (n = o.getObjectByName(i))
                            ? (r = {
                                index: e,
                                value: a(n, 'VALUE'),
                                pressed: a(n, 'PRESSED'),
                                unpressed: a(n, 'UNPRESSED')
                              }).value &&
                              r.pressed &&
                              r.unpressed
                              ? (s.buttonMeshes[this.mapping.buttons[e]] = r)
                              : h(
                                  'Missing button submesh under mesh with name: ' +
                                    i +
                                    '(VALUE: ' +
                                    !!r.value +
                                    ', PRESSED: ' +
                                    !!r.pressed +
                                    ', UNPRESSED:' +
                                    !!r.unpressed +
                                    ')'
                                )
                            : h('Missing button mesh with name: ' + i)
                          : u(
                              'Skipping unknown button at index: ' +
                                e +
                                ' with mapped name: ' +
                                this.mapping.buttons[e]
                            );
                      for (e = 0; e < this.mapping.axisMeshNames.length; e++)
                        (i = this.mapping.axisMeshNames[e])
                          ? (n = o.getObjectByName(i))
                            ? (r = {
                                index: e,
                                value: a(n, 'VALUE'),
                                min: a(n, 'MIN'),
                                max: a(n, 'MAX')
                              }).value &&
                              r.min &&
                              r.max
                              ? (s.axisMeshes[e] = r)
                              : h(
                                  'Missing axis submesh under mesh with name: ' +
                                    i +
                                    '(VALUE: ' +
                                    !!r.value +
                                    ', MIN: ' +
                                    !!r.min +
                                    ', MAX:' +
                                    !!r.max +
                                    ')'
                                )
                            : h('Missing axis mesh with name: ' + i)
                          : u('Skipping unknown axis at index: ' + e);
                      this.calculateRayOriginFromMesh(o),
                        this.setModelVisibility();
                    }
                    function a(t, e) {
                      for (var i = 0, n = t.children.length; i < n; i++) {
                        var r = t.children[i];
                        if (r && r.name === e) return r;
                      }
                    }
                    u('Model load complete.');
                  },
                  calculateRayOriginFromMesh: ((o = new THREE.Quaternion()),
                  function(t) {
                    var e;
                    if (
                      (this.rayOrigin.origin.set(0, 0, 0),
                      this.rayOrigin.direction.set(0, 0, -1),
                      (this.rayOrigin.createdFromMesh = !0),
                      (e = t.getObjectByName(
                        this.mapping.pointingPoseMeshName
                      )))
                    ) {
                      var i = t.parent;
                      i &&
                        ((t.parent = null),
                        t.updateMatrixWorld(!0),
                        (t.parent = i)),
                        e.getWorldPosition(this.rayOrigin.origin),
                        e.getWorldQuaternion(o),
                        this.rayOrigin.direction.applyQuaternion(o),
                        i && t.updateMatrixWorld(!0);
                    } else
                      u(
                        'Mesh does not contain pointing origin data, defaulting to none.'
                      );
                    this.modelReady();
                  }),
                  lerpAxisTransform: ((r = new THREE.Quaternion()),
                  function(t, e) {
                    var i = this.loadedMeshInfo.axisMeshes[t];
                    if (i) {
                      var n = i.min,
                        o = i.max,
                        s = i.value,
                        a = 0.5 * e + 0.5;
                      s.setRotationFromQuaternion(
                        r.copy(n.quaternion).slerp(o.quaternion, a)
                      ),
                        s.position.lerpVectors(n.position, o.position, a);
                    }
                  }),
                  lerpButtonTransform: ((n = new THREE.Quaternion()),
                  function(t, e) {
                    var i = this.loadedMeshInfo.buttonMeshes[t];
                    if (i) {
                      var r = i.unpressed,
                        o = i.pressed,
                        s = i.value;
                      s.setRotationFromQuaternion(
                        n.copy(r.quaternion).slerp(o.quaternion, e)
                      ),
                        s.position.lerpVectors(r.position, o.position, e);
                    }
                  }),
                  modelReady: function() {
                    this.el.emit('controllermodelready', {
                      name: 'windows-motion-controls',
                      model: this.data.model,
                      rayOrigin: this.rayOrigin
                    });
                  },
                  onButtonChanged: function(t) {
                    var e = this.mapping.buttons[t.detail.id];
                    e &&
                      (this.loadedMeshInfo &&
                        this.loadedMeshInfo.buttonMeshes &&
                        this.lerpButtonTransform(e, t.detail.state.value),
                      this.el.emit(e + 'changed', t.detail.state));
                  },
                  onButtonEvent: function(t, e) {
                    var i = this.mapping.buttons[t.detail.id];
                    u('onButtonEvent(' + t.detail.id + ', ' + e + ')'),
                      i && this.el.emit(i + e);
                  },
                  onAxisMoved: function(t) {
                    var e = this.mapping.axisMeshNames.length;
                    if (this.loadedMeshInfo && this.loadedMeshInfo.axisMeshes)
                      for (var i = 0; i < e; i++)
                        this.lerpAxisTransform(i, t.detail.axis[i] || 0);
                    this.emitIfAxesChanged(this, this.mapping.axes, t);
                  },
                  setModelVisibility: function(t) {
                    var e = this.el.getObject3D('mesh');
                    (t = void 0 !== t ? t : this.modelVisible),
                      (this.modelVisible = t),
                      e && (e.visible = t);
                  }
                });
              },
              {
                '../constants': 116,
                '../core/component': 125,
                '../utils/': 195,
                '../utils/bind': 189,
                '../utils/tracked-controls': 199
              }
            ],
            115: [
              function(t, e, i) {
                var n = t('@tweenjs/tween.js'),
                  r = {
                    alternate: 'alternate',
                    alternateReverse: 'alternate-reverse',
                    normal: 'normal',
                    reverse: 'reverse'
                  },
                  o = {
                    linear: n.Easing.Linear.None,
                    ease: n.Easing.Cubic.InOut,
                    'ease-in': n.Easing.Cubic.In,
                    'ease-out': n.Easing.Cubic.Out,
                    'ease-in-out': n.Easing.Cubic.InOut,
                    'ease-cubic': n.Easing.Cubic.In,
                    'ease-in-cubic': n.Easing.Cubic.In,
                    'ease-out-cubic': n.Easing.Cubic.Out,
                    'ease-in-out-cubic': n.Easing.Cubic.InOut,
                    'ease-quad': n.Easing.Quadratic.InOut,
                    'ease-in-quad': n.Easing.Quadratic.In,
                    'ease-out-quad': n.Easing.Quadratic.Out,
                    'ease-in-out-quad': n.Easing.Quadratic.InOut,
                    'ease-quart': n.Easing.Quartic.InOut,
                    'ease-in-quart': n.Easing.Quartic.In,
                    'ease-out-quart': n.Easing.Quartic.Out,
                    'ease-in-out-quart': n.Easing.Quartic.InOut,
                    'ease-quint': n.Easing.Quintic.InOut,
                    'ease-in-quint': n.Easing.Quintic.In,
                    'ease-out-quint': n.Easing.Quintic.Out,
                    'ease-in-out-quint': n.Easing.Quintic.InOut,
                    'ease-sine': n.Easing.Sinusoidal.InOut,
                    'ease-in-sine': n.Easing.Sinusoidal.In,
                    'ease-out-sine': n.Easing.Sinusoidal.Out,
                    'ease-in-out-sine': n.Easing.Sinusoidal.InOut,
                    'ease-expo': n.Easing.Exponential.InOut,
                    'ease-in-expo': n.Easing.Exponential.In,
                    'ease-out-expo': n.Easing.Exponential.Out,
                    'ease-in-out-expo': n.Easing.Exponential.InOut,
                    'ease-circ': n.Easing.Circular.InOut,
                    'ease-in-circ': n.Easing.Circular.In,
                    'ease-out-circ': n.Easing.Circular.Out,
                    'ease-in-out-circ': n.Easing.Circular.InOut,
                    'ease-elastic': n.Easing.Elastic.InOut,
                    'ease-in-elastic': n.Easing.Elastic.In,
                    'ease-out-elastic': n.Easing.Elastic.Out,
                    'ease-in-out-elastic': n.Easing.Elastic.InOut,
                    'ease-back': n.Easing.Back.InOut,
                    'ease-in-back': n.Easing.Back.In,
                    'ease-out-back': n.Easing.Back.Out,
                    'ease-in-out-back': n.Easing.Back.InOut,
                    'ease-bounce': n.Easing.Bounce.InOut,
                    'ease-in-bounce': n.Easing.Bounce.In,
                    'ease-out-bounce': n.Easing.Bounce.Out,
                    'ease-in-out-bounce': n.Easing.Bounce.InOut
                  },
                  s = {
                    backwards: 'backwards',
                    both: 'both',
                    forwards: 'forwards',
                    none: 'none'
                  },
                  a = {
                    attribute: 'rotation',
                    begin: '',
                    end: '',
                    delay: 0,
                    dur: 1e3,
                    easing: 'ease',
                    direction: r.normal,
                    fill: s.forwards,
                    from: void 0,
                    repeat: 0,
                    to: void 0
                  };
                (e.exports.defaults = a),
                  (e.exports.directions = r),
                  (e.exports.easingFunctions = o),
                  (e.exports.fills = s),
                  (e.exports.repeats = { indefinite: 'indefinite' });
              },
              { '@tweenjs/tween.js': 1 }
            ],
            116: [
              function(t, e, i) {
                e.exports = {
                  AFRAME_INJECTED: 'aframe-injected',
                  DEFAULT_CAMERA_HEIGHT: 1.6,
                  DEFAULT_HANDEDNESS: 'right',
                  animation: t('./animation'),
                  keyboardevent: t('./keyboardevent')
                };
              },
              { './animation': 115, './keyboardevent': 117 }
            ],
            117: [
              function(t, e, i) {
                e.exports = {
                  KEYCODE_TO_CODE: {
                    38: 'ArrowUp',
                    37: 'ArrowLeft',
                    40: 'ArrowDown',
                    39: 'ArrowRight',
                    87: 'KeyW',
                    65: 'KeyA',
                    83: 'KeyS',
                    68: 'KeyD'
                  }
                };
              },
              {}
            ],
            118: [
              function(t, e, i) {
                var n = t('./a-node'),
                  r = t('../constants/animation'),
                  o = t('../utils/').coordinates,
                  s = t('./schema').parseProperty,
                  a = t('./a-register-element').registerElement,
                  c = t('@tweenjs/tween.js'),
                  l = t('../lib/three'),
                  u = t('../utils/'),
                  h = u.bind,
                  d = u.entity.getComponentProperty,
                  p = r.defaults,
                  f = r.directions,
                  m = r.easingFunctions,
                  g = r.fills,
                  v = r.repeats,
                  y = o.isCoordinates;
                function w(t) {
                  return u.extend({}, t);
                }
                function M(t, e, i, n, r) {
                  var a,
                    c,
                    u,
                    h,
                    p,
                    f,
                    m,
                    g,
                    v,
                    w = e.split('.'),
                    M = {},
                    A = {};
                  return (
                    2 === w.length
                      ? ((f = w[0]),
                        (m = w[1]),
                        (g = t.components[f]),
                        (v = g && g.schema) && v[m] && 'color' === v[m].type
                          ? T()
                          : (function() {
                              (h = w[0]),
                                (u = w[1]),
                                (c = t.components[h]) ||
                                  (t.setAttribute(h, ''),
                                  (c = t.components[h]));
                              (a = c.schema),
                                (M[e] = void 0 === i ? d(t, e) : i);
                              (M[e] = s(M[e], a[u])),
                                (A[e] = s(n, a[u])),
                                (p = function(i) {
                                  e in i && t.setAttribute(h, u, i[e]);
                                });
                            })())
                      : n && y(n)
                        ? ((M = i ? o.parse(i) : r),
                          (A = o.parse(n)),
                          (p = function(i) {
                            t.setAttribute(e, i);
                          }))
                        : -1 !== ['true', 'false'].indexOf(n)
                          ? (function() {
                              M[e] = void 0 !== i && E(i);
                              (M[e] = b(M[e])),
                                (A[e] = b(E(n))),
                                (p = function(i) {
                                  t.setAttribute(e, !!i[e]);
                                });
                            })()
                          : isNaN(n)
                            ? T()
                            : (function() {
                                M[e] =
                                  void 0 === i
                                    ? parseFloat(t.getAttribute(e))
                                    : parseFloat(i);
                                (A[e] = parseFloat(n)),
                                  (p = function(i) {
                                    t.setAttribute(e, i[e]);
                                  });
                              })(),
                    { from: M, partialSetAttribute: p, to: A }
                  );
                  function T() {
                    (M = new l.Color(i || t.getAttribute(e))),
                      (A = new l.Color(n)),
                      (p = function(i) {
                        w.length > 1 && t.setAttribute(w[0], w[1], x(i)),
                          t.setAttribute(e, x(i));
                      });
                  }
                }
                function E(t) {
                  return 'true' === t;
                }
                function b(t) {
                  return t ? 1 : 0;
                }
                function x(t) {
                  return (
                    '#' +
                    ['r', 'g', 'b']
                      .map(function(e) {
                        return (
                          (r = t[e]),
                          (i = Math.floor(255 * Math.min(Math.abs(r), 1))),
                          1 === (n = i.toString(16)).length ? '0' + n : n
                        );
                        var i, n, r;
                      })
                      .join('')
                  );
                }
                (e.exports.AAnimation = a('a-animation', {
                  prototype: Object.create(n.prototype, {
                    createdCallback: {
                      value: function() {
                        this.bindMethods(),
                          (this.isRunning = !1),
                          (this.partialSetAttribute = function() {}),
                          (this.tween = null);
                      }
                    },
                    attachedCallback: {
                      value: function() {
                        (this.el = this.parentNode),
                          this.handleMixinUpdate(),
                          this.update(),
                          this.load();
                      }
                    },
                    attributeChangedCallback: {
                      value: function(t, e, i) {
                        this.hasLoaded &&
                          this.isRunning &&
                          (this.stop(),
                          this.handleMixinUpdate(),
                          this.update());
                      }
                    },
                    detachedCallback: {
                      value: function() {
                        this.isRunning && this.stop();
                      }
                    },
                    getTween: {
                      value: function() {
                        var t,
                          e,
                          i,
                          n,
                          r = this,
                          o = r.data,
                          s = r.el,
                          a = o.attribute,
                          l = parseInt(o.delay, 10),
                          u = d(s, a),
                          p = r.getDirection(o.direction),
                          y = m[o.easing],
                          E = o.fill,
                          b = o.repeat === v.indefinite ? 1 / 0 : 0,
                          x = !1;
                        return (
                          (e = (t = M(s, a, o.from || r.initialValue, o.to, u))
                            .from),
                          (i = t.to),
                          (r.partialSetAttribute = t.partialSetAttribute),
                          void 0 === r.count &&
                            (r.count =
                              b === 1 / 0 ? 0 : parseInt(o.repeat, 10)),
                          isNaN(l) && (l = 0),
                          (r.initialValue = r.initialValue || w(u)),
                          b === 1 / 0 &&
                            E === g.forwards &&
                            -1 !==
                              [f.alternate, f.alternateReverse].indexOf(
                                o.direction
                              ) &&
                            (x = !0),
                          p === f.reverse && ((n = i), (i = w(e)), (e = w(n))),
                          -1 !== [g.backwards, g.both].indexOf(E) &&
                            r.partialSetAttribute(e),
                          new c.Tween(w(e))
                            .to(i, o.dur)
                            .delay(l)
                            .easing(y)
                            .repeat(b)
                            .yoyo(x)
                            .onUpdate(function() {
                              r.partialSetAttribute(this);
                            })
                            .onComplete(h(r.onCompleted, r))
                        );
                      }
                    },
                    update: {
                      value: function() {
                        var t = this.data;
                        'infinite' === t.repeat &&
                          console.warn(
                            "Using 'infinite' as 'repeat' value is invalid.  Use 'indefinite' instead."
                          ),
                          '' === t.begin ||
                            isNaN(t.begin) ||
                            (console.warn(
                              "Using 'begin' to specify a delay is deprecated. Use 'delay' instead."
                            ),
                            (t.delay = t.begin),
                            (t.begin = ''));
                        var e = t.begin,
                          i = t.end;
                        this.evt && this.removeEventListeners(this.evt),
                          (this.evt = { begin: e, end: i }),
                          this.addEventListeners(this.evt),
                          '' === e && (this.stop(), this.start());
                      },
                      writable: window.debug
                    },
                    onCompleted: {
                      value: function() {
                        var t = this.data;
                        if (
                          ((this.isRunning = !1),
                          -1 !== [g.backwards, g.none].indexOf(t.fill) &&
                            this.partialSetAttribute(this.initialValue),
                          0 === this.count)
                        )
                          return (
                            (this.count = void 0),
                            void this.emit('animationend')
                          );
                        (this.isRunning = !1), this.count--, this.start();
                      }
                    },
                    start: {
                      value: function() {
                        var t = this;
                        this.el.hasLoaded
                          ? !this.isRunning &&
                            this.el.isPlaying &&
                            ((this.tween = this.getTween()),
                            (this.isRunning = !0),
                            this.tween.start(),
                            this.emit('animationstart'))
                          : this.el.addEventListener('loaded', function() {
                              t.start();
                            });
                      },
                      writable: !0
                    },
                    stop: {
                      value: function() {
                        var t = this.tween;
                        t &&
                          (t.stop(),
                          (this.isRunning = !1),
                          -1 !==
                            [g.backwards, g.none].indexOf(this.data.fill) &&
                            this.partialSetAttribute(this.initialValue),
                          this.emit('animationstop'));
                      },
                      writable: !0
                    },
                    getDirection: {
                      value: function(t) {
                        return t === f.alternate
                          ? ((this.prevDirection =
                              this.prevDirection === f.normal
                                ? f.reverse
                                : f.normal),
                            this.prevDirection)
                          : t === f.alternateReverse
                            ? ((this.prevDirection =
                                this.prevDirection === f.reverse
                                  ? f.normal
                                  : f.reverse),
                              this.prevDirection)
                            : t;
                      }
                    },
                    bindMethods: {
                      value: function() {
                        (this.start = h(this.start, this)),
                          (this.stop = h(this.stop, this)),
                          (this.onStateAdded = h(this.onStateAdded, this)),
                          (this.onStateRemoved = h(this.onStateRemoved, this));
                      }
                    },
                    addEventListeners: {
                      value: function(t) {
                        var e = this.el,
                          i = this;
                        u.splitString(t.begin).forEach(function(t) {
                          e.addEventListener(t, i.start);
                        }),
                          u.splitString(t.end).forEach(function(t) {
                            e.addEventListener(t, i.stop);
                          }),
                          '' === t.begin &&
                            e.addEventListener('play', this.start),
                          e.addEventListener('pause', this.stop),
                          e.addEventListener('stateadded', this.onStateAdded),
                          e.addEventListener(
                            'stateremoved',
                            this.onStateRemoved
                          );
                      }
                    },
                    removeEventListeners: {
                      value: function(t) {
                        var e = this.el,
                          i = this.start,
                          n = this.stop;
                        u.splitString(t.begin).forEach(function(t) {
                          e.removeEventListener(t, i);
                        }),
                          u.splitString(t.end).forEach(function(t) {
                            e.removeEventListener(t, n);
                          }),
                          e.removeEventListener(
                            'stateadded',
                            this.onStateAdded
                          ),
                          e.removeEventListener(
                            'stateremoved',
                            this.onStateRemoved
                          );
                      }
                    },
                    onStateAdded: {
                      value: function(t) {
                        t.detail.state === this.data.begin && this.start();
                      },
                      writable: !0
                    },
                    onStateRemoved: {
                      value: function(t) {
                        t.detail.state === this.data.begin && this.stop();
                      },
                      writable: !0
                    },
                    handleMixinUpdate: {
                      value: function() {
                        var t,
                          e,
                          i,
                          n = {};
                        (e = (i = document.querySelector(
                          '#' + this.getAttribute('mixin')
                        ))
                          ? u.getElData(i, p)
                          : {}),
                          (t = u.getElData(this, p)),
                          u.extend(n, p, e, t),
                          (this.data = n);
                      }
                    }
                  })
                })),
                  (e.exports.getAnimationValues = M);
              },
              {
                '../constants/animation': 115,
                '../lib/three': 173,
                '../utils/': 195,
                './a-node': 123,
                './a-register-element': 124,
                './schema': 133,
                '@tweenjs/tween.js': 1
              }
            ],
            119: [
              function(t, e, i) {
                var n = t('./a-node'),
                  r = t('../utils/bind'),
                  o = t('../utils/debug'),
                  s = t('./a-register-element').registerElement,
                  a = t('../lib/three'),
                  c = new a.FileLoader(),
                  l = o('core:a-assets:warn');
                function u(t) {
                  if (
                    t.hasAttribute('autoplay') ||
                    'auto' === t.getAttribute('preload')
                  )
                    return new Promise(function(e, i) {
                      if (4 === t.readyState) return e();
                      if (t.error) return i();
                      function n() {
                        for (var i = 0, n = 0; n < t.buffered.length; n++)
                          i += t.buffered.end(n) - t.buffered.start(n);
                        i >= t.duration &&
                          ((a.Cache.files[t.getAttribute('src')] = t), e());
                      }
                      t.addEventListener('loadeddata', n, !1),
                        t.addEventListener('progress', n, !1),
                        t.addEventListener('error', i, !1);
                    });
                }
                function h(t) {
                  var e = (function(t) {
                    var e;
                    if (t.hasAttribute('crossorigin')) return t;
                    if (null !== (e = t.getAttribute('src'))) {
                      if (-1 === e.indexOf('://')) return t;
                      if (
                        ((i = e).indexOf('://') > -1
                          ? i.split('/')[2]
                          : i.split('/')[0]
                        ).split(':')[0] === window.location.host
                      )
                        return t;
                    }
                    var i;
                    return (
                      l(
                        'Cross-origin element (e.g., <img>) was requested without `crossorigin` set. A-Frame will re-request the asset with `crossorigin` attribute set. Please set `crossorigin` on the element (e.g., <img crossorigin="anonymous">)',
                        e
                      ),
                      (t.crossOrigin = 'anonymous'),
                      t.cloneNode(!0)
                    );
                  })(t);
                  return (
                    e.tagName &&
                      'video' === e.tagName.toLowerCase() &&
                      (e.setAttribute('playsinline', ''),
                      e.setAttribute('webkit-playsinline', '')),
                    e !== t &&
                      (t.parentNode.appendChild(e),
                      t.parentNode.removeChild(t)),
                    e
                  );
                }
                function d(t) {
                  var e = t.lastIndexOf('.');
                  if (e >= 0) {
                    var i = t.slice(e, t.length);
                    if ('.gltf' === i || '.glb' === i) return 'arraybuffer';
                  }
                  return 'text';
                }
                (e.exports = s('a-assets', {
                  prototype: Object.create(n.prototype, {
                    createdCallback: {
                      value: function() {
                        (this.isAssets = !0),
                          (this.fileLoader = c),
                          (this.timeout = null);
                      }
                    },
                    attachedCallback: {
                      value: function() {
                        var t,
                          e,
                          i,
                          n,
                          o,
                          s,
                          c = this,
                          d = [];
                        if (!this.parentNode.isScene)
                          throw new Error(
                            '<a-assets> must be a child of a <a-scene>.'
                          );
                        for (
                          o = this.querySelectorAll('img'), t = 0;
                          t < o.length;
                          t++
                        )
                          (n = h(o[t])),
                            d.push(
                              new Promise(function(e, i) {
                                (a.Cache.files[o[t].getAttribute('src')] = n),
                                  (n.onload = e),
                                  (n.onerror = i);
                              })
                            );
                        for (
                          i = this.querySelectorAll('audio, video'), t = 0;
                          t < i.length;
                          t++
                        )
                          (e = h(i[t])), d.push(u(e));
                        Promise.all(d).then(r(this.load, this)),
                          (s =
                            parseInt(this.getAttribute('timeout'), 10) || 3e3),
                          (this.timeout = setTimeout(function() {
                            c.hasLoaded ||
                              (l('Asset loading timed out in ', s, 'ms'),
                              c.emit('timeout'),
                              c.load());
                          }, s));
                      }
                    },
                    detachedCallback: {
                      value: function() {
                        this.timeout && clearTimeout(this.timeout);
                      }
                    },
                    load: {
                      value: function() {
                        n.prototype.load.call(this, null, function(t) {
                          return t.isAssetItem && t.hasAttribute('src');
                        });
                      }
                    }
                  })
                })),
                  s('a-asset-item', {
                    prototype: Object.create(n.prototype, {
                      createdCallback: {
                        value: function() {
                          (this.data = null), (this.isAssetItem = !0);
                        }
                      },
                      attachedCallback: {
                        value: function() {
                          var t = this,
                            e = this.getAttribute('src');
                          c.setResponseType(
                            this.getAttribute('response-type') || d(e)
                          ),
                            c.load(
                              e,
                              function(e) {
                                (t.data = e),
                                  setTimeout(function() {
                                    n.prototype.load.call(t);
                                  });
                              },
                              function(e) {
                                t.emit('progress', {
                                  loadedBytes: e.loaded,
                                  totalBytes: e.total,
                                  xhr: e
                                });
                              },
                              function(e) {
                                t.emit('error', { xhr: e });
                              }
                            );
                        }
                      }
                    })
                  }),
                  (e.exports.inferResponseType = d);
              },
              {
                '../lib/three': 173,
                '../utils/bind': 189,
                '../utils/debug': 191,
                './a-node': 123,
                './a-register-element': 124
              }
            ],
            120: [
              function(t, e, i) {
                var n = t('../utils/debug'),
                  r = t('./a-register-element').registerElement,
                  o = n('core:cubemap:warn');
                e.exports = r('a-cubemap', {
                  prototype: Object.create(window.HTMLElement.prototype, {
                    attachedCallback: {
                      value: function() {
                        this.srcs = this.validate();
                      },
                      writable: window.debug
                    },
                    validate: {
                      value: function() {
                        var t,
                          e = this.querySelectorAll('[src]'),
                          i = [];
                        if (6 === e.length) {
                          for (t = 0; t < e.length; t++)
                            i.push(e[t].getAttribute('src'));
                          return i;
                        }
                        o(
                          '<a-cubemap> did not contain exactly six elements each with a `src` attribute.'
                        );
                      },
                      writable: window.debug
                    }
                  })
                });
              },
              { '../utils/debug': 191, './a-register-element': 124 }
            ],
            121: [
              function(t, e, i) {
                var n,
                  r,
                  o = t('./a-node'),
                  s = t('./component').components,
                  a = t('./a-register-element').registerElement,
                  c = t('../lib/three'),
                  l = t('../utils/'),
                  u = l.bind,
                  h = l.debug('core:a-entity:debug'),
                  d = l.debug('core:a-entity:warn'),
                  p = '__',
                  f = Object.create(o.prototype, {
                    defaultComponents: {
                      value: {
                        position: '',
                        rotation: '',
                        scale: '',
                        visible: ''
                      }
                    },
                    createdCallback: {
                      value: function() {
                        (this.components = {}),
                          (this.initializingComponents = {}),
                          (this.isEntity = !0),
                          (this.isPlaying = !1),
                          (this.object3D = new c.Group()),
                          (this.object3D.el = this),
                          (this.object3DMap = {}),
                          (this.parentEl = null),
                          (this.states = []);
                      }
                    },
                    attributeChangedCallback: {
                      value: function(t, e, i) {
                        var n = this.components[t];
                        n && n.justInitialized && '' === i
                          ? delete n.justInitialized
                          : (n || null !== i) &&
                            this.setEntityAttribute(t, e, i);
                      }
                    },
                    attachedCallback: {
                      value: function() {
                        var t,
                          e = this.sceneEl,
                          i = this;
                        this.addToParent(),
                          this.isScene ||
                            (e
                              ? !(t = e.querySelector('a-assets')) ||
                                t.hasLoaded
                                ? this.load()
                                : t.addEventListener('loaded', function() {
                                    i.load();
                                  })
                              : this.load());
                      }
                    },
                    detachedCallback: {
                      value: function() {
                        var t;
                        if (this.parentEl) {
                          for (t in this.components) this.removeComponent(t);
                          this.isScene ||
                            (this.removeFromParent(),
                            o.prototype.detachedCallback.call(this),
                            (this.object3D.el = null));
                        }
                      }
                    },
                    handleMixinUpdate: {
                      value: function(t) {
                        t
                          ? this.updateComponent(t, this.getDOMAttribute(t))
                          : this.updateComponents();
                      }
                    },
                    mapStateMixins: {
                      value: function(t, e) {
                        var i, n, r;
                        if ((i = this.getAttribute('mixin'))) {
                          for (n = i.split(' '), r = 0; r < n.length; r++)
                            e(n[r] + '-' + t);
                          this.updateComponents();
                        }
                      }
                    },
                    updateStateMixins: {
                      value: function(t, e) {
                        var i, n, r, o, s;
                        for (
                          n = t.split(' '),
                            i = (e ? e.split(' ') : []).filter(function(t) {
                              return n.indexOf(t) < 0;
                            }),
                            r = 0;
                          r < i.length;
                          r++
                        )
                          for (
                            s = document.querySelectorAll(
                              '[id^=' + i[r] + '-]'
                            ),
                              o = 0;
                            o < s.length;
                            o++
                          )
                            this.unregisterMixin(s[o].id);
                        for (r = 0; r < this.states.length; r++)
                          for (o = 0; o < n.length; o++)
                            this.registerMixin(n[o] + '-' + this.states[r]);
                      }
                    },
                    getObject3D: {
                      value: function(t) {
                        return this.object3DMap[t];
                      }
                    },
                    setObject3D: {
                      value: function(t, e) {
                        var i,
                          n = this;
                        if (!(e instanceof c.Object3D))
                          throw new Error(
                            '`Entity.setObject3D` was called with an object that was not an instance of THREE.Object3D.'
                          );
                        (i = this.getObject3D(t)) && this.object3D.remove(i),
                          (e.el = this),
                          e.children.length &&
                            e.traverse(function(t) {
                              t.el = n;
                            }),
                          this.object3D.add(e),
                          (this.object3DMap[t] = e),
                          this.emit('object3dset', { object: e, type: t });
                      }
                    },
                    removeObject3D: {
                      value: function(t) {
                        var e = this.getObject3D(t);
                        e
                          ? (this.object3D.remove(e),
                            delete this.object3DMap[t],
                            this.emit('object3dremove', { type: t }))
                          : d(
                              'Tried to remove `Object3D` of type:',
                              t,
                              'which was not defined.'
                            );
                      }
                    },
                    getOrCreateObject3D: {
                      value: function(t, e) {
                        var i = this.getObject3D(t);
                        return (
                          !i && e && ((i = new e()), this.setObject3D(t, i)), i
                        );
                      }
                    },
                    add: {
                      value: function(t) {
                        if (!t.object3D)
                          throw new Error(
                            "Trying to add an element that doesn't have an `object3D`"
                          );
                        this.object3D.add(t.object3D),
                          this.emit('child-attached', { el: t });
                      }
                    },
                    addToParent: {
                      value: function() {
                        var t = (this.parentEl = this.parentNode);
                        t &&
                          t.add &&
                          !this.attachedToParent &&
                          (t.add(this), (this.attachedToParent = !0));
                      }
                    },
                    removeFromParent: {
                      value: function() {
                        var t = this.parentEl;
                        this.parentEl.remove(this),
                          (this.attachedToParent = !1),
                          (this.parentEl = this.parentNode = null),
                          t.emit('child-detached', { el: this });
                      }
                    },
                    load: {
                      value: function() {
                        var t = this;
                        !this.hasLoaded &&
                          this.parentEl &&
                          o.prototype.load.call(this, function() {
                            t.parentEl &&
                              (t.updateComponents(),
                              (t.isScene || t.parentEl.isPlaying) && t.play());
                          });
                      },
                      writable: window.debug
                    },
                    remove: {
                      value: function(t) {
                        this.object3D.remove(t.object3D);
                      }
                    },
                    getChildEntities: {
                      value: function() {
                        for (
                          var t = this.children, e = [], i = 0;
                          i < t.length;
                          i++
                        ) {
                          var r = t[i];
                          r instanceof n && e.push(r);
                        }
                        return e;
                      }
                    },
                    initComponent: {
                      value: function(t, e, i) {
                        var n,
                          r = t.split(p),
                          o = r[1],
                          a = r[0],
                          c =
                            (function(t, e) {
                              if (void 0 !== t.defaultComponents[e]) return !0;
                              if (t.components[e] && t.components[e].attrValue)
                                return !0;
                              return m(e, t.mixinEls);
                            })(this, t) || void 0 !== e;
                        if (s[a] && (c || i) && !(t in this.components)) {
                          if (
                            (this.initComponentDependencies(a),
                            o && !s[a].multiple)
                          )
                            throw new Error(
                              'Trying to initialize multiple components of type `' +
                                a +
                                '`. There can only be one component of this type per entity.'
                            );
                          (n = new s[a].Component(this, e, o)),
                            this.isPlaying && n.play(),
                            this.hasAttribute(t) ||
                              ((n.justInitialized = !0),
                              window.HTMLElement.prototype.setAttribute.call(
                                this,
                                t,
                                ''
                              )),
                            h('Component initialized: %s', t);
                        }
                      },
                      writable: window.debug
                    },
                    initComponentDependencies: {
                      value: function(t) {
                        var e, i;
                        if (s[t] && (e = s[t].dependencies))
                          for (i = 0; i < e.length; i++)
                            this.initComponent(
                              e[i],
                              window.HTMLElement.prototype.getAttribute.call(
                                this,
                                e[i]
                              ) || void 0,
                              !0
                            );
                      }
                    },
                    removeComponent: {
                      value: function(t) {
                        var e, i, n;
                        (i = t in this.defaultComponents),
                          (n = m(t, this.mixinEls)),
                          i ||
                            n ||
                            ((e = this.components[t]) &&
                              (e.initialized
                                ? (e.pause(),
                                  e.remove(),
                                  delete this.components[t],
                                  this.emit('componentremoved', e.evtDetail))
                                : this.addEventListener(
                                    'componentinitialized',
                                    function e(i) {
                                      i.detail.name === t &&
                                        (this.removeComponent(t),
                                        this.removeEventListener(
                                          'componentinitialized',
                                          e
                                        ));
                                    }
                                  )));
                      },
                      writable: window.debug
                    },
                    updateComponents: {
                      value: ((r = {}),
                      function() {
                        var t, e, i, n;
                        if (this.hasLoaded) {
                          for (i = 0; i < this.mixinEls.length; i++)
                            for (n in this.mixinEls[i].componentCache)
                              v(n) && (r[n] = !0);
                          if (this.getExtraComponents) {
                            e = this.getExtraComponents();
                            for (n in e) v(n) && (r[n] = !0);
                          }
                          for (i = 0; i < this.attributes.length; ++i)
                            v((n = this.attributes[i].name)) && (r[n] = !0);
                          for (n in this.defaultComponents)
                            (t = g(this.getDOMAttribute(n), e && e[n])),
                              this.updateComponent(n, t),
                              delete r[n];
                          for (n in r)
                            (t = g(this.getDOMAttribute(n), e && e[n])),
                              this.updateComponent(n, t),
                              delete r[n];
                        }
                      }),
                      writable: window.debug
                    },
                    updateComponent: {
                      value: function(t, e, i) {
                        var n = this.components[t],
                          r = t in this.defaultComponents;
                        if (n)
                          return null !== e || r
                            ? void n.updateProperties(e, i)
                            : void this.removeComponent(t);
                        this.initComponent(t, e, !1);
                      }
                    },
                    removeAttribute: {
                      value: function(t, e) {
                        var i = this.components[t];
                        (i &&
                          void 0 === e &&
                          (this.setEntityAttribute(t, void 0, null),
                          this.components[t])) ||
                          (i && void 0 !== e
                            ? i.resetProperty(e)
                            : ('mixin' === t && this.mixinUpdate(''),
                              window.HTMLElement.prototype.removeAttribute.call(
                                this,
                                t
                              )));
                      }
                    },
                    play: {
                      value: function() {
                        var t, e, i;
                        if (!this.isPlaying && this.hasLoaded) {
                          this.isPlaying = !0;
                          for (i in this.components) this.components[i].play();
                          for (
                            t = this.getChildEntities(), e = 0;
                            e < t.length;
                            e++
                          )
                            t[e].play();
                          this.emit('play');
                        }
                      },
                      writable: !0
                    },
                    pause: {
                      value: function() {
                        var t, e, i;
                        if (this.isPlaying) {
                          this.isPlaying = !1;
                          for (i in this.components) this.components[i].pause();
                          for (
                            t = this.getChildEntities(), e = 0;
                            e < t.length;
                            e++
                          )
                            t[e].pause();
                          this.emit('pause');
                        }
                      },
                      writable: !0
                    },
                    setEntityAttribute: {
                      value: function(t, e, i) {
                        s[t] || this.components[t]
                          ? this.updateComponent(t, i)
                          : 'mixin' !== t || this.mixinUpdate(i, e);
                      }
                    },
                    mixinUpdate: {
                      value: function(t, e) {
                        (e = e || this.getAttribute('mixin')),
                          this.updateMixins(t, e),
                          this.updateStateMixins(t, e),
                          this.updateComponents();
                      }
                    },
                    setAttribute: {
                      value: function(t, e, i) {
                        var n, r, a, c;
                        if (
                          ((a = (c = t.indexOf(p)) > 0 ? t.substring(0, c) : t),
                          !s[a])
                        )
                          return (
                            o.prototype.setAttribute.call(this, t, e),
                            void ('mixin' === t && this.mixinUpdate(e))
                          );
                        !this.components[t] &&
                          this.hasAttribute(t) &&
                          this.updateComponent(
                            t,
                            window.HTMLElement.prototype.getAttribute.call(
                              this,
                              t
                            )
                          ),
                          void 0 !== i &&
                          'string' == typeof e &&
                          e.length > 0 &&
                          'string' == typeof l.styleParser.parse(e)
                            ? (((n = {})[e] = i), (r = !1))
                            : ((n = e), (r = !0 === i)),
                          this.updateComponent(t, n, r),
                          this.sceneEl &&
                            this.sceneEl.getAttribute('debug') &&
                            this.components[t].flushToDOM();
                      },
                      writable: window.debug
                    },
                    flushToDOM: {
                      value: function(t) {
                        var e,
                          i,
                          n,
                          r = this.components,
                          o = this.defaultComponents,
                          s = this.children;
                        for (n in r) r[n].flushToDOM(n in o);
                        if (t)
                          for (i = 0; i < s.length; ++i)
                            (e = s[i]).flushToDOM && e.flushToDOM(t);
                      }
                    },
                    getAttribute: {
                      value: function(t) {
                        var e = this.components[t];
                        return e
                          ? e.data
                          : window.HTMLElement.prototype.getAttribute.call(
                              this,
                              t
                            );
                      },
                      writable: window.debug
                    },
                    getComputedAttribute: {
                      value: function(t) {
                        return (
                          d(
                            '`getComputedAttribute` is deprecated. Use `getAttribute` instead.'
                          ),
                          this.getAttribute(t)
                        );
                      }
                    },
                    getDOMAttribute: {
                      value: function(t) {
                        var e = this.components[t];
                        return e
                          ? e.attrValue
                          : window.HTMLElement.prototype.getAttribute.call(
                              this,
                              t
                            );
                      },
                      writable: window.debug
                    },
                    addState: {
                      value: function(t) {
                        this.is(t) ||
                          (this.states.push(t),
                          this.mapStateMixins(t, u(this.registerMixin, this)),
                          this.emit('stateadded', { state: t }));
                      }
                    },
                    removeState: {
                      value: function(t) {
                        var e = this.states.indexOf(t);
                        -1 !== e &&
                          (this.states.splice(e, 1),
                          this.mapStateMixins(t, u(this.unregisterMixin, this)),
                          this.emit('stateremoved', { state: t }));
                      }
                    },
                    is: {
                      value: function(t) {
                        return -1 !== this.states.indexOf(t);
                      }
                    }
                  });
                function m(t, e) {
                  var i,
                    n = !1;
                  for (i = 0; i < e.length && !(n = e[i].hasAttribute(t)); ++i);
                  return n;
                }
                function g(t, e) {
                  return e
                    ? e.constructor === Object
                      ? l.extend(e, l.styleParser.parse(t || {}))
                      : t || e
                    : t;
                }
                function v(t) {
                  return -1 !== t.indexOf(p) && (t = t.split(p)[0]), !!s[t];
                }
                (n = a('a-entity', { prototype: f })), (e.exports = n);
              },
              {
                '../lib/three': 173,
                '../utils/': 195,
                './a-node': 123,
                './a-register-element': 124,
                './component': 125
              }
            ],
            122: [
              function(t, e, i) {
                var n = t('./a-node'),
                  r = t('./a-register-element').registerElement,
                  o = t('./component').components;
                e.exports = r('a-mixin', {
                  prototype: Object.create(n.prototype, {
                    createdCallback: {
                      value: function() {
                        (this.componentCache = {}),
                          (this.id = this.getAttribute('id'));
                      }
                    },
                    attributeChangedCallback: {
                      value: function(t, e, i) {
                        this.cacheAttribute(t, i);
                      }
                    },
                    attachedCallback: {
                      value: function() {
                        (this.sceneEl = this.closestScene()),
                          this.cacheAttributes(),
                          this.updateEntities(),
                          this.load();
                      }
                    },
                    setAttribute: {
                      value: function(t, e) {
                        this.cacheAttribute(t, e),
                          window.HTMLElement.prototype.setAttribute.call(
                            this,
                            t,
                            e
                          );
                      }
                    },
                    cacheAttribute: {
                      value: function(t, e) {
                        var i = t.split('__')[0],
                          n = o[i];
                        n &&
                          (void 0 === e &&
                            (e = window.HTMLElement.prototype.getAttribute.call(
                              this,
                              t
                            )),
                          (this.componentCache[t] = n.parseAttrValueForCache(
                            e
                          )));
                      }
                    },
                    getAttribute: {
                      value: function(t) {
                        return (
                          this.componentCache[t] ||
                          window.HTMLElement.prototype.getAttribute.call(
                            this,
                            t
                          )
                        );
                      }
                    },
                    cacheAttributes: {
                      value: function() {
                        var t,
                          e,
                          i = this.attributes;
                        for (e = 0; e < i.length; e++)
                          (t = i[e].name), this.cacheAttribute(t);
                      }
                    },
                    updateEntities: {
                      value: function() {
                        if (this.sceneEl)
                          for (
                            var t = this.sceneEl.querySelectorAll(
                                '[mixin~=' + this.id + ']'
                              ),
                              e = 0;
                            e < t.length;
                            e++
                          ) {
                            var i = t[e];
                            i.hasLoaded &&
                              (i.registerMixin(this.id),
                              Object.keys(this.componentCache).forEach(function(
                                t
                              ) {
                                i.updateComponent(t);
                              }));
                          }
                      }
                    }
                  })
                });
              },
              {
                './a-node': 123,
                './a-register-element': 124,
                './component': 125
              }
            ],
            123: [
              function(t, e, i) {
                var n = t('./a-register-element').registerElement,
                  r = t('./a-register-element').isNode,
                  o = t('../utils/'),
                  s = o.bind,
                  a = o.debug('core:a-node:warn');
                e.exports = n('a-node', {
                  prototype: Object.create(window.HTMLElement.prototype, {
                    createdCallback: {
                      value: function() {
                        (this.hasLoaded = !1),
                          (this.isNode = !0),
                          (this.mixinEls = []),
                          (this.mixinObservers = {});
                      },
                      writable: window.debug
                    },
                    attachedCallback: {
                      value: function() {
                        var t;
                        (this.sceneEl = this.closestScene()),
                          this.sceneEl ||
                            a(
                              'You are attempting to attach <' +
                                this.tagName +
                                '> outside of an A-Frame scene. Append this element to `<a-scene>` instead.'
                            ),
                          (this.hasLoaded = !1),
                          this.emit('nodeready', {}, !1),
                          (t = this.getAttribute('mixin')) &&
                            this.updateMixins(t);
                      },
                      writable: window.debug
                    },
                    attributeChangedCallback: {
                      value: function(t, e, i) {
                        'mixin' === t && this.updateMixins(i, e);
                      }
                    },
                    closestScene: {
                      value: function() {
                        for (var t = this; t && !t.isScene; )
                          t = t.parentElement;
                        return t;
                      }
                    },
                    closest: {
                      value: function(t) {
                        for (
                          var e =
                              this.matches ||
                              this.mozMatchesSelector ||
                              this.msMatchesSelector ||
                              this.oMatchesSelector ||
                              this.webkitMatchesSelector,
                            i = this;
                          i && !e.call(i, t);

                        )
                          i = i.parentElement;
                        return i;
                      }
                    },
                    detachedCallback: {
                      value: function() {
                        this.hasLoaded = !1;
                      }
                    },
                    load: {
                      value: function(t, e) {
                        var i,
                          n = this;
                        this.hasLoaded ||
                          ((e = e || r),
                          (i = this.getChildren()
                            .filter(e)
                            .map(function(t) {
                              return new Promise(function(e) {
                                if (t.hasLoaded) return e();
                                t.addEventListener('loaded', e);
                              });
                            })),
                          Promise.all(i).then(function() {
                            (n.hasLoaded = !0),
                              t && t(),
                              n.emit('loaded', void 0, !1);
                          }));
                      },
                      writable: !0
                    },
                    getChildren: {
                      value: function() {
                        return Array.prototype.slice.call(this.children, 0);
                      }
                    },
                    updateMixins: {
                      value: function(t, e) {
                        var i = t ? t.trim().split(/\s+/) : [];
                        (e ? e.trim().split(/\s+/) : [])
                          .filter(function(t) {
                            return i.indexOf(t) < 0;
                          })
                          .forEach(s(this.unregisterMixin, this)),
                          (this.mixinEls = []),
                          i.forEach(s(this.registerMixin, this));
                      }
                    },
                    registerMixin: {
                      value: function(t) {
                        if (this.sceneEl) {
                          var e = this.sceneEl.querySelector('a-mixin#' + t);
                          e &&
                            (this.attachMixinListener(e),
                            this.mixinEls.push(e));
                        }
                      }
                    },
                    setAttribute: {
                      value: function(t, e) {
                        'mixin' === t && this.updateMixins(e),
                          window.HTMLElement.prototype.setAttribute.call(
                            this,
                            t,
                            e
                          );
                      }
                    },
                    unregisterMixin: {
                      value: function(t) {
                        var e,
                          i = this.mixinEls;
                        for (e = 0; e < i.length; ++e)
                          if (t === i[e].id) {
                            i.splice(e, 1);
                            break;
                          }
                        this.removeMixinListener(t);
                      }
                    },
                    removeMixinListener: {
                      value: function(t) {
                        var e = this.mixinObservers[t];
                        e && (e.disconnect(), (this.mixinObservers[t] = null));
                      }
                    },
                    attachMixinListener: {
                      value: function(t) {
                        var e = this,
                          i = t.id,
                          n = this.mixinObservers[i];
                        if (t && !n) {
                          var r = new MutationObserver(function(t) {
                            var i = t[0].attributeName;
                            e.handleMixinUpdate(i);
                          });
                          r.observe(t, { attributes: !0 }),
                            (this.mixinObservers[i] = r);
                        }
                      }
                    },
                    handleMixinUpdate: { value: function() {} },
                    emit: {
                      value: function(t, e, i, n) {
                        var r;
                        return (
                          void 0 === i && (i = !0),
                          (r = { bubbles: !!i, detail: e }),
                          n && o.extend(r, n),
                          o.fireEvent(this, t, r)
                        );
                      },
                      writable: window.debug
                    },
                    emitter: {
                      value: function(t, e, i) {
                        var n = this;
                        return function() {
                          n.emit(t, e, i);
                        };
                      }
                    }
                  })
                });
              },
              { '../utils/': 195, './a-register-element': 124 }
            ],
            124: [
              function(t, e, i) {
                var n, r;
                t('document-register-element');
                var o = (e.exports.knownTags = {});
                function s(t, e, i, n) {
                  e.forEach(function(e) {
                    !(function(t, e, i, n) {
                      var r = i[e],
                        o = n[e];
                      if (!r || !o) return;
                      if (r === o) return;
                      t[e] = {
                        value: function() {
                          return (
                            o.apply(this, arguments), r.apply(this, arguments)
                          );
                        },
                        writable: window.debug
                      };
                    })(t, e, i, n);
                  });
                }
                function a(t, e) {
                  Object.getOwnPropertyNames(t).forEach(function(i) {
                    var n;
                    e[i] ||
                      ((n = Object.getOwnPropertyDescriptor(t, i)),
                      (e[i] = { value: t[i], writable: n.writable }));
                  });
                }
                (e.exports.isNode = function(t) {
                  return t.tagName.toLowerCase() in o || t.isNode;
                }),
                  (e.exports.registerElement = function(t, e) {
                    var i,
                      c,
                      l,
                      u,
                      h = Object.getPrototypeOf(e.prototype),
                      d = e,
                      p = n && h === n.prototype,
                      f = r && h === r.prototype;
                    return (
                      (p || f) && (o[t.toLowerCase()] = !0),
                      p &&
                        ((i = e.prototype),
                        s(
                          (c = {}),
                          [
                            'attachedCallback',
                            'attributeChangedCallback',
                            'createdCallback'
                          ],
                          i,
                          n.prototype
                        ),
                        a(i, c),
                        (d = c),
                        (d = { prototype: Object.create(h, d) })),
                      f &&
                        ((l = e.prototype),
                        s(
                          (u = {}),
                          [
                            'attachedCallback',
                            'attributeChangedCallback',
                            'createdCallback'
                          ],
                          l,
                          n.prototype
                        ),
                        s(
                          u,
                          [
                            'attachedCallback',
                            'attributeChangedCallback',
                            'createdCallback',
                            'detachedCallback'
                          ],
                          l,
                          r.prototype
                        ),
                        a(l, u),
                        (d = u),
                        (d = { prototype: Object.create(h, d) })),
                      document.registerElement(t, d)
                    );
                  }),
                  (e.exports.wrapMethods = s),
                  (n = t('./a-node')),
                  (r = t('./a-entity'));
              },
              {
                './a-entity': 121,
                './a-node': 123,
                'document-register-element': 13
              }
            ],
            125: [
              function(t, e, i) {
                var n = t('./schema'),
                  r = t('./scene/scenes'),
                  o = t('./system'),
                  s = t('../utils/'),
                  a = (e.exports.components = {}),
                  c = n.parseProperties,
                  l = n.parseProperty,
                  u = n.process,
                  h = n.isSingleProperty,
                  d = n.stringifyProperties,
                  p = n.stringifyProperty,
                  f = s.styleParser,
                  m = s.debug('core:component:warn'),
                  g = document.currentScript,
                  v = new RegExp('[A-Z]+'),
                  y = (e.exports.Component = function(t, e, i) {
                    var n = this;
                    (this.el = t),
                      (this.id = i),
                      (this.attrName = this.name + (i ? '__' + i : '')),
                      (this.evtDetail = { id: this.id, name: this.name }),
                      (this.initialized = !1),
                      (this.el.components[this.attrName] = this),
                      (this.oldData = void 0),
                      (this.previousAttrValue = void 0),
                      (this.throttledEmitComponentChanged = s.throttle(
                        function() {
                          t.emit('componentchanged', n.evtDetail, !1);
                        },
                        200
                      )),
                      this.updateProperties(e);
                  });
                if (
                  ((y.prototype = {
                    schema: {},
                    init: function() {},
                    update: function(t) {},
                    updateSchema: void 0,
                    tick: void 0,
                    tock: void 0,
                    play: function() {},
                    pause: function() {},
                    remove: function() {},
                    parse: function(t, e) {
                      var i = this.schema;
                      return h(i)
                        ? l(t, i)
                        : c(f.parse(t), i, !0, this.name, e);
                    },
                    stringify: function(t) {
                      var e = this.schema;
                      return 'string' == typeof t
                        ? t
                        : h(e) ? p(t, e) : ((t = d(t, e)), f.stringify(t));
                    },
                    updateCachedAttrValue: function(t, e) {
                      var i,
                        n = this.parseAttrValueForCache(t),
                        r = h(this.schema);
                      if (void 0 !== t) {
                        if (!r && !e && this.attrValue)
                          for (i in this.attrValue)
                            i in n || (n[i] = this.attrValue[i]);
                        this.attrValue = M({}, n, r);
                      }
                    },
                    parseAttrValueForCache: function(t) {
                      var e;
                      return 'string' != typeof t
                        ? t
                        : (h(this.schema)
                            ? 'string' == typeof (e = this.schema.parse(t)) &&
                              (e = t)
                            : (e = f.parse(t)),
                          e);
                    },
                    flushToDOM: function(t) {
                      var e = t ? this.data : this.attrValue;
                      e &&
                        window.HTMLElement.prototype.setAttribute.call(
                          this.el,
                          this.attrName,
                          this.stringify(e)
                        );
                    },
                    updateProperties: function(t, e) {
                      var i,
                        n,
                        r = this.el,
                        o = this.oldData;
                      if (r.hasLoaded)
                        if (
                          ((i = h(this.schema)),
                          (n =
                            null !== t &&
                            'object' == typeof this.previousAttrValue &&
                            t === this.previousAttrValue),
                          (this.previousAttrValue = t),
                          (t = this.parseAttrValueForCache(t)),
                          this.updateSchema &&
                            this.updateSchema(this.buildData(t, !1, !0)),
                          (this.data = this.buildData(t, e, !1, n)),
                          this.updateCachedAttrValue(t, e),
                          this.initialized)
                        ) {
                          if (s.deepEqual(this.oldData, this.data)) return;
                          (this.oldData = M({}, this.data, i)),
                            this.update(o),
                            this.throttledEmitComponentChanged();
                        } else {
                          if (r.initializingComponents[this.name]) return;
                          (r.initializingComponents[this.name] = !0),
                            this.init(),
                            (this.initialized = !0),
                            delete r.initializingComponents[this.name],
                            (o =
                              i && 'object' != typeof l(void 0, this.schema)
                                ? void 0
                                : {}),
                            (this.oldData = M({}, this.data, i)),
                            this.update(o),
                            r.isPlaying && this.play(),
                            r.emit('componentinitialized', this.evtDetail, !1);
                        }
                      else this.updateCachedAttrValue(t);
                    },
                    resetProperty: function(t) {
                      if (h(this.schema)) this.attrValue = void 0;
                      else {
                        if (!(t in this.attrValue)) return;
                        delete this.attrValue[t];
                      }
                      this.updateProperties(this.attrValue);
                    },
                    extendSchema: function(t) {
                      var e = s.extend({}, a[this.name].schema);
                      s.extend(e, t),
                        (this.schema = u(e)),
                        this.el.emit('schemachanged', { component: this.name });
                    },
                    buildData: function(t, e, i, n) {
                      var r,
                        o,
                        a,
                        u,
                        d,
                        p,
                        f,
                        m = void 0 !== t && null !== t,
                        g = this.schema,
                        v = h(g),
                        y = this.el.mixinEls;
                      if (v)
                        r =
                          g.default && g.default.constructor === Object
                            ? s.clone(g.default)
                            : g.default;
                      else
                        for (
                          r =
                            'object' == typeof (f = !e && this.attrValue)
                              ? (function(t) {
                                  var e,
                                    i,
                                    n = {};
                                  for (i in t)
                                    (e = t[i]),
                                      (n[i] =
                                        e && e.constructor === Object
                                          ? s.clone(e)
                                          : e);
                                  return n;
                                })(f)
                              : {},
                            p = 0,
                            u = (a = Object.keys(g)).length;
                          p < u;
                          p++
                        )
                          (o = g[a[p]].default),
                            void 0 === r[a[p]] &&
                              (r[a[p]] =
                                o && o.constructor === Object ? s.clone(o) : o);
                      for (p = 0; p < y.length; p++)
                        (d = y[p].getAttribute(this.attrName)) &&
                          (r = M(r, d, v));
                      if (m) {
                        if (v) return !0 === n ? t : l(t, g);
                        r = M(r, t, v);
                      } else {
                        if (!0 === n) return r;
                        if (v) return l(r, g);
                      }
                      return !0 === n ? r : c(r, g, void 0, this.name, i);
                    }
                  }),
                  window.debug)
                )
                  var w = (e.exports.registrationOrderWarnings = {});
                function M(t, e, i) {
                  return !i || (null !== e && 'object' == typeof e)
                    ? s.extend(t, e)
                    : e;
                }
                function E(t) {
                  return t.tick || t.tock;
                }
                e.exports.registerComponent = function(t, e) {
                  var i,
                    n,
                    c,
                    l = {};
                  if (
                    (document.currentScript &&
                      document.currentScript !== g &&
                      r.forEach(function(e) {
                        e.hasLoaded ||
                          (document.currentScript.compareDocumentPosition(e) !==
                            Node.DOCUMENT_POSITION_FOLLOWING &&
                            (m(
                              'The component `' +
                                t +
                                '` was registered in a <script> tag after the scene. Component <script> tags in an HTML file should be declared *before* the scene such that the component is available to entities during scene initialization.'
                            ),
                            window.debug && (w[t] = !0)));
                      }),
                    !0 === v.test(t) &&
                      m(
                        'The component name `' +
                          t +
                          '` contains uppercase characters, but HTML will ignore the capitalization of attribute names. Change the name to be lowercase: `' +
                          t.toLowerCase() +
                          '`'
                      ),
                    -1 !== t.indexOf('__'))
                  )
                    throw new Error(
                      'The component name `' +
                        t +
                        '` is not allowed. The sequence __ (double underscore) is reserved to specify an id for multiple components of the same type'
                    );
                  if (
                    (Object.keys(e).forEach(function(t) {
                      l[t] = { value: e[t], writable: !0 };
                    }),
                    a[t])
                  )
                    throw new Error(
                      'The component `' +
                        t +
                        '` has been already registered. Check that you are not loading two versions of the same component or two different components of the same name.'
                    );
                  return (
                    (((i = function(t, e, i) {
                      y.call(this, t, e, i);
                    }).prototype = Object.create(y.prototype, l)).name = t),
                    (i.prototype.constructor = i),
                    (i.prototype.system = o && o.systems[t]),
                    (i.prototype.play = ((n = i.prototype.play),
                    function() {
                      var t = this.el.sceneEl,
                        e = this.el.isPlaying && !this.isPlaying;
                      this.initialized &&
                        e &&
                        (n.call(this),
                        (this.isPlaying = !0),
                        E(this) && t.addBehavior(this));
                    })),
                    (i.prototype.pause = ((c = i.prototype.pause),
                    function() {
                      var t = this.el.sceneEl;
                      this.isPlaying &&
                        (c.call(this),
                        (this.isPlaying = !1),
                        E(this) && t.removeBehavior(this));
                    })),
                    (a[t] = {
                      Component: i,
                      dependencies: i.prototype.dependencies,
                      isSingleProp: h(i.prototype.schema),
                      multiple: i.prototype.multiple,
                      parse: i.prototype.parse,
                      parseAttrValueForCache:
                        i.prototype.parseAttrValueForCache,
                      schema: s.extend(u(i.prototype.schema, i.prototype.name)),
                      stringify: i.prototype.stringify,
                      type: i.prototype.type
                    }),
                    i
                  );
                };
              },
              {
                '../utils/': 195,
                './scene/scenes': 131,
                './schema': 133,
                './system': 135
              }
            ],
            126: [
              function(t, e, i) {
                var n = t('./schema').process,
                  r = (e.exports.geometries = {}),
                  o = (e.exports.geometryNames = []),
                  s = t('../lib/three'),
                  a = (e.exports.Geometry = function() {});
                (a.prototype = {
                  schema: {},
                  init: function(t) {
                    return (this.geometry = new s.Geometry()), this.geometry;
                  },
                  update: function(t) {}
                }),
                  (e.exports.registerGeometry = function(t, e) {
                    var i,
                      s = {};
                    if (
                      (Object.keys(e).forEach(function(t) {
                        s[t] = { value: e[t], writable: !0 };
                      }),
                      r[t])
                    )
                      throw new Error(
                        'The geometry `' + t + '` has been already registered'
                      );
                    return (
                      (((i = function() {
                        a.call(this);
                      }).prototype = Object.create(a.prototype, s)).name = t),
                      (i.prototype.constructor = i),
                      (r[t] = { Geometry: i, schema: n(i.prototype.schema) }),
                      o.push(t),
                      i
                    );
                  });
              },
              { '../lib/three': 173, './schema': 133 }
            ],
            127: [
              function(t, e, i) {
                var n = t('../utils/coordinates'),
                  r = t('debug'),
                  o = r('core:propertyTypes:warn'),
                  s = r('core:propertyTypes:warn'),
                  a = (e.exports.propertyTypes = {}),
                  c = /[,> .[\]:]/;
                function l(t, e, i, n) {
                  'type' in a
                    ? o('Property type ' + t + ' is already registered.')
                    : (a[t] = { default: e, parse: i || h, stringify: n || d });
                }
                function u(t) {
                  var e, i;
                  return 'string' != typeof t
                    ? t
                    : (i = t.match(/\url\((.+)\)/))
                      ? i[1]
                      : '#' === t.charAt(0)
                        ? (e = document.getElementById(t.substring(1)))
                          ? 'CANVAS' === e.tagName ||
                            'VIDEO' === e.tagName ||
                            'IMG' === e.tagName
                            ? e
                            : e.getAttribute('src')
                          : void s('"' + t + '" asset not found.')
                        : t;
                }
                function h(t) {
                  return t;
                }
                function d(t) {
                  return null === t ? 'null' : t.toString();
                }
                function p(t) {
                  return parseInt(t, 10);
                }
                function f(t) {
                  return n.parse(t, this.default);
                }
                function m(t, e) {
                  if (null === t) return !0;
                  if ('object' != typeof t) return !1;
                  if (Object.keys(t).length !== e) return !1;
                  var i = t.x,
                    n = t.y,
                    r = t.z,
                    o = t.w;
                  return (
                    'number' == typeof i &&
                    'number' == typeof n &&
                    (!(e > 2 && 'number' != typeof r) &&
                      !(e > 3 && 'number' != typeof o))
                  );
                }
                l('audio', '', u),
                  l(
                    'array',
                    [],
                    function(t) {
                      if (Array.isArray(t)) return t;
                      if (!t || 'string' != typeof t) return [];
                      return t.split(',').map(function(t) {
                        return t.trim();
                      });
                    },
                    function(t) {
                      return t.join(', ');
                    }
                  ),
                  l('asset', '', u),
                  l('boolean', !1, function(t) {
                    return 'false' !== t && !1 !== t;
                  }),
                  l('color', '#FFF', h, d),
                  l('int', 0, p),
                  l('number', 0, function(t) {
                    return parseFloat(t, 10);
                  }),
                  l('map', '', u),
                  l('model', '', u),
                  l(
                    'selector',
                    null,
                    function(t) {
                      if (!t) return null;
                      if ('string' != typeof t) return t;
                      if ('#' === t[0] && !c.test(t))
                        return document.getElementById(t.substring(1));
                      return document.querySelector(t);
                    },
                    function(t) {
                      if (t.getAttribute) return '#' + t.getAttribute('id');
                      return d(t);
                    }
                  ),
                  l(
                    'selectorAll',
                    null,
                    function(t) {
                      if (!t) return null;
                      if ('string' != typeof t) return t;
                      return Array.prototype.slice.call(
                        document.querySelectorAll(t),
                        0
                      );
                    },
                    function(t) {
                      if (t instanceof Array)
                        return t
                          .map(function(t) {
                            return '#' + t.getAttribute('id');
                          })
                          .join(', ');
                      return d(t);
                    }
                  ),
                  l('src', '', function(t) {
                    return (
                      s(
                        '`src` property type is deprecated. Use `asset` instead.'
                      ),
                      u(t)
                    );
                  }),
                  l('string', '', h, d),
                  l('time', 0, p),
                  l('vec2', { x: 0, y: 0 }, f, n.stringify),
                  l('vec3', { x: 0, y: 0, z: 0 }, f, n.stringify),
                  l('vec4', { x: 0, y: 0, z: 0, w: 0 }, f, n.stringify),
                  (e.exports.registerPropertyType = l),
                  (e.exports.isValidDefaultValue = function(t, e) {
                    return (
                      ('audio' !== t || 'string' == typeof e) &&
                      !('array' === t && !Array.isArray(e)) &&
                      ('asset' !== t || 'string' == typeof e) &&
                      ('boolean' !== t || 'boolean' == typeof e) &&
                      ('color' !== t || 'string' == typeof e) &&
                      ('int' !== t || 'number' == typeof e) &&
                      ('number' !== t || 'number' == typeof e) &&
                      ('map' !== t || 'string' == typeof e) &&
                      ('model' !== t || 'string' == typeof e) &&
                      ('selector' !== t ||
                        'string' == typeof e ||
                        null === e) &&
                      ('selectorAll' !== t ||
                        'string' == typeof e ||
                        null === e) &&
                      ('src' !== t || 'string' == typeof e) &&
                      ('string' !== t || 'string' == typeof e) &&
                      ('time' !== t || 'number' == typeof e) &&
                      ('vec2' === t
                        ? m(e, 2)
                        : 'vec3' === t ? m(e, 3) : 'vec4' !== t || m(e, 4))
                    );
                  }),
                  (e.exports.isValidDefaultCoordinate = m);
              },
              { '../utils/coordinates': 190, debug: 10 }
            ],
            128: [
              function(t, e, i) {
                var n = t('./metaTags').inject,
                  r = t('./wakelock'),
                  o = t('../a-register-element'),
                  s = t('./scenes'),
                  a = t('../system').systems,
                  c = t('../../lib/three'),
                  l = t('@tweenjs/tween.js'),
                  u = t('../../utils/'),
                  h = t('../a-entity'),
                  d = t('../a-node'),
                  p = t('./postMessage'),
                  f = u.bind,
                  m = u.device.isIOS(),
                  g = u.device.isMobile(),
                  v = o.registerElement,
                  y = u.debug('core:a-scene:warn');
                function w(t) {
                  return null !== t.getAttribute('antialias')
                    ? 'true' === t.getAttribute('antialias')
                    : !t.isMobile;
                }
                function M(t) {
                  var e;
                  function i() {
                    document.fullscreenElement ||
                      document.mozFullScreenElement ||
                      document.webkitFullscreenElement ||
                      t.exitVR(),
                      document.activeElement.blur(),
                      document.body.focus();
                  }
                  (e = document.createElement('canvas')).classList.add(
                    'a-canvas'
                  ),
                    (e.dataset.aframeCanvas = !0),
                    t.appendChild(e),
                    document.addEventListener('fullscreenchange', i),
                    document.addEventListener('mozfullscreenchange', i),
                    document.addEventListener('webkitfullscreenchange', i),
                    e.addEventListener('touchmove', function(t) {
                      t.preventDefault();
                    }),
                    (t.canvas = e),
                    t.emit('render-target-loaded', { target: e }),
                    setTimeout(f(t.resize, t), 0);
                }
                (e.exports.AScene = v('a-scene', {
                  prototype: Object.create(h.prototype, {
                    defaultComponents: {
                      value: {
                        inspector: '',
                        'keyboard-shortcuts': '',
                        screenshot: '',
                        'vr-mode-ui': ''
                      }
                    },
                    createdCallback: {
                      value: function() {
                        (this.isIOS = m),
                          (this.isMobile = g),
                          (this.isScene = !0),
                          (this.object3D = new c.Scene()),
                          (this.render = f(this.render, this)),
                          (this.systems = {}),
                          (this.systemNames = []),
                          (this.time = 0),
                          this.init();
                      }
                    },
                    init: {
                      value: function() {
                        (this.behaviors = { tick: [], tock: [] }),
                          (this.hasLoaded = !1),
                          (this.isPlaying = !1),
                          (this.originalHTML = this.innerHTML),
                          (this.renderTarget = null),
                          M(this),
                          this.setupRenderer(),
                          this.resize(),
                          this.addFullScreenStyles(),
                          p(this);
                      },
                      writable: !0
                    },
                    addFullScreenStyles: {
                      value: function() {
                        document.documentElement.classList.add('a-html'),
                          document.body.classList.add('a-body'),
                          this.classList.add('fullscreen');
                      }
                    },
                    removeFullScreenStyles: {
                      value: function() {
                        document.documentElement.classList.remove('a-html'),
                          document.body.classList.remove('a-body'),
                          this.classList.remove('fullscreen');
                      }
                    },
                    attachedCallback: {
                      value: function() {
                        var t,
                          e = this;
                        n(this),
                          r(this),
                          this.initSystems(),
                          (t = f(this.resize, this)),
                          window.addEventListener('load', t),
                          window.addEventListener('resize', t),
                          this.play(),
                          s.push(this),
                          (this.onVRPresentChangeBound = f(
                            this.onVRPresentChange,
                            this
                          )),
                          window.addEventListener(
                            'vrdisplaypresentchange',
                            this.onVRPresentChangeBound
                          ),
                          (this.enterVRBound = function() {
                            e.enterVR();
                          }),
                          (this.exitVRBound = function() {
                            e.exitVR();
                          }),
                          (this.exitVRTrueBound = function() {
                            e.exitVR(!0);
                          }),
                          (this.pointerRestrictedBound = function() {
                            e.pointerRestricted();
                          }),
                          (this.pointerUnrestrictedBound = function() {
                            e.pointerUnrestricted();
                          }),
                          window.addEventListener(
                            'vrdisplayactivate',
                            this.enterVRBound
                          ),
                          window.addEventListener(
                            'vrdisplaydeactivate',
                            this.exitVRBound
                          ),
                          window.addEventListener(
                            'vrdisplaydisconnect',
                            this.exitVRTrueBound
                          ),
                          window.addEventListener(
                            'vrdisplaypointerrestricted',
                            this.pointerRestrictedBound
                          ),
                          window.addEventListener(
                            'vrdisplaypointerunrestricted',
                            this.pointerUnrestrictedBound
                          );
                      },
                      writable: window.debug
                    },
                    initSystems: {
                      value: function() {
                        Object.keys(a).forEach(f(this.initSystem, this));
                      }
                    },
                    initSystem: {
                      value: function(t) {
                        this.systems[t] ||
                          ((this.systems[t] = new a[t](this)),
                          this.systemNames.push(t));
                      }
                    },
                    detachedCallback: {
                      value: function() {
                        var t;
                        this.effect && this.effect.cancelAnimationFrame
                          ? this.effect.cancelAnimationFrame(
                              this.animationFrameID
                            )
                          : window.cancelAnimationFrame(this.animationFrameID),
                          (this.animationFrameID = null),
                          (t = s.indexOf(this)),
                          s.splice(t, 1),
                          window.removeEventListener(
                            'vrdisplaypresentchange',
                            this.onVRPresentChangeBound
                          ),
                          window.removeEventListener(
                            'vrdisplayactivate',
                            this.enterVRBound
                          ),
                          window.removeEventListener(
                            'vrdisplaydeactivate',
                            this.exitVRBound
                          ),
                          window.removeEventListener(
                            'vrdisplayconnect',
                            this.enterVRBound
                          ),
                          window.removeEventListener(
                            'vrdisplaydisconnect',
                            this.exitVRTrueBound
                          ),
                          window.removeEventListener(
                            'vrdisplaypointerrestricted',
                            this.pointerRestrictedBound
                          ),
                          window.removeEventListener(
                            'vrdisplaypointerunrestricted',
                            this.pointerUnrestrictedBound
                          );
                      }
                    },
                    addBehavior: {
                      value: function(t) {
                        var e = this,
                          i = this.behaviors;
                        Object.keys(i).forEach(function(i) {
                          if (t[i]) {
                            var n = e.behaviors[i];
                            -1 === n.indexOf(t) && n.push(t);
                          }
                        });
                      }
                    },
                    getPointerLockElement: {
                      value: function() {
                        return document.pointerLockElement;
                      },
                      writable: window.debug
                    },
                    checkHeadsetConnected: {
                      value: u.device.checkHeadsetConnected,
                      writable: window.debug
                    },
                    enterVR: {
                      value: function(t) {
                        var e = this,
                          i = this.effect;
                        return this.is('vr-mode')
                          ? Promise.resolve('Already in VR.')
                          : t ||
                            (!this.checkHeadsetConnected() && !this.isMobile)
                            ? (n(), Promise.resolve())
                            : (i &&
                                i.requestPresent().then(n, function(t) {
                                  throw t && t.message
                                    ? new Error(
                                        'Failed to enter VR mode (`requestPresent`): ' +
                                          t.message
                                      )
                                    : new Error(
                                        'Failed to enter VR mode (`requestPresent`).'
                                      );
                                })) ||
                              Promise.reject(
                                new Error('VREffect not initialized')
                              );
                        function n() {
                          var t;
                          e.addState('vr-mode'),
                            e.emit('enter-vr', { target: e }),
                            e.isMobile &&
                              screen.orientation &&
                              screen.orientation.lock &&
                              screen.orientation.lock('landscape'),
                            e.addFullScreenStyles(),
                            e.isMobile ||
                              e.checkHeadsetConnected() ||
                              (
                                (t = e.canvas).requestFullscreen ||
                                t.webkitRequestFullscreen ||
                                t.mozRequestFullScreen ||
                                t.msRequestFullscreen
                              ).apply(t),
                            e.resize();
                        }
                      },
                      writable: window.debug
                    },
                    exitVR: {
                      value: function(t) {
                        var e = this;
                        return this.is('vr-mode')
                          ? (document.exitFullscreen
                              ? document.exitFullscreen()
                              : document.mozCancelFullScreen
                                ? document.mozCancelFullScreen()
                                : document.webkitExitFullscreen &&
                                  document.webkitExitFullscreen(),
                            t ||
                            (!this.checkHeadsetConnected() && !this.isMobile)
                              ? (i(), Promise.resolve())
                              : this.effect.exitPresent().then(i, function(t) {
                                  throw t && t.message
                                    ? new Error(
                                        'Failed to exit VR mode (`exitPresent`): ' +
                                          t.message
                                      )
                                    : new Error(
                                        'Failed to exit VR mode (`exitPresent`).'
                                      );
                                }))
                          : Promise.resolve('Not in VR.');
                        function i() {
                          e.removeState('vr-mode'),
                            e.isMobile &&
                              screen.orientation &&
                              screen.orientation.unlock &&
                              screen.orientation.unlock(),
                            e.hasAttribute('embedded') &&
                              e.removeFullScreenStyles(),
                            e.resize(),
                            e.isIOS &&
                              u.forceCanvasResizeSafariMobile(this.canvas),
                            e.emit('exit-vr', { target: e });
                        }
                      },
                      writable: window.debug
                    },
                    pointerRestricted: {
                      value: function() {
                        if (this.canvas) {
                          var t = this.getPointerLockElement();
                          t &&
                            t !== this.canvas &&
                            document.exitPointerLock &&
                            document.exitPointerLock(),
                            this.canvas.requestPointerLock &&
                              this.canvas.requestPointerLock();
                        }
                      }
                    },
                    pointerUnrestricted: {
                      value: function() {
                        var t = this.getPointerLockElement();
                        t &&
                          t === this.canvas &&
                          document.exitPointerLock &&
                          document.exitPointerLock();
                      }
                    },
                    onVRPresentChange: {
                      value: function(t) {
                        (t.display || t.detail.display).isPresenting
                          ? this.enterVR(!0)
                          : this.exitVR(!0);
                      }
                    },
                    getAttribute: {
                      value: function(t) {
                        var e = this.systems[t];
                        return e
                          ? e.data
                          : h.prototype.getAttribute.call(this, t);
                      }
                    },
                    getComputedAttribute: {
                      value: function(t) {
                        y(
                          '`getComputedAttribute` is deprecated. Use `getAttribute` instead.'
                        ),
                          this.getAttribute(t);
                      }
                    },
                    getDOMAttribute: {
                      value: function(t) {
                        var e = this.systems[t];
                        return e
                          ? e.data
                          : h.prototype.getDOMAttribute.call(this, t);
                      }
                    },
                    setAttribute: {
                      value: function(t, e, i) {
                        var n = this.systems[t];
                        if (n)
                          return (
                            d.prototype.setAttribute.call(this, t, e),
                            void n.updateProperties(e)
                          );
                        h.prototype.setAttribute.call(this, t, e, i);
                      }
                    },
                    removeBehavior: {
                      value: function(t) {
                        var e = this,
                          i = this.behaviors;
                        Object.keys(i).forEach(function(i) {
                          if (t[i]) {
                            var n = e.behaviors[i],
                              r = n.indexOf(t);
                            -1 !== r && n.splice(r, 1);
                          }
                        });
                      }
                    },
                    resize: {
                      value: function() {
                        var t,
                          e = this.camera,
                          i = this.canvas,
                          n =
                            this.getAttribute('embedded') &&
                            !this.is('vr-mode'),
                          r = this.effect && this.effect.isPresenting;
                        !e ||
                          !i ||
                          (this.is('vr-mode') && (this.isMobile || r)) ||
                          ((t = (function(t, e) {
                            if (e)
                              return {
                                height: t.parentElement.offsetHeight,
                                width: t.parentElement.offsetWidth
                              };
                            return {
                              height: window.innerHeight,
                              width: window.innerWidth
                            };
                          })(i, n)),
                          (e.aspect = t.width / t.height),
                          e.updateProjectionMatrix(),
                          this.renderer.setSize(t.width, t.height));
                      },
                      writable: window.debug
                    },
                    setupRenderer: {
                      value: function() {
                        var t;
                        (t = this.renderer = new c.WebGLRenderer({
                          canvas: this.canvas,
                          antialias: w(this),
                          alpha: !0
                        })).setPixelRatio(window.devicePixelRatio),
                          (t.sortObjects = !1),
                          (this.effect = new c.VREffect(t)),
                          (this.effect.autoSubmitFrame = !1);
                      },
                      writable: window.debug
                    },
                    play: {
                      value: function() {
                        var t = this;
                        this.renderStarted
                          ? h.prototype.play.call(this)
                          : (this.addEventListener('loaded', function() {
                              function t(t) {
                                t.renderStarted ||
                                  (t.resize(),
                                  t.renderer &&
                                    (window.performance &&
                                      window.performance.mark('render-started'),
                                    (t.clock = new c.Clock()),
                                    t.render(),
                                    (t.renderStarted = !0),
                                    t.emit('renderstart')));
                              }
                              h.prototype.play.call(this),
                                this.camera
                                  ? t(this)
                                  : this.addEventListener(
                                      'camera-set-active',
                                      function() {
                                        t(this);
                                      }
                                    );
                            }),
                            setTimeout(function() {
                              h.prototype.load.call(t);
                            }));
                      }
                    },
                    reload: {
                      value: function(t) {
                        var e = this;
                        t && this.pause(),
                          (this.innerHTML = this.originalHTML),
                          this.init(),
                          d.prototype.load.call(this, function() {
                            if (!e.isPlaying) return;
                            h.prototype.play.call(e);
                          });
                      }
                    },
                    updateComponent: {
                      value: function(t) {
                        t in a ||
                          h.prototype.updateComponent.apply(this, arguments);
                      }
                    },
                    tick: {
                      value: function(t, e) {
                        var i,
                          n = this.systems;
                        for (
                          l.update(), i = 0;
                          i < this.behaviors.tick.length;
                          i++
                        )
                          this.behaviors.tick[i].el.isPlaying &&
                            this.behaviors.tick[i].tick(t, e);
                        for (i = 0; i < this.systemNames.length; i++)
                          n[this.systemNames[i]].tick &&
                            n[this.systemNames[i]].tick(t, e);
                      }
                    },
                    tock: {
                      value: function(t, e) {
                        var i,
                          n = this.systems;
                        for (i = 0; i < this.behaviors.tock.length; i++)
                          this.behaviors.tock[i].el.isPlaying &&
                            this.behaviors.tock[i].tock(t, e);
                        for (i = 0; i < this.systemNames.length; i++)
                          n[this.systemNames[i]].tock &&
                            n[this.systemNames[i]].tock(t, e);
                      }
                    },
                    render: {
                      value: function() {
                        var t = this.effect,
                          e = 1e3 * this.clock.getDelta();
                        (this.time = 1e3 * this.clock.elapsedTime),
                          this.isPlaying && this.tick(this.time, e),
                          (this.animationFrameID = t.requestAnimationFrame(
                            this.render
                          )),
                          t.render(
                            this.object3D,
                            this.camera,
                            this.renderTarget
                          ),
                          this.isPlaying && this.tock(this.time, e),
                          this.effect.submitFrame();
                      },
                      writable: !0
                    }
                  })
                })),
                  (e.exports.shouldAntiAlias = w),
                  (e.exports.setupCanvas = M);
              },
              {
                '../../lib/three': 173,
                '../../utils/': 195,
                '../a-entity': 121,
                '../a-node': 123,
                '../a-register-element': 124,
                '../system': 135,
                './metaTags': 129,
                './postMessage': 130,
                './scenes': 131,
                './wakelock': 132,
                '@tweenjs/tween.js': 1
              }
            ],
            129: [
              function(t, e, i) {
                var n,
                  r = t('../../constants/'),
                  o = t('../../utils').extend,
                  s = (e.exports.MOBILE_HEAD_TAGS = [
                    c({
                      name: 'viewport',
                      content:
                        'width=device-width,initial-scale=1,maximum-scale=1,shrink-to-fit=no,user-scalable=no,minimal-ui'
                    }),
                    c({ name: 'mobile-web-app-capable', content: 'yes' }),
                    c({ name: 'theme-color', content: 'black' })
                  ]),
                  a = [
                    c({ name: 'apple-mobile-web-app-capable', content: 'yes' }),
                    c({
                      name: 'apple-mobile-web-app-status-bar-style',
                      content: 'black'
                    }),
                    ((n = {
                      rel: 'apple-touch-icon',
                      href: 'https://aframe.io/images/aframe-logo-152.png'
                    }),
                    {
                      tagName: 'link',
                      attributes: n,
                      exists: function() {
                        return document.querySelector(
                          'link[rel="' + n.rel + '"]'
                        );
                      }
                    })
                  ];
                function c(t) {
                  return {
                    tagName: 'meta',
                    attributes: t,
                    exists: function() {
                      return document.querySelector(
                        'meta[name="' + t.name + '"]'
                      );
                    }
                  };
                }
                e.exports.inject = function(t) {
                  var e,
                    i = document.head,
                    n = i.querySelector('script'),
                    c = [];
                  return s.forEach(l), t.isIOS && a.forEach(l), c;
                  function l(t) {
                    t &&
                      !t.exists() &&
                      (e = (function(t) {
                        if (!t || !t.tagName) return;
                        var e = document.createElement(t.tagName);
                        return (
                          e.setAttribute(r.AFRAME_INJECTED, ''),
                          o(e, t.attributes)
                        );
                      })(t)) &&
                      (n ? n.parentNode.insertBefore(e, n) : i.appendChild(e),
                      c.push(e));
                  }
                };
              },
              { '../../constants/': 116, '../../utils': 195 }
            ],
            130: [
              function(t, e, i) {
                var n = t('../../utils/bind'),
                  r = t('../../utils/').isIframed;
                function o(t) {
                  if (t.data)
                    switch (t.data.type) {
                      case 'vr':
                        switch (t.data.data) {
                          case 'enter':
                            this.enterVR();
                            break;
                          case 'exit':
                            this.exitVR();
                        }
                    }
                }
                e.exports = function(t) {
                  r() && window.addEventListener('message', n(o, t));
                };
              },
              { '../../utils/': 195, '../../utils/bind': 189 }
            ],
            131: [
              function(t, e, i) {
                e.exports = [];
              },
              {}
            ],
            132: [
              function(t, e, i) {
                var n = t('../../../vendor/wakelock/wakelock');
                e.exports = function(t) {
                  if (t.isMobile) {
                    var e = (t.wakelock = new n());
                    t.addEventListener('enter-vr', function() {
                      e.request();
                    }),
                      t.addEventListener('exit-vr', function() {
                        e.release();
                      });
                  }
                };
              },
              { '../../../vendor/wakelock/wakelock': 205 }
            ],
            133: [
              function(t, e, i) {
                var n = t('../utils/'),
                  r = t('./propertyTypes'),
                  o = n.debug,
                  s = r.isValidDefaultValue,
                  a = r.propertyTypes,
                  c = o('core:schema:warn');
                function l(t) {
                  return 'type' in t
                    ? 'string' == typeof t.type
                    : 'default' in t;
                }
                function u(t, e) {
                  var i,
                    n,
                    r = t.default,
                    o = t.type;
                  return (
                    t.type
                      ? 'bool' === t.type
                        ? (o = 'boolean')
                        : 'float' === t.type && (o = 'number')
                      : (o =
                          void 0 !== r &&
                          -1 !== ['boolean', 'number'].indexOf(typeof r)
                            ? typeof r
                            : Array.isArray(r) ? 'array' : 'string'),
                    (n = a[o]) ||
                      c(
                        'Unknown property type for component `' + e + '`: ' + o
                      ),
                    (i = !!t.parse),
                    (t.parse = t.parse || n.parse),
                    (t.stringify = t.stringify || n.stringify),
                    (t.type = o),
                    'default' in t
                      ? i ||
                        s(o, r) ||
                        c(
                          'Default value `' +
                            r +
                            '` does not match type `' +
                            o +
                            '` in component `' +
                            e +
                            '`'
                        )
                      : (t.default = n.default),
                    t
                  );
                }
                function h(t, e) {
                  return (
                    (void 0 !== t && null !== t && '' !== t) ||
                      ((t = e.default), Array.isArray(t) && (t = t.slice())),
                    e.parse(t, e.default)
                  );
                }
                function d(t, e) {
                  return 'object' != typeof t
                    ? t
                    : e && null !== t ? e.stringify(t) : JSON.stringify(t);
                }
                (e.exports.isSingleProperty = l),
                  (e.exports.process = function(t, e) {
                    return l(t)
                      ? u(t, e)
                      : (Object.keys(t).forEach(function(i) {
                          t[i] = u(t[i], e);
                        }),
                        t);
                  }),
                  (e.exports.processPropertyDefinition = u),
                  (e.exports.parseProperties = function(t, e, i, n, r) {
                    var o = Object.keys(i ? t : e);
                    return null === t || 'object' != typeof t
                      ? t
                      : (Object.keys(t).forEach(function(t) {
                          e[t] ||
                            r ||
                            c(
                              'Unknown property `' +
                                t +
                                '` for component/system `' +
                                n +
                                '`.'
                            );
                        }),
                        o.forEach(function(i) {
                          var n = e[i],
                            r = t[i];
                          e[i] && (t[i] = h(r, n));
                        }),
                        t);
                  }),
                  (e.exports.parseProperty = h),
                  (e.exports.stringifyProperties = function(t, e) {
                    var i = {};
                    return (
                      Object.keys(t).forEach(function(n) {
                        var r = e[n],
                          o = t[n],
                          s = o;
                        'object' == typeof s &&
                          ((s = d(o, r)),
                          r || c('Unknown component property: ' + n)),
                          (i[n] = s);
                      }),
                      i
                    );
                  }),
                  (e.exports.stringifyProperty = d);
              },
              { '../utils/': 195, './propertyTypes': 127 }
            ],
            134: [
              function(t, e, i) {
                var n = t('./schema').process,
                  r = (e.exports.shaders = {}),
                  o = (e.exports.shaderNames = []),
                  s = t('../lib/three'),
                  a = t('../utils'),
                  c = {
                    array: 'v3',
                    color: 'v3',
                    int: 'i',
                    number: 'f',
                    map: 't',
                    time: 'f',
                    vec2: 'v2',
                    vec3: 'v3',
                    vec4: 'v4'
                  },
                  l = (e.exports.Shader = function() {});
                (l.prototype = {
                  schema: {},
                  vertexShader:
                    'void main() {gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);}',
                  fragmentShader:
                    'void main() {gl_FragColor = vec4(1.0, 0.0, 1.0, 1.0);}',
                  init: function(t) {
                    return (
                      (this.attributes = this.initVariables(t, 'attribute')),
                      (this.uniforms = this.initVariables(t, 'uniform')),
                      (this.material = new (this.raw
                        ? s.RawShaderMaterial
                        : s.ShaderMaterial)({
                        uniforms: this.uniforms,
                        vertexShader: this.vertexShader,
                        fragmentShader: this.fragmentShader
                      })),
                      this.material
                    );
                  },
                  initVariables: function(t, e) {
                    var i = {},
                      n = this.schema;
                    return (
                      Object.keys(n).forEach(function(t) {
                        if (n[t].is === e) {
                          var r = c[n[t].type];
                          i[t] = { type: r, value: void 0 };
                        }
                      }),
                      i
                    );
                  },
                  update: function(t) {
                    this.updateVariables(t, 'attribute'),
                      this.updateVariables(t, 'uniform');
                  },
                  updateVariables: function(t, e) {
                    var i = this,
                      n = 'uniform' === e ? this.uniforms : this.attributes,
                      r = this.schema;
                    Object.keys(t).forEach(function(o) {
                      var s;
                      if (r[o] && r[o].is === e) {
                        if ('map' === r[o].type) {
                          if (!n[o] || n[o].value === t[o]) return;
                          return (
                            (s = '_texture_' + o),
                            i.el.addEventListener(
                              'materialtextureloaded',
                              function() {
                                (n[o].value = i.material[s]),
                                  (n[o].needsUpdate = !0);
                              }
                            ),
                            void a.material.updateMapMaterialFromData(
                              s,
                              o,
                              i,
                              t
                            )
                          );
                        }
                        (n[o].value = i.parseValue(r[o].type, t[o])),
                          (n[o].needsUpdate = !0);
                      }
                    });
                  },
                  parseValue: function(t, e) {
                    var i;
                    switch (t) {
                      case 'vec2':
                        return new s.Vector2(e.x, e.y);
                      case 'vec3':
                        return new s.Vector3(e.x, e.y, e.z);
                      case 'vec4':
                        return new s.Vector4(e.x, e.y, e.z, e.w);
                      case 'color':
                        return (
                          (i = new s.Color(e)), new s.Vector3(i.r, i.g, i.b)
                        );
                      case 'map':
                        return s.ImageUtils.loadTexture(e);
                      default:
                        return e;
                    }
                  }
                }),
                  (e.exports.registerShader = function(t, e) {
                    var i,
                      s = {};
                    if (
                      (Object.keys(e).forEach(function(t) {
                        s[t] = { value: e[t], writable: !0 };
                      }),
                      r[t])
                    )
                      throw new Error(
                        'The shader ' + t + ' has been already registered'
                      );
                    return (
                      (((i = function() {
                        l.call(this);
                      }).prototype = Object.create(l.prototype, s)).name = t),
                      (i.prototype.constructor = i),
                      (r[t] = { Shader: i, schema: n(i.prototype.schema) }),
                      o.push(t),
                      i
                    );
                  });
              },
              { '../lib/three': 173, '../utils': 195, './schema': 133 }
            ],
            135: [
              function(t, e, i) {
                var n = t('./component'),
                  r = t('./schema'),
                  o = t('../utils/'),
                  s = r.parseProperties,
                  a = r.parseProperty,
                  c = r.process,
                  l = r.isSingleProperty,
                  u = o.styleParser,
                  h = (e.exports.systems = {}),
                  d = (e.exports.System = function(t) {
                    var e = n && n.components[this.name];
                    (this.el = t),
                      (this.sceneEl = t),
                      e && (e.Component.prototype.system = this),
                      this.buildData(),
                      this.init(),
                      this.update({});
                  });
                (d.prototype = {
                  schema: {},
                  init: function() {},
                  update: function(t) {},
                  updateProperties: function(t) {
                    var e = this.data;
                    Object.keys(r).length &&
                      (this.buildData(t), this.update(e));
                  },
                  buildData: function(t) {
                    var e = this.schema;
                    Object.keys(e).length &&
                      ((t =
                        t ||
                        window.HTMLElement.prototype.getAttribute.call(
                          this.sceneEl,
                          this.name
                        )),
                      l(e)
                        ? (this.data = a(t, e))
                        : (this.data = s(u.parse(t) || {}, e)));
                  },
                  tick: void 0,
                  tock: void 0,
                  play: function() {},
                  pause: function() {}
                }),
                  (e.exports.registerSystem = function(t, e) {
                    var i,
                      n,
                      r = {},
                      s = o.findAllScenes(document);
                    if (
                      (Object.keys(e).forEach(function(t) {
                        r[t] = { value: e[t], writable: !0 };
                      }),
                      h[t])
                    )
                      throw new Error(
                        'The system `' +
                          t +
                          '` has been already registered. Check that you are not loading two versions of the same system or two different systems of the same name.'
                      );
                    for (
                      ((n = function(t) {
                        d.call(this, t);
                      }).prototype = Object.create(d.prototype, r)).name = t,
                        n.prototype.constructor = n,
                        n.prototype.schema = o.extend(c(n.prototype.schema)),
                        h[t] = n,
                        i = 0;
                      i < s.length;
                      i++
                    )
                      s[i].initSystem(t);
                  });
              },
              { '../utils/': 195, './component': 125, './schema': 133 }
            ],
            136: [
              function(t, e, i) {
                t('./pivot');
              },
              { './pivot': 137 }
            ],
            137: [
              function(t, e, i) {
                var n = t('../../core/component').registerComponent,
                  r = t('../../lib/three'),
                  o = new r.Vector3(),
                  s = new r.Vector3();
                n('pivot', {
                  dependencies: ['position'],
                  schema: { type: 'vec3' },
                  init: function() {
                    var t = this.data,
                      e = this.el,
                      i = e.object3D.parent,
                      n = e.object3D,
                      a = new r.Group();
                    o.copy(n.position),
                      s.copy(n.rotation),
                      i.remove(n),
                      a.add(n),
                      i.add(a),
                      (e.object3D = a),
                      n.position.set(-1 * t.x, -1 * t.y, -1 * t.z),
                      a.position.set(t.x + o.x, t.y + o.y, t.z + o.z),
                      a.rotation.copy(n.rotation),
                      n.rotation.set(0, 0, 0);
                  }
                });
              },
              { '../../core/component': 125, '../../lib/three': 173 }
            ],
            138: [
              function(t, e, i) {
                var n = t('../../core/component').components,
                  r = t('../../core/shader').shaders,
                  o = t('../../utils/'),
                  s = {};
                function a(t) {
                  var e = t.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                  'fog' === t && (e = 'material-fog'),
                    'visible' === t && (e = 'material-visible'),
                    (s[e] = 'material.' + t);
                }
                Object.keys(n.material.schema).forEach(a),
                  Object.keys(r.standard.schema).forEach(a),
                  (e.exports = function() {
                    return {
                      defaultComponents: { material: {} },
                      mappings: o.extend({}, s)
                    };
                  });
              },
              {
                '../../core/component': 125,
                '../../core/shader': 134,
                '../../utils/': 195
              }
            ],
            139: [
              function(t, e, i) {
                t('./primitives/a-camera'),
                  t('./primitives/a-collada-model'),
                  t('./primitives/a-cursor'),
                  t('./primitives/a-curvedimage'),
                  t('./primitives/a-gltf-model'),
                  t('./primitives/a-image'),
                  t('./primitives/a-light'),
                  t('./primitives/a-link'),
                  t('./primitives/a-obj-model'),
                  t('./primitives/a-sky'),
                  t('./primitives/a-sound'),
                  t('./primitives/a-text'),
                  t('./primitives/a-video'),
                  t('./primitives/a-videosphere'),
                  t('./primitives/meshPrimitives');
              },
              {
                './primitives/a-camera': 141,
                './primitives/a-collada-model': 142,
                './primitives/a-cursor': 143,
                './primitives/a-curvedimage': 144,
                './primitives/a-gltf-model': 145,
                './primitives/a-image': 146,
                './primitives/a-light': 147,
                './primitives/a-link': 148,
                './primitives/a-obj-model': 149,
                './primitives/a-sky': 150,
                './primitives/a-sound': 151,
                './primitives/a-text': 152,
                './primitives/a-video': 153,
                './primitives/a-videosphere': 154,
                './primitives/meshPrimitives': 155
              }
            ],
            140: [
              function(t, e, i) {
                var n = t('../../core/a-entity'),
                  r = t('../../core/component').components,
                  o = t('../../core/a-register-element').registerElement,
                  s = t('../../utils/'),
                  a = s.debug,
                  c = s.entity.setComponentProperty,
                  l = a('extras:primitives:debug'),
                  u = a('extras:primitives:warn'),
                  h = (e.exports.primitives = {});
                (e.exports.registerPrimitive = function(t, e) {
                  (t = t.toLowerCase()),
                    l('Registering <%s>', t),
                    e.defaultAttributes &&
                      u(
                        "The 'defaultAttributes' object is deprecated. Use 'defaultComponents' instead."
                      );
                  var i = o(t, {
                    prototype: Object.create(n.prototype, {
                      defaultComponentsFromPrimitive: {
                        value: e.defaultComponents || e.defaultAttributes || {}
                      },
                      deprecated: { value: e.deprecated || null },
                      deprecatedMappings: { value: e.deprecatedMappings || {} },
                      mappings: { value: e.mappings || {} },
                      createdCallback: {
                        value: function() {
                          e.deprecated && console.warn(e.deprecated),
                            this.resolveMappingCollisions();
                        }
                      },
                      resolveMappingCollisions: {
                        value: function() {
                          var t = this.mappings,
                            e = this;
                          Object.keys(t).forEach(function(i) {
                            var n;
                            i !== i.toLowerCase() &&
                              u(
                                'Mapping keys should be specified in lower case. The mapping key ' +
                                  i +
                                  ' may not be recognized'
                              ),
                              r[i] &&
                                ((n = t[i].replace('.', '-')),
                                (t[n] = t[i]),
                                delete t[i],
                                console.warn(
                                  'The primitive ' +
                                    e.tagName.toLowerCase() +
                                    ' has a mapping collision. The attribute ' +
                                    i +
                                    ' has the same name as a registered component and has been renamed to ' +
                                    n
                                ));
                          });
                        }
                      },
                      getExtraComponents: {
                        value: function() {
                          var t,
                            e,
                            i,
                            n,
                            r,
                            o,
                            a = this;
                          for (
                            e = s.clone(this.defaultComponentsFromPrimitive),
                              (r = this.getAttribute('mixin')) &&
                                (r = r.trim().split(' ')).forEach(function(t) {
                                  var i = a.sceneEl.querySelector('#' + t)
                                    .componentCache;
                                  Object.keys(i).forEach(function(t) {
                                    e[t] = (function(t, e) {
                                      if (c(t)) return l(e);
                                      if (c(e)) return l(t);
                                      if (u(t) && u(e))
                                        return s.extendDeep(t, e);
                                      return l(e);
                                    })(e[t], i[t]);
                                  });
                                }),
                              i = 0;
                            i < this.attributes.length;
                            i++
                          )
                            (t = this.attributes[i]),
                              (n = this.mappings[t.name]) &&
                                ((o = s.entity.getComponentPropertyPath(n))
                                  .constructor === Array
                                  ? ((e[o[0]] = e[o[0]] || {}),
                                    (e[o[0]][o[1]] = t.value))
                                  : (e[o] = t.value));
                          return e;
                          function c(t) {
                            return void 0 === t;
                          }
                          function l(t) {
                            return u(t) ? s.extendDeep({}, t) : t;
                          }
                          function u(t) {
                            return null !== t && t.constructor === Object;
                          }
                        }
                      },
                      attributeChangedCallback: {
                        value: function(t, e, i) {
                          var n = this.mappings[t];
                          t in this.deprecatedMappings &&
                            console.warn(this.deprecatedMappings[t]),
                            t && n && c(this, n, i);
                        }
                      }
                    })
                  });
                  return (h[t] = i), i;
                }),
                  (e.exports.definePrimitive = function(t, i, n) {
                    (n = n || {}),
                      Object.keys(i).map(function(t) {
                        var e, i, o;
                        (i = n),
                          (o = r[(e = t)].schema),
                          Object.keys(o).map(function(t) {
                            var n = t
                              .replace(/([a-z])([A-Z])/g, '$1-$2')
                              .toLowerCase();
                            void 0 !== i[n] && (n = e + '-' + t),
                              (i[n] = e + '.' + t);
                          });
                      }),
                      e.exports.registerPrimitive(
                        t,
                        s.extendDeep({}, null, {
                          defaultComponents: i,
                          mappings: n
                        })
                      );
                  });
              },
              {
                '../../core/a-entity': 121,
                '../../core/a-register-element': 124,
                '../../core/component': 125,
                '../../utils/': 195
              }
            ],
            141: [
              function(t, e, i) {
                var n = t('../../../constants/').DEFAULT_CAMERA_HEIGHT;
                (0, t('../primitives').registerPrimitive)('a-camera', {
                  defaultComponents: {
                    camera: { userHeight: n },
                    'look-controls': {},
                    'wasd-controls': {}
                  },
                  mappings: {
                    active: 'camera.active',
                    far: 'camera.far',
                    fov: 'camera.fov',
                    'look-controls-enabled': 'look-controls.enabled',
                    near: 'camera.near',
                    'wasd-controls-enabled': 'wasd-controls.enabled',
                    'reverse-mouse-drag': 'look-controls.reverseMouseDrag',
                    'user-height': 'camera.userHeight',
                    zoom: 'camera.zoom'
                  },
                  deprecatedMappings: {
                    'cursor-color':
                      'a-camera[cursor-color] has been removed. Use a-cursor[color] instead.',
                    'cursor-maxdistance':
                      'a-camera[cursor-maxdistance] has been removed. Use a-cursor[max-distance] instead.',
                    'cursor-offset':
                      'a-camera[cursor-offset] has been removed. Use a-cursor[position] instead.',
                    'cursor-opacity':
                      'a-camera[cursor-offset] has been removed. Use a-cursor[opacity] instead.',
                    'cursor-scale':
                      'a-camera[cursor-scale] has been removed. Use a-cursor[scale] instead.',
                    'cursor-visible':
                      'a-camera[cursor-visible] has been removed. Use a-cursor[visible] instead.'
                  }
                });
              },
              { '../../../constants/': 116, '../primitives': 140 }
            ],
            142: [
              function(t, e, i) {
                (0, t('../primitives').registerPrimitive)('a-collada-model', {
                  mappings: { src: 'collada-model' }
                });
              },
              { '../primitives': 140 }
            ],
            143: [
              function(t, e, i) {
                var n = t('../getMeshMixin');
                (0, t('../primitives').registerPrimitive)(
                  'a-cursor',
                  t('../../../utils/').extendDeep({}, n(), {
                    defaultComponents: {
                      cursor: {},
                      geometry: {
                        primitive: 'ring',
                        radiusOuter: 0.016,
                        radiusInner: 0.01,
                        segmentsTheta: 32
                      },
                      material: { color: '#000', shader: 'flat', opacity: 0.8 },
                      position: { x: 0, y: 0, z: -1 }
                    },
                    mappings: {
                      far: 'raycaster.far',
                      fuse: 'cursor.fuse',
                      'fuse-timeout': 'cursor.fuseTimeout',
                      interval: 'raycaster.interval',
                      objects: 'raycaster.objects'
                    }
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            144: [
              function(t, e, i) {
                var n = t('../getMeshMixin');
                (0, t('../primitives').registerPrimitive)(
                  'a-curvedimage',
                  t('../../../utils/').extendDeep({}, n(), {
                    defaultComponents: {
                      geometry: {
                        height: 1,
                        primitive: 'cylinder',
                        radius: 2,
                        segmentsRadial: 48,
                        thetaLength: 270,
                        openEnded: !0,
                        thetaStart: 0
                      },
                      material: {
                        color: '#FFF',
                        shader: 'flat',
                        side: 'double',
                        transparent: !0,
                        repeat: '-1 1'
                      }
                    },
                    mappings: {
                      height: 'geometry.height',
                      'open-ended': 'geometry.openEnded',
                      radius: 'geometry.radius',
                      segments: 'geometry.segmentsRadial',
                      start: 'geometry.thetaStart',
                      'theta-length': 'geometry.thetaLength',
                      'theta-start': 'geometry.thetaStart',
                      width: 'geometry.thetaLength'
                    }
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            145: [
              function(t, e, i) {
                (0, t('../primitives').registerPrimitive)('a-gltf-model', {
                  mappings: { src: 'gltf-model' }
                });
              },
              { '../primitives': 140 }
            ],
            146: [
              function(t, e, i) {
                var n = t('../getMeshMixin');
                (0, t('../primitives').registerPrimitive)(
                  'a-image',
                  t('../../../utils/').extendDeep({}, n(), {
                    defaultComponents: {
                      geometry: { primitive: 'plane' },
                      material: {
                        color: '#FFF',
                        shader: 'flat',
                        side: 'double',
                        transparent: !0
                      }
                    },
                    mappings: {
                      height: 'geometry.height',
                      width: 'geometry.width'
                    }
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            147: [
              function(t, e, i) {
                (0, t('../primitives').registerPrimitive)('a-light', {
                  defaultComponents: { light: {} },
                  mappings: {
                    angle: 'light.angle',
                    color: 'light.color',
                    'ground-color': 'light.groundColor',
                    decay: 'light.decay',
                    distance: 'light.distance',
                    intensity: 'light.intensity',
                    penumbra: 'light.penumbra',
                    type: 'light.type',
                    target: 'light.target'
                  }
                });
              },
              { '../primitives': 140 }
            ],
            148: [
              function(t, e, i) {
                (0, t('../primitives').registerPrimitive)('a-link', {
                  defaultComponents: {},
                  mappings: {
                    href: 'link.href',
                    image: 'link.image',
                    title: 'link.title'
                  }
                });
              },
              { '../primitives': 140 }
            ],
            149: [
              function(t, e, i) {
                var n = t('../getMeshMixin')();
                (0, t('../primitives').registerPrimitive)(
                  'a-obj-model',
                  t('../../../utils/').extendDeep({}, n, {
                    defaultComponents: { 'obj-model': {} },
                    mappings: { src: 'obj-model.obj', mtl: 'obj-model.mtl' }
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            150: [
              function(t, e, i) {
                var n = t('../getMeshMixin'),
                  r = t('../primitives').registerPrimitive,
                  o = t('../../../utils/'),
                  s = t('./meshPrimitives');
                r(
                  'a-sky',
                  o.extendDeep({}, n(), {
                    defaultComponents: {
                      geometry: {
                        primitive: 'sphere',
                        radius: 5e3,
                        segmentsWidth: 64,
                        segmentsHeight: 32
                      },
                      material: { color: '#FFF', shader: 'flat', npot: !0 },
                      scale: '-1 1 1'
                    },
                    mappings: o.extendDeep({}, s['a-sphere'].prototype.mappings)
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140,
                './meshPrimitives': 155
              }
            ],
            151: [
              function(t, e, i) {
                (0, t('../primitives').registerPrimitive)('a-sound', {
                  defaultComponents: { sound: {} },
                  mappings: {
                    src: 'sound.src',
                    on: 'sound.on',
                    autoplay: 'sound.autoplay',
                    loop: 'sound.loop',
                    volume: 'sound.volume'
                  }
                });
              },
              { '../primitives': 140 }
            ],
            152: [
              function(t, e, i) {
                (0, t('../primitives').definePrimitive)('a-text', {
                  text: { anchor: 'align', width: 5 }
                });
              },
              { '../primitives': 140 }
            ],
            153: [
              function(t, e, i) {
                var n = t('../getMeshMixin');
                (0, t('../primitives').registerPrimitive)(
                  'a-video',
                  t('../../../utils/').extendDeep({}, n(), {
                    defaultComponents: {
                      geometry: { primitive: 'plane' },
                      material: {
                        color: '#FFF',
                        shader: 'flat',
                        side: 'double',
                        transparent: !0
                      }
                    },
                    mappings: {
                      height: 'geometry.height',
                      width: 'geometry.width'
                    }
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            154: [
              function(t, e, i) {
                var n = t('../getMeshMixin');
                (0, t('../primitives').registerPrimitive)(
                  'a-videosphere',
                  t('../../../utils/').extendDeep({}, n(), {
                    defaultComponents: {
                      geometry: {
                        primitive: 'sphere',
                        radius: 5e3,
                        segmentsWidth: 64,
                        segmentsHeight: 32
                      },
                      material: { color: '#FFF', shader: 'flat', npot: !0 },
                      scale: '-1 1 1'
                    },
                    mappings: {
                      radius: 'geometry.radius',
                      'segments-height': 'geometry.segmentsHeight',
                      'segments-width': 'geometry.segmentsWidth'
                    }
                  })
                );
              },
              {
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            155: [
              function(t, e, i) {
                var n = t('../getMeshMixin'),
                  r = t('../../../core/geometry').geometries,
                  o = t('../../../core/geometry').geometryNames,
                  s = t('../primitives').registerPrimitive,
                  a = t('../../../utils/'),
                  c = (e.exports = {});
                function l(t) {
                  return t.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
                }
                o.forEach(function(t) {
                  var e = r[t],
                    i = l(t),
                    o = {};
                  Object.keys(e.schema).forEach(function(t) {
                    o[l(t)] = 'geometry.' + t;
                  });
                  var u = 'a-' + i,
                    h = s(
                      u,
                      a.extendDeep({}, n(), {
                        defaultComponents: { geometry: { primitive: t } },
                        mappings: o
                      })
                    );
                  c[u] = h;
                });
              },
              {
                '../../../core/geometry': 126,
                '../../../utils/': 195,
                '../getMeshMixin': 138,
                '../primitives': 140
              }
            ],
            156: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('box', {
                  schema: {
                    depth: { default: 1, min: 0 },
                    height: { default: 1, min: 0 },
                    width: { default: 1, min: 0 },
                    segmentsHeight: {
                      default: 1,
                      min: 1,
                      max: 20,
                      type: 'int'
                    },
                    segmentsWidth: { default: 1, min: 1, max: 20, type: 'int' },
                    segmentsDepth: { default: 1, min: 1, max: 20, type: 'int' }
                  },
                  init: function(t) {
                    this.geometry = new r.BoxGeometry(
                      t.width,
                      t.height,
                      t.depth,
                      t.segmentsWidth,
                      t.segmentsHeight,
                      t.segmentsDepth
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            157: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = r.Math.degToRad;
                n('circle', {
                  schema: {
                    radius: { default: 1, min: 0 },
                    segments: { default: 32, min: 3, type: 'int' },
                    thetaLength: { default: 360, min: 0 },
                    thetaStart: { default: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.CircleGeometry(
                      t.radius,
                      t.segments,
                      o(t.thetaStart),
                      o(t.thetaLength)
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            158: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = r.Math.degToRad;
                n('cone', {
                  schema: {
                    height: { default: 1, min: 0 },
                    openEnded: { default: !1 },
                    radiusBottom: { default: 1, min: 0 },
                    radiusTop: { default: 0.01, min: 0 },
                    segmentsHeight: { default: 18, min: 1, type: 'int' },
                    segmentsRadial: { default: 36, min: 3, type: 'int' },
                    thetaLength: { default: 360, min: 0 },
                    thetaStart: { default: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.CylinderGeometry(
                      t.radiusTop,
                      t.radiusBottom,
                      t.height,
                      t.segmentsRadial,
                      t.segmentsHeight,
                      t.openEnded,
                      o(t.thetaStart),
                      o(t.thetaLength)
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            159: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = r.Math.degToRad;
                n('cylinder', {
                  schema: {
                    height: { default: 1, min: 0 },
                    openEnded: { default: !1 },
                    radius: { default: 1, min: 0 },
                    segmentsHeight: { default: 18, min: 1, type: 'int' },
                    segmentsRadial: { default: 36, min: 3, type: 'int' },
                    thetaLength: { default: 360, min: 0 },
                    thetaStart: { default: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.CylinderGeometry(
                      t.radius,
                      t.radius,
                      t.height,
                      t.segmentsRadial,
                      t.segmentsHeight,
                      t.openEnded,
                      o(t.thetaStart),
                      o(t.thetaLength)
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            160: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('dodecahedron', {
                  schema: {
                    detail: { default: 0, min: 0, max: 5, type: 'int' },
                    radius: { default: 1, min: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.DodecahedronGeometry(
                      t.radius,
                      t.detail
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            161: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('icosahedron', {
                  schema: {
                    detail: { default: 0, min: 0, max: 5, type: 'int' },
                    radius: { default: 1, min: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.IcosahedronGeometry(
                      t.radius,
                      t.detail
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            162: [
              function(t, e, i) {
                t('./box.js'),
                  t('./circle.js'),
                  t('./cone.js'),
                  t('./cylinder.js'),
                  t('./dodecahedron.js'),
                  t('./icosahedron.js'),
                  t('./octahedron.js'),
                  t('./plane.js'),
                  t('./ring.js'),
                  t('./sphere.js'),
                  t('./tetrahedron.js'),
                  t('./torus.js'),
                  t('./torusKnot.js'),
                  t('./triangle.js');
              },
              {
                './box.js': 156,
                './circle.js': 157,
                './cone.js': 158,
                './cylinder.js': 159,
                './dodecahedron.js': 160,
                './icosahedron.js': 161,
                './octahedron.js': 163,
                './plane.js': 164,
                './ring.js': 165,
                './sphere.js': 166,
                './tetrahedron.js': 167,
                './torus.js': 168,
                './torusKnot.js': 169,
                './triangle.js': 170
              }
            ],
            163: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('octahedron', {
                  schema: {
                    detail: { default: 0, min: 0, max: 5, type: 'int' },
                    radius: { default: 1, min: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.OctahedronGeometry(
                      t.radius,
                      t.detail
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            164: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('plane', {
                  schema: {
                    height: { default: 1, min: 0 },
                    width: { default: 1, min: 0 },
                    segmentsHeight: {
                      default: 1,
                      min: 1,
                      max: 20,
                      type: 'int'
                    },
                    segmentsWidth: { default: 1, min: 1, max: 20, type: 'int' }
                  },
                  init: function(t) {
                    this.geometry = new r.PlaneGeometry(
                      t.width,
                      t.height,
                      t.segmentsWidth,
                      t.segmentsHeight
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            165: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = r.Math.degToRad;
                n('ring', {
                  schema: {
                    radiusInner: { default: 0.8, min: 0 },
                    radiusOuter: { default: 1.2, min: 0 },
                    segmentsPhi: { default: 10, min: 1, type: 'int' },
                    segmentsTheta: { default: 32, min: 3, type: 'int' },
                    thetaLength: { default: 360, min: 0 },
                    thetaStart: { default: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.RingGeometry(
                      t.radiusInner,
                      t.radiusOuter,
                      t.segmentsTheta,
                      t.segmentsPhi,
                      o(t.thetaStart),
                      o(t.thetaLength)
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            166: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = r.Math.degToRad;
                n('sphere', {
                  schema: {
                    radius: { default: 1, min: 0 },
                    phiLength: { default: 360 },
                    phiStart: { default: 0, min: 0 },
                    thetaLength: { default: 180, min: 0 },
                    thetaStart: { default: 0 },
                    segmentsHeight: { default: 18, min: 2, type: 'int' },
                    segmentsWidth: { default: 36, min: 3, type: 'int' }
                  },
                  init: function(t) {
                    this.geometry = new r.SphereGeometry(
                      t.radius,
                      t.segmentsWidth,
                      t.segmentsHeight,
                      o(t.phiStart),
                      o(t.phiLength),
                      o(t.thetaStart),
                      o(t.thetaLength)
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            167: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('tetrahedron', {
                  schema: {
                    detail: { default: 0, min: 0, max: 5, type: 'int' },
                    radius: { default: 1, min: 0 }
                  },
                  init: function(t) {
                    this.geometry = new r.TetrahedronGeometry(
                      t.radius,
                      t.detail
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            168: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = r.Math.degToRad;
                n('torus', {
                  schema: {
                    arc: { default: 360 },
                    radius: { default: 1, min: 0 },
                    radiusTubular: { default: 0.2, min: 0 },
                    segmentsRadial: { default: 36, min: 2, type: 'int' },
                    segmentsTubular: { default: 32, min: 3, type: 'int' }
                  },
                  init: function(t) {
                    this.geometry = new r.TorusGeometry(
                      t.radius,
                      2 * t.radiusTubular,
                      t.segmentsRadial,
                      t.segmentsTubular,
                      o(t.arc)
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            169: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three');
                n('torusKnot', {
                  schema: {
                    p: { default: 2, min: 1 },
                    q: { default: 3, min: 1 },
                    radius: { default: 1, min: 0 },
                    radiusTubular: { default: 0.2, min: 0 },
                    segmentsRadial: { default: 8, min: 3, type: 'int' },
                    segmentsTubular: { default: 100, min: 3, type: 'int' }
                  },
                  init: function(t) {
                    this.geometry = new r.TorusKnotGeometry(
                      t.radius,
                      2 * t.radiusTubular,
                      t.segmentsTubular,
                      t.segmentsRadial,
                      t.p,
                      t.q
                    );
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            170: [
              function(t, e, i) {
                var n = t('../core/geometry').registerGeometry,
                  r = t('../lib/three'),
                  o = new r.Quaternion(),
                  s = new r.Vector3(0, 0, 1),
                  a = new r.Vector2(),
                  c = new r.Vector2(),
                  l = new r.Vector2();
                n('triangle', {
                  schema: {
                    vertexA: { type: 'vec3', default: { x: 0, y: 0.5, z: 0 } },
                    vertexB: {
                      type: 'vec3',
                      default: { x: -0.5, y: -0.5, z: 0 }
                    },
                    vertexC: {
                      type: 'vec3',
                      default: { x: 0.5, y: -0.5, z: 0 }
                    }
                  },
                  init: function(t) {
                    var e, i, n, u, h, d;
                    (n = new r.Triangle()).a.set(
                      t.vertexA.x,
                      t.vertexA.y,
                      t.vertexA.z
                    ),
                      n.b.set(t.vertexB.x, t.vertexB.y, t.vertexB.z),
                      n.c.set(t.vertexC.x, t.vertexC.y, t.vertexC.z),
                      (i = n.normal()),
                      o.setFromUnitVectors(i, s),
                      (u = n.a.clone().applyQuaternion(o)),
                      (h = n.b.clone().applyQuaternion(o)),
                      (d = n.c.clone().applyQuaternion(o)),
                      a.set(Math.min(u.x, h.x, d.x), Math.min(u.y, h.y, d.y)),
                      c.set(Math.max(u.x, h.x, d.x), Math.max(u.y, h.y, d.y)),
                      l.set(0, 0).subVectors(c, a),
                      (u = new r.Vector2().subVectors(u, a).divide(l)),
                      (h = new r.Vector2().subVectors(h, a).divide(l)),
                      (d = new r.Vector2().subVectors(d, a).divide(l)),
                      (e = this.geometry = new r.Geometry()).vertices.push(n.a),
                      e.vertices.push(n.b),
                      e.vertices.push(n.c),
                      e.faces.push(new r.Face3(0, 1, 2, i)),
                      (e.faceVertexUvs[0] = [[u, h, d]]);
                  }
                });
              },
              { '../core/geometry': 126, '../lib/three': 173 }
            ],
            171: [
              function(t, e, i) {
                var n = t('./utils/'),
                  r = n.debug,
                  o = r('A-Frame:error'),
                  s = r('A-Frame:warn');
                window.document.currentScript &&
                  window.document.currentScript.parentNode !==
                    window.document.head &&
                  !window.debug &&
                  s(
                    'Put the A-Frame <script> tag in the <head> of the HTML *before* the scene to ensure everything for A-Frame is properly registered before they are used from HTML.'
                  ),
                  'file:' === window.location.protocol &&
                    o(
                      'This HTML file is currently being served via the file:// protocol. Assets, textures, and models WILL NOT WORK due to cross-origin policy! Please use a local or hosted server: https://aframe.io/docs/0.5.0/introduction/getting-started.html#using-a-local-server.'
                    ),
                  (window.Promise = window.Promise || t('promise-polyfill')),
                  (window.hasNativeWebVRImplementation =
                    !!window.navigator.getVRDisplays ||
                    !!window.navigator.getVRDevices),
                  (window.WebVRConfig = window.WebVRConfig || {
                    BUFFER_SCALE: 1,
                    CARDBOARD_UI_DISABLED: !0,
                    ROTATE_INSTRUCTIONS_DISABLED: !0,
                    TOUCH_PANNER_DISABLED: !0,
                    MOUSE_KEYBOARD_CONTROLS_DISABLED: !0
                  }),
                  n.device.isIOSOlderThan10(window.navigator.userAgent) &&
                    (window.WebVRConfig.BUFFER_SCALE =
                      1 / window.devicePixelRatio),
                  t('webvr-polyfill'),
                  t('present'),
                  n.device.isBrowserEnvironment &&
                    (t('./style/aframe.css'), t('./style/rStats.css'));
                var a = t('./core/scene/a-scene').AScene,
                  c = t('./core/component').components,
                  l = t('./core/component').registerComponent,
                  u = t('./core/geometry').registerGeometry,
                  h = t('./extras/primitives/primitives').registerPrimitive,
                  d = t('./core/shader').registerShader,
                  p = t('./core/system').registerSystem,
                  f = t('./core/shader').shaders,
                  m = t('./core/system').systems,
                  g = (window.THREE = t('./lib/three')),
                  v = (window.TWEEN = t('@tweenjs/tween.js')),
                  y = t('../package');
                t('./components/index'),
                  t('./geometries/index'),
                  t('./shaders/index'),
                  t('./systems/index');
                var w = t('./core/a-node'),
                  M = t('./core/a-entity');
                t('./core/a-animation'),
                  t('./core/a-assets'),
                  t('./core/a-cubemap'),
                  t('./core/a-mixin'),
                  t('./extras/components/'),
                  t('./extras/primitives/'),
                  console.log(
                    'A-Frame Version: 0.7.1 (Date 18-10-2017, Commit #0da6cf4)'
                  ),
                  console.log('three Version:', y.dependencies.three),
                  console.log(
                    'WebVR Polyfill Version:',
                    y.dependencies['webvr-polyfill']
                  ),
                  (e.exports = window.AFRAME = {
                    AComponent: t('./core/component').Component,
                    AEntity: M,
                    ANode: w,
                    AScene: a,
                    components: c,
                    geometries: t('./core/geometry').geometries,
                    registerComponent: l,
                    registerElement: t('./core/a-register-element')
                      .registerElement,
                    registerGeometry: u,
                    registerPrimitive: h,
                    registerShader: d,
                    registerSystem: p,
                    primitives: {
                      getMeshMixin: t('./extras/primitives/getMeshMixin'),
                      primitives: t('./extras/primitives/primitives').primitives
                    },
                    scenes: t('./core/scene/scenes'),
                    schema: t('./core/schema'),
                    shaders: f,
                    systems: m,
                    THREE: g,
                    TWEEN: v,
                    utils: n,
                    version: y.version
                  });
              },
              {
                '../package': 76,
                './components/index': 85,
                './core/a-animation': 118,
                './core/a-assets': 119,
                './core/a-cubemap': 120,
                './core/a-entity': 121,
                './core/a-mixin': 122,
                './core/a-node': 123,
                './core/a-register-element': 124,
                './core/component': 125,
                './core/geometry': 126,
                './core/scene/a-scene': 128,
                './core/scene/scenes': 131,
                './core/schema': 133,
                './core/shader': 134,
                './core/system': 135,
                './extras/components/': 136,
                './extras/primitives/': 139,
                './extras/primitives/getMeshMixin': 138,
                './extras/primitives/primitives': 140,
                './geometries/index': 162,
                './lib/three': 173,
                './shaders/index': 175,
                './style/aframe.css': 180,
                './style/rStats.css': 181,
                './systems/index': 184,
                './utils/': 195,
                '@tweenjs/tween.js': 1,
                present: 33,
                'promise-polyfill': 34,
                'webvr-polyfill': 61
              }
            ],
            172: [
              function(t, e, i) {
                (window.aframeStats = function(t) {
                  var e = null,
                    i = t;
                  return {
                    update: function() {
                      var t;
                      e('te').set(
                        ((t = i.querySelectorAll('*')),
                        Array.prototype.slice.call(t).filter(function(t) {
                          return t.isEntity;
                        }),
                        t.length)
                      ),
                        window.performance.getEntriesByName &&
                          e('lt').set(
                            window.performance
                              .getEntriesByName('render-started')[0]
                              .startTime.toFixed(0)
                          );
                    },
                    start: function() {},
                    end: function() {},
                    attach: function(t) {
                      e = t;
                    },
                    values: {
                      te: { caption: 'Entities' },
                      lt: { caption: 'Load Time' }
                    },
                    groups: [{ caption: 'A-Frame', values: ['te', 'lt'] }],
                    fractions: []
                  };
                }),
                  'object' == typeof e &&
                    (e.exports = { aframeStats: window.aframeStats });
              },
              {}
            ],
            173: [
              function(t, e, n) {
                (function(i) {
                  var n = (i.THREE = t('three'));
                  n.TextureLoader &&
                    (n.TextureLoader.prototype.crossOrigin = 'anonymous'),
                    n.ImageLoader &&
                      (n.ImageLoader.prototype.crossOrigin = 'anonymous'),
                    n.Cache && (n.Cache.enabled = !0),
                    t('three/examples/js/loaders/GLTFLoader'),
                    t('three/examples/js/loaders/OBJLoader'),
                    t('three/examples/js/loaders/MTLLoader'),
                    t('three/examples/js/loaders/ColladaLoader'),
                    t('../../vendor/VRControls'),
                    t('../../vendor/VREffect'),
                    (n.ColladaLoader.prototype.crossOrigin = 'anonymous'),
                    (n.GLTFLoader.prototype.crossOrigin = 'anonymous'),
                    (n.MTLLoader.prototype.crossOrigin = 'anonymous'),
                    (n.OBJLoader.prototype.crossOrigin = 'anonymous'),
                    (e.exports = n);
                }.call(
                  this,
                  void 0 !== i
                    ? i
                    : 'undefined' != typeof self
                      ? self
                      : 'undefined' != typeof window ? window : {}
                ));
              },
              {
                '../../vendor/VRControls': 200,
                '../../vendor/VREffect': 201,
                three: 41,
                'three/examples/js/loaders/ColladaLoader': 42,
                'three/examples/js/loaders/GLTFLoader': 43,
                'three/examples/js/loaders/MTLLoader': 44,
                'three/examples/js/loaders/OBJLoader': 45
              }
            ],
            174: [
              function(t, e, i) {
                var n = t('../core/shader').registerShader,
                  r = t('../lib/three'),
                  o = t('../utils/');
                function s(t) {
                  return {
                    fog: t.fog,
                    color: new r.Color(t.color),
                    wireframe: t.wireframe,
                    wireframeLinewidth: t.wireframeLinewidth
                  };
                }
                e.exports.Shader = n('flat', {
                  schema: {
                    color: { type: 'color' },
                    fog: { default: !0 },
                    height: { default: 256 },
                    offset: { type: 'vec2', default: { x: 0, y: 0 } },
                    repeat: { type: 'vec2', default: { x: 1, y: 1 } },
                    src: { type: 'map' },
                    width: { default: 512 },
                    wireframe: { default: !1 },
                    wireframeLinewidth: { default: 2 }
                  },
                  init: function(t) {
                    (this.textureSrc = null),
                      (this.material = new r.MeshBasicMaterial(s(t))),
                      o.material.updateMap(this, t);
                  },
                  update: function(t) {
                    this.updateMaterial(t), o.material.updateMap(this, t);
                  },
                  updateMaterial: function(t) {
                    var e = this.material;
                    (t = s(t)),
                      Object.keys(t).forEach(function(i) {
                        e[i] = t[i];
                      });
                  }
                });
              },
              { '../core/shader': 134, '../lib/three': 173, '../utils/': 195 }
            ],
            175: [
              function(t, e, i) {
                t('./flat'),
                  t('./standard'),
                  t('./sdf'),
                  t('./msdf'),
                  t('./ios10hls');
              },
              {
                './flat': 174,
                './ios10hls': 176,
                './msdf': 177,
                './sdf': 178,
                './standard': 179
              }
            ],
            176: [
              function(t, e, i) {
                var n = t('../core/shader').registerShader;
                e.exports.Shader = n('ios10hls', {
                  schema: {
                    src: { type: 'map', is: 'uniform' },
                    opacity: { type: 'number', is: 'uniform', default: 1 }
                  },
                  vertexShader: [
                    'varying vec2 vUV;',
                    'void main(void) {',
                    '  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                    '  vUV = uv;',
                    '}'
                  ].join('\n'),
                  fragmentShader: [
                    'uniform sampler2D src;',
                    'uniform float opacity;',
                    'varying vec2 vUV;',
                    'void main() {',
                    '  vec2 offset = vec2(0, 0);',
                    '  vec2 repeat = vec2(1, 1);',
                    '  vec4 color = texture2D(src, vec2(vUV.x / repeat.x + offset.x, (1.0 - vUV.y) / repeat.y + offset.y)).bgra;',
                    '  gl_FragColor = vec4(color.rgb, opacity);',
                    '}'
                  ].join('\n')
                });
              },
              { '../core/shader': 134 }
            ],
            177: [
              function(t, e, i) {
                var n = t('../core/shader').registerShader;
                e.exports.Shader = n('msdf', {
                  schema: {
                    alphaTest: { type: 'number', is: 'uniform', default: 0.5 },
                    color: { type: 'color', is: 'uniform', default: 'white' },
                    map: { type: 'map', is: 'uniform' },
                    opacity: { type: 'number', is: 'uniform', default: 1 }
                  },
                  raw: !0,
                  vertexShader: [
                    'attribute vec2 uv;',
                    'attribute vec3 position;',
                    'uniform mat4 projectionMatrix;',
                    'uniform mat4 modelViewMatrix;',
                    'varying vec2 vUV;',
                    'void main(void) {',
                    '  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                    '  vUV = uv;',
                    '}'
                  ].join('\n'),
                  fragmentShader: [
                    '#ifdef GL_OES_standard_derivatives',
                    '#extension GL_OES_standard_derivatives: enable',
                    '#endif',
                    'precision highp float;',
                    '#define BIG_ENOUGH 0.001',
                    '#define MODIFIED_ALPHATEST (0.02 * isBigEnough / BIG_ENOUGH)',
                    '#define ALL_SMOOTH 0.4',
                    '#define ALL_ROUGH 0.02',
                    '#define DISCARD_ALPHA (alphaTest / (2.2 - 1.2 * ratio))',
                    'uniform sampler2D map;',
                    'uniform vec3 color;',
                    'uniform float opacity;',
                    'uniform float alphaTest;',
                    'varying vec2 vUV;',
                    'float median(float r, float g, float b) {',
                    '  return max(min(r, g), min(max(r, g), b));',
                    '}',
                    'void main() {',
                    '  vec3 sample = 1.0 - texture2D(map, vUV).rgb;',
                    '  float sigDist = median(sample.r, sample.g, sample.b) - 0.5;',
                    '  float alpha = clamp(sigDist/fwidth(sigDist) + 0.5, 0.0, 1.0);',
                    '  float dscale = 0.353505;',
                    '  vec2 duv = dscale * (dFdx(vUV) + dFdy(vUV));',
                    '  float isBigEnough = max(abs(duv.x), abs(duv.y));',
                    '  if (isBigEnough > BIG_ENOUGH) {',
                    '    float ratio = BIG_ENOUGH / isBigEnough;',
                    '    alpha = ratio * alpha + (1.0 - ratio) * (sigDist + 0.5);',
                    '  }',
                    '  if (isBigEnough <= BIG_ENOUGH && alpha < alphaTest) { discard; return; }',
                    '  if (alpha < alphaTest * MODIFIED_ALPHATEST) { discard; return; }',
                    '  gl_FragColor = vec4(color.xyz, alpha * opacity);',
                    '}'
                  ].join('\n')
                });
              },
              { '../core/shader': 134 }
            ],
            178: [
              function(t, e, i) {
                var n = t('../core/shader').registerShader;
                e.exports.Shader = n('sdf', {
                  schema: {
                    alphaTest: { type: 'number', is: 'uniform', default: 0.5 },
                    color: { type: 'color', is: 'uniform', default: 'white' },
                    map: { type: 'map', is: 'uniform' },
                    opacity: { type: 'number', is: 'uniform', default: 1 }
                  },
                  raw: !0,
                  vertexShader: [
                    'attribute vec2 uv;',
                    'attribute vec3 position;',
                    'uniform mat4 projectionMatrix;',
                    'uniform mat4 modelViewMatrix;',
                    'varying vec2 vUV;',
                    'void main(void) {',
                    '  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',
                    '  vUV = uv;',
                    '}'
                  ].join('\n'),
                  fragmentShader: [
                    '#ifdef GL_OES_standard_derivatives',
                    '#extension GL_OES_standard_derivatives: enable',
                    '#endif',
                    'precision highp float;',
                    '#define BIG_ENOUGH 0.001',
                    '#define MODIFIED_ALPHATEST (0.02 * isBigEnough / BIG_ENOUGH)',
                    '#define ALL_SMOOTH 0.4',
                    '#define ALL_ROUGH 0.02',
                    '#define DISCARD_ALPHA (alphaTest / (2.2 - 1.2 * ratio))',
                    'uniform sampler2D map;',
                    'uniform vec3 color;',
                    'uniform float opacity;',
                    'uniform float alphaTest;',
                    'varying vec2 vUV;',
                    '#ifdef GL_OES_standard_derivatives',
                    'float contour(float width, float value) {',
                    '  return smoothstep(0.5 - value, 0.5 + value, width);',
                    '}',
                    '#else',
                    'float aastep(float value, float afwidth) {',
                    '  return smoothstep(0.5 - afwidth, 0.5 + afwidth, value);',
                    '}',
                    '#endif',
                    'void main() {',
                    '#ifdef GL_OES_standard_derivatives',
                    '  vec2 uv = vUV;',
                    '  vec4 texColor = texture2D(map, uv);',
                    '  float dist = texColor.a;',
                    '  float width = fwidth(dist);',
                    '  float alpha = contour(dist, width);',
                    '  float dscale = 0.353505;',
                    '  vec2 duv = dscale * (dFdx(uv) + dFdy(uv));',
                    '  float isBigEnough = max(abs(duv.x), abs(duv.y));',
                    '  if (isBigEnough > BIG_ENOUGH) {',
                    '    float ratio = BIG_ENOUGH / isBigEnough;',
                    '    alpha = ratio * alpha + (1.0 - ratio) * dist;',
                    '  }',
                    '  else if (isBigEnough <= BIG_ENOUGH) {',
                    '    vec4 box = vec4 (uv - duv, uv + duv);',
                    '    alpha = (alpha + 0.5 * (',
                    '      contour(texture2D(map, box.xy).a, width)',
                    '      + contour(texture2D(map, box.zw).a, width)',
                    '      + contour(texture2D(map, box.xw).a, width)',
                    '      + contour(texture2D(map, box.zy).a, width)',
                    '    )) / 3.0;',
                    '  }',
                    '  if (isBigEnough <= BIG_ENOUGH && alpha < alphaTest) { discard; return; }',
                    '  if (alpha < alphaTest * MODIFIED_ALPHATEST) { discard; return; }',
                    '#else',
                    '  vec4 texColor = texture2D(map, vUV);',
                    '  float value = texColor.a;',
                    '  float afwidth = (1.0 / 32.0) * (1.4142135623730951 / (2.0 * gl_FragCoord.w));',
                    '  float alpha = aastep(value, afwidth);',
                    '  float ratio = (gl_FragCoord.w >= ALL_SMOOTH) ? 1.0 : (gl_FragCoord.w < ALL_ROUGH) ? 0.0 : (gl_FragCoord.w - ALL_ROUGH) / (ALL_SMOOTH - ALL_ROUGH);',
                    '  if (alpha < alphaTest) { if (ratio >= 1.0) { discard; return; } alpha = 0.0; }',
                    '  alpha = alpha * ratio + (1.0 - ratio) * value;',
                    '  if (ratio < 1.0)',
                    '    if (alpha <= DISCARD_ALPHA) { discard; return; }',
                    '#endif',
                    '  gl_FragColor = vec4(color, opacity * alpha);',
                    '}'
                  ].join('\n')
                });
              },
              { '../core/shader': 134 }
            ],
            179: [
              function(t, e, i) {
                var n = t('../core/shader').registerShader,
                  r = t('../lib/three'),
                  o = t('../utils/'),
                  s = new r.CubeTextureLoader(),
                  a = {};
                function c(t) {
                  var e = {
                    color: new r.Color(t.color),
                    emissive: new r.Color(t.emissive),
                    emissiveIntensity: t.emissiveIntensity,
                    fog: t.fog,
                    metalness: t.metalness,
                    roughness: t.roughness,
                    wireframe: t.wireframe,
                    wireframeLinewidth: t.wireframeLinewidth
                  };
                  return (
                    t.normalMap && (e.normalScale = t.normalScale),
                    t.ambientOcclusionMap &&
                      (e.aoMapIntensity = t.ambientOcclusionMapIntensity),
                    t.displacementMap &&
                      ((e.displacementScale = t.displacementScale),
                      (e.displacementBias = t.displacementBias)),
                    e
                  );
                }
                e.exports.Shader = n('standard', {
                  schema: {
                    ambientOcclusionMap: { type: 'map' },
                    ambientOcclusionMapIntensity: { default: 1 },
                    ambientOcclusionTextureOffset: { type: 'vec2' },
                    ambientOcclusionTextureRepeat: {
                      type: 'vec2',
                      default: { x: 1, y: 1 }
                    },
                    color: { type: 'color' },
                    displacementMap: { type: 'map' },
                    displacementScale: { default: 1 },
                    displacementBias: { default: 0.5 },
                    displacementTextureOffset: { type: 'vec2' },
                    displacementTextureRepeat: {
                      type: 'vec2',
                      default: { x: 1, y: 1 }
                    },
                    emissive: { type: 'color', default: '#000' },
                    emissiveIntensity: { default: 1 },
                    envMap: { default: '' },
                    fog: { default: !0 },
                    height: { default: 256 },
                    metalness: { default: 0, min: 0, max: 1 },
                    normalMap: { type: 'map' },
                    normalScale: { type: 'vec2', default: { x: 1, y: 1 } },
                    normalTextureOffset: { type: 'vec2' },
                    normalTextureRepeat: {
                      type: 'vec2',
                      default: { x: 1, y: 1 }
                    },
                    offset: { type: 'vec2', default: { x: 0, y: 0 } },
                    repeat: { type: 'vec2', default: { x: 1, y: 1 } },
                    roughness: { default: 0.5, min: 0, max: 1 },
                    sphericalEnvMap: { type: 'map' },
                    src: { type: 'map' },
                    width: { default: 512 },
                    wireframe: { default: !1 },
                    wireframeLinewidth: { default: 2 }
                  },
                  init: function(t) {
                    (this.material = new r.MeshStandardMaterial(c(t))),
                      o.material.updateMap(this, t),
                      t.normalMap &&
                        o.material.updateDistortionMap('normal', this, t),
                      t.displacementMap &&
                        o.material.updateDistortionMap('displacement', this, t),
                      t.ambientOcclusionMap &&
                        o.material.updateDistortionMap(
                          'ambientOcclusion',
                          this,
                          t
                        ),
                      this.updateEnvMap(t);
                  },
                  update: function(t) {
                    this.updateMaterial(t),
                      o.material.updateMap(this, t),
                      t.normalMap &&
                        o.material.updateDistortionMap('normal', this, t),
                      t.displacementMap &&
                        o.material.updateDistortionMap('displacement', this, t),
                      t.ambientOcclusionMap &&
                        o.material.updateDistortionMap(
                          'ambientOcclusion',
                          this,
                          t
                        ),
                      this.updateEnvMap(t);
                  },
                  updateMaterial: function(t) {
                    var e = this.material;
                    (t = c(t)),
                      Object.keys(t).forEach(function(i) {
                        e[i] = t[i];
                      });
                  },
                  updateEnvMap: function(t) {
                    var e = this,
                      i = this.material,
                      n = t.envMap,
                      c = t.sphericalEnvMap;
                    if ((!n && !c) || this.isLoadingEnvMap)
                      return (i.envMap = null), void (i.needsUpdate = !0);
                    (this.isLoadingEnvMap = !0),
                      c
                        ? this.el.sceneEl.systems.material.loadTexture(
                            c,
                            { src: c },
                            function(t) {
                              (e.isLoadingEnvMap = !1),
                                (t.mapping = r.SphericalReflectionMapping),
                                (i.envMap = t),
                                o.material.handleTextureEvents(e.el, t),
                                (i.needsUpdate = !0);
                            }
                          )
                        : a[n]
                          ? a[n].then(function(t) {
                              (e.isLoadingEnvMap = !1),
                                (i.envMap = t),
                                o.material.handleTextureEvents(e.el, t),
                                (i.needsUpdate = !0);
                            })
                          : (a[n] = new Promise(function(t) {
                              o.srcLoader.validateCubemapSrc(n, function(n) {
                                s.load(n, function(n) {
                                  (e.isLoadingEnvMap = !1),
                                    (i.envMap = n),
                                    o.material.handleTextureEvents(e.el, n),
                                    t(n);
                                });
                              });
                            }));
                  }
                });
              },
              { '../core/shader': 134, '../lib/three': 173, '../utils/': 195 }
            ],
            180: [
              function(t, e, i) {
                var n =
                  ".a-html{bottom:0;left:0;position:fixed;right:0;top:0}.a-body{height:100%;margin:0;overflow:hidden;padding:0;width:100%}:-webkit-full-screen{background-color:transparent}.a-hidden{display:none!important}.a-canvas{height:100%;left:0;position:absolute;top:0;width:100%}.a-canvas.a-grab-cursor:hover{cursor:grab;cursor:-moz-grab;cursor:-webkit-grab}.a-canvas.a-grab-cursor:active,.a-grabbing{cursor:grabbing;cursor:-moz-grabbing;cursor:-webkit-grabbing}// Class is removed when doing <a-scene embedded>. a-scene.fullscreen .a-canvas{width:100%!important;height:100%!important;top:0!important;left:0!important;right:0!important;bottom:0!important;z-index:999999!important;position:fixed!important}.a-inspector-loader{background-color:#ed3160;position:fixed;left:3px;top:3px;padding:6px 10px;color:#fff;text-decoration:none;font-size:12px;font-family:Roboto,sans-serif;text-align:center;z-index:99999;width:204px}@keyframes dots-1{from{opacity:0}25%{opacity:1}}@keyframes dots-2{from{opacity:0}50%{opacity:1}}@keyframes dots-3{from{opacity:0}75%{opacity:1}}@-webkit-keyframes dots-1{from{opacity:0}25%{opacity:1}}@-webkit-keyframes dots-2{from{opacity:0}50%{opacity:1}}@-webkit-keyframes dots-3{from{opacity:0}75%{opacity:1}}.a-inspector-loader .dots span{animation:dots-1 2s infinite steps(1);-webkit-animation:dots-1 2s infinite steps(1)}.a-inspector-loader .dots span:first-child+span{animation-name:dots-2;-webkit-animation-name:dots-2}.a-inspector-loader .dots span:first-child+span+span{animation-name:dots-3;-webkit-animation-name:dots-3}a-scene{display:block;position:relative;height:100%;width:100%}a-assets,a-scene audio,a-scene img,a-scene video{display:none}.a-enter-vr-modal,.a-orientation-modal{font-family:Consolas,Andale Mono,Courier New,monospace}.a-enter-vr-modal a{border-bottom:1px solid #fff;padding:2px 0;text-decoration:none;transition:.1s color ease-in}.a-enter-vr-modal a:hover{background-color:#fff;color:#111;padding:2px 4px;position:relative;left:-4px}.a-enter-vr{font-family:sans-serif,monospace;font-size:13px;width:100%;font-weight:200;line-height:16px;position:absolute;right:20px;bottom:20px}.a-enter-vr.embedded{right:5px;bottom:5px}.a-enter-vr-button,.a-enter-vr-modal,.a-enter-vr-modal a{color:#fff}.a-enter-vr-button{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20245.82%20141.73%22%3E%3Cdefs%3E%3Cstyle%3E.a%7Bfill%3A%23fff%3Bfill-rule%3Aevenodd%3B%7D%3C%2Fstyle%3E%3C%2Fdefs%3E%3Ctitle%3Emask%3C%2Ftitle%3E%3Cpath%20class%3D%22a%22%20d%3D%22M175.56%2C111.37c-22.52%2C0-40.77-18.84-40.77-42.07S153%2C27.24%2C175.56%2C27.24s40.77%2C18.84%2C40.77%2C42.07S198.08%2C111.37%2C175.56%2C111.37ZM26.84%2C69.31c0-23.23%2C18.25-42.07%2C40.77-42.07s40.77%2C18.84%2C40.77%2C42.07-18.26%2C42.07-40.77%2C42.07S26.84%2C92.54%2C26.84%2C69.31ZM27.27%2C0C11.54%2C0%2C0%2C12.34%2C0%2C28.58V110.9c0%2C16.24%2C11.54%2C30.83%2C27.27%2C30.83H99.57c2.17%2C0%2C4.19-1.83%2C5.4-3.7L116.47%2C118a8%2C8%2C0%2C0%2C1%2C12.52-.18l11.51%2C20.34c1.2%2C1.86%2C3.22%2C3.61%2C5.39%2C3.61h72.29c15.74%2C0%2C27.63-14.6%2C27.63-30.83V28.58C245.82%2C12.34%2C233.93%2C0%2C218.19%2C0H27.27Z%22%2F%3E%3C%2Fsvg%3E) 50% 50%/70% 70% no-repeat rgba(0,0,0,.35);border:0;bottom:0;cursor:pointer;min-width:50px;min-height:30px;padding-right:5%;padding-top:4%;position:absolute;right:0;transition:background-color .05s ease;-webkit-transition:background-color .05s ease;z-index:9999}.a-enter-vr-button:active,.a-enter-vr-button:hover{background-color:#666}[data-a-enter-vr-no-webvr] .a-enter-vr-button{border-color:#666;opacity:.65}[data-a-enter-vr-no-webvr] .a-enter-vr-button:active,[data-a-enter-vr-no-webvr] .a-enter-vr-button:hover{background-color:rgba(0,0,0,.35);cursor:not-allowed}.a-enter-vr-modal{background-color:#666;border-radius:0;display:none;min-height:32px;margin-right:70px;padding:9px;width:280px;right:2%;position:absolute}.a-enter-vr-modal:after{border-bottom:10px solid transparent;border-left:10px solid #666;border-top:10px solid transparent;display:inline-block;content:'';position:absolute;right:-5px;top:5px;width:0;height:0}.a-enter-vr-modal a,.a-enter-vr-modal p{display:inline}.a-enter-vr-modal p{margin:0}.a-enter-vr-modal p:after{content:' '}[data-a-enter-vr-no-headset].a-enter-vr:hover .a-enter-vr-modal,[data-a-enter-vr-no-webvr].a-enter-vr:hover .a-enter-vr-modal{display:block}.a-orientation-modal{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20version%3D%221.1%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%2090%2090%22%20enable-background%3D%22new%200%200%2090%2090%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpolygon%20points%3D%220%2C0%200%2C0%200%2C0%20%22%3E%3C/polygon%3E%3Cg%3E%3Cpath%20d%3D%22M71.545%2C48.145h-31.98V20.743c0-2.627-2.138-4.765-4.765-4.765H18.456c-2.628%2C0-4.767%2C2.138-4.767%2C4.765v42.789%20%20%20c0%2C2.628%2C2.138%2C4.766%2C4.767%2C4.766h5.535v0.959c0%2C2.628%2C2.138%2C4.765%2C4.766%2C4.765h42.788c2.628%2C0%2C4.766-2.137%2C4.766-4.765V52.914%20%20%20C76.311%2C50.284%2C74.173%2C48.145%2C71.545%2C48.145z%20M18.455%2C16.935h16.344c2.1%2C0%2C3.808%2C1.708%2C3.808%2C3.808v27.401H37.25V22.636%20%20%20c0-0.264-0.215-0.478-0.479-0.478H16.482c-0.264%2C0-0.479%2C0.214-0.479%2C0.478v36.585c0%2C0.264%2C0.215%2C0.478%2C0.479%2C0.478h7.507v7.644%20%20%20h-5.534c-2.101%2C0-3.81-1.709-3.81-3.81V20.743C14.645%2C18.643%2C16.354%2C16.935%2C18.455%2C16.935z%20M16.96%2C23.116h19.331v25.031h-7.535%20%20%20c-2.628%2C0-4.766%2C2.139-4.766%2C4.768v5.828h-7.03V23.116z%20M71.545%2C73.064H28.757c-2.101%2C0-3.81-1.708-3.81-3.808V52.914%20%20%20c0-2.102%2C1.709-3.812%2C3.81-3.812h42.788c2.1%2C0%2C3.809%2C1.71%2C3.809%2C3.812v16.343C75.354%2C71.356%2C73.645%2C73.064%2C71.545%2C73.064z%22%3E%3C/path%3E%3Cpath%20d%3D%22M28.919%2C58.424c-1.466%2C0-2.659%2C1.193-2.659%2C2.66c0%2C1.466%2C1.193%2C2.658%2C2.659%2C2.658c1.468%2C0%2C2.662-1.192%2C2.662-2.658%20%20%20C31.581%2C59.617%2C30.387%2C58.424%2C28.919%2C58.424z%20M28.919%2C62.786c-0.939%2C0-1.703-0.764-1.703-1.702c0-0.939%2C0.764-1.704%2C1.703-1.704%20%20%20c0.94%2C0%2C1.705%2C0.765%2C1.705%2C1.704C30.623%2C62.022%2C29.858%2C62.786%2C28.919%2C62.786z%22%3E%3C/path%3E%3Cpath%20d%3D%22M69.654%2C50.461H33.069c-0.264%2C0-0.479%2C0.215-0.479%2C0.479v20.288c0%2C0.264%2C0.215%2C0.478%2C0.479%2C0.478h36.585%20%20%20c0.263%2C0%2C0.477-0.214%2C0.477-0.478V50.939C70.131%2C50.676%2C69.917%2C50.461%2C69.654%2C50.461z%20M69.174%2C51.417V70.75H33.548V51.417H69.174z%22%3E%3C/path%3E%3Cpath%20d%3D%22M45.201%2C30.296c6.651%2C0%2C12.233%2C5.351%2C12.551%2C11.977l-3.033-2.638c-0.193-0.165-0.507-0.142-0.675%2C0.048%20%20%20c-0.174%2C0.198-0.153%2C0.501%2C0.045%2C0.676l3.883%2C3.375c0.09%2C0.075%2C0.198%2C0.115%2C0.312%2C0.115c0.141%2C0%2C0.273-0.061%2C0.362-0.166%20%20%20l3.371-3.877c0.173-0.2%2C0.151-0.502-0.047-0.675c-0.194-0.166-0.508-0.144-0.676%2C0.048l-2.592%2C2.979%20%20%20c-0.18-3.417-1.629-6.605-4.099-9.001c-2.538-2.461-5.877-3.817-9.404-3.817c-0.264%2C0-0.479%2C0.215-0.479%2C0.479%20%20%20C44.72%2C30.083%2C44.936%2C30.296%2C45.201%2C30.296z%22%3E%3C/path%3E%3C/g%3E%3C/svg%3E) center/50% 50% no-repeat rgba(244,244,244,1);bottom:0;font-size:14px;font-weight:600;left:0;line-height:20px;right:0;position:fixed;top:0;z-index:9999999}.a-orientation-modal:after{color:#666;content:\"Insert phone into Cardboard holder.\";display:block;position:absolute;text-align:center;top:70%;transform:translateY(-70%);width:100%}.a-orientation-modal button{background:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20xmlns%3Axlink%3D%22http%3A//www.w3.org/1999/xlink%22%20version%3D%221.1%22%20x%3D%220px%22%20y%3D%220px%22%20viewBox%3D%220%200%20100%20100%22%20enable-background%3D%22new%200%200%20100%20100%22%20xml%3Aspace%3D%22preserve%22%3E%3Cpath%20fill%3D%22%23000000%22%20d%3D%22M55.209%2C50l17.803-17.803c1.416-1.416%2C1.416-3.713%2C0-5.129c-1.416-1.417-3.713-1.417-5.129%2C0L50.08%2C44.872%20%20L32.278%2C27.069c-1.416-1.417-3.714-1.417-5.129%2C0c-1.417%2C1.416-1.417%2C3.713%2C0%2C5.129L44.951%2C50L27.149%2C67.803%20%20c-1.417%2C1.416-1.417%2C3.713%2C0%2C5.129c0.708%2C0.708%2C1.636%2C1.062%2C2.564%2C1.062c0.928%2C0%2C1.856-0.354%2C2.564-1.062L50.08%2C55.13l17.803%2C17.802%20%20c0.708%2C0.708%2C1.637%2C1.062%2C2.564%2C1.062s1.856-0.354%2C2.564-1.062c1.416-1.416%2C1.416-3.713%2C0-5.129L55.209%2C50z%22%3E%3C/path%3E%3C/svg%3E) no-repeat;border:none;height:50px;text-indent:-9999px;width:50px}";
                t('browserify-css').createStyle(n, {
                  href: 'src\\style\\aframe.css'
                }),
                  (e.exports = n);
              },
              { 'browserify-css': 5 }
            ],
            181: [
              function(t, e, i) {
                var n =
                  '.rs-base{background-color:#333;color:#fafafa;border-radius:0;font:10px monospace;left:5px;line-height:1em;opacity:.85;overflow:hidden;padding:10px;position:fixed;top:5px;width:300px;z-index:10000}.rs-base div.hidden{display:none}.rs-base h1{color:#fff;cursor:pointer;font-size:1.4em;font-weight:300;margin:0 0 5px;padding:0}.rs-group{display:-webkit-box;display:-webkit-flex;display:flex;-webkit-flex-direction:column-reverse;flex-direction:column-reverse;margin-bottom:5px}.rs-group:last-child{margin-bottom:0}.rs-counter-base{align-items:center;display:-webkit-box;display:-webkit-flex;display:flex;height:10px;-webkit-justify-content:space-between;justify-content:space-between;margin:2px 0}.rs-counter-base.alarm{color:#b70000;text-shadow:0 0 0 #b70000,0 0 1px #fff,0 0 1px #fff,0 0 2px #fff,0 0 2px #fff,0 0 3px #fff,0 0 3px #fff,0 0 4px #fff,0 0 4px #fff}.rs-counter-id{font-weight:300;-webkit-box-ordinal-group:0;-webkit-order:0;order:0;width:54px}.rs-counter-value{font-weight:300;-webkit-box-ordinal-group:1;-webkit-order:1;order:1;text-align:right;width:35px}.rs-canvas{-webkit-box-ordinal-group:2;-webkit-order:2;order:2}@media (min-width:480px){.rs-base{left:20px;top:20px}}';
                t('browserify-css').createStyle(n, {
                  href: 'src\\style\\rStats.css'
                }),
                  (e.exports = n);
              },
              { 'browserify-css': 5 }
            ],
            182: [
              function(t, e, i) {
                var n = t('../utils/bind'),
                  r = t('../constants/'),
                  o = t('../core/system').registerSystem,
                  s = 'data-aframe-default-camera';
                e.exports.System = o('camera', {
                  init: function() {
                    (this.activeCameraEl = null),
                      this.sceneEl.addEventListener(
                        'loaded',
                        n(this.setupDefaultCamera, this)
                      );
                  },
                  setupDefaultCamera: function() {
                    var t,
                      e = this.sceneEl;
                    e.camera
                      ? e.emit('camera-ready', { cameraEl: e.camera.el })
                      : ((t = document.createElement('a-entity')).setAttribute(
                          'position',
                          '0 0 0'
                        ),
                        t.setAttribute(s, ''),
                        t.setAttribute('camera', {
                          active: !0,
                          userHeight: r.DEFAULT_CAMERA_HEIGHT
                        }),
                        t.setAttribute('wasd-controls', ''),
                        t.setAttribute('look-controls', ''),
                        t.setAttribute(r.AFRAME_INJECTED, ''),
                        e.appendChild(t),
                        e.addEventListener(
                          'enter-vr',
                          this.removeDefaultOffset
                        ),
                        e.addEventListener('exit-vr', this.addDefaultOffset),
                        e.emit('camera-ready', { cameraEl: t }));
                  },
                  disableActiveCamera: function() {
                    var t = this.sceneEl.querySelectorAll('[camera]');
                    t[t.length - 1].setAttribute('camera', 'active', !0);
                  },
                  setActiveCamera: function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o = this.activeCameraEl,
                      a = this.sceneEl;
                    if (
                      (r = t.getObject3D('camera')) &&
                      t !== this.activeCameraEl
                    ) {
                      var c = a.querySelector('[' + s + ']');
                      for (
                        t !== (c && c.querySelector('[camera]')) &&
                          (function(t) {
                            var e;
                            if (!t.camera) return;
                            if (!(e = t.querySelector('[' + s + ']'))) return;
                            t.removeChild(e);
                          })(a),
                          this.activeCameraEl = t,
                          this.activeCameraEl.play(),
                          a.camera = r,
                          o && o.setAttribute('camera', 'active', !1),
                          i = a.querySelectorAll('[camera]'),
                          n = 0;
                        n < i.length;
                        n++
                      )
                        t !== (e = i[n]) &&
                          (e.setAttribute('camera', 'active', !1), e.pause());
                      a.emit('camera-set-active', { cameraEl: t });
                    }
                  }
                });
              },
              {
                '../constants/': 116,
                '../core/system': 135,
                '../utils/bind': 189
              }
            ],
            183: [
              function(t, e, i) {
                var n = t('../core/geometry').geometries,
                  r = t('../core/system').registerSystem,
                  o = t('../lib/three');
                function s(t) {
                  var e = t.primitive,
                    i = n[e] && n[e].Geometry,
                    r = new i();
                  if (!i) throw new Error('Unknown geometry `' + e + '`');
                  return (
                    r.init(t),
                    (function(t, e) {
                      var i;
                      if (!e) return t;
                      return (
                        ((i = new o.BufferGeometry().fromGeometry(
                          t
                        )).metadata = {
                          type: t.type,
                          parameters: t.parameters || {}
                        }),
                        t.dispose(),
                        i
                      );
                    })(r.geometry, t.buffer)
                  );
                }
                e.exports.System = r('geometry', {
                  init: function() {
                    (this.cache = {}), (this.cacheCount = {});
                  },
                  clearCache: function() {
                    (this.cache = {}), (this.cacheCount = {});
                  },
                  getOrCreateGeometry: function(t) {
                    var e,
                      i,
                      n,
                      r,
                      o = this.cache;
                    return t.skipCache || t.mergeTo
                      ? s(t)
                      : ((e = o[(i = this.hash(t))]),
                        ((n = this.cacheCount)[(r = i)] =
                          void 0 === n[r] ? 1 : n[r] + 1),
                        e || ((e = s(t)), (o[i] = e), e));
                  },
                  unuseGeometry: function(t) {
                    var e,
                      i = this.cache,
                      n = this.cacheCount;
                    t.skipCache ||
                      t.mergeTo ||
                      (i[(e = this.hash(t))] &&
                        (n[e]--,
                        n[e] > 0 ||
                          (i[e].dispose(), delete i[e], delete n[e])));
                  },
                  hash: function(t) {
                    return JSON.stringify(t);
                  }
                });
              },
              {
                '../core/geometry': 126,
                '../core/system': 135,
                '../lib/three': 173
              }
            ],
            184: [
              function(t, e, i) {
                t('./camera'),
                  t('./geometry'),
                  t('./light'),
                  t('./material'),
                  t('./shadow'),
                  t('./tracked-controls');
              },
              {
                './camera': 182,
                './geometry': 183,
                './light': 185,
                './material': 186,
                './shadow': 187,
                './tracked-controls': 188
              }
            ],
            185: [
              function(t, e, i) {
                var n = t('../core/system').registerSystem,
                  r = t('../utils/bind'),
                  o = t('../constants/'),
                  s = 'data-aframe-default-light';
                e.exports.System = n('light', {
                  schema: { defaultLightsEnabled: { default: !0 } },
                  init: function() {
                    (this.defaultLights = !1),
                      (this.userDefinedLights = !1),
                      this.sceneEl.addEventListener(
                        'loaded',
                        r(this.setupDefaultLights, this)
                      );
                  },
                  registerLight: function(t) {
                    t.hasAttribute(s) ||
                      (this.removeDefaultLights(),
                      (this.userDefinedLights = !0));
                  },
                  removeDefaultLights: function() {
                    var t,
                      e = this.sceneEl;
                    if (this.defaultLights) {
                      t = document.querySelectorAll('[' + s + ']');
                      for (var i = 0; i < t.length; i++) e.removeChild(t[i]);
                      this.defaultLights = !1;
                    }
                  },
                  setupDefaultLights: function() {
                    var t,
                      e,
                      i = this.sceneEl;
                    this.userDefinedLights ||
                      this.defaultLights ||
                      !this.data.defaultLightsEnabled ||
                      ((t = document.createElement('a-entity')).setAttribute(
                        'light',
                        { color: '#BBB', type: 'ambient' }
                      ),
                      t.setAttribute(s, ''),
                      t.setAttribute(o.AFRAME_INJECTED, ''),
                      i.appendChild(t),
                      (e = document.createElement('a-entity')).setAttribute(
                        'light',
                        { color: '#FFF', intensity: 0.6, castShadow: !0 }
                      ),
                      e.setAttribute('position', { x: -0.5, y: 1, z: 1 }),
                      e.setAttribute(s, ''),
                      e.setAttribute(o.AFRAME_INJECTED, ''),
                      i.appendChild(e),
                      (this.defaultLights = !0));
                  }
                });
              },
              {
                '../constants/': 116,
                '../core/system': 135,
                '../utils/bind': 189
              }
            ],
            186: [
              function(t, e, i) {
                var n = t('../core/system').registerSystem,
                  r = t('../lib/three'),
                  o = t('../utils/'),
                  s = t('../utils/material').isHLS,
                  a = o.bind,
                  c = o.debug,
                  l = c('components:texture:error'),
                  u = new r.TextureLoader(),
                  h = c('components:texture:warn');
                function d(t, e) {
                  var i = e.offset || { x: 0, y: 0 },
                    n = e.repeat || { x: 1, y: 1 };
                  (e.npot || !1) &&
                    ((t.wrapS = r.ClampToEdgeWrapping),
                    (t.wrapT = r.ClampToEdgeWrapping),
                    (t.magFilter = r.LinearFilter),
                    (t.minFilter = r.LinearFilter)),
                    (1 === n.x && 1 === n.y) ||
                      ((t.wrapS = r.RepeatWrapping),
                      (t.wrapT = r.RepeatWrapping),
                      t.repeat.set(n.x, n.y)),
                    (0 === i.x && 0 === i.y) || t.offset.set(i.x, i.y);
                }
                u.setCrossOrigin('anonymous'),
                  (e.exports.System = n('material', {
                    init: function() {
                      (this.materials = {}),
                        (this.textureCounts = {}),
                        (this.textureCache = {}),
                        this.sceneEl.addEventListener(
                          'materialtextureloaded',
                          a(this.onMaterialTextureLoaded, this)
                        );
                    },
                    clearTextureCache: function() {
                      this.textureCache = {};
                    },
                    loadTexture: function(t, e, i) {
                      var n = this;
                      if ('CANVAS' !== t.tagName) {
                        if ('VIDEO' === t.tagName)
                          return (
                            t.hasAttribute('src') ||
                              t.hasAttribute('srcObject') ||
                              h(
                                'Video element was defined without `src` nor `srcObject` attributes.'
                              ),
                            void this.loadVideo(t, e, i)
                          );
                        o.srcLoader.validateSrc(
                          t,
                          function(t) {
                            n.loadImage(t, e, i);
                          },
                          function(t) {
                            n.loadVideo(t, e, i);
                          }
                        );
                      } else this.loadCanvas(t, e, i);
                    },
                    loadImage: function(t, e, i) {
                      var n = this.hash(e),
                        o = this.textureCache;
                      o[n]
                        ? o[n].then(i)
                        : ((o[n] = (function(t, e) {
                            return new Promise(function(i, n) {
                              function o(t) {
                                d(t, e), (t.needsUpdate = !0), i(t);
                              }
                              if ('string' != typeof t)
                                return void o(new r.Texture(t));
                              u.load(
                                t,
                                o,
                                function() {},
                                function(t) {
                                  l(
                                    '`$s` could not be fetched (Error code: %s; Response: %s)',
                                    t.status,
                                    t.statusText
                                  );
                                }
                              );
                            });
                          })(t, e)),
                          o[n].then(i));
                    },
                    loadCanvas: function(t, e, i) {
                      (t.readyState = 2),
                        (t.HAVE_CURRENT_DATA = 2),
                        this.loadVideo(t, e, i);
                    },
                    loadVideo: function(t, e, i) {
                      var n,
                        o,
                        a,
                        c,
                        l,
                        u,
                        p,
                        f,
                        m = this.textureCache;
                      function g(t) {
                        (t.texture.needsUpdate = !0), i(t.texture, t.videoEl);
                      }
                      if ('string' != typeof t) {
                        if (((a = t), m[(n = this.hashVideo(e, a))]))
                          return void m[n].then(g);
                        !(function(t) {
                          (t.autoplay =
                            t.hasAttribute('autoplay') &&
                            'false' !== t.getAttribute('autoplay')),
                            (t.controls =
                              t.hasAttribute('controls') &&
                              'false' !== t.getAttribute('controls')),
                            'false' === t.getAttribute('loop') &&
                              t.removeAttribute('loop');
                          'false' === t.getAttribute('preload') &&
                            (t.preload = 'none');
                          (t.crossOrigin = t.crossOrigin || 'anonymous'),
                            t.setAttribute('playsinline', ''),
                            t.setAttribute('webkit-playsinline', '');
                        })(a);
                      }
                      (a =
                        a ||
                        ((l = t),
                        (u = e.width),
                        (p = e.height),
                        ((f = document.createElement('video')).width = u),
                        (f.height = p),
                        f.setAttribute('playsinline', ''),
                        f.setAttribute('webkit-playsinline', ''),
                        (f.autoplay = !0),
                        (f.loop = !0),
                        (f.crossOrigin = 'anonymous'),
                        f.addEventListener(
                          'error',
                          function() {
                            h('`$s` is not a valid video', l);
                          },
                          !0
                        ),
                        (f.src = l),
                        f)),
                        m[(n = this.hashVideo(e, a))]
                          ? m[n].then(g)
                          : (((o = new r.VideoTexture(a)).minFilter =
                              r.LinearFilter),
                            d(o, e),
                            this.sceneEl.isIOS &&
                              s(
                                a.src || a.getAttribute('src'),
                                a.type || a.getAttribute('type')
                              ) &&
                              ((o.format = r.RGBAFormat),
                              (o.needsCorrectionBGRA = !0),
                              (o.flipY = !1),
                              (o.needsCorrectionFlipY = !0)),
                            (c = { texture: o, videoEl: a }),
                            (m[n] = Promise.resolve(c)),
                            g(c));
                    },
                    hash: function(t) {
                      return (
                        t.src.tagName &&
                          ((t = o.extendDeep({}, t)).src = t.src.getAttribute(
                            'src'
                          )),
                        JSON.stringify(t)
                      );
                    },
                    hashVideo: function(t, e) {
                      return (function(t, e) {
                        var i,
                          n,
                          r,
                          o = e.getAttribute('id');
                        if (o) return o;
                        for (
                          n = '', r = t || {}, i = 0;
                          i < e.attributes.length;
                          i++
                        )
                          r[e.attributes[i].name] = e.attributes[i].value;
                        return (
                          Object.keys(r)
                            .sort()
                            .forEach(function(t) {
                              n += t + ':' + r[t] + ';';
                            }),
                          n
                        );
                      })(t, e);
                    },
                    registerMaterial: function(t) {
                      this.materials[t.uuid] = t;
                    },
                    unregisterMaterial: function(t) {
                      delete this.materials[t.uuid];
                      var e = this.textureCounts;
                      Object.keys(t)
                        .filter(function(e) {
                          return t[e] && t[e].isTexture;
                        })
                        .forEach(function(i) {
                          e[t[i].uuid]--, e[t[i].uuid] <= 0 && t[i].dispose();
                        });
                    },
                    updateMaterials: function(t) {
                      var e = this.materials;
                      Object.keys(e).forEach(function(t) {
                        e[t].needsUpdate = !0;
                      });
                    },
                    onMaterialTextureLoaded: function(t) {
                      this.textureCounts[t.detail.texture.uuid] ||
                        (this.textureCounts[t.detail.texture.uuid] = 0),
                        this.textureCounts[t.detail.texture.uuid]++;
                    }
                  }));
              },
              {
                '../core/system': 135,
                '../lib/three': 173,
                '../utils/': 195,
                '../utils/material': 196
              }
            ],
            187: [
              function(t, e, i) {
                var n = t('../core/system').registerSystem,
                  r = t('../utils/bind'),
                  o = t('../lib/three'),
                  s = {
                    basic: o.BasicShadowMap,
                    pcf: o.PCFShadowMap,
                    pcfsoft: o.PCFSoftShadowMap
                  };
                e.exports.System = n('shadow', {
                  schema: {
                    type: {
                      default: 'pcf',
                      oneOf: ['basic', 'pcf', 'pcfsoft']
                    },
                    renderReverseSided: { default: !0 },
                    renderSingleSided: { default: !0 }
                  },
                  init: function() {
                    var t = this.sceneEl,
                      e = this.data;
                    (this.shadowMapEnabled = !1),
                      t.addEventListener(
                        'render-target-loaded',
                        r(function() {
                          t.renderer &&
                            ((t.renderer.shadowMap.type = s[e.type]),
                            (t.renderer.shadowMap.renderReverseSided =
                              e.renderReverseSided),
                            (t.renderer.shadowMap.renderSingleSided =
                              e.renderSingleSided),
                            this.setShadowMapEnabled(this.shadowMapEnabled));
                        }, this)
                      );
                  },
                  setShadowMapEnabled: function(t) {
                    var e = this.sceneEl.renderer;
                    (this.shadowMapEnabled = t), e && (e.shadowMap.enabled = t);
                  }
                });
              },
              {
                '../core/system': 135,
                '../lib/three': 173,
                '../utils/bind': 189
              }
            ],
            188: [
              function(t, e, i) {
                var n = t('../core/system').registerSystem;
                e.exports.System = n('tracked-controls', {
                  init: function() {
                    var t = this;
                    (this.controllers = []),
                      this.updateControllerList(),
                      navigator.getVRDisplays &&
                        this.sceneEl.addEventListener('enter-vr', function() {
                          navigator.getVRDisplays().then(function(e) {
                            e.length && (t.vrDisplay = e[0]);
                          });
                        });
                  },
                  tick: function() {
                    this.updateControllerList();
                  },
                  updateControllerList: function() {
                    var t,
                      e,
                      i,
                      n,
                      r = this.controllers;
                    if (
                      (e = navigator.getGamepads && navigator.getGamepads())
                    ) {
                      for (n = r.length, r.length = 0, i = 0; i < e.length; ++i)
                        (t = e[i]) && t.pose && r.push(t);
                      r.length !== n &&
                        this.el.emit('controllersupdated', void 0, !1);
                    }
                  }
                });
              },
              { '../core/system': 135 }
            ],
            189: [
              function(t, e, i) {
                e.exports = function(t, e) {
                  return (
                    (i = Array.prototype.slice.call(arguments, 2)),
                    function() {
                      var n = i.concat(
                        Array.prototype.slice.call(arguments, 0)
                      );
                      return t.apply(e, n);
                    }
                  );
                  var i;
                };
              },
              {}
            ],
            190: [
              function(t, e, i) {
                var n = t('./debug'),
                  r = t('object-assign'),
                  o = n('utils:coordinates:warn'),
                  s = /^\s*((-?\d*\.{0,1}\d+(e-?\d+)?)\s+){2,3}(-?\d*\.{0,1}\d+(e-?\d+)?)\s*$/;
                function a(t) {
                  return s.test(t);
                }
                function c(t) {
                  var e;
                  for (e in t)
                    void 0 !== t[e]
                      ? t[e].constructor === String &&
                        (t[e] = parseFloat(t[e], 10))
                      : delete t[e];
                  return t;
                }
                (e.exports.regex = s),
                  (e.exports.parse = function(t, e) {
                    var i, n;
                    return t && t instanceof Object
                      ? (e &&
                          ((t.x = void 0 === t.x ? e.x : t.x),
                          (t.y = void 0 === t.y ? e.y : t.y),
                          (t.z = void 0 === t.z ? e.z : t.z),
                          (t.w = void 0 === t.w ? e.w : t.w)),
                        c(t))
                      : null === t || void 0 === t
                        ? 'object' == typeof e ? r({}, e) : e
                        : ((i = t
                            .trim()
                            .replace(/\s+/g, ' ')
                            .split(' ')),
                          ((n = {}).x = i[0] || (e && e.x)),
                          (n.y = i[1] || (e && e.y)),
                          (n.z = i[2] || (e && e.z)),
                          (n.w = i[3] || (e && e.w)),
                          c(n));
                  }),
                  (e.exports.stringify = function(t) {
                    return 'object' != typeof t
                      ? t
                      : [t.x, t.y, t.z, t.w].join(' ').trim();
                  }),
                  (e.exports.isCoordinates = a),
                  (e.exports.isCoordinate = function(t) {
                    return (
                      o(
                        '`AFRAME.utils.isCoordinate` has been renamed to `AFRAME.utils.isCoordinates`'
                      ),
                      a(t)
                    );
                  }),
                  (e.exports.toVector3 = function(t) {
                    return new THREE.Vector3(t.x, t.y, t.z);
                  });
              },
              { './debug': 191, 'object-assign': 26 }
            ],
            191: [
              function(t, e, i) {
                (function(i) {
                  var n = t('debug'),
                    r = {
                      colors: {
                        debug: 'gray',
                        error: 'red',
                        info: 'gray',
                        warn: 'orange'
                      }
                    },
                    o = function(t) {
                      var e,
                        i,
                        o = n(t);
                      return (
                        (o.color = ((i = t.split(':')),
                        (e = i[i.length - 1]),
                        (r.colors && r.colors[e]) || null)),
                        o
                      );
                    };
                  t('object-assign')(o, n);
                  var s = (function() {
                    try {
                      return window.localStorage;
                    } catch (t) {}
                  })();
                  s && (parseInt(s.logs, 10) || 'true' === s.logs)
                    ? o.enable('*')
                    : o.enable('*:error,*:info,*:warn'),
                    i.browser && (window.logs = o),
                    (e.exports = o);
                }.call(this, t('_process')));
              },
              { _process: 6, debug: 10, 'object-assign': 26 }
            ],
            192: [
              function(t, e, i) {
                (function(i) {
                  var n = t('../lib/three'),
                    r = new n.Object3D(),
                    o = new n.VRControls(r);
                  (e.exports.checkHeadsetConnected = function() {
                    var t,
                      e = o.getVRDisplay();
                    return e && 'isConnected' in e
                      ? e.isConnected
                      : (o.update(),
                        0 !== (t = r.quaternion)._x ||
                          0 !== t._y ||
                          0 !== t._z);
                  }),
                    (e.exports.checkHasPositionalTracking = function() {
                      var t = o.getVRDisplay();
                      return !c() && !h() && t && t.capabilities.hasPosition;
                    });
                  var s,
                    a,
                    c = ((a = !1),
                    (s =
                      window.navigator.userAgent ||
                      window.navigator.vendor ||
                      window.opera),
                    (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                      s
                    ) ||
                      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                        s.substr(0, 4)
                      )) &&
                      (a = !0),
                    (u() || l()) && (a = !0),
                    function() {
                      return a;
                    });
                  function l(t) {
                    var e = t || window.navigator.userAgent;
                    return /ipad|Nexus (7|9)|xoom|sch-i800|playbook|tablet|kindle/i.test(
                      e
                    );
                  }
                  function u() {
                    return /iPad|iPhone|iPod/.test(window.navigator.platform);
                  }
                  function h() {
                    return /SamsungBrowser.+Mobile VR/i.test(
                      window.navigator.userAgent
                    );
                  }
                  (e.exports.isMobile = c),
                    (e.exports.isTablet = l),
                    (e.exports.isIOS = u),
                    (e.exports.isGearVR = h),
                    (e.exports.isLandscape = function() {
                      return (
                        90 === window.orientation || -90 === window.orientation
                      );
                    }),
                    (e.exports.isIOSOlderThan10 = function(t) {
                      return /(iphone|ipod|ipad).*os.(7|8|9)/i.test(t);
                    }),
                    (e.exports.isBrowserEnvironment = !(i && !i.browser)),
                    (e.exports.isNodeEnvironment = !e.exports
                      .isBrowserEnvironment);
                }.call(this, t('_process')));
              },
              { '../lib/three': 173, _process: 6 }
            ],
            193: [
              function(t, e, i) {
                (e.exports.getComponentPropertyPath = function(t, e) {
                  return (e = e || '.'), -1 === t.indexOf(e) ? t : t.split(e);
                }),
                  (e.exports.getComponentProperty = function(t, e, i) {
                    var n;
                    return (
                      (i = i || '.'),
                      -1 !== e.indexOf(i)
                        ? ((n = e.split(i)), t.getAttribute(n[0])[n[1]])
                        : t.getAttribute(e)
                    );
                  }),
                  (e.exports.setComponentProperty = function(t, e, i, n) {
                    var r,
                      o = {};
                    if (((n = n || '.'), -1 !== e.indexOf(n)))
                      return (
                        (o[(r = e.split(n))[1]] = i),
                        void t.setAttribute(r[0], o)
                      );
                    t.setAttribute(e, i);
                  });
              },
              {}
            ],
            194: [
              function(t, e, i) {
                e.exports = function(t) {
                  var e = t.style.width,
                    i = t.style.height;
                  (t.style.width = parseInt(e, 10) + 1 + 'px'),
                    (t.style.height = parseInt(i, 10) + 1 + 'px'),
                    setTimeout(function() {
                      (t.style.width = e), (t.style.height = i);
                    }, 200);
                };
              },
              {}
            ],
            195: [
              function(t, e, i) {
                var n = t('./debug'),
                  r = t('deep-assign'),
                  o = t('./device'),
                  s = t('object-assign'),
                  a = n('utils:warn');
                function c(t, e) {
                  var i, n, r, o, s;
                  if (
                    void 0 === t ||
                    void 0 === e ||
                    null === t ||
                    null === e ||
                    !(
                      (t &&
                        e &&
                        t.constructor === Object &&
                        e.constructor === Object) ||
                      (t.constructor === Array && e.constructor === Array)
                    )
                  )
                    return t === e;
                  if (
                    ((n = Object.keys(t)),
                    (r = Object.keys(e)),
                    n.length !== r.length)
                  )
                    return !1;
                  for (i = 0; i < n.length; ++i)
                    if (
                      ((o = t[n[i]]),
                      (s = e[n[i]]),
                      'object' == typeof o ||
                        'object' == typeof s ||
                        (Array.isArray(o) && Array.isArray(s)))
                    ) {
                      if (o === s) continue;
                      if (!c(o, s)) return !1;
                    } else if (o !== s) return !1;
                  return !0;
                }
                (e.exports.bind = t('./bind')),
                  (e.exports.coordinates = t('./coordinates')),
                  (e.exports.debug = n),
                  (e.exports.device = o),
                  (e.exports.entity = t('./entity')),
                  (e.exports.forceCanvasResizeSafariMobile = t(
                    './forceCanvasResizeSafariMobile'
                  )),
                  (e.exports.material = t('./material')),
                  (e.exports.styleParser = t('./styleParser')),
                  (e.exports.trackedControls = t('./tracked-controls')),
                  (e.exports.checkHeadsetConnected = function() {
                    return (
                      a(
                        '`utils.checkHeadsetConnected` has moved to `utils.device.checkHeadsetConnected`'
                      ),
                      o.checkHeadsetConnected(arguments)
                    );
                  }),
                  (e.exports.isGearVR = function() {
                    return (
                      a(
                        '`utils.isGearVR` has moved to `utils.device.isGearVR`'
                      ),
                      o.isGearVR(arguments)
                    );
                  }),
                  (e.exports.isIOS = function() {
                    return (
                      a('`utils.isIOS` has moved to `utils.device.isIOS`'),
                      o.isIOS(arguments)
                    );
                  }),
                  (e.exports.isMobile = function() {
                    return (
                      a('`utils.isMobile has moved to `utils.device.isMobile`'),
                      o.isMobile(arguments)
                    );
                  }),
                  (e.exports.throttle = function(t, i, n) {
                    var r;
                    return (
                      n && (t = e.exports.bind(t, n)),
                      function() {
                        var e = Date.now();
                        (void 0 === r || (void 0 === r ? i : e - r) >= i) &&
                          ((r = e), t.apply(null, arguments));
                      }
                    );
                  }),
                  (e.exports.throttleTick = function(t, i, n) {
                    var r;
                    return (
                      n && (t = e.exports.bind(t, n)),
                      function(e, n) {
                        var o = void 0 === r ? n : e - r;
                        (void 0 === r || o >= i) && ((r = e), t(e, o));
                      }
                    );
                  }),
                  (e.exports.debounce = function(t, e, i) {
                    var n;
                    return function() {
                      var r = this,
                        o = arguments,
                        s = i && !n;
                      clearTimeout(n),
                        (n = setTimeout(function() {
                          (n = null), i || t.apply(r, o);
                        }, e)),
                        s && t.apply(r, o);
                    };
                  }),
                  (e.exports.fireEvent = function(t, e, i) {
                    ((i = i || {}).detail = i.detail || {}),
                      (i.detail.target = i.detail.target || t);
                    var n = new CustomEvent(e, i);
                    t.dispatchEvent(n);
                  }),
                  (e.exports.extend = s),
                  (e.exports.extendDeep = r),
                  (e.exports.clone = function(t) {
                    return JSON.parse(JSON.stringify(t));
                  }),
                  (e.exports.deepEqual = c),
                  (e.exports.diff = function(t, e) {
                    var i = {},
                      n = Object.keys(t);
                    return e
                      ? (Object.keys(e).forEach(function(t) {
                          -1 === n.indexOf(t) && n.push(t);
                        }),
                        n.forEach(function(n) {
                          var r = t[n],
                            o = e[n],
                            s =
                              r &&
                              o &&
                              r.constructor === Object &&
                              o.constructor === Object;
                          ((s && !c(r, o)) || (!s && r !== o)) && (i[n] = o);
                        }),
                        i)
                      : i;
                  }),
                  (e.exports.shouldCaptureKeyEvent = function(t) {
                    return (
                      !t.metaKey && document.activeElement === document.body
                    );
                  }),
                  (e.exports.splitString = function(t, e) {
                    void 0 === e && (e = ' ');
                    var i = new RegExp(e, 'g');
                    return (t = (t || '').replace(i, e)).split(e);
                  }),
                  (e.exports.getElData = function(t, e) {
                    e = e || {};
                    var i = {};
                    return (
                      Object.keys(e).forEach(function(e) {
                        t.hasAttribute(e) && (i[e] = t.getAttribute(e));
                      }),
                      i
                    );
                  }),
                  (e.exports.getUrlParameter = function(t) {
                    t = t.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                    var e = new RegExp('[\\?&]' + t + '=([^&#]*)').exec(
                      location.search
                    );
                    return null === e
                      ? ''
                      : decodeURIComponent(e[1].replace(/\+/g, ' '));
                  }),
                  (e.exports.isIframed = function() {
                    return window.top !== window.self;
                  }),
                  (e.exports.findAllScenes = function(t) {
                    for (
                      var e = [],
                        i = t.getElementsByTagName('*'),
                        n = 0,
                        r = i.length;
                      n < r;
                      n++
                    )
                      i[n].isScene && e.push(i[n]);
                    return e;
                  }),
                  (e.exports.srcLoader = t('./src-loader'));
              },
              {
                './bind': 189,
                './coordinates': 190,
                './debug': 191,
                './device': 192,
                './entity': 193,
                './forceCanvasResizeSafariMobile': 194,
                './material': 196,
                './src-loader': 197,
                './styleParser': 198,
                './tracked-controls': 199,
                'deep-assign': 12,
                'object-assign': 26
              }
            ],
            196: [
              function(t, e, i) {
                var n = t('../lib/three'),
                  r = [
                    'application/x-mpegurl',
                    'application/vnd.apple.mpegurl'
                  ];
                function o(t, e) {
                  e &&
                    (t.emit('materialtextureloaded', {
                      src: e.image,
                      texture: e
                    }),
                    e.image &&
                      'VIDEO' === e.image.tagName &&
                      (e.image.addEventListener('loadeddata', function() {
                        t.components &&
                          t.components.material &&
                          (e.needsCorrectionBGRA &&
                            e.needsCorrectionFlipY &&
                            -1 !==
                              ['standard', 'flat'].indexOf(
                                t.components.material.data.shader
                              ) &&
                            t.setAttribute('material', 'shader', 'ios10hls'),
                          t.emit('materialvideoloadeddata', {
                            src: e.image,
                            texture: e
                          }));
                      }),
                      e.image.addEventListener('ended', function() {
                        t.emit('materialvideoended', {
                          src: e.image,
                          texture: e
                        });
                      })));
                }
                (e.exports.updateMapMaterialFromData = function(t, e, i, r) {
                  var s = i.el,
                    a = i.material,
                    c = r[e];
                  if ((i.materialSrcs || (i.materialSrcs = {}), !c))
                    return delete i.materialSrcs[t], void l(null);
                  function l(e) {
                    (a[t] = e), (a.needsUpdate = !0), o(s, e);
                  }
                  c !== i.materialSrcs[t] &&
                    ((i.materialSrcs[t] = c),
                    c instanceof n.Texture
                      ? l(c)
                      : s.sceneEl.systems.material.loadTexture(
                          c,
                          {
                            src: c,
                            repeat: r.repeat,
                            offset: r.offset,
                            npot: r.npot
                          },
                          function(e) {
                            if (i.materialSrcs[t] !== c) return;
                            l(e);
                          }
                        ));
                }),
                  (e.exports.updateMap = function(t, i) {
                    return e.exports.updateMapMaterialFromData(
                      'map',
                      'src',
                      t,
                      i
                    );
                  }),
                  (e.exports.updateDistortionMap = function(t, e, i) {
                    var n = t;
                    'ambientOcclusion' === t && (n = 'ao');
                    var r = e.el,
                      s = e.material,
                      a = i[t + 'Map'],
                      c = {};
                    if (
                      ((c.src = a),
                      (c.offset = i[t + 'TextureOffset']),
                      (c.repeat = i[t + 'TextureRepeat']),
                      (c.wrap = i[t + 'TextureWrap']),
                      a)
                    ) {
                      if (a === e[t + 'TextureSrc']) return;
                      return (
                        (e[t + 'TextureSrc'] = a),
                        void r.sceneEl.systems.material.loadTexture(a, c, l)
                      );
                    }
                    function l(t) {
                      (s[n + 'Map'] = t), (s.needsUpdate = !0), o(r, t);
                    }
                    s.map && l(null);
                  }),
                  (e.exports.handleTextureEvents = o),
                  (e.exports.isHLS = function(t, e) {
                    return (
                      !(!e || !r.includes(e.toLowerCase())) ||
                      !!(t && t.toLowerCase().indexOf('.m3u8') > 0)
                    );
                  });
              },
              { '../lib/three': 173 }
            ],
            197: [
              function(t, e, i) {
                var n = t('./debug')('utils:src-loader:warn');
                function r(t, e, i) {
                  !(function(t, e) {
                    if (t.tagName) return void e('IMG' === t.tagName);
                    var i = new Image();
                    i.addEventListener('load', function() {
                      e(!0);
                    }),
                      i.addEventListener('error', function() {
                        e(!1);
                      }),
                      (i.src = t);
                  })(t, function(n) {
                    n ? e(t) : i(t);
                  });
                }
                function o(t) {
                  var e = t.match(/\url\((.+)\)/);
                  if (e) return e[1];
                }
                e.exports = {
                  parseUrl: o,
                  validateSrc: r,
                  validateCubemapSrc: function(t, e) {
                    var i,
                      s,
                      a,
                      c = '',
                      l = [];
                    for (s = 0; s < 5; s++) c += '(url\\((?:[^\\)]+)\\),\\s*)';
                    function u(t) {
                      l.push(t), 6 === l.length && e(l);
                    }
                    if (
                      ((c += '(url\\((?:[^\\)]+)\\)\\s*)'),
                      (a = t.match(new RegExp(c))))
                    )
                      for (s = 1; s < 7; s++) r(o(a[s]), u);
                    else if (
                      (i = (function(t) {
                        try {
                          var e = document.querySelector(t);
                          return (
                            e ||
                              n(
                                'No element was found matching the selector: "%s"',
                                t
                              ),
                            e
                          );
                        } catch (e) {
                          return void n('"%s" is not a valid selector', t);
                        }
                      })(t))
                    )
                      return 'A-CUBEMAP' === i.tagName && i.srcs
                        ? e(i.srcs)
                        : void n(
                            'Selector "%s" does not point to <a-cubemap>',
                            t
                          );
                  }
                };
              },
              { './debug': 191 }
            ],
            198: [
              function(t, e, i) {
                var n = t('style-attr');
                function r(t) {
                  return t.replace(/-([a-z])/g, function(t) {
                    return t[1].toUpperCase();
                  });
                }
                function o(t) {
                  var e = {};
                  return (
                    Object.keys(t).forEach(function(i) {
                      var n = r(i);
                      e[n] = t[i];
                    }),
                    e
                  );
                }
                (e.exports.parse = function(t) {
                  var e;
                  return 'string' != typeof t
                    ? t
                    : (e = n.parse(t))[''] ? t : o(e);
                }),
                  (e.exports.stringify = function(t) {
                    return 'string' == typeof t ? t : n.stringify(t);
                  }),
                  (e.exports.toCamelCase = r),
                  (e.exports.transformKeysToCamelCase = o);
              },
              { 'style-attr': 36 }
            ],
            199: [
              function(t, e, i) {
                var n = t('../constants').DEFAULT_HANDEDNESS,
                  r = ['x', 'y', 'z', 'w'],
                  o = 2;
                function s(t, e, i) {
                  var n,
                    r,
                    o = t.el.sceneEl,
                    s = i.index || 0;
                  return (
                    !!e &&
                    (!!(r = o && o.systems['tracked-controls']) &&
                      (!!(n = r.controllers).length &&
                        !!a(n, null, e, i.hand, s)))
                  );
                }
                function a(t, e, i, r, s) {
                  var a,
                    c,
                    l = 0,
                    u = s || 0;
                  for (c = 0; c < t.length; c++)
                    if (
                      ((a = t[c]),
                      (!i || -1 !== a.id.indexOf(i)) &&
                        (i || a.id === e) &&
                        (!r || !a.hand || r === a.hand))
                    ) {
                      if (
                        (r && !a.hand && (u = o * s + (r === n ? 0 : 1)),
                        l === u)
                      )
                        return a;
                      ++l;
                    }
                }
                (e.exports.checkControllerPresentAndSetup = function(t, e, i) {
                  var n = t.el,
                    r = s(t, e, i);
                  if (
                    (t.controllerPresent &&
                      !t.controllerEventsActive &&
                      t.addEventListeners(),
                    r === t.controllerPresent)
                  )
                    return r;
                  (t.controllerPresent = r),
                    r
                      ? (t.injectTrackedControls(),
                        t.addEventListeners(),
                        n.emit('controllerconnected', {
                          name: t.name,
                          component: t
                        }))
                      : (t.removeEventListeners(),
                        n.emit('controllerdisconnected', {
                          name: t.name,
                          component: t
                        }));
                }),
                  (e.exports.isControllerPresent = s),
                  (e.exports.findMatchingController = a),
                  (e.exports.emitIfAxesChanged = function(t, e, i) {
                    var n, o, s, a, c, l;
                    for (o = Object.keys(e), c = 0; c < o.length; c++) {
                      for (n = e[o[c]], s = !1, l = 0; l < n.length; l++)
                        i.detail.changed[n[l]] && (s = !0);
                      if (s) {
                        for (a = {}, l = 0; l < n.length; l++)
                          a[r[l]] = i.detail.axis[n[l]];
                        t.el.emit(o[c] + 'moved', a);
                      }
                    }
                  });
              },
              { '../constants': 116 }
            ],
            200: [
              function(t, e, i) {
                THREE.VRControls = function(t, e) {
                  var i,
                    n,
                    r = this,
                    o = new THREE.Matrix4(),
                    s = null;
                  'VRFrameData' in window && (s = new window.VRFrameData()),
                    window.addEventListener('vrdisplayconnect', function(t) {
                      i = t.display;
                    }),
                    window.addEventListener('vrdisplaydisconnect', function() {
                      i = void 0;
                    }),
                    navigator.getVRDisplays &&
                      navigator
                        .getVRDisplays()
                        .then(function(t) {
                          (n = t),
                            t.length > 0
                              ? (i = t[0])
                              : e && e('VR input not available.');
                        })
                        .catch(function() {
                          console.warn(
                            'THREE.VRControls: Unable to get VR Displays'
                          );
                        }),
                    (this.scale = 1),
                    (this.standing = !1),
                    (this.userHeight = 1.6),
                    (this.getVRDisplay = function() {
                      return i;
                    }),
                    (this.setVRDisplay = function(t) {
                      i = t;
                    }),
                    (this.getVRDisplays = function() {
                      return (
                        console.warn(
                          'THREE.VRControls: getVRDisplays() is being deprecated.'
                        ),
                        n
                      );
                    }),
                    (this.getStandingMatrix = function() {
                      return o;
                    }),
                    (this.update = function() {
                      var e;
                      i &&
                        (i.getFrameData
                          ? (i.getFrameData(s), (e = s.pose))
                          : i.getPose && (e = i.getPose()),
                        null !== e.orientation &&
                          t.quaternion.fromArray(e.orientation),
                        null !== e.position
                          ? t.position.fromArray(e.position)
                          : t.position.set(0, 0, 0),
                        this.standing &&
                          (i.stageParameters
                            ? (t.updateMatrix(),
                              o.fromArray(
                                i.stageParameters.sittingToStandingTransform
                              ),
                              t.applyMatrix(o))
                            : t.position.setY(t.position.y + this.userHeight)),
                        t.position.multiplyScalar(r.scale));
                    }),
                    (this.resetPose = function() {
                      i && i.resetPose();
                    }),
                    (this.resetSensor = function() {
                      console.warn(
                        'THREE.VRControls: .resetSensor() is now .resetPose().'
                      ),
                        this.resetPose();
                    }),
                    (this.zeroSensor = function() {
                      console.warn(
                        'THREE.VRControls: .zeroSensor() is now .resetPose().'
                      ),
                        this.resetPose();
                    }),
                    (this.dispose = function() {
                      i = null;
                    });
                };
              },
              {}
            ],
            201: [
              function(t, e, i) {
                THREE.VREffect = function(t, e) {
                  var i,
                    n,
                    r,
                    o,
                    s = new THREE.Vector3(),
                    a = new THREE.Vector3(),
                    c = null;
                  'VRFrameData' in window && (c = new window.VRFrameData()),
                    window.addEventListener('vrdisplayconnect', function(t) {
                      i = t.display;
                    }),
                    window.addEventListener('vrdisplaydisconnect', function(t) {
                      var e;
                      l.exitPresent(),
                        (e = l.cancelAnimationFrame()),
                        (i = void 0),
                        l.requestAnimationFrame(e);
                    }),
                    navigator.getVRDisplays &&
                      navigator
                        .getVRDisplays()
                        .then(function(t) {
                          (n = t),
                            t.length > 0
                              ? (i = t[0])
                              : e && e('HMD not available');
                        })
                        .catch(function() {
                          console.warn(
                            'THREE.VREffect: Unable to get VR Displays'
                          );
                        }),
                    (this.isPresenting = !1);
                  var l = this,
                    u = t.getSize(),
                    h = !1,
                    d = t.getPixelRatio();
                  (this.getVRDisplay = function() {
                    return i;
                  }),
                    (this.setVRDisplay = function(t) {
                      i = t;
                    }),
                    (this.getVRDisplays = function() {
                      return (
                        console.warn(
                          'THREE.VREffect: getVRDisplays() is being deprecated.'
                        ),
                        n
                      );
                    }),
                    (this.setSize = function(e, n, r) {
                      if (
                        ((u = { width: e, height: n }), (h = r), l.isPresenting)
                      ) {
                        var o = i.getEyeParameters('left');
                        t.setPixelRatio(1),
                          t.setSize(2 * o.renderWidth, o.renderHeight, !1);
                      } else t.setPixelRatio(d), t.setSize(e, n, r);
                    });
                  var p = t.domElement,
                    f = [0, 0, 0.5, 1],
                    m = [0.5, 0, 0.5, 1];
                  function g() {
                    var e = l.isPresenting;
                    if (
                      ((l.isPresenting = void 0 !== i && i.isPresenting),
                      l.isPresenting)
                    ) {
                      var n = i.getEyeParameters('left'),
                        r = n.renderWidth,
                        o = n.renderHeight;
                      e ||
                        ((d = t.getPixelRatio()),
                        (u = t.getSize()),
                        t.setPixelRatio(1),
                        t.setSize(2 * r, o, !1));
                    } else
                      e &&
                        (t.setPixelRatio(d), t.setSize(u.width, u.height, h));
                  }
                  window.addEventListener('vrdisplaypresentchange', g, !1),
                    (this.setFullScreen = function(t) {
                      return new Promise(function(e, n) {
                        void 0 !== i
                          ? l.isPresenting !== t
                            ? e(
                                t
                                  ? i.requestPresent([{ source: p }])
                                  : i.exitPresent()
                              )
                            : e()
                          : n(new Error('No VR hardware found.'));
                      });
                    }),
                    (this.requestPresent = function() {
                      return this.setFullScreen(!0);
                    }),
                    (this.exitPresent = function() {
                      return this.setFullScreen(!1);
                    }),
                    (this.requestAnimationFrame = function(t) {
                      if ((t = l.f = t || l.f))
                        return void 0 !== i
                          ? i.requestAnimationFrame(t)
                          : window.requestAnimationFrame(t);
                    }),
                    (this.cancelAnimationFrame = function(t) {
                      var e = l.f;
                      return (
                        (l.f = void 0),
                        void 0 !== i
                          ? i.cancelAnimationFrame(t)
                          : window.cancelAnimationFrame(t),
                        e
                      );
                    }),
                    (this.submitFrame = function() {
                      void 0 !== i && l.isPresenting && i.submitFrame();
                    }),
                    (this.autoSubmitFrame = !0);
                  var v = new THREE.PerspectiveCamera();
                  v.layers.enable(1);
                  var y = new THREE.PerspectiveCamera();
                  function w(t, e, i, n) {
                    var r = Math.PI / 180;
                    return (function(t, e, i, n) {
                      (e = void 0 === e || e),
                        (i = void 0 === i ? 0.01 : i),
                        (n = void 0 === n ? 1e4 : n);
                      var r,
                        o,
                        s,
                        a,
                        c = e ? -1 : 1,
                        l = new THREE.Matrix4(),
                        u = l.elements,
                        h = ((o = 2 / ((r = t).leftTan + r.rightTan)),
                        (s = (r.leftTan - r.rightTan) * o * 0.5),
                        (a = 2 / (r.upTan + r.downTan)),
                        {
                          scale: [o, a],
                          offset: [s, (r.upTan - r.downTan) * a * 0.5]
                        });
                      return (
                        (u[0] = h.scale[0]),
                        (u[1] = 0),
                        (u[2] = h.offset[0] * c),
                        (u[3] = 0),
                        (u[4] = 0),
                        (u[5] = h.scale[1]),
                        (u[6] = -h.offset[1] * c),
                        (u[7] = 0),
                        (u[8] = 0),
                        (u[9] = 0),
                        (u[10] = n / (i - n) * -c),
                        (u[11] = n * i / (i - n)),
                        (u[12] = 0),
                        (u[13] = 0),
                        (u[14] = c),
                        (u[15] = 0),
                        l.transpose(),
                        l
                      );
                    })(
                      {
                        upTan: Math.tan(t.upDegrees * r),
                        downTan: Math.tan(t.downDegrees * r),
                        leftTan: Math.tan(t.leftDegrees * r),
                        rightTan: Math.tan(t.rightDegrees * r)
                      },
                      e,
                      i,
                      n
                    );
                  }
                  y.layers.enable(2),
                    (this.render = function(e, n, u, h) {
                      if (i && l.isPresenting) {
                        var d = e.autoUpdate;
                        d && (e.updateMatrixWorld(), (e.autoUpdate = !1));
                        var p = i.getEyeParameters('left'),
                          g = i.getEyeParameters('right');
                        s.fromArray(p.offset),
                          a.fromArray(g.offset),
                          Array.isArray(e) &&
                            (console.warn(
                              'THREE.VREffect.render() no longer supports arrays. Use object.layers instead.'
                            ),
                            (e = e[0]));
                        var M,
                          E,
                          b = t.getSize(),
                          x = i.getLayers();
                        if (x.length) {
                          var A = x[0];
                          (M =
                            null !== A.leftBounds && 4 === A.leftBounds.length
                              ? A.leftBounds
                              : f),
                            (E =
                              null !== A.rightBounds &&
                              4 === A.rightBounds.length
                                ? A.rightBounds
                                : m);
                        } else (M = f), (E = m);
                        return (
                          (r = {
                            x: Math.round(b.width * M[0]),
                            y: Math.round(b.height * M[1]),
                            width: Math.round(b.width * M[2]),
                            height: Math.round(b.height * M[3])
                          }),
                          (o = {
                            x: Math.round(b.width * E[0]),
                            y: Math.round(b.height * E[1]),
                            width: Math.round(b.width * E[2]),
                            height: Math.round(b.height * E[3])
                          }),
                          u
                            ? (t.setRenderTarget(u), (u.scissorTest = !0))
                            : (t.setRenderTarget(null), t.setScissorTest(!0)),
                          (t.autoClear || h) && t.clear(),
                          null === n.parent && n.updateMatrixWorld(),
                          n.matrixWorld.decompose(
                            v.position,
                            v.quaternion,
                            v.scale
                          ),
                          y.position.copy(v.position),
                          y.quaternion.copy(v.quaternion),
                          y.scale.copy(v.scale),
                          v.translateOnAxis(s, v.scale.x),
                          y.translateOnAxis(a, y.scale.x),
                          i.getFrameData
                            ? ((i.depthNear = n.near),
                              (i.depthFar = n.far),
                              i.getFrameData(c),
                              (v.projectionMatrix.elements =
                                c.leftProjectionMatrix),
                              (y.projectionMatrix.elements =
                                c.rightProjectionMatrix))
                            : ((v.projectionMatrix = w(
                                p.fieldOfView,
                                !0,
                                n.near,
                                n.far
                              )),
                              (y.projectionMatrix = w(
                                g.fieldOfView,
                                !0,
                                n.near,
                                n.far
                              ))),
                          u
                            ? (u.viewport.set(r.x, r.y, r.width, r.height),
                              u.scissor.set(r.x, r.y, r.width, r.height))
                            : (t.setViewport(r.x, r.y, r.width, r.height),
                              t.setScissor(r.x, r.y, r.width, r.height)),
                          t.render(e, v, u, h),
                          u
                            ? (u.viewport.set(o.x, o.y, o.width, o.height),
                              u.scissor.set(o.x, o.y, o.width, o.height))
                            : (t.setViewport(o.x, o.y, o.width, o.height),
                              t.setScissor(o.x, o.y, o.width, o.height)),
                          t.render(e, y, u, h),
                          u
                            ? (u.viewport.set(0, 0, b.width, b.height),
                              u.scissor.set(0, 0, b.width, b.height),
                              (u.scissorTest = !1),
                              t.setRenderTarget(null))
                            : (t.setViewport(0, 0, b.width, b.height),
                              t.setScissorTest(!1)),
                          d && (e.autoUpdate = !0),
                          void (l.autoSubmitFrame && l.submitFrame())
                        );
                      }
                      t.render(e, n, u, h);
                    }),
                    (this.dispose = function() {
                      window.removeEventListener(
                        'vrdisplaypresentchange',
                        g,
                        !1
                      );
                    });
                };
              },
              {}
            ],
            202: [
              function(t, e, i) {
                (window.glStats = function() {
                  var t = null,
                    e = 0,
                    i = 0,
                    n = 0,
                    r = 0,
                    o = 0,
                    s = 0,
                    a = 0;
                  function c(t, e) {
                    return function() {
                      e.apply(this, arguments), t.apply(this, arguments);
                    };
                  }
                  (WebGLRenderingContext.prototype.drawArrays = c(
                    WebGLRenderingContext.prototype.drawArrays,
                    function() {
                      e++,
                        arguments[0] == this.POINTS
                          ? (s += arguments[2])
                          : (o += arguments[2]);
                    }
                  )),
                    (WebGLRenderingContext.prototype.drawElements = c(
                      WebGLRenderingContext.prototype.drawElements,
                      function() {
                        i++, (r += arguments[1] / 3), (o += arguments[1]);
                      }
                    )),
                    (WebGLRenderingContext.prototype.useProgram = c(
                      WebGLRenderingContext.prototype.useProgram,
                      function() {
                        n++;
                      }
                    )),
                    (WebGLRenderingContext.prototype.bindTexture = c(
                      WebGLRenderingContext.prototype.bindTexture,
                      function() {
                        a++;
                      }
                    ));
                  return {
                    update: function() {
                      t('allcalls').set(e + i),
                        t('drawElements').set(i),
                        t('drawArrays').set(e),
                        t('bindTexture').set(a),
                        t('useProgram').set(n),
                        t('glfaces').set(r),
                        t('glvertices').set(o),
                        t('glpoints').set(s);
                    },
                    start: function() {
                      (e = 0),
                        (i = 0),
                        (n = 0),
                        (r = 0),
                        (o = 0),
                        (s = 0),
                        (a = 0);
                    },
                    end: function() {},
                    attach: function(e) {
                      t = e;
                    },
                    values: {
                      allcalls: { over: 3e3, caption: 'Calls (hook)' },
                      drawelements: { caption: 'drawElements (hook)' },
                      drawarrays: { caption: 'drawArrays (hook)' }
                    },
                    groups: [
                      {
                        caption: 'WebGL',
                        values: [
                          'allcalls',
                          'drawelements',
                          'drawarrays',
                          'useprogram',
                          'bindtexture',
                          'glfaces',
                          'glvertices',
                          'glpoints'
                        ]
                      }
                    ],
                    fractions: [
                      {
                        base: 'allcalls',
                        steps: ['drawelements', 'drawarrays']
                      }
                    ]
                  };
                }),
                  (window.threeStats = function(t) {
                    var e = null;
                    return {
                      update: function() {
                        e('renderer.info.memory.geometries').set(
                          t.info.memory.geometries
                        ),
                          e('renderer.info.programs').set(
                            t.info.programs.length
                          ),
                          e('renderer.info.memory.textures').set(
                            t.info.memory.textures
                          ),
                          e('renderer.info.render.calls').set(
                            t.info.render.calls
                          ),
                          e('renderer.info.render.faces').set(
                            t.info.render.faces
                          ),
                          e('renderer.info.render.points').set(
                            t.info.render.points
                          ),
                          e('renderer.info.render.vertices').set(
                            t.info.render.vertices
                          );
                      },
                      start: function() {},
                      end: function() {},
                      attach: function(t) {
                        e = t;
                      },
                      values: {
                        'renderer.info.memory.geometries': {
                          caption: 'Geometries'
                        },
                        'renderer.info.memory.textures': {
                          caption: 'Textures'
                        },
                        'renderer.info.programs': { caption: 'Programs' },
                        'renderer.info.render.calls': { caption: 'Calls' },
                        'renderer.info.render.faces': {
                          caption: 'Faces',
                          over: 1e3
                        },
                        'renderer.info.render.points': { caption: 'Points' },
                        'renderer.info.render.vertices': { caption: 'Vertices' }
                      },
                      groups: [
                        {
                          caption: 'Three.js - Memory',
                          values: [
                            'renderer.info.memory.geometries',
                            'renderer.info.programs',
                            'renderer.info.memory.textures'
                          ]
                        },
                        {
                          caption: 'Three.js - Render',
                          values: [
                            'renderer.info.render.calls',
                            'renderer.info.render.faces',
                            'renderer.info.render.points',
                            'renderer.info.render.vertices'
                          ]
                        }
                      ],
                      fractions: []
                    };
                  }),
                  (window.BrowserStats = function() {
                    var t = null,
                      e = 0,
                      i = 0;
                    window.performance &&
                      !performance.memory &&
                      (performance.memory = {
                        usedJSHeapSize: 0,
                        totalJSHeapSize: 0
                      }),
                      0 === performance.memory.totalJSHeapSize &&
                        console.warn(
                          'totalJSHeapSize === 0... performance.memory is only available in Chrome .'
                        );
                    var n = Math.log(1024);
                    function r(t) {
                      var e = Math.floor(Math.log(t) / n);
                      return Math.round(100 * t / Math.pow(1024, e)) / 100;
                    }
                    return {
                      update: function() {
                        (e = r(performance.memory.usedJSHeapSize)),
                          (i = r(performance.memory.totalJSHeapSize)),
                          t('memory').set(e),
                          t('total').set(i);
                      },
                      start: function() {
                        e = 0;
                      },
                      end: function() {},
                      attach: function(e) {
                        t = e;
                      },
                      values: {
                        memory: {
                          caption: 'Used Memory',
                          average: !0,
                          avgMs: 1e3,
                          over: 22
                        },
                        total: { caption: 'Total Memory' }
                      },
                      groups: [
                        { caption: 'Browser', values: ['memory', 'total'] }
                      ],
                      fractions: [{ base: 'total', steps: ['memory'] }]
                    };
                  }),
                  'object' == typeof e &&
                    (e.exports = {
                      glStats: window.glStats,
                      threeStats: window.threeStats,
                      BrowserStats: window.BrowserStats
                    });
              },
              {}
            ],
            203: [
              function(t, e, i) {
                'use strict';
                !(function() {
                  'performance' in window == 0 && (window.performance = {});
                  var t = window.performance;
                  if ('now' in t == 0) {
                    var e = Date.now();
                    t.timing &&
                      t.timing.navigationStart &&
                      (e = t.timing.navigationStart),
                      (t.now = function() {
                        return Date.now() - e;
                      });
                  }
                  t.mark || (t.mark = function() {}),
                    t.measure || (t.measure = function() {});
                })(),
                  (window.rStats = function(t) {
                    function e(t, e) {
                      for (
                        var i = Object.keys(t), n = 0, r = i.length;
                        n < r;
                        n++
                      )
                        e(i[n]);
                    }
                    var i = t || {},
                      n = i.colours || [
                        '#850700',
                        '#c74900',
                        '#fcb300',
                        '#284280',
                        '#4c7c0c'
                      ],
                      r = (i.CSSPath ? i.CSSPath : '') + 'rStats.css';
                    (
                      i.css || [
                        'https://fonts.googleapis.com/css?family=Roboto+Condensed:400,700,300',
                        r
                      ]
                    ).forEach(function(t) {
                      var e, i;
                      (e = t),
                        ((i = document.createElement('link')).href = e),
                        (i.rel = 'stylesheet'),
                        (i.type = 'text/css'),
                        document.getElementsByTagName('head')[0].appendChild(i);
                    }),
                      i.values || (i.values = {});
                    var o,
                      s,
                      a = 10,
                      c = 200,
                      l = {};
                    function u(t, e) {
                      var n,
                        r = t,
                        o = 0,
                        l = 0,
                        u = 0,
                        h = 0,
                        d = performance.now(),
                        p = 0,
                        f = document.createElement('div'),
                        m = document.createElement('span'),
                        g = document.createElement('div'),
                        v = document.createTextNode(''),
                        y = i ? i.values[r.toLowerCase()] : null,
                        w = new function(t, e, i) {
                          var n = i || {},
                            r = document.createElement('canvas'),
                            o = r.getContext('2d'),
                            s = 0,
                            l = 0,
                            u = n.color ? n.color : '#666666',
                            h = document.createElement('canvas'),
                            d = h.getContext('2d');
                          (h.width = 1),
                            (h.height = 2 * a),
                            (d.fillStyle = '#444444'),
                            d.fillRect(0, 0, 1, 2 * a),
                            (d.fillStyle = u),
                            d.fillRect(0, a, 1, a),
                            (d.fillStyle = '#ffffff'),
                            (d.globalAlpha = 0.5),
                            d.fillRect(0, a, 1, 1),
                            (d.globalAlpha = 1);
                          var p = document.createElement('canvas'),
                            f = p.getContext('2d');
                          return (
                            (p.width = 1),
                            (p.height = 2 * a),
                            (f.fillStyle = '#444444'),
                            f.fillRect(0, 0, 1, 2 * a),
                            (f.fillStyle = '#b70000'),
                            f.fillRect(0, a, 1, a),
                            (f.globalAlpha = 0.5),
                            (f.fillStyle = '#ffffff'),
                            f.fillRect(0, a, 1, 1),
                            (f.globalAlpha = 1),
                            (r.width = c),
                            (r.height = a),
                            (r.style.width = r.width + 'px'),
                            (r.style.height = r.height + 'px'),
                            (r.className = 'rs-canvas'),
                            t.appendChild(r),
                            (o.fillStyle = '#444444'),
                            o.fillRect(0, 0, r.width, r.height),
                            {
                              draw: function(t, e) {
                                (l += 0.1 * (t - l)) > (s *= 0.99) && (s = l),
                                  o.drawImage(
                                    r,
                                    1,
                                    0,
                                    r.width - 1,
                                    r.height,
                                    0,
                                    0,
                                    r.width - 1,
                                    r.height
                                  ),
                                  e
                                    ? o.drawImage(
                                        p,
                                        r.width - 1,
                                        r.height - l * r.height / s - a
                                      )
                                    : o.drawImage(
                                        h,
                                        r.width - 1,
                                        r.height - l * r.height / s - a
                                      );
                              }
                            }
                          );
                        }(f, r, y),
                        M = !1;
                      function E(t) {
                        if (y && y.average) {
                          (h += t), p++;
                          var e = performance.now();
                          e - d >= (y.avgMs || 1e3) &&
                            ((u = h / p), (h = 0), (d = e), (p = 0));
                        }
                      }
                      function b() {
                        (n = performance.now()),
                          i.userTimingAPI && performance.mark(r + '-start'),
                          (M = !0);
                      }
                      function x() {
                        (o = performance.now() - n),
                          i.userTimingAPI &&
                            (performance.mark(r + '-end'),
                            M &&
                              performance.measure(r, r + '-start', r + '-end')),
                          E(o);
                      }
                      return (
                        (m.className = 'rs-counter-id'),
                        (m.textContent = y && y.caption ? y.caption : r),
                        (g.className = 'rs-counter-value'),
                        g.appendChild(v),
                        f.appendChild(m),
                        f.appendChild(g),
                        e ? e.div.appendChild(f) : s.appendChild(f),
                        (n = performance.now()),
                        {
                          set: function(t) {
                            E((o = t));
                          },
                          start: b,
                          tick: function() {
                            x(), b();
                          },
                          end: x,
                          frame: function() {
                            var t = performance.now(),
                              e = t - n;
                            l++,
                              e > 1e3 &&
                                ((o =
                                  y && !1 === y.interpolate ? l : 1e3 * l / e),
                                (l = 0),
                                (n = t),
                                E(o));
                          },
                          value: function() {
                            return o;
                          },
                          draw: function() {
                            var t = y && y.average ? u : o;
                            v.nodeValue = Math.round(100 * t) / 100;
                            var e =
                              y &&
                              ((y.below && o < y.below) ||
                                (y.over && o > y.over));
                            w.draw(o, e),
                              (f.className = e
                                ? 'rs-counter-base alarm'
                                : 'rs-counter-base');
                          }
                        }
                      );
                    }
                    function h(t) {
                      var n = t.toLowerCase();
                      if ((void 0 === n && (n = 'default'), l[n])) return l[n];
                      var r = null;
                      i &&
                        i.groups &&
                        e(i.groups, function(t) {
                          var e = i.groups[parseInt(t, 10)];
                          r ||
                            -1 === e.values.indexOf(n.toLowerCase()) ||
                            (r = e);
                        });
                      var o = new u(n, r);
                      return (l[n] = o), o;
                    }
                    function d() {
                      e(i.plugins, function(t) {
                        i.plugins[t].update();
                      }),
                        e(l, function(t) {
                          l[t].draw();
                        }),
                        i &&
                          i.fractions &&
                          e(i.fractions, function(t) {
                            var n = i.fractions[parseInt(t, 10)],
                              r = [],
                              o = l[n.base.toLowerCase()];
                            o &&
                              ((o = o.value()),
                              e(i.fractions[t].steps, function(e) {
                                var n = i.fractions[t].steps[
                                    parseInt(e, 10)
                                  ].toLowerCase(),
                                  s = l[n];
                                s && r.push(s.value() / o);
                              })),
                              n.graph.draw(r);
                          });
                    }
                    return (
                      (function() {
                        if (i.plugins) {
                          i.values || (i.values = {}),
                            i.groups || (i.groups = []),
                            i.fractions || (i.fractions = []);
                          for (var t = 0; t < i.plugins.length; t++)
                            i.plugins[t].attach(h),
                              e(i.plugins[t].values, function(e) {
                                i.values[e] = i.plugins[t].values[e];
                              }),
                              (i.groups = i.groups.concat(i.plugins[t].groups)),
                              (i.fractions = i.fractions.concat(
                                i.plugins[t].fractions
                              ));
                        } else i.plugins = {};
                        ((o = document.createElement('div')).className =
                          'rs-base'),
                          ((s = document.createElement('div')).className =
                            'rs-container'),
                          (s.style.height = 'auto'),
                          o.appendChild(s),
                          document.body.appendChild(o),
                          i &&
                            (i.groups &&
                              e(i.groups, function(t) {
                                var e = i.groups[parseInt(t, 10)],
                                  n = document.createElement('div');
                                (n.className = 'rs-group'), (e.div = n);
                                var r = document.createElement('h1');
                                (r.textContent = e.caption),
                                  r.addEventListener(
                                    'click',
                                    function(t) {
                                      this.classList.toggle('hidden'),
                                        t.preventDefault();
                                    }.bind(n)
                                  ),
                                  s.appendChild(r),
                                  s.appendChild(n);
                              }),
                            i.fractions &&
                              e(i.fractions, function(t) {
                                var r = i.fractions[parseInt(t, 10)],
                                  o = document.createElement('div');
                                o.className = 'rs-fraction';
                                var l = document.createElement('div');
                                l.className = 'rs-legend';
                                var u = 0;
                                e(i.fractions[t].steps, function(e) {
                                  var r = document.createElement('p');
                                  (r.textContent = i.fractions[t].steps[e]),
                                    (r.style.color = n[u]),
                                    l.appendChild(r),
                                    u++;
                                }),
                                  o.appendChild(l),
                                  (o.style.height = u * a + 'px'),
                                  (r.div = o);
                                var h = new function(t, i) {
                                  var r = document.createElement('canvas'),
                                    o = r.getContext('2d');
                                  return (
                                    (r.width = c),
                                    (r.height = a * i),
                                    (r.style.width = r.width + 'px'),
                                    (r.style.height = r.height + 'px'),
                                    (r.className = 'rs-canvas'),
                                    t.appendChild(r),
                                    (o.fillStyle = '#444444'),
                                    o.fillRect(0, 0, r.width, r.height),
                                    {
                                      draw: function(t) {
                                        o.drawImage(
                                          r,
                                          1,
                                          0,
                                          r.width - 1,
                                          r.height,
                                          0,
                                          0,
                                          r.width - 1,
                                          r.height
                                        );
                                        var i = 0;
                                        e(t, function(e) {
                                          var s = t[e] * r.height;
                                          (o.fillStyle = n[e]),
                                            o.fillRect(r.width - 1, i, 1, s),
                                            (i += s);
                                        });
                                      }
                                    }
                                  );
                                }(o, u);
                                (r.graph = h), s.appendChild(o);
                              }));
                      })(),
                      function(t) {
                        return t ? h(t) : { element: o, update: d };
                      }
                    );
                  }),
                  'object' == typeof e && (e.exports = window.rStats);
              },
              {}
            ],
            204: [
              function(t, e, i) {
                var n = {};
                (n.base64 = function(t, e) {
                  return 'data:' + t + ';base64,' + e;
                }),
                  (n.isMobile = function() {
                    var t,
                      e = !1;
                    return (
                      (t =
                        navigator.userAgent ||
                        navigator.vendor ||
                        window.opera),
                      (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
                        t
                      ) ||
                        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
                          t.substr(0, 4)
                        )) &&
                        (e = !0),
                      e
                    );
                  }),
                  (n.isIOS = function() {
                    return /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
                  }),
                  (n.isIFrame = function() {
                    try {
                      return window.self !== window.top;
                    } catch (t) {
                      return !0;
                    }
                  }),
                  (n.appendQueryParameter = function(t, e, i) {
                    return (t +=
                      (t.indexOf('?') < 0 ? '?' : '&') + e + '=' + i);
                  }),
                  (n.getQueryParameter = function(t) {
                    t = t.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
                    var e = new RegExp('[\\?&]' + t + '=([^&#]*)').exec(
                      location.search
                    );
                    return null === e
                      ? ''
                      : decodeURIComponent(e[1].replace(/\+/g, ' '));
                  }),
                  (n.isLandscapeMode = function() {
                    return (
                      90 == window.orientation || -90 == window.orientation
                    );
                  }),
                  (e.exports = n);
              },
              {}
            ],
            205: [
              function(t, e, i) {
                var n,
                  r = t('./util.js');
                function o() {
                  var t = document.createElement('video');
                  t.addEventListener('ended', function() {
                    t.play();
                  }),
                    (this.request = function() {
                      t.paused &&
                        ((t.src = r.base64(
                          'video/webm',
                          'GkXfowEAAAAAAAAfQoaBAUL3gQFC8oEEQvOBCEKChHdlYm1Ch4ECQoWBAhhTgGcBAAAAAAAH4xFNm3RALE27i1OrhBVJqWZTrIHfTbuMU6uEFlSua1OsggEwTbuMU6uEHFO7a1OsggfG7AEAAAAAAACkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVSalmAQAAAAAAAEUq17GDD0JATYCNTGF2ZjU2LjQwLjEwMVdBjUxhdmY1Ni40MC4xMDFzpJAGSJTMbsLpDt/ySkipgX1fRImIQO1MAAAAAAAWVK5rAQAAAAAAADuuAQAAAAAAADLXgQFzxYEBnIEAIrWcg3VuZIaFVl9WUDmDgQEj44OEO5rKAOABAAAAAAAABrCBsLqBkB9DtnUBAAAAAAAAo+eBAKOmgQAAgKJJg0IAAV4BHsAHBIODCoAACmH2MAAAZxgz4dPSTFi5JACjloED6ACmAECSnABMQAADYAAAWi0quoCjloEH0ACmAECSnABNwAADYAAAWi0quoCjloELuACmAECSnABNgAADYAAAWi0quoCjloEPoACmAECSnABNYAADYAAAWi0quoCjloETiACmAECSnABNIAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTnghdwo5aBAAAApgBAkpwATOAAA2AAAFotKrqAo5aBA+gApgBAkpwATMAAA2AAAFotKrqAo5aBB9AApgBAkpwATIAAA2AAAFotKrqAo5aBC7gApgBAkpwATEAAA2AAAFotKrqAo5aBD6AApgDAkpwAQ2AAA2AAAFotKrqAo5aBE4gApgBAkpwATCAAA2AAAFotKrqAH0O2dQEAAAAAAACU54Iu4KOWgQAAAKYAQJKcAEvAAANgAABaLSq6gKOWgQPoAKYAQJKcAEtgAANgAABaLSq6gKOWgQfQAKYAQJKcAEsAAANgAABaLSq6gKOWgQu4AKYAQJKcAEqAAANgAABaLSq6gKOWgQ+gAKYAQJKcAEogAANgAABaLSq6gKOWgROIAKYAQJKcAEnAAANgAABaLSq6gB9DtnUBAAAAAAAAlOeCRlCjloEAAACmAECSnABJgAADYAAAWi0quoCjloED6ACmAECSnABJIAADYAAAWi0quoCjloEH0ACmAMCSnABDYAADYAAAWi0quoCjloELuACmAECSnABI4AADYAAAWi0quoCjloEPoACmAECSnABIoAADYAAAWi0quoCjloETiACmAECSnABIYAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTngl3Ao5aBAAAApgBAkpwASCAAA2AAAFotKrqAo5aBA+gApgBAkpwASAAAA2AAAFotKrqAo5aBB9AApgBAkpwAR8AAA2AAAFotKrqAo5aBC7gApgBAkpwAR4AAA2AAAFotKrqAo5aBD6AApgBAkpwAR2AAA2AAAFotKrqAo5aBE4gApgBAkpwARyAAA2AAAFotKrqAH0O2dQEAAAAAAACU54J1MKOWgQAAAKYAwJKcAENgAANgAABaLSq6gKOWgQPoAKYAQJKcAEbgAANgAABaLSq6gKOWgQfQAKYAQJKcAEagAANgAABaLSq6gKOWgQu4AKYAQJKcAEaAAANgAABaLSq6gKOWgQ+gAKYAQJKcAEZAAANgAABaLSq6gKOWgROIAKYAQJKcAEYAAANgAABaLSq6gB9DtnUBAAAAAAAAlOeCjKCjloEAAACmAECSnABF4AADYAAAWi0quoCjloED6ACmAECSnABFwAADYAAAWi0quoCjloEH0ACmAECSnABFoAADYAAAWi0quoCjloELuACmAECSnABFgAADYAAAWi0quoCjloEPoACmAMCSnABDYAADYAAAWi0quoCjloETiACmAECSnABFYAADYAAAWi0quoAfQ7Z1AQAAAAAAAJTngqQQo5aBAAAApgBAkpwARUAAA2AAAFotKrqAo5aBA+gApgBAkpwARSAAA2AAAFotKrqAo5aBB9AApgBAkpwARQAAA2AAAFotKrqAo5aBC7gApgBAkpwARQAAA2AAAFotKrqAo5aBD6AApgBAkpwAROAAA2AAAFotKrqAo5aBE4gApgBAkpwARMAAA2AAAFotKrqAH0O2dQEAAAAAAACU54K7gKOWgQAAAKYAQJKcAESgAANgAABaLSq6gKOWgQPoAKYAQJKcAESAAANgAABaLSq6gKOWgQfQAKYAwJKcAENgAANgAABaLSq6gKOWgQu4AKYAQJKcAERgAANgAABaLSq6gKOWgQ+gAKYAQJKcAERAAANgAABaLSq6gKOWgROIAKYAQJKcAEQgAANgAABaLSq6gB9DtnUBAAAAAAAAlOeC0vCjloEAAACmAECSnABEIAADYAAAWi0quoCjloED6ACmAECSnABEAAADYAAAWi0quoCjloEH0ACmAECSnABD4AADYAAAWi0quoCjloELuACmAECSnABDwAADYAAAWi0quoCjloEPoACmAECSnABDoAADYAAAWi0quoCjloETiACmAECSnABDgAADYAAAWi0quoAcU7trAQAAAAAAABG7j7OBALeK94EB8YIBd/CBAw=='
                        )),
                        t.play());
                    }),
                    (this.release = function() {
                      t.pause(), (t.src = '');
                    });
                }
                function s() {
                  var t = null;
                  (this.request = function() {
                    t ||
                      (t = setInterval(function() {
                        (window.location.href = '/'),
                          setTimeout(window.stop, 0);
                      }, 15e3));
                  }),
                    (this.release = function() {
                      t && (clearInterval(t), (t = null));
                    });
                }
                e.exports =
                  (n =
                    navigator.userAgent ||
                    navigator.vendor ||
                    window.opera).match(/iPhone/i) || n.match(/iPod/i)
                    ? s
                    : o;
              },
              { './util.js': 204 }
            ]
          },
          {},
          [171]
        )(171);
      }),
        (t.exports = o());
    }.call(i, n(16), n(51).setImmediate));
  },
  function(t, e, i) {
    var n = Function.prototype.apply;
    function r(t, e) {
      (this._id = t), (this._clearFn = e);
    }
    (e.setTimeout = function() {
      return new r(n.call(setTimeout, window, arguments), clearTimeout);
    }),
      (e.setInterval = function() {
        return new r(n.call(setInterval, window, arguments), clearInterval);
      }),
      (e.clearTimeout = e.clearInterval = function(t) {
        t && t.close();
      }),
      (r.prototype.unref = r.prototype.ref = function() {}),
      (r.prototype.close = function() {
        this._clearFn.call(window, this._id);
      }),
      (e.enroll = function(t, e) {
        clearTimeout(t._idleTimeoutId), (t._idleTimeout = e);
      }),
      (e.unenroll = function(t) {
        clearTimeout(t._idleTimeoutId), (t._idleTimeout = -1);
      }),
      (e._unrefActive = e.active = function(t) {
        clearTimeout(t._idleTimeoutId);
        var e = t._idleTimeout;
        e >= 0 &&
          (t._idleTimeoutId = setTimeout(function() {
            t._onTimeout && t._onTimeout();
          }, e));
      }),
      i(52),
      (e.setImmediate = setImmediate),
      (e.clearImmediate = clearImmediate);
  },
  function(t, e, i) {
    (function(t, e) {
      !(function(t, i) {
        'use strict';
        if (!t.setImmediate) {
          var n,
            r,
            o,
            s,
            a,
            c = 1,
            l = {},
            u = !1,
            h = t.document,
            d = Object.getPrototypeOf && Object.getPrototypeOf(t);
          (d = d && d.setTimeout ? d : t),
            '[object process]' === {}.toString.call(t.process)
              ? (n = function(t) {
                  e.nextTick(function() {
                    f(t);
                  });
                })
              : !(function() {
                  if (t.postMessage && !t.importScripts) {
                    var e = !0,
                      i = t.onmessage;
                    return (
                      (t.onmessage = function() {
                        e = !1;
                      }),
                      t.postMessage('', '*'),
                      (t.onmessage = i),
                      e
                    );
                  }
                })()
                ? t.MessageChannel
                  ? (((o = new MessageChannel()).port1.onmessage = function(t) {
                      f(t.data);
                    }),
                    (n = function(t) {
                      o.port2.postMessage(t);
                    }))
                  : h && 'onreadystatechange' in h.createElement('script')
                    ? ((r = h.documentElement),
                      (n = function(t) {
                        var e = h.createElement('script');
                        (e.onreadystatechange = function() {
                          f(t),
                            (e.onreadystatechange = null),
                            r.removeChild(e),
                            (e = null);
                        }),
                          r.appendChild(e);
                      }))
                    : (n = function(t) {
                        setTimeout(f, 0, t);
                      })
                : ((s = 'setImmediate$' + Math.random() + '$'),
                  (a = function(e) {
                    e.source === t &&
                      'string' == typeof e.data &&
                      0 === e.data.indexOf(s) &&
                      f(+e.data.slice(s.length));
                  }),
                  t.addEventListener
                    ? t.addEventListener('message', a, !1)
                    : t.attachEvent('onmessage', a),
                  (n = function(e) {
                    t.postMessage(s + e, '*');
                  })),
            (d.setImmediate = function(t) {
              'function' != typeof t && (t = new Function('' + t));
              for (
                var e = new Array(arguments.length - 1), i = 0;
                i < e.length;
                i++
              )
                e[i] = arguments[i + 1];
              var r = { callback: t, args: e };
              return (l[c] = r), n(c), c++;
            }),
            (d.clearImmediate = p);
        }
        function p(t) {
          delete l[t];
        }
        function f(t) {
          if (u) setTimeout(f, 0, t);
          else {
            var e = l[t];
            if (e) {
              u = !0;
              try {
                !(function(t) {
                  var e = t.callback,
                    n = t.args;
                  switch (n.length) {
                    case 0:
                      e();
                      break;
                    case 1:
                      e(n[0]);
                      break;
                    case 2:
                      e(n[0], n[1]);
                      break;
                    case 3:
                      e(n[0], n[1], n[2]);
                      break;
                    default:
                      e.apply(i, n);
                  }
                })(e);
              } finally {
                p(t), (u = !1);
              }
            }
          }
        }
      })('undefined' == typeof self ? (void 0 === t ? this : t) : self);
    }.call(e, i(16), i(53)));
  },
  function(t, e) {
    var i,
      n,
      r = (t.exports = {});
    function o() {
      throw new Error('setTimeout has not been defined');
    }
    function s() {
      throw new Error('clearTimeout has not been defined');
    }
    function a(t) {
      if (i === setTimeout) return setTimeout(t, 0);
      if ((i === o || !i) && setTimeout)
        return (i = setTimeout), setTimeout(t, 0);
      try {
        return i(t, 0);
      } catch (e) {
        try {
          return i.call(null, t, 0);
        } catch (e) {
          return i.call(this, t, 0);
        }
      }
    }
    !(function() {
      try {
        i = 'function' == typeof setTimeout ? setTimeout : o;
      } catch (t) {
        i = o;
      }
      try {
        n = 'function' == typeof clearTimeout ? clearTimeout : s;
      } catch (t) {
        n = s;
      }
    })();
    var c,
      l = [],
      u = !1,
      h = -1;
    function d() {
      u &&
        c &&
        ((u = !1), c.length ? (l = c.concat(l)) : (h = -1), l.length && p());
    }
    function p() {
      if (!u) {
        var t = a(d);
        u = !0;
        for (var e = l.length; e; ) {
          for (c = l, l = []; ++h < e; ) c && c[h].run();
          (h = -1), (e = l.length);
        }
        (c = null),
          (u = !1),
          (function(t) {
            if (n === clearTimeout) return clearTimeout(t);
            if ((n === s || !n) && clearTimeout)
              return (n = clearTimeout), clearTimeout(t);
            try {
              n(t);
            } catch (e) {
              try {
                return n.call(null, t);
              } catch (e) {
                return n.call(this, t);
              }
            }
          })(t);
      }
    }
    function f(t, e) {
      (this.fun = t), (this.array = e);
    }
    function m() {}
    (r.nextTick = function(t) {
      var e = new Array(arguments.length - 1);
      if (arguments.length > 1)
        for (var i = 1; i < arguments.length; i++) e[i - 1] = arguments[i];
      l.push(new f(t, e)), 1 !== l.length || u || a(p);
    }),
      (f.prototype.run = function() {
        this.fun.apply(null, this.array);
      }),
      (r.title = 'browser'),
      (r.browser = !0),
      (r.env = {}),
      (r.argv = []),
      (r.version = ''),
      (r.versions = {}),
      (r.on = m),
      (r.addListener = m),
      (r.once = m),
      (r.off = m),
      (r.removeListener = m),
      (r.removeAllListeners = m),
      (r.emit = m),
      (r.prependListener = m),
      (r.prependOnceListener = m),
      (r.listeners = function(t) {
        return [];
      }),
      (r.binding = function(t) {
        throw new Error('process.binding is not supported');
      }),
      (r.cwd = function() {
        return '/';
      }),
      (r.chdir = function(t) {
        throw new Error('process.chdir is not supported');
      }),
      (r.umask = function() {
        return 0;
      });
  },
  function(t, e, i) {
    t.exports = {
      controls: i(55),
      loaders: i(99),
      misc: i(109),
      pathfinding: i(118),
      physics: i(23),
      primitives: i(126),
      registerAll: function() {
        this.controls.registerAll(),
          this.loaders.registerAll(),
          this.misc.registerAll(),
          this.pathfinding.registerAll(),
          this.physics.registerAll(),
          this.primitives.registerAll();
      }
    };
  },
  function(t, e, i) {
    var n = i(23);
    t.exports = {
      'checkpoint-controls': i(89),
      'gamepad-controls': i(90),
      'hmd-controls': i(93),
      'keyboard-controls': i(94),
      'mouse-controls': i(96),
      'touch-controls': i(97),
      'universal-controls': i(98),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME),
          n.registerAll(),
          t.components['checkpoint-controls'] ||
            t.registerComponent(
              'checkpoint-controls',
              this['checkpoint-controls']
            ),
          t.components['gamepad-controls'] ||
            t.registerComponent('gamepad-controls', this['gamepad-controls']),
          t.components['hmd-controls'] ||
            t.registerComponent('hmd-controls', this['hmd-controls']),
          t.components['keyboard-controls'] ||
            t.registerComponent('keyboard-controls', this['keyboard-controls']),
          t.components['mouse-controls'] ||
            t.registerComponent('mouse-controls', this['mouse-controls']),
          t.components['touch-controls'] ||
            t.registerComponent('touch-controls', this['touch-controls']),
          t.components['universal-controls'] ||
            t.registerComponent(
              'universal-controls',
              this['universal-controls']
            ),
          (this._registered = !0));
      }
    };
  },
  function(t, e) {
    t.exports = {
      _from: 'github:donmccurdy/cannon.js#v0.6.2-dev1',
      _id: 'cannon@0.6.2',
      _inBundle: !1,
      _integrity: 'sha1-9pNK0b0zeqnhQQS1nA+eK16ithk=',
      _location: '/cannon',
      _phantomChildren: {},
      _requested: {
        type: 'git',
        raw: 'cannon@github:donmccurdy/cannon.js#v0.6.2-dev1',
        name: 'cannon',
        escapedName: 'cannon',
        rawSpec: 'github:donmccurdy/cannon.js#v0.6.2-dev1',
        saveSpec: 'github:donmccurdy/cannon.js#v0.6.2-dev1',
        fetchSpec: null,
        gitCommittish: 'v0.6.2-dev1'
      },
      _requiredBy: ['/aframe-physics-system'],
      _resolved:
        'github:donmccurdy/cannon.js#022e8ba53fa83abf0ad8a0e4fd08623123838a17',
      _spec: 'cannon@github:donmccurdy/cannon.js#v0.6.2-dev1',
      _where: 'F:\\projects\\drifter\\node_modules\\aframe-physics-system',
      author: {
        name: 'Stefan Hedman',
        email: 'schteppe@gmail.com',
        url: 'http://steffe.se'
      },
      bugs: { url: 'https://github.com/schteppe/cannon.js/issues' },
      bundleDependencies: !1,
      dependencies: {},
      deprecated: !1,
      description: 'A lightweight 3D physics engine written in JavaScript.',
      devDependencies: {
        browserify: '*',
        grunt: '~0.4.0',
        'grunt-browserify': '^2.1.4',
        'grunt-contrib-concat': '~0.1.3',
        'grunt-contrib-jshint': '~0.1.1',
        'grunt-contrib-nodeunit': '^0.4.1',
        'grunt-contrib-uglify': '^0.5.1',
        'grunt-contrib-yuidoc': '^0.5.2',
        jshint: 'latest',
        nodeunit: '^0.9.0',
        'uglify-js': 'latest'
      },
      engines: { node: '*' },
      homepage: 'https://github.com/schteppe/cannon.js',
      keywords: ['cannon.js', 'cannon', 'physics', 'engine', '3d'],
      licenses: [{ type: 'MIT' }],
      main: './src/Cannon.js',
      name: 'cannon',
      repository: {
        type: 'git',
        url: 'git+https://github.com/schteppe/cannon.js.git'
      },
      version: '0.6.2'
    };
  },
  function(t, e, i) {
    t.exports = r;
    var n = i(0);
    function r() {
      (this.spatial = new n()), (this.rotational = new n());
    }
    (r.prototype.multiplyElement = function(t) {
      return t.spatial.dot(this.spatial) + t.rotational.dot(this.rotational);
    }),
      (r.prototype.multiplyVectors = function(t, e) {
        return t.dot(this.spatial) + e.dot(this.rotational);
      });
  },
  function(t, e, i) {
    t.exports = a;
    i(10);
    var n = i(21),
      r = i(59),
      o = i(22),
      s = (i(6), i(0));
    function a(t, e, i) {
      var a = void 0 !== (i = i || {}).maxForce ? i.maxForce : 1e6,
        c = i.pivotA ? i.pivotA.clone() : new s(),
        l = i.pivotB ? i.pivotB.clone() : new s();
      (this.axisA = i.axisA ? i.axisA.clone() : new s()),
        (this.axisB = i.axisB ? i.axisB.clone() : new s()),
        n.call(this, t, c, e, l, a),
        (this.collideConnected = !!i.collideConnected),
        (this.angle = void 0 !== i.angle ? i.angle : 0);
      var u = (this.coneEquation = new r(t, e, i)),
        h = (this.twistEquation = new o(t, e, i));
      (this.twistAngle = void 0 !== i.twistAngle ? i.twistAngle : 0),
        (u.maxForce = 0),
        (u.minForce = -a),
        (h.maxForce = 0),
        (h.minForce = -a),
        this.equations.push(u, h);
    }
    (a.prototype = new n()), (a.constructor = a);
    new s(), new s();
    a.prototype.update = function() {
      var t = this.bodyA,
        e = this.bodyB,
        i = this.coneEquation,
        r = this.twistEquation;
      n.prototype.update.call(this),
        t.vectorToWorldFrame(this.axisA, i.axisA),
        e.vectorToWorldFrame(this.axisB, i.axisB),
        this.axisA.tangents(r.axisA, r.axisA),
        t.vectorToWorldFrame(r.axisA, r.axisA),
        this.axisB.tangents(r.axisB, r.axisB),
        e.vectorToWorldFrame(r.axisB, r.axisB),
        (i.angle = this.angle),
        (r.maxAngle = this.twistAngle);
    };
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(0),
      r = (i(4), i(11));
    function o(t, e, i) {
      var o = void 0 !== (i = i || {}).maxForce ? i.maxForce : 1e6;
      r.call(this, t, e, -o, o),
        (this.axisA = i.axisA ? i.axisA.clone() : new n(1, 0, 0)),
        (this.axisB = i.axisB ? i.axisB.clone() : new n(0, 1, 0)),
        (this.angle = void 0 !== i.angle ? i.angle : 0);
    }
    (o.prototype = new r()), (o.prototype.constructor = o);
    var s = new n(),
      a = new n();
    o.prototype.computeB = function(t) {
      var e = this.a,
        i = this.b,
        n = this.axisA,
        r = this.axisB,
        o = s,
        c = a,
        l = this.jacobianElementA,
        u = this.jacobianElementB;
      return (
        n.cross(r, o),
        r.cross(n, c),
        l.rotational.copy(c),
        u.rotational.copy(o),
        -(Math.cos(this.angle) - n.dot(r)) * e -
          this.computeGW() * i -
          t * this.computeGiMf()
      );
    };
  },
  function(t, e, i) {
    t.exports = s;
    var n = i(1),
      r = i(0),
      o = (i(2), i(8));
    function s(t, e, i, s) {
      var a = s,
        c = [],
        l = [],
        u = [],
        h = [],
        d = [],
        p = Math.cos,
        f = Math.sin;
      c.push(new r(e * p(0), e * f(0), 0.5 * -i)),
        h.push(0),
        c.push(new r(t * p(0), t * f(0), 0.5 * i)),
        d.push(1);
      for (var m = 0; m < a; m++) {
        var g = 2 * Math.PI / a * (m + 1),
          v = 2 * Math.PI / a * (m + 0.5);
        m < a - 1
          ? (c.push(new r(e * p(g), e * f(g), 0.5 * -i)),
            h.push(2 * m + 2),
            c.push(new r(t * p(g), t * f(g), 0.5 * i)),
            d.push(2 * m + 3),
            u.push([2 * m + 2, 2 * m + 3, 2 * m + 1, 2 * m]))
          : u.push([0, 1, 2 * m + 1, 2 * m]),
          (a % 2 == 1 || m < a / 2) && l.push(new r(p(v), f(v), 0));
      }
      u.push(d), l.push(new r(0, 0, 1));
      var y = [];
      for (m = 0; m < h.length; m++) y.push(h[h.length - m - 1]);
      u.push(y), (this.type = n.types.CONVEXPOLYHEDRON), o.call(this, c, u, l);
    }
    s.prototype = new o();
  },
  function(t, e, i) {
    t.exports = o;
    var n = i(10),
      r = i(6);
    function o(t, e, i, o) {
      n.call(this, t, e),
        void 0 === i && (i = t.position.distanceTo(e.position)),
        void 0 === o && (o = 1e6),
        (this.distance = i);
      var s = (this.distanceEquation = new r(t, e));
      this.equations.push(s), (s.minForce = -o), (s.maxForce = o);
    }
    (o.prototype = new n()),
      (o.prototype.update = function() {
        var t = this.bodyA,
          e = this.bodyB,
          i = this.distanceEquation,
          n = 0.5 * this.distance,
          r = i.ni;
        e.position.vsub(t.position, r),
          r.normalize(),
          r.mult(n, i.ri),
          r.mult(-n, i.rj);
      });
  },
  function(t, e, i) {
    t.exports = s;
    var n = i(18),
      r = i(0),
      o = i(1);
    function s(t, e, i, o, s) {
      n.apply(this),
        (this.nx = i || 10),
        (this.ny = o || 10),
        (this.nz = s || 10),
        (this.aabbMin = t || new r(100, 100, 100)),
        (this.aabbMax = e || new r(-100, -100, -100));
      var a = this.nx * this.ny * this.nz;
      if (a <= 0) throw "GridBroadphase: Each dimension's n must be >0";
      (this.bins = []),
        (this.binLengths = []),
        (this.bins.length = a),
        (this.binLengths.length = a);
      for (var c = 0; c < a; c++) (this.bins[c] = []), (this.binLengths[c] = 0);
    }
    (s.prototype = new n()), (s.prototype.constructor = s);
    var a = new r();
    new r();
    s.prototype.collisionPairs = function(t, e, i) {
      for (
        var n = t.numObjects(),
          r = t.bodies,
          s = this.aabbMax,
          c = this.aabbMin,
          l = this.nx,
          u = this.ny,
          h = this.nz,
          d = u * h,
          p = h,
          f = 1,
          m = s.x,
          g = s.y,
          v = s.z,
          y = c.x,
          w = c.y,
          M = c.z,
          E = l / (m - y),
          b = u / (g - w),
          x = h / (v - M),
          A = (m - y) / l,
          T = (g - w) / u,
          L = (v - M) / h,
          N = 0.5 * Math.sqrt(A * A + T * T + L * L),
          D = o.types,
          S = D.SPHERE,
          C = D.PLANE,
          _ = (D.BOX, D.COMPOUND, D.CONVEXPOLYHEDRON, this.bins),
          I = this.binLengths,
          j = this.bins.length,
          O = 0;
        O !== j;
        O++
      )
        I[O] = 0;
      var R = Math.ceil;
      (c = Math.min), (s = Math.max);
      function z(t, e, i, n, r, o, s) {
        var a = ((t - y) * E) | 0,
          c = ((e - w) * b) | 0,
          m = ((i - M) * x) | 0,
          g = R((n - y) * E),
          v = R((r - w) * b),
          A = R((o - M) * x);
        a < 0 ? (a = 0) : a >= l && (a = l - 1),
          c < 0 ? (c = 0) : c >= u && (c = u - 1),
          m < 0 ? (m = 0) : m >= h && (m = h - 1),
          g < 0 ? (g = 0) : g >= l && (g = l - 1),
          v < 0 ? (v = 0) : v >= u && (v = u - 1),
          A < 0 ? (A = 0) : A >= h && (A = h - 1),
          (c *= p),
          (m *= f),
          (g *= d),
          (v *= p),
          (A *= f);
        for (var T = (a *= d); T <= g; T += d)
          for (var L = c; L <= v; L += p)
            for (var N = m; N <= A; N += f) {
              var D = T + L + N;
              _[D][I[D]++] = s;
            }
      }
      for (O = 0; O !== n; O++) {
        var k = (it = r[O]).shape;
        switch (k.type) {
          case S:
            var B = it.position.x,
              P = it.position.y,
              U = it.position.z,
              F = k.radius;
            z(B - F, P - F, U - F, B + F, P + F, U + F, it);
            break;
          case C:
            k.worldNormalNeedsUpdate && k.computeWorldNormal(it.quaternion);
            var H = k.worldNormal,
              V = y + 0.5 * A - it.position.x,
              G = w + 0.5 * T - it.position.y,
              Y = M + 0.5 * L - it.position.z,
              Q = a;
            Q.set(V, G, Y);
            for (var W = 0, q = 0; W !== l; W++, q += d, Q.y = G, Q.x += A)
              for (var X = 0, K = 0; X !== u; X++, K += p, Q.z = Y, Q.y += T)
                for (var Z = 0, J = 0; Z !== h; Z++, J += f, Q.z += L)
                  if (Q.dot(H) < N) {
                    var $ = q + K + J;
                    _[$][I[$]++] = it;
                  }
            break;
          default:
            it.aabbNeedsUpdate && it.computeAABB(),
              z(
                it.aabb.lowerBound.x,
                it.aabb.lowerBound.y,
                it.aabb.lowerBound.z,
                it.aabb.upperBound.x,
                it.aabb.upperBound.y,
                it.aabb.upperBound.z,
                it
              );
        }
      }
      for (O = 0; O !== j; O++) {
        var tt = I[O];
        if (tt > 1) {
          var et = _[O];
          for (W = 0; W !== tt; W++) {
            var it = et[W];
            for (X = 0; X !== W; X++) {
              var nt = et[X];
              this.needBroadphaseCollision(it, nt) &&
                this.intersectionTest(it, nt, e, i);
            }
          }
        }
      }
      this.makePairsUnique(e, i);
    };
  },
  function(t, e, i) {
    var n = i(1),
      r = i(8),
      o = i(0),
      s = i(12);
    function a(t, e) {
      (e = s.defaults(e, { maxValue: null, minValue: null, elementSize: 1 })),
        (this.data = t),
        (this.maxValue = e.maxValue),
        (this.minValue = e.minValue),
        (this.elementSize = e.elementSize),
        null === e.minValue && this.updateMinValue(),
        null === e.maxValue && this.updateMaxValue(),
        (this.cacheEnabled = !0),
        n.call(this),
        (this.pillarConvex = new r()),
        (this.pillarOffset = new o()),
        (this.type = n.types.HEIGHTFIELD),
        this.updateBoundingSphereRadius(),
        (this._cachedPillars = {});
    }
    (t.exports = a),
      (a.prototype = new n()),
      (a.prototype.update = function() {
        this._cachedPillars = {};
      }),
      (a.prototype.updateMinValue = function() {
        for (var t = this.data, e = t[0][0], i = 0; i !== t.length; i++)
          for (var n = 0; n !== t[i].length; n++) {
            var r = t[i][n];
            r < e && (e = r);
          }
        this.minValue = e;
      }),
      (a.prototype.updateMaxValue = function() {
        for (var t = this.data, e = t[0][0], i = 0; i !== t.length; i++)
          for (var n = 0; n !== t[i].length; n++) {
            var r = t[i][n];
            r > e && (e = r);
          }
        this.maxValue = e;
      }),
      (a.prototype.setHeightValueAtIndex = function(t, e, i) {
        (this.data[t][e] = i),
          this.clearCachedConvexTrianglePillar(t, e, !1),
          t > 0 &&
            (this.clearCachedConvexTrianglePillar(t - 1, e, !0),
            this.clearCachedConvexTrianglePillar(t - 1, e, !1)),
          e > 0 &&
            (this.clearCachedConvexTrianglePillar(t, e - 1, !0),
            this.clearCachedConvexTrianglePillar(t, e - 1, !1)),
          e > 0 &&
            t > 0 &&
            this.clearCachedConvexTrianglePillar(t - 1, e - 1, !0);
      }),
      (a.prototype.getRectMinMax = function(t, e, i, n, r) {
        r = r || [];
        for (var o = this.data, s = this.minValue, a = t; a <= i; a++)
          for (var c = e; c <= n; c++) {
            var l = o[a][c];
            l > s && (s = l);
          }
        (r[0] = this.minValue), (r[1] = s);
      }),
      (a.prototype.getIndexOfPosition = function(t, e, i, n) {
        var r = this.elementSize,
          o = this.data,
          s = Math.floor(t / r),
          a = Math.floor(e / r);
        return (
          (i[0] = s),
          (i[1] = a),
          n &&
            (s < 0 && (s = 0),
            a < 0 && (a = 0),
            s >= o.length - 1 && (s = o.length - 1),
            a >= o[0].length - 1 && (a = o[0].length - 1)),
          !(s < 0 || a < 0 || s >= o.length - 1 || a >= o[0].length - 1)
        );
      });
    var c = [],
      l = new o(),
      u = new o(),
      h = new o(),
      d = new o();
    a.prototype.getTriangleAt = function(t, e, i, n, r, o) {
      var s = c;
      this.getIndexOfPosition(t, e, s, i);
      var a = s[0],
        l = s[1],
        u = this.data;
      i &&
        ((a = Math.min(u.length - 2, Math.max(0, a))),
        (l = Math.min(u[0].length - 2, Math.max(0, l))));
      var h = this.elementSize,
        d =
          Math.pow(t / h - a, 2) + Math.pow(e / h - l, 2) >
          Math.pow(t / h - (a + 1), 2) + Math.pow(e / h - (l + 1), 2);
      return this.getTriangle(a, l, d, n, r, o), d;
    };
    var p = new o(),
      f = new o(),
      m = new o(),
      g = new o(),
      v = new o();
    (a.prototype.getNormalAt = function(t, e, i, n) {
      var r = p,
        o = f,
        s = m,
        a = g,
        c = v;
      this.getTriangleAt(t, e, i, r, o, s),
        o.vsub(r, a),
        s.vsub(r, c),
        a.cross(c, n),
        n.normalize();
    }),
      (a.prototype.getAabbAtIndex = function(t, e, i) {
        var n = this.data,
          r = this.elementSize;
        i.lowerBound.set(t * r, e * r, n[t][e]),
          i.upperBound.set((t + 1) * r, (e + 1) * r, n[t + 1][e + 1]);
      }),
      (a.prototype.getHeightAt = function(t, e, i) {
        var n = this.data,
          r = u,
          o = h,
          s = d,
          a = c;
        this.getIndexOfPosition(t, e, a, i);
        var p = a[0],
          f = a[1];
        i &&
          ((p = Math.min(n.length - 2, Math.max(0, p))),
          (f = Math.min(n[0].length - 2, Math.max(0, f))));
        var m,
          g,
          v,
          y,
          w,
          M,
          E,
          b,
          x,
          A = this.getTriangleAt(t, e, i, r, o, s);
        (m = t),
          (g = e),
          (v = r.x),
          (y = r.y),
          (w = o.x),
          (M = o.y),
          (E = s.x),
          (b = s.y),
          ((x = l).x =
            ((M - b) * (m - E) + (E - w) * (g - b)) /
            ((M - b) * (v - E) + (E - w) * (y - b))),
          (x.y =
            ((b - y) * (m - E) + (v - E) * (g - b)) /
            ((M - b) * (v - E) + (E - w) * (y - b))),
          (x.z = 1 - x.x - x.y);
        var T = l;
        return A
          ? n[p + 1][f + 1] * T.x + n[p][f + 1] * T.y + n[p + 1][f] * T.z
          : n[p][f] * T.x + n[p + 1][f] * T.y + n[p][f + 1] * T.z;
      }),
      (a.prototype.getCacheConvexTrianglePillarKey = function(t, e, i) {
        return t + '_' + e + '_' + (i ? 1 : 0);
      }),
      (a.prototype.getCachedConvexTrianglePillar = function(t, e, i) {
        return this._cachedPillars[
          this.getCacheConvexTrianglePillarKey(t, e, i)
        ];
      }),
      (a.prototype.setCachedConvexTrianglePillar = function(t, e, i, n, r) {
        this._cachedPillars[this.getCacheConvexTrianglePillarKey(t, e, i)] = {
          convex: n,
          offset: r
        };
      }),
      (a.prototype.clearCachedConvexTrianglePillar = function(t, e, i) {
        delete this._cachedPillars[
          this.getCacheConvexTrianglePillarKey(t, e, i)
        ];
      }),
      (a.prototype.getTriangle = function(t, e, i, n, r, o) {
        var s = this.data,
          a = this.elementSize;
        i
          ? (n.set((t + 1) * a, (e + 1) * a, s[t + 1][e + 1]),
            r.set(t * a, (e + 1) * a, s[t][e + 1]),
            o.set((t + 1) * a, e * a, s[t + 1][e]))
          : (n.set(t * a, e * a, s[t][e]),
            r.set((t + 1) * a, e * a, s[t + 1][e]),
            o.set(t * a, (e + 1) * a, s[t][e + 1]));
      }),
      (a.prototype.getConvexTrianglePillar = function(t, e, i) {
        var n = this.pillarConvex,
          s = this.pillarOffset;
        if (this.cacheEnabled) {
          if ((a = this.getCachedConvexTrianglePillar(t, e, i)))
            return (
              (this.pillarConvex = a.convex),
              void (this.pillarOffset = a.offset)
            );
          (n = new r()),
            (s = new o()),
            (this.pillarConvex = n),
            (this.pillarOffset = s);
        }
        var a = this.data,
          c = this.elementSize,
          l = n.faces;
        n.vertices.length = 6;
        for (var u = 0; u < 6; u++) n.vertices[u] || (n.vertices[u] = new o());
        l.length = 5;
        for (u = 0; u < 5; u++) l[u] || (l[u] = []);
        var h = n.vertices,
          d =
            (Math.min(a[t][e], a[t + 1][e], a[t][e + 1], a[t + 1][e + 1]) -
              this.minValue) /
              2 +
            this.minValue;
        i
          ? (s.set((t + 0.75) * c, (e + 0.75) * c, d),
            h[0].set(0.25 * c, 0.25 * c, a[t + 1][e + 1] - d),
            h[1].set(-0.75 * c, 0.25 * c, a[t][e + 1] - d),
            h[2].set(0.25 * c, -0.75 * c, a[t + 1][e] - d),
            h[3].set(0.25 * c, 0.25 * c, -d - 1),
            h[4].set(-0.75 * c, 0.25 * c, -d - 1),
            h[5].set(0.25 * c, -0.75 * c, -d - 1),
            (l[0][0] = 0),
            (l[0][1] = 1),
            (l[0][2] = 2),
            (l[1][0] = 5),
            (l[1][1] = 4),
            (l[1][2] = 3),
            (l[2][0] = 2),
            (l[2][1] = 5),
            (l[2][2] = 3),
            (l[2][3] = 0),
            (l[3][0] = 3),
            (l[3][1] = 4),
            (l[3][2] = 1),
            (l[3][3] = 0),
            (l[4][0] = 1),
            (l[4][1] = 4),
            (l[4][2] = 5),
            (l[4][3] = 2))
          : (s.set((t + 0.25) * c, (e + 0.25) * c, d),
            h[0].set(-0.25 * c, -0.25 * c, a[t][e] - d),
            h[1].set(0.75 * c, -0.25 * c, a[t + 1][e] - d),
            h[2].set(-0.25 * c, 0.75 * c, a[t][e + 1] - d),
            h[3].set(-0.25 * c, -0.25 * c, -d - 1),
            h[4].set(0.75 * c, -0.25 * c, -d - 1),
            h[5].set(-0.25 * c, 0.75 * c, -d - 1),
            (l[0][0] = 0),
            (l[0][1] = 1),
            (l[0][2] = 2),
            (l[1][0] = 5),
            (l[1][1] = 4),
            (l[1][2] = 3),
            (l[2][0] = 0),
            (l[2][1] = 2),
            (l[2][2] = 5),
            (l[2][3] = 3),
            (l[3][0] = 1),
            (l[3][1] = 0),
            (l[3][2] = 3),
            (l[3][3] = 4),
            (l[4][0] = 4),
            (l[4][1] = 5),
            (l[4][2] = 2),
            (l[4][3] = 1)),
          n.computeNormals(),
          n.computeEdges(),
          n.updateBoundingSphereRadius(),
          this.setCachedConvexTrianglePillar(t, e, i, n, s);
      }),
      (a.prototype.calculateLocalInertia = function(t, e) {
        return (e = e || new o()).set(0, 0, 0), e;
      }),
      (a.prototype.volume = function() {
        return Number.MAX_VALUE;
      }),
      (a.prototype.calculateWorldAABB = function(t, e, i, n) {
        i.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE),
          n.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);
      }),
      (a.prototype.updateBoundingSphereRadius = function() {
        var t = this.data,
          e = this.elementSize;
        this.boundingSphereRadius = new o(
          t.length * e,
          t[0].length * e,
          Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))
        ).norm();
      }),
      (a.prototype.setHeightsFromImage = function(t, e) {
        var i = document.createElement('canvas');
        (i.width = t.width), (i.height = t.height);
        var n = i.getContext('2d');
        n.drawImage(t, 0, 0);
        var r = n.getImageData(0, 0, t.width, t.height),
          o = this.data;
        (o.length = 0), (this.elementSize = Math.abs(e.x) / r.width);
        for (var s = 0; s < r.height; s++) {
          for (var a = [], c = 0; c < r.width; c++) {
            var l =
              (r.data[4 * (s * r.height + c)] +
                r.data[4 * (s * r.height + c) + 1] +
                r.data[4 * (s * r.height + c) + 2]) /
              4 /
              255 *
              e.z;
            e.x < 0 ? a.push(l) : a.unshift(l);
          }
          e.y < 0 ? o.unshift(a) : o.push(a);
        }
        this.updateMaxValue(), this.updateMinValue(), this.update();
      });
  },
  function(t, e, i) {
    t.exports = s;
    i(10);
    var n = i(21),
      r = i(22),
      o = (i(26), i(6), i(0));
    function s(t, e, i) {
      var s = void 0 !== (i = i || {}).maxForce ? i.maxForce : 1e6,
        a = new o(),
        c = new o(),
        l = new o();
      t.position.vadd(e.position, l),
        l.scale(0.5, l),
        e.pointToLocalFrame(l, c),
        t.pointToLocalFrame(l, a),
        n.call(this, t, a, e, c, s),
        (this.xA = t.vectorToLocalFrame(o.UNIT_X)),
        (this.xB = e.vectorToLocalFrame(o.UNIT_X)),
        (this.yA = t.vectorToLocalFrame(o.UNIT_Y)),
        (this.yB = e.vectorToLocalFrame(o.UNIT_Y)),
        (this.zA = t.vectorToLocalFrame(o.UNIT_Z)),
        (this.zB = e.vectorToLocalFrame(o.UNIT_Z));
      var u = (this.rotationalEquation1 = new r(t, e, i)),
        h = (this.rotationalEquation2 = new r(t, e, i)),
        d = (this.rotationalEquation3 = new r(t, e, i));
      this.equations.push(u, h, d);
    }
    (s.prototype = new n()), (s.constructor = s);
    new o(), new o();
    s.prototype.update = function() {
      var t = this.bodyA,
        e = this.bodyB,
        i = (this.motorEquation, this.rotationalEquation1),
        r = this.rotationalEquation2,
        o = this.rotationalEquation3;
      n.prototype.update.call(this),
        t.vectorToWorldFrame(this.xA, i.axisA),
        e.vectorToWorldFrame(this.yB, i.axisB),
        t.vectorToWorldFrame(this.yA, r.axisA),
        e.vectorToWorldFrame(this.zB, r.axisB),
        t.vectorToWorldFrame(this.zA, o.axisA),
        e.vectorToWorldFrame(this.xB, o.axisB);
    };
  },
  function(t, e) {
    function i() {
      this.matrix = {};
    }
    (t.exports = i),
      (i.prototype.get = function(t, e) {
        if (((t = t.id), (e = e.id) > t)) {
          var i = e;
          (e = t), (t = i);
        }
        return t + '-' + e in this.matrix;
      }),
      (i.prototype.set = function(t, e, i) {
        if (((t = t.id), (e = e.id) > t)) {
          var n = e;
          (e = t), (t = n);
        }
        i ? (this.matrix[t + '-' + e] = !0) : delete this.matrix[t + '-' + e];
      }),
      (i.prototype.reset = function() {
        this.matrix = {};
      }),
      (i.prototype.setNumObjects = function(t) {});
  },
  function(t, e, i) {
    i(5);
    var n = i(0),
      r = i(2),
      o = (i(14), i(19)),
      s = i(67);
    function a(t) {
      (this.chassisBody = t.chassisBody),
        (this.wheelInfos = []),
        (this.sliding = !1),
        (this.world = null),
        (this.indexRightAxis =
          void 0 !== t.indexRightAxis ? t.indexRightAxis : 1),
        (this.indexForwardAxis =
          void 0 !== t.indexForwardAxis ? t.indexForwardAxis : 0),
        (this.indexUpAxis = void 0 !== t.indexUpAxis ? t.indexUpAxis : 2);
    }
    t.exports = a;
    new n(), new n(), new n();
    var c = new n(),
      l = new n(),
      u = new n();
    new o();
    (a.prototype.addWheel = function(t) {
      var e = new s((t = t || {})),
        i = this.wheelInfos.length;
      return this.wheelInfos.push(e), i;
    }),
      (a.prototype.setSteeringValue = function(t, e) {
        this.wheelInfos[e].steering = t;
      });
    new n();
    (a.prototype.applyEngineForce = function(t, e) {
      this.wheelInfos[e].engineForce = t;
    }),
      (a.prototype.setBrake = function(t, e) {
        this.wheelInfos[e].brake = t;
      }),
      (a.prototype.addToWorld = function(t) {
        this.constraints;
        t.addBody(this.chassisBody);
        var e = this;
        (this.preStepCallback = function() {
          e.updateVehicle(t.dt);
        }),
          t.addEventListener('preStep', this.preStepCallback),
          (this.world = t);
      }),
      (a.prototype.getVehicleAxisWorld = function(t, e) {
        e.set(0 === t ? 1 : 0, 1 === t ? 1 : 0, 2 === t ? 1 : 0),
          this.chassisBody.vectorToWorldFrame(e, e);
      }),
      (a.prototype.updateVehicle = function(t) {
        for (
          var e = this.wheelInfos, i = e.length, r = this.chassisBody, o = 0;
          o < i;
          o++
        )
          this.updateWheelTransform(o);
        this.currentVehicleSpeedKmHour = 3.6 * r.velocity.norm();
        var s = new n();
        this.getVehicleAxisWorld(this.indexForwardAxis, s),
          s.dot(r.velocity) < 0 && (this.currentVehicleSpeedKmHour *= -1);
        for (o = 0; o < i; o++) this.castRay(e[o]);
        this.updateSuspension(t);
        var a = new n(),
          c = new n();
        for (o = 0; o < i; o++) {
          var l = (p = e[o]).suspensionForce;
          l > p.maxSuspensionForce && (l = p.maxSuspensionForce),
            p.raycastResult.hitNormalWorld.scale(l * t, a),
            p.raycastResult.hitPointWorld.vsub(r.position, c),
            r.applyImpulse(a, c);
        }
        this.updateFriction(t);
        var u = new n(),
          h = new n(),
          d = new n();
        for (o = 0; o < i; o++) {
          var p = e[o];
          r.getVelocityAtWorldPoint(p.chassisConnectionPointWorld, d);
          var f = 1;
          switch (this.indexUpAxis) {
            case 1:
              f = -1;
          }
          if (p.isInContact) {
            this.getVehicleAxisWorld(this.indexForwardAxis, h);
            var m = h.dot(p.raycastResult.hitNormalWorld);
            p.raycastResult.hitNormalWorld.scale(m, u), h.vsub(u, h);
            var g = h.dot(d);
            p.deltaRotation = f * g * t / p.radius;
          }
          (!p.sliding && p.isInContact) ||
            0 === p.engineForce ||
            !p.useCustomSlidingRotationalSpeed ||
            (p.deltaRotation =
              (p.engineForce > 0 ? 1 : -1) *
              p.customSlidingRotationalSpeed *
              t),
            Math.abs(p.brake) > Math.abs(p.engineForce) &&
              (p.deltaRotation = 0),
            (p.rotation += p.deltaRotation),
            (p.deltaRotation *= 0.99);
        }
      }),
      (a.prototype.updateSuspension = function(t) {
        for (
          var e = this.chassisBody.mass,
            i = this.wheelInfos,
            n = i.length,
            r = 0;
          r < n;
          r++
        ) {
          var o = i[r];
          if (o.isInContact) {
            var s,
              a = o.suspensionRestLength - o.suspensionLength;
            s = o.suspensionStiffness * a * o.clippedInvContactDotSuspension;
            var c = o.suspensionRelativeVelocity;
            (s -= (c < 0 ? o.dampingCompression : o.dampingRelaxation) * c),
              (o.suspensionForce = s * e),
              o.suspensionForce < 0 && (o.suspensionForce = 0);
          } else o.suspensionForce = 0;
        }
      }),
      (a.prototype.removeFromWorld = function(t) {
        this.constraints;
        t.remove(this.chassisBody),
          t.removeEventListener('preStep', this.preStepCallback),
          (this.world = null);
      });
    var h = new n(),
      d = new n();
    (a.prototype.castRay = function(t) {
      var e = h,
        i = d;
      this.updateWheelTransformWorld(t);
      var r = this.chassisBody,
        o = -1,
        s = t.suspensionRestLength + t.radius;
      t.directionWorld.scale(s, e);
      var a = t.chassisConnectionPointWorld;
      a.vadd(e, i);
      var c = t.raycastResult;
      c.reset();
      var l = r.collisionResponse;
      (r.collisionResponse = !1),
        this.world.rayTest(a, i, c),
        (r.collisionResponse = l);
      var u = c.body;
      if (((t.raycastResult.groundObject = 0), u)) {
        (o = c.distance),
          (t.raycastResult.hitNormalWorld = c.hitNormalWorld),
          (t.isInContact = !0);
        var p = c.distance;
        t.suspensionLength = p - t.radius;
        var f = t.suspensionRestLength - t.maxSuspensionTravel,
          m = t.suspensionRestLength + t.maxSuspensionTravel;
        t.suspensionLength < f && (t.suspensionLength = f),
          t.suspensionLength > m &&
            ((t.suspensionLength = m), t.raycastResult.reset());
        var g = t.raycastResult.hitNormalWorld.dot(t.directionWorld),
          v = new n();
        r.getVelocityAtWorldPoint(t.raycastResult.hitPointWorld, v);
        var y = t.raycastResult.hitNormalWorld.dot(v);
        if (g >= -0.1)
          (t.suspensionRelativeVelocity = 0),
            (t.clippedInvContactDotSuspension = 10);
        else {
          var w = -1 / g;
          (t.suspensionRelativeVelocity = y * w),
            (t.clippedInvContactDotSuspension = w);
        }
      } else
        (t.suspensionLength =
          t.suspensionRestLength + 0 * t.maxSuspensionTravel),
          (t.suspensionRelativeVelocity = 0),
          t.directionWorld.scale(-1, t.raycastResult.hitNormalWorld),
          (t.clippedInvContactDotSuspension = 1);
      return o;
    }),
      (a.prototype.updateWheelTransformWorld = function(t) {
        t.isInContact = !1;
        var e = this.chassisBody;
        e.pointToWorldFrame(
          t.chassisConnectionPointLocal,
          t.chassisConnectionPointWorld
        ),
          e.vectorToWorldFrame(t.directionLocal, t.directionWorld),
          e.vectorToWorldFrame(t.axleLocal, t.axleWorld);
      }),
      (a.prototype.updateWheelTransform = function(t) {
        var e = c,
          i = l,
          n = u,
          o = this.wheelInfos[t];
        this.updateWheelTransformWorld(o),
          o.directionLocal.scale(-1, e),
          i.copy(o.axleLocal),
          e.cross(i, n),
          n.normalize(),
          i.normalize();
        var s = o.steering,
          a = new r();
        a.setFromAxisAngle(e, s);
        var h = new r();
        h.setFromAxisAngle(i, o.rotation);
        var d = o.worldTransform.quaternion;
        this.chassisBody.quaternion.mult(a, d), d.mult(h, d), d.normalize();
        var p = o.worldTransform.position;
        p.copy(o.directionWorld),
          p.scale(o.suspensionLength, p),
          p.vadd(o.chassisConnectionPointWorld, p);
      });
    var p = [new n(1, 0, 0), new n(0, 1, 0), new n(0, 0, 1)];
    a.prototype.getWheelTransformWorld = function(t) {
      return this.wheelInfos[t].worldTransform;
    };
    var f = new n(),
      m = [],
      g = [];
    a.prototype.updateFriction = function(t) {
      for (
        var e = f,
          i = this.wheelInfos,
          r = i.length,
          o = this.chassisBody,
          s = g,
          a = m,
          c = 0;
        c < r;
        c++
      ) {
        (d = (L = i[c]).raycastResult.body) && 0,
          (L.sideImpulse = 0),
          (L.forwardImpulse = 0),
          s[c] || (s[c] = new n()),
          a[c] || (a[c] = new n());
      }
      for (c = 0; c < r; c++) {
        if ((d = (L = i[c]).raycastResult.body)) {
          var l = a[c];
          this.getWheelTransformWorld(c).vectorToWorldFrame(
            p[this.indexRightAxis],
            l
          );
          var u = L.raycastResult.hitNormalWorld,
            h = l.dot(u);
          u.scale(h, e),
            l.vsub(e, l),
            l.normalize(),
            u.cross(l, s[c]),
            s[c].normalize(),
            (L.sideImpulse = S(
              o,
              L.raycastResult.hitPointWorld,
              d,
              L.raycastResult.hitPointWorld,
              l
            )),
            (L.sideImpulse *= 1);
        }
      }
      this.sliding = !1;
      for (c = 0; c < r; c++) {
        var d = (L = i[c]).raycastResult.body,
          v = 0;
        if (((L.slipInfo = 1), d)) {
          var y = L.brake ? L.brake : 0;
          v = M(o, d, L.raycastResult.hitPointWorld, s[c], y);
          var w = y / (v += L.engineForce * t);
          L.slipInfo *= w;
        }
        if (((L.forwardImpulse = 0), (L.skidInfo = 1), d)) {
          L.skidInfo = 1;
          var E = L.suspensionForce * t * L.frictionSlip,
            b = E * E;
          L.forwardImpulse = v;
          var x = 0.5 * L.forwardImpulse,
            A = 1 * L.sideImpulse,
            T = x * x + A * A;
          if (((L.sliding = !1), T > b)) {
            (this.sliding = !0), (L.sliding = !0);
            w = E / Math.sqrt(T);
            L.skidInfo *= w;
          }
        }
      }
      if (this.sliding)
        for (c = 0; c < r; c++) {
          0 !== (L = i[c]).sideImpulse &&
            L.skidInfo < 1 &&
            ((L.forwardImpulse *= L.skidInfo), (L.sideImpulse *= L.skidInfo));
        }
      for (c = 0; c < r; c++) {
        var L = i[c],
          N = new n();
        if (
          (L.raycastResult.hitPointWorld.vsub(o.position, N),
          0 !== L.forwardImpulse)
        ) {
          var D = new n();
          s[c].scale(L.forwardImpulse, D), o.applyImpulse(D, N);
        }
        if (0 !== L.sideImpulse) {
          d = L.raycastResult.body;
          var C = new n();
          L.raycastResult.hitPointWorld.vsub(d.position, C);
          var _ = new n();
          a[c].scale(L.sideImpulse, _),
            o.vectorToLocalFrame(N, N),
            (N['xyz'[this.indexUpAxis]] *= L.rollInfluence),
            o.vectorToWorldFrame(N, N),
            o.applyImpulse(_, N),
            _.scale(-1, _),
            d.applyImpulse(_, C);
        }
      }
    };
    var v = new n(),
      y = new n(),
      w = new n();
    function M(t, e, i, n, r) {
      var o = 0,
        s = i,
        a = v,
        c = y,
        l = w;
      t.getVelocityAtWorldPoint(s, a),
        e.getVelocityAtWorldPoint(s, c),
        a.vsub(c, l);
      return (
        r < (o = -n.dot(l) * (1 / (T(t, i, n) + T(e, i, n)))) && (o = r),
        o < -r && (o = -r),
        o
      );
    }
    var E = new n(),
      b = new n(),
      x = new n(),
      A = new n();
    function T(t, e, i) {
      var n = E,
        r = b,
        o = x,
        s = A;
      return (
        e.vsub(t.position, n),
        n.cross(i, r),
        t.invInertiaWorld.vmult(r, s),
        s.cross(n, o),
        t.invMass + i.dot(o)
      );
    }
    var L = new n(),
      N = new n(),
      D = new n();
    function S(t, e, i, n, r, o) {
      if (r.norm2() > 1.1) return 0;
      var s = L,
        a = N,
        c = D;
      t.getVelocityAtWorldPoint(e, s),
        i.getVelocityAtWorldPoint(n, a),
        s.vsub(a, c);
      return -0.2 * r.dot(c) * (1 / (t.invMass + i.invMass));
    }
  },
  function(t, e, i) {
    var n = i(0),
      r = i(9),
      o = i(14),
      s = i(12);
    function a(t) {
      (t = s.defaults(t, {
        chassisConnectionPointLocal: new n(),
        chassisConnectionPointWorld: new n(),
        directionLocal: new n(),
        directionWorld: new n(),
        axleLocal: new n(),
        axleWorld: new n(),
        suspensionRestLength: 1,
        suspensionMaxLength: 2,
        radius: 1,
        suspensionStiffness: 100,
        dampingCompression: 10,
        dampingRelaxation: 10,
        frictionSlip: 1e4,
        steering: 0,
        rotation: 0,
        deltaRotation: 0,
        rollInfluence: 0.01,
        maxSuspensionForce: Number.MAX_VALUE,
        isFrontWheel: !0,
        clippedInvContactDotSuspension: 1,
        suspensionRelativeVelocity: 0,
        suspensionForce: 0,
        skidInfo: 0,
        suspensionLength: 0,
        maxSuspensionTravel: 1,
        useCustomSlidingRotationalSpeed: !1,
        customSlidingRotationalSpeed: -0.1
      })),
        (this.maxSuspensionTravel = t.maxSuspensionTravel),
        (this.customSlidingRotationalSpeed = t.customSlidingRotationalSpeed),
        (this.useCustomSlidingRotationalSpeed =
          t.useCustomSlidingRotationalSpeed),
        (this.sliding = !1),
        (this.chassisConnectionPointLocal = t.chassisConnectionPointLocal.clone()),
        (this.chassisConnectionPointWorld = t.chassisConnectionPointWorld.clone()),
        (this.directionLocal = t.directionLocal.clone()),
        (this.directionWorld = t.directionWorld.clone()),
        (this.axleLocal = t.axleLocal.clone()),
        (this.axleWorld = t.axleWorld.clone()),
        (this.suspensionRestLength = t.suspensionRestLength),
        (this.suspensionMaxLength = t.suspensionMaxLength),
        (this.radius = t.radius),
        (this.suspensionStiffness = t.suspensionStiffness),
        (this.dampingCompression = t.dampingCompression),
        (this.dampingRelaxation = t.dampingRelaxation),
        (this.frictionSlip = t.frictionSlip),
        (this.steering = 0),
        (this.rotation = 0),
        (this.deltaRotation = 0),
        (this.rollInfluence = t.rollInfluence),
        (this.maxSuspensionForce = t.maxSuspensionForce),
        (this.engineForce = 0),
        (this.brake = 0),
        (this.isFrontWheel = t.isFrontWheel),
        (this.clippedInvContactDotSuspension = 1),
        (this.suspensionRelativeVelocity = 0),
        (this.suspensionForce = 0),
        (this.skidInfo = 0),
        (this.suspensionLength = 0),
        (this.sideImpulse = 0),
        (this.forwardImpulse = 0),
        (this.raycastResult = new o()),
        (this.worldTransform = new r()),
        (this.isInContact = !1);
    }
    t.exports = a;
    var c = new n(),
      l = new n();
    c = new n();
    a.prototype.updateWheel = function(t) {
      var e = this.raycastResult;
      if (this.isInContact) {
        var i = e.hitNormalWorld.dot(e.directionWorld);
        e.hitPointWorld.vsub(t.position, l), t.getVelocityAtWorldPoint(l, c);
        var n = e.hitNormalWorld.dot(c);
        if (i >= -0.1)
          (this.suspensionRelativeVelocity = 0),
            (this.clippedInvContactDotSuspension = 10);
        else {
          var r = -1 / i;
          (this.suspensionRelativeVelocity = n * r),
            (this.clippedInvContactDotSuspension = r);
        }
      } else
        (e.suspensionLength = this.suspensionRestLength),
          (this.suspensionRelativeVelocity = 0),
          e.directionWorld.scale(-1, e.hitNormalWorld),
          (this.clippedInvContactDotSuspension = 1);
    };
  },
  function(t, e, i) {
    var n = i(5),
      r = i(38),
      o = i(17),
      s = i(0),
      a = i(35);
    function c(t) {
      if (
        ((this.wheelBodies = []),
        (this.coordinateSystem =
          void 0 === t.coordinateSystem
            ? new s(1, 2, 3)
            : t.coordinateSystem.clone()),
        (this.chassisBody = t.chassisBody),
        !this.chassisBody)
      ) {
        var e = new o(new s(5, 2, 0.5));
        this.chassisBody = new n(1, e);
      }
      (this.constraints = []), (this.wheelAxes = []), (this.wheelForces = []);
    }
    (t.exports = c),
      (c.prototype.addWheel = function(t) {
        var e = (t = t || {}).body;
        e || (e = new n(1, new r(1.2))),
          this.wheelBodies.push(e),
          this.wheelForces.push(0);
        new s();
        var i = void 0 !== t.position ? t.position.clone() : new s(),
          o = new s();
        this.chassisBody.pointToWorldFrame(i, o), e.position.set(o.x, o.y, o.z);
        var c = void 0 !== t.axis ? t.axis.clone() : new s(0, 1, 0);
        this.wheelAxes.push(c);
        var l = new a(this.chassisBody, e, {
          pivotA: i,
          axisA: c,
          pivotB: s.ZERO,
          axisB: c,
          collideConnected: !1
        });
        return this.constraints.push(l), this.wheelBodies.length - 1;
      }),
      (c.prototype.setSteeringValue = function(t, e) {
        var i = this.wheelAxes[e],
          n = Math.cos(t),
          r = Math.sin(t),
          o = i.x,
          s = i.y;
        this.constraints[e].axisA.set(n * o - r * s, r * o + n * s, 0);
      }),
      (c.prototype.setMotorSpeed = function(t, e) {
        var i = this.constraints[e];
        i.enableMotor(), (i.motorTargetVelocity = t);
      }),
      (c.prototype.disableMotor = function(t) {
        this.constraints[t].disableMotor();
      });
    var l = new s();
    (c.prototype.setWheelForce = function(t, e) {
      this.wheelForces[e] = t;
    }),
      (c.prototype.applyWheelForce = function(t, e) {
        var i = this.wheelAxes[e],
          n = this.wheelBodies[e],
          r = n.torque;
        i.scale(t, l), n.vectorToWorldFrame(l, l), r.vadd(l, r);
      }),
      (c.prototype.addToWorld = function(t) {
        for (
          var e = this.constraints,
            i = this.wheelBodies.concat([this.chassisBody]),
            n = 0;
          n < i.length;
          n++
        )
          t.addBody(i[n]);
        for (n = 0; n < e.length; n++) t.addConstraint(e[n]);
        t.addEventListener('preStep', this._update.bind(this));
      }),
      (c.prototype._update = function() {
        for (var t = this.wheelForces, e = 0; e < t.length; e++)
          this.applyWheelForce(t[e], e);
      }),
      (c.prototype.removeFromWorld = function(t) {
        for (
          var e = this.constraints,
            i = this.wheelBodies.concat([this.chassisBody]),
            n = 0;
          n < i.length;
          n++
        )
          t.remove(i[n]);
        for (n = 0; n < e.length; n++) t.removeConstraint(e[n]);
      });
    var u = new s();
    c.prototype.getWheelSpeed = function(t) {
      var e = this.wheelAxes[t],
        i = this.wheelBodies[t].angularVelocity;
      return this.chassisBody.vectorToWorldFrame(e, u), i.dot(u);
    };
  },
  function(t, e, i) {
    i(1);
    var n = i(18);
    function r(t) {
      n.apply(this),
        (this.axisList = []),
        (this.world = null),
        (this.axisIndex = 0);
      var e = this.axisList;
      (this._addBodyHandler = function(t) {
        e.push(t.body);
      }),
        (this._removeBodyHandler = function(t) {
          var i = e.indexOf(t.body);
          -1 !== i && e.splice(i, 1);
        }),
        t && this.setWorld(t);
    }
    (t.exports = r),
      (r.prototype = new n()),
      (r.prototype.setWorld = function(t) {
        this.axisList.length = 0;
        for (var e = 0; e < t.bodies.length; e++)
          this.axisList.push(t.bodies[e]);
        t.removeEventListener('addBody', this._addBodyHandler),
          t.removeEventListener('removeBody', this._removeBodyHandler),
          t.addEventListener('addBody', this._addBodyHandler),
          t.addEventListener('removeBody', this._removeBodyHandler),
          (this.world = t),
          (this.dirty = !0);
      }),
      (r.insertionSortX = function(t) {
        for (var e = 1, i = t.length; e < i; e++) {
          for (
            var n = t[e], r = e - 1;
            r >= 0 && !(t[r].aabb.lowerBound.x <= n.aabb.lowerBound.x);
            r--
          )
            t[r + 1] = t[r];
          t[r + 1] = n;
        }
        return t;
      }),
      (r.insertionSortY = function(t) {
        for (var e = 1, i = t.length; e < i; e++) {
          for (
            var n = t[e], r = e - 1;
            r >= 0 && !(t[r].aabb.lowerBound.y <= n.aabb.lowerBound.y);
            r--
          )
            t[r + 1] = t[r];
          t[r + 1] = n;
        }
        return t;
      }),
      (r.insertionSortZ = function(t) {
        for (var e = 1, i = t.length; e < i; e++) {
          for (
            var n = t[e], r = e - 1;
            r >= 0 && !(t[r].aabb.lowerBound.z <= n.aabb.lowerBound.z);
            r--
          )
            t[r + 1] = t[r];
          t[r + 1] = n;
        }
        return t;
      }),
      (r.prototype.collisionPairs = function(t, e, i) {
        var n,
          o,
          s = this.axisList,
          a = s.length,
          c = this.axisIndex;
        for (
          this.dirty && (this.sortList(), (this.dirty = !1)), n = 0;
          n !== a;
          n++
        ) {
          var l = s[n];
          for (o = n + 1; o < a; o++) {
            var u = s[o];
            if (this.needBroadphaseCollision(l, u)) {
              if (!r.checkBounds(l, u, c)) break;
              this.intersectionTest(l, u, e, i);
            }
          }
        }
      }),
      (r.prototype.sortList = function() {
        for (
          var t = this.axisList, e = this.axisIndex, i = t.length, n = 0;
          n !== i;
          n++
        ) {
          var o = t[n];
          o.aabbNeedsUpdate && o.computeAABB();
        }
        0 === e
          ? r.insertionSortX(t)
          : 1 === e ? r.insertionSortY(t) : 2 === e && r.insertionSortZ(t);
      }),
      (r.checkBounds = function(t, e, i) {
        var n, r;
        0 === i
          ? ((n = t.position.x), (r = e.position.x))
          : 1 === i
            ? ((n = t.position.y), (r = e.position.y))
            : 2 === i && ((n = t.position.z), (r = e.position.z));
        var o = t.boundingRadius,
          s = e.boundingRadius;
        return r - s < n + o;
      }),
      (r.prototype.autoDetectAxis = function() {
        for (
          var t = 0,
            e = 0,
            i = 0,
            n = 0,
            r = 0,
            o = 0,
            s = this.axisList,
            a = s.length,
            c = 1 / a,
            l = 0;
          l !== a;
          l++
        ) {
          var u = s[l],
            h = u.position.x;
          (t += h), (e += h * h);
          var d = u.position.y;
          (i += d), (n += d * d);
          var p = u.position.z;
          (r += p), (o += p * p);
        }
        var f = e - t * t * c,
          m = n - i * i * c,
          g = o - r * r * c;
        this.axisIndex = f > m ? (f > g ? 0 : 2) : m > g ? 1 : 2;
      }),
      (r.prototype.aabbQuery = function(t, e, i) {
        (i = i || []), this.dirty && (this.sortList(), (this.dirty = !1));
        var n = this.axisIndex,
          r = 'x';
        1 === n && (r = 'y'), 2 === n && (r = 'z');
        for (
          var o = this.axisList, s = (e.lowerBound[r], e.upperBound[r], 0);
          s < o.length;
          s++
        ) {
          var a = o[s];
          a.aabbNeedsUpdate && a.computeAABB(), a.aabb.overlaps(e) && i.push(a);
        }
        return i;
      });
  },
  function(t, e, i) {
    t.exports = r;
    i(1);
    var n = i(0);
    i(2), i(37), i(5), i(13);
    function r() {
      (this.particles = []),
        (this.density = 1),
        (this.smoothingRadius = 1),
        (this.speedOfSound = 1),
        (this.viscosity = 0.01),
        (this.eps = 1e-6),
        (this.pressures = []),
        (this.densities = []),
        (this.neighbors = []);
    }
    (r.prototype.add = function(t) {
      this.particles.push(t),
        this.neighbors.length < this.particles.length &&
          this.neighbors.push([]);
    }),
      (r.prototype.remove = function(t) {
        var e = this.particles.indexOf(t);
        -1 !== e &&
          (this.particles.splice(e, 1),
          this.neighbors.length > this.particles.length &&
            this.neighbors.pop());
      });
    var o = new n();
    r.prototype.getNeighbors = function(t, e) {
      for (
        var i = this.particles.length,
          n = t.id,
          r = this.smoothingRadius * this.smoothingRadius,
          s = o,
          a = 0;
        a !== i;
        a++
      ) {
        var c = this.particles[a];
        c.position.vsub(t.position, s),
          n !== c.id && s.norm2() < r && e.push(c);
      }
    };
    var s = new n(),
      a = new n(),
      c = new n(),
      l = new n(),
      u = new n(),
      h = new n();
    (r.prototype.update = function() {
      for (
        var t = this.particles.length,
          e = s,
          i = this.speedOfSound,
          n = this.eps,
          r = 0;
        r !== t;
        r++
      ) {
        var o = this.particles[r];
        ((T = this.neighbors[r]).length = 0),
          this.getNeighbors(o, T),
          T.push(this.particles[r]);
        for (var d = T.length, p = 0, f = 0; f !== d; f++) {
          o.position.vsub(T[f].position, e);
          var m = e.norm(),
            g = this.w(m);
          p += T[f].mass * g;
        }
        (this.densities[r] = p),
          (this.pressures[r] = i * i * (this.densities[r] - this.density));
      }
      var v = a,
        y = c,
        w = l,
        M = u,
        E = h;
      for (r = 0; r !== t; r++) {
        var b,
          x,
          A = this.particles[r];
        v.set(0, 0, 0), y.set(0, 0, 0);
        var T;
        for (d = (T = this.neighbors[r]).length, f = 0; f !== d; f++) {
          var L = T[f];
          A.position.vsub(L.position, M);
          var N = M.norm();
          (b =
            -L.mass *
            (this.pressures[r] / (this.densities[r] * this.densities[r] + n) +
              this.pressures[f] / (this.densities[f] * this.densities[f] + n))),
            this.gradw(M, w),
            w.mult(b, w),
            v.vadd(w, v),
            L.velocity.vsub(A.velocity, E),
            E.mult(
              1 /
                (1e-4 + this.densities[r] * this.densities[f]) *
                this.viscosity *
                L.mass,
              E
            ),
            (x = this.nablaw(N)),
            E.mult(x, E),
            y.vadd(E, y);
        }
        y.mult(A.mass, y),
          v.mult(A.mass, v),
          A.force.vadd(y, A.force),
          A.force.vadd(v, A.force);
      }
    }),
      (r.prototype.w = function(t) {
        var e = this.smoothingRadius;
        return (
          315 / (64 * Math.PI * Math.pow(e, 9)) * Math.pow(e * e - t * t, 3)
        );
      }),
      (r.prototype.gradw = function(t, e) {
        var i = t.norm(),
          n = this.smoothingRadius;
        t.mult(
          945 / (32 * Math.PI * Math.pow(n, 9)) * Math.pow(n * n - i * i, 2),
          e
        );
      }),
      (r.prototype.nablaw = function(t) {
        var e = this.smoothingRadius;
        return (
          945 /
          (32 * Math.PI * Math.pow(e, 9)) *
          (e * e - t * t) *
          (7 * t * t - 3 * e * e)
        );
      });
  },
  function(t, e, i) {
    t.exports = o;
    i(0), i(2);
    var n = i(20),
      r = i(5);
    function o(t) {
      for (
        n.call(this),
          this.iterations = 10,
          this.tolerance = 1e-7,
          this.subsolver = t,
          this.nodes = [],
          this.nodePool = [];
        this.nodePool.length < 128;

      )
        this.nodePool.push(this.createNode());
    }
    o.prototype = new n();
    var s = [],
      a = [],
      c = { bodies: [] },
      l = r.STATIC;
    function u(t) {
      for (var e = t.length, i = 0; i !== e; i++) {
        var n = t[i];
        if (!(n.visited || n.body.type & l)) return n;
      }
      return !1;
    }
    var h = [];
    function d(t, e, i, n) {
      for (h.push(t), t.visited = !0, e(t, i, n); h.length; )
        for (var r, o = h.pop(); (r = u(o.children)); )
          (r.visited = !0), e(r, i, n), h.push(r);
    }
    function p(t, e, i) {
      e.push(t.body);
      for (var n = t.eqs.length, r = 0; r !== n; r++) {
        var o = t.eqs[r];
        -1 === i.indexOf(o) && i.push(o);
      }
    }
    function f(t, e) {
      return e.id - t.id;
    }
    (o.prototype.createNode = function() {
      return { body: null, children: [], eqs: [], visited: !1 };
    }),
      (o.prototype.solve = function(t, e) {
        for (
          var i = s,
            n = this.nodePool,
            r = e.bodies,
            o = this.equations,
            l = o.length,
            h = r.length,
            m = this.subsolver;
          n.length < h;

        )
          n.push(this.createNode());
        i.length = h;
        for (var g = 0; g < h; g++) i[g] = n[g];
        for (g = 0; g !== h; g++) {
          var v = i[g];
          (v.body = r[g]),
            (v.children.length = 0),
            (v.eqs.length = 0),
            (v.visited = !1);
        }
        for (var y = 0; y !== l; y++) {
          var w = o[y],
            M = ((g = r.indexOf(w.bi)), r.indexOf(w.bj)),
            E = i[g],
            b = i[M];
          E.children.push(b), E.eqs.push(w), b.children.push(E), b.eqs.push(w);
        }
        var x,
          A = 0,
          T = a;
        (m.tolerance = this.tolerance), (m.iterations = this.iterations);
        for (var L = c; (x = u(i)); ) {
          (T.length = 0), (L.bodies.length = 0), d(x, p, L.bodies, T);
          var N = T.length;
          T = T.sort(f);
          for (g = 0; g !== N; g++) m.addEquation(T[g]);
          m.solve(t, L);
          m.removeAllEquations(), A++;
        }
        return A;
      });
  },
  function(t, e, i) {
    var n = i(0);
    function r(t, e, i) {
      (i = i || {}),
        (this.restLength = 'number' == typeof i.restLength ? i.restLength : 1),
        (this.stiffness = i.stiffness || 100),
        (this.damping = i.damping || 1),
        (this.bodyA = t),
        (this.bodyB = e),
        (this.localAnchorA = new n()),
        (this.localAnchorB = new n()),
        i.localAnchorA && this.localAnchorA.copy(i.localAnchorA),
        i.localAnchorB && this.localAnchorB.copy(i.localAnchorB),
        i.worldAnchorA && this.setWorldAnchorA(i.worldAnchorA),
        i.worldAnchorB && this.setWorldAnchorB(i.worldAnchorB);
    }
    (t.exports = r),
      (r.prototype.setWorldAnchorA = function(t) {
        this.bodyA.pointToLocalFrame(t, this.localAnchorA);
      }),
      (r.prototype.setWorldAnchorB = function(t) {
        this.bodyB.pointToLocalFrame(t, this.localAnchorB);
      }),
      (r.prototype.getWorldAnchorA = function(t) {
        this.bodyA.pointToWorldFrame(this.localAnchorA, t);
      }),
      (r.prototype.getWorldAnchorB = function(t) {
        this.bodyB.pointToWorldFrame(this.localAnchorB, t);
      });
    var o = new n(),
      s = new n(),
      a = new n(),
      c = new n(),
      l = new n(),
      u = new n(),
      h = new n(),
      d = new n(),
      p = new n(),
      f = new n(),
      m = new n();
    r.prototype.applyForce = function() {
      var t = this.stiffness,
        e = this.damping,
        i = this.restLength,
        n = this.bodyA,
        r = this.bodyB,
        g = o,
        v = s,
        y = a,
        w = c,
        M = m,
        E = l,
        b = u,
        x = h,
        A = d,
        T = p,
        L = f;
      this.getWorldAnchorA(E),
        this.getWorldAnchorB(b),
        E.vsub(n.position, x),
        b.vsub(r.position, A),
        b.vsub(E, g);
      var N = g.norm();
      v.copy(g),
        v.normalize(),
        r.velocity.vsub(n.velocity, y),
        r.angularVelocity.cross(A, M),
        y.vadd(M, y),
        n.angularVelocity.cross(x, M),
        y.vsub(M, y),
        v.mult(-t * (N - i) - e * y.dot(v), w),
        n.force.vsub(w, n.force),
        r.force.vadd(w, r.force),
        x.cross(w, T),
        A.cross(w, L),
        n.torque.vsub(T, n.torque),
        r.torque.vadd(L, r.torque);
    };
  },
  function(t, e, i) {
    t.exports = c;
    var n = i(1),
      r = i(0),
      o = (i(2), i(9)),
      s = i(3),
      a = i(74);
    function c(t, e) {
      n.call(this),
        (this.type = n.types.TRIMESH),
        (this.vertices = new Float32Array(t)),
        (this.indices = new Int16Array(e)),
        (this.normals = new Float32Array(e.length)),
        (this.aabb = new s()),
        (this.edges = null),
        (this.scale = new r(1, 1, 1)),
        (this.tree = new a()),
        this.updateEdges(),
        this.updateNormals(),
        this.updateAABB(),
        this.updateBoundingSphereRadius(),
        this.updateTree();
    }
    (c.prototype = new n()), (c.prototype.constructor = c);
    var l = new r();
    c.prototype.updateTree = function() {
      var t = this.tree;
      t.reset(), t.aabb.copy(this.aabb);
      var e = this.scale;
      (t.aabb.lowerBound.x *= 1 / e.x),
        (t.aabb.lowerBound.y *= 1 / e.y),
        (t.aabb.lowerBound.z *= 1 / e.z),
        (t.aabb.upperBound.x *= 1 / e.x),
        (t.aabb.upperBound.y *= 1 / e.y),
        (t.aabb.upperBound.z *= 1 / e.z);
      for (
        var i = new s(),
          n = new r(),
          o = new r(),
          a = new r(),
          c = [n, o, a],
          l = 0;
        l < this.indices.length / 3;
        l++
      ) {
        var u = 3 * l;
        this._getUnscaledVertex(this.indices[u], n),
          this._getUnscaledVertex(this.indices[u + 1], o),
          this._getUnscaledVertex(this.indices[u + 2], a),
          i.setFromPoints(c),
          t.insert(i, l);
      }
      t.removeEmptyNodes();
    };
    var u = new s();
    (c.prototype.getTrianglesInAABB = function(t, e) {
      u.copy(t);
      var i = this.scale,
        n = i.x,
        r = i.y,
        o = i.z,
        s = u.lowerBound,
        a = u.upperBound;
      return (
        (s.x /= n),
        (s.y /= r),
        (s.z /= o),
        (a.x /= n),
        (a.y /= r),
        (a.z /= o),
        this.tree.aabbQuery(u, e)
      );
    }),
      (c.prototype.setScale = function(t) {
        var e = (this.scale.x === this.scale.y) === this.scale.z,
          i = (t.x === t.y) === t.z;
        (e && i) || this.updateNormals(),
          this.scale.copy(t),
          this.updateAABB(),
          this.updateBoundingSphereRadius();
      }),
      (c.prototype.updateNormals = function() {
        for (
          var t = l, e = this.normals, i = 0;
          i < this.indices.length / 3;
          i++
        ) {
          var n = 3 * i,
            r = this.indices[n],
            o = this.indices[n + 1],
            s = this.indices[n + 2];
          this.getVertex(r, m),
            this.getVertex(o, g),
            this.getVertex(s, v),
            c.computeNormal(g, m, v, t),
            (e[n] = t.x),
            (e[n + 1] = t.y),
            (e[n + 2] = t.z);
        }
      }),
      (c.prototype.updateEdges = function() {
        for (
          var t = {},
            e = function(e, i) {
              t[r < o ? r + '_' + o : o + '_' + r] = !0;
            },
            i = 0;
          i < this.indices.length / 3;
          i++
        ) {
          var n = 3 * i,
            r = this.indices[n],
            o = this.indices[n + 1];
          this.indices[n + 2];
          e(), e(), e();
        }
        var s = Object.keys(t);
        this.edges = new Int16Array(2 * s.length);
        for (i = 0; i < s.length; i++) {
          var a = s[i].split('_');
          (this.edges[2 * i] = parseInt(a[0], 10)),
            (this.edges[2 * i + 1] = parseInt(a[1], 10));
        }
      }),
      (c.prototype.getEdgeVertex = function(t, e, i) {
        var n = this.edges[2 * t + (e ? 1 : 0)];
        this.getVertex(n, i);
      });
    var h = new r(),
      d = new r();
    c.prototype.getEdgeVector = function(t, e) {
      var i = h,
        n = d;
      this.getEdgeVertex(t, 0, i), this.getEdgeVertex(t, 1, n), n.vsub(i, e);
    };
    var p = new r(),
      f = new r();
    c.computeNormal = function(t, e, i, n) {
      e.vsub(t, f), i.vsub(e, p), p.cross(f, n), n.isZero() || n.normalize();
    };
    var m = new r(),
      g = new r(),
      v = new r();
    (c.prototype.getVertex = function(t, e) {
      var i = this.scale;
      return (
        this._getUnscaledVertex(t, e),
        (e.x *= i.x),
        (e.y *= i.y),
        (e.z *= i.z),
        e
      );
    }),
      (c.prototype._getUnscaledVertex = function(t, e) {
        var i = 3 * t,
          n = this.vertices;
        return e.set(n[i], n[i + 1], n[i + 2]);
      }),
      (c.prototype.getWorldVertex = function(t, e, i, n) {
        return this.getVertex(t, n), o.pointToWorldFrame(e, i, n, n), n;
      }),
      (c.prototype.getTriangleVertices = function(t, e, i, n) {
        var r = 3 * t;
        this.getVertex(this.indices[r], e),
          this.getVertex(this.indices[r + 1], i),
          this.getVertex(this.indices[r + 2], n);
      }),
      (c.prototype.getNormal = function(t, e) {
        var i = 3 * t;
        return e.set(this.normals[i], this.normals[i + 1], this.normals[i + 2]);
      });
    var y = new s();
    c.prototype.calculateLocalInertia = function(t, e) {
      this.computeLocalAABB(y);
      var i = y.upperBound.x - y.lowerBound.x,
        n = y.upperBound.y - y.lowerBound.y,
        r = y.upperBound.z - y.lowerBound.z;
      return e.set(
        1 / 12 * t * (2 * n * 2 * n + 2 * r * 2 * r),
        1 / 12 * t * (2 * i * 2 * i + 2 * r * 2 * r),
        1 / 12 * t * (2 * n * 2 * n + 2 * i * 2 * i)
      );
    };
    var w = new r();
    (c.prototype.computeLocalAABB = function(t) {
      var e = t.lowerBound,
        i = t.upperBound,
        n = this.vertices.length,
        r = (this.vertices, w);
      this.getVertex(0, r), e.copy(r), i.copy(r);
      for (var o = 0; o !== n; o++)
        this.getVertex(o, r),
          r.x < e.x ? (e.x = r.x) : r.x > i.x && (i.x = r.x),
          r.y < e.y ? (e.y = r.y) : r.y > i.y && (i.y = r.y),
          r.z < e.z ? (e.z = r.z) : r.z > i.z && (i.z = r.z);
    }),
      (c.prototype.updateAABB = function() {
        this.computeLocalAABB(this.aabb);
      }),
      (c.prototype.updateBoundingSphereRadius = function() {
        for (
          var t = 0, e = this.vertices, i = new r(), n = 0, o = e.length / 3;
          n !== o;
          n++
        ) {
          this.getVertex(n, i);
          var s = i.norm2();
          s > t && (t = s);
        }
        this.boundingSphereRadius = Math.sqrt(t);
      });
    new r();
    var M = new o(),
      E = new s();
    (c.prototype.calculateWorldAABB = function(t, e, i, n) {
      var r = M,
        o = E;
      (r.position = t),
        (r.quaternion = e),
        this.aabb.toWorldFrame(r, o),
        i.copy(o.lowerBound),
        n.copy(o.upperBound);
    }),
      (c.prototype.volume = function() {
        return 4 * Math.PI * this.boundingSphereRadius / 3;
      }),
      (c.createTorus = function(t, e, i, n, r) {
        (t = t || 1),
          (e = e || 0.5),
          (i = i || 8),
          (n = n || 6),
          (r = r || 2 * Math.PI);
        for (var o = [], s = [], a = 0; a <= i; a++)
          for (var l = 0; l <= n; l++) {
            var u = l / n * r,
              h = a / i * Math.PI * 2,
              d = (t + e * Math.cos(h)) * Math.cos(u),
              p = (t + e * Math.cos(h)) * Math.sin(u),
              f = e * Math.sin(h);
            o.push(d, p, f);
          }
        for (a = 1; a <= i; a++)
          for (l = 1; l <= n; l++) {
            var m = (n + 1) * a + l - 1,
              g = (n + 1) * (a - 1) + l - 1,
              v = (n + 1) * (a - 1) + l,
              y = (n + 1) * a + l;
            s.push(m, g, y), s.push(g, v, y);
          }
        return new c(o, s);
      });
  },
  function(t, e, i) {
    var n = i(3),
      r = i(0);
    function o(t) {
      (t = t || {}),
        (this.root = t.root || null),
        (this.aabb = t.aabb ? t.aabb.clone() : new n()),
        (this.data = []),
        (this.children = []);
    }
    function s(t, e) {
      ((e = e || {}).root = null),
        (e.aabb = t),
        o.call(this, e),
        (this.maxDepth = void 0 !== e.maxDepth ? e.maxDepth : 8);
    }
    (t.exports = s),
      (s.prototype = new o()),
      (o.prototype.reset = function(t, e) {
        this.children.length = this.data.length = 0;
      }),
      (o.prototype.insert = function(t, e, i) {
        var n = this.data;
        if (((i = i || 0), !this.aabb.contains(t))) return !1;
        var r = this.children;
        if (i < (this.maxDepth || this.root.maxDepth)) {
          var o = !1;
          r.length || (this.subdivide(), (o = !0));
          for (var s = 0; 8 !== s; s++) if (r[s].insert(t, e, i + 1)) return !0;
          o && (r.length = 0);
        }
        return n.push(e), !0;
      });
    var a = new r();
    (o.prototype.subdivide = function() {
      var t = this.aabb,
        e = t.lowerBound,
        i = t.upperBound,
        s = this.children;
      s.push(
        new o({ aabb: new n({ lowerBound: new r(0, 0, 0) }) }),
        new o({ aabb: new n({ lowerBound: new r(1, 0, 0) }) }),
        new o({ aabb: new n({ lowerBound: new r(1, 1, 0) }) }),
        new o({ aabb: new n({ lowerBound: new r(1, 1, 1) }) }),
        new o({ aabb: new n({ lowerBound: new r(0, 1, 1) }) }),
        new o({ aabb: new n({ lowerBound: new r(0, 0, 1) }) }),
        new o({ aabb: new n({ lowerBound: new r(1, 0, 1) }) }),
        new o({ aabb: new n({ lowerBound: new r(0, 1, 0) }) })
      ),
        i.vsub(e, a),
        a.scale(0.5, a);
      for (var c = this.root || this, l = 0; 8 !== l; l++) {
        var u = s[l];
        u.root = c;
        var h = u.aabb.lowerBound;
        (h.x *= a.x),
          (h.y *= a.y),
          (h.z *= a.z),
          h.vadd(e, h),
          h.vadd(a, u.aabb.upperBound);
      }
    }),
      (o.prototype.aabbQuery = function(t, e) {
        this.data, this.children;
        for (var i = [this]; i.length; ) {
          var n = i.pop();
          n.aabb.overlaps(t) && Array.prototype.push.apply(e, n.data),
            Array.prototype.push.apply(i, n.children);
        }
        return e;
      });
    var c = new n();
    (o.prototype.rayQuery = function(t, e, i) {
      return t.getAABB(c), c.toLocalFrame(e, c), this.aabbQuery(c, i), i;
    }),
      (o.prototype.removeEmptyNodes = function() {
        for (var t = [this]; t.length; ) {
          for (var e = t.pop(), i = e.children.length - 1; i >= 0; i--)
            e.children[i].data.length || e.children.splice(i, 1);
          Array.prototype.push.apply(t, e.children);
        }
      });
  },
  function(t, e, i) {
    t.exports = y;
    i(1);
    var n = i(0),
      r = i(2),
      o = i(34),
      s = (i(6), i(25), i(30)),
      a = i(24),
      c = i(28),
      l = i(76),
      u = i(13),
      h = i(33),
      d = i(5),
      p = i(77),
      f = i(14),
      m = i(3),
      g = i(19),
      v = i(36);
    function y(t) {
      (t = t || {}),
        a.apply(this),
        (this.dt = -1),
        (this.allowSleep = !!t.allowSleep),
        (this.contacts = []),
        (this.frictionEquations = []),
        (this.quatNormalizeSkip =
          void 0 !== t.quatNormalizeSkip ? t.quatNormalizeSkip : 0),
        (this.quatNormalizeFast =
          void 0 !== t.quatNormalizeFast && t.quatNormalizeFast),
        (this.time = 0),
        (this.stepnumber = 0),
        (this.default_dt = 1 / 60),
        (this.nextId = 0),
        (this.gravity = new n()),
        t.gravity && this.gravity.copy(t.gravity),
        (this.broadphase = void 0 !== t.broadphase ? t.broadphase : new v()),
        (this.bodies = []),
        (this.solver = void 0 !== t.solver ? t.solver : new o()),
        (this.constraints = []),
        (this.narrowphase = new s(this)),
        (this.collisionMatrix = new c()),
        (this.collisionMatrixPrevious = new c()),
        (this.bodyOverlapKeeper = new l()),
        (this.shapeOverlapKeeper = new l()),
        (this.materials = []),
        (this.contactmaterials = []),
        (this.contactMaterialTable = new p()),
        (this.defaultMaterial = new u('default')),
        (this.defaultContactMaterial = new h(
          this.defaultMaterial,
          this.defaultMaterial,
          { friction: 0.3, restitution: 0 }
        )),
        (this.doProfiling = !1),
        (this.profile = {
          solve: 0,
          makeContactConstraints: 0,
          broadphase: 0,
          integrate: 0,
          narrowphase: 0
        }),
        (this.accumulator = 0),
        (this.subsystems = []),
        (this.addBodyEvent = { type: 'addBody', body: null }),
        (this.removeBodyEvent = { type: 'removeBody', body: null }),
        (this.idToBodyMap = {}),
        this.broadphase.setWorld(this);
    }
    y.prototype = new a();
    new m();
    var w = new g();
    if (
      ((y.prototype.getContactMaterial = function(t, e) {
        return this.contactMaterialTable.get(t.id, e.id);
      }),
      (y.prototype.numObjects = function() {
        return this.bodies.length;
      }),
      (y.prototype.collisionMatrixTick = function() {
        var t = this.collisionMatrixPrevious;
        (this.collisionMatrixPrevious = this.collisionMatrix),
          (this.collisionMatrix = t),
          this.collisionMatrix.reset(),
          this.bodyOverlapKeeper.tick(),
          this.shapeOverlapKeeper.tick();
      }),
      (y.prototype.add = y.prototype.addBody = function(t) {
        -1 === this.bodies.indexOf(t) &&
          ((t.index = this.bodies.length),
          this.bodies.push(t),
          (t.world = this),
          t.initPosition.copy(t.position),
          t.initVelocity.copy(t.velocity),
          (t.timeLastSleepy = this.time),
          t instanceof d &&
            (t.initAngularVelocity.copy(t.angularVelocity),
            t.initQuaternion.copy(t.quaternion)),
          this.collisionMatrix.setNumObjects(this.bodies.length),
          (this.addBodyEvent.body = t),
          (this.idToBodyMap[t.id] = t),
          this.dispatchEvent(this.addBodyEvent));
      }),
      (y.prototype.addConstraint = function(t) {
        this.constraints.push(t);
      }),
      (y.prototype.removeConstraint = function(t) {
        var e = this.constraints.indexOf(t);
        -1 !== e && this.constraints.splice(e, 1);
      }),
      (y.prototype.rayTest = function(t, e, i) {
        i instanceof f
          ? this.raycastClosest(t, e, { skipBackfaces: !0 }, i)
          : this.raycastAll(t, e, { skipBackfaces: !0 }, i);
      }),
      (y.prototype.raycastAll = function(t, e, i, n) {
        return (
          (i.mode = g.ALL),
          (i.from = t),
          (i.to = e),
          (i.callback = n),
          w.intersectWorld(this, i)
        );
      }),
      (y.prototype.raycastAny = function(t, e, i, n) {
        return (
          (i.mode = g.ANY),
          (i.from = t),
          (i.to = e),
          (i.result = n),
          w.intersectWorld(this, i)
        );
      }),
      (y.prototype.raycastClosest = function(t, e, i, n) {
        return (
          (i.mode = g.CLOSEST),
          (i.from = t),
          (i.to = e),
          (i.result = n),
          w.intersectWorld(this, i)
        );
      }),
      (y.prototype.remove = function(t) {
        t.world = null;
        var e = this.bodies.length - 1,
          i = this.bodies,
          n = i.indexOf(t);
        if (-1 !== n) {
          i.splice(n, 1);
          for (var r = 0; r !== i.length; r++) i[r].index = r;
          this.collisionMatrix.setNumObjects(e),
            (this.removeBodyEvent.body = t),
            delete this.idToBodyMap[t.id],
            this.dispatchEvent(this.removeBodyEvent);
        }
      }),
      (y.prototype.removeBody = y.prototype.remove),
      (y.prototype.getBodyById = function(t) {
        return this.idToBodyMap[t];
      }),
      (y.prototype.getShapeById = function(t) {
        for (var e = this.bodies, i = 0, n = e.length; i < n; i++)
          for (var r = e[i].shapes, o = 0, s = r.length; o < s; o++) {
            var a = r[o];
            if (a.id === t) return a;
          }
      }),
      (y.prototype.addMaterial = function(t) {
        this.materials.push(t);
      }),
      (y.prototype.addContactMaterial = function(t) {
        this.contactmaterials.push(t),
          this.contactMaterialTable.set(
            t.materials[0].id,
            t.materials[1].id,
            t
          );
      }),
      'undefined' == typeof performance && (performance = {}),
      !performance.now)
    ) {
      var M = Date.now();
      performance.timing &&
        performance.timing.navigationStart &&
        (M = performance.timing.navigationStart),
        (performance.now = function() {
          return Date.now() - M;
        });
    }
    new n();
    y.prototype.step = function(t, e, i) {
      if (((i = i || 10), 0 === (e = e || 0)))
        this.internalStep(t), (this.time += t);
      else {
        this.accumulator += e;
        for (var n = 0; this.accumulator >= t && n < i; )
          this.internalStep(t), (this.accumulator -= t), n++;
        for (
          var r = (this.accumulator % t) / t, o = 0;
          o !== this.bodies.length;
          o++
        ) {
          var s = this.bodies[o];
          s.previousPosition.lerp(s.position, r, s.interpolatedPosition),
            s.previousQuaternion.slerp(
              s.quaternion,
              r,
              s.interpolatedQuaternion
            ),
            s.previousQuaternion.normalize();
        }
        this.time += e;
      }
    };
    var E,
      b,
      x,
      A,
      T,
      L,
      N = { type: 'postStep' },
      D = { type: 'preStep' },
      S = { type: d.COLLIDE_EVENT_NAME, body: null, contact: null },
      C = [],
      _ = [],
      I = [],
      j = [];
    new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new n(),
      new r(),
      new r(),
      new r(),
      new n();
    (y.prototype.internalStep = function(t) {
      this.dt = t;
      var e,
        i = this.contacts,
        n = I,
        r = j,
        o = this.numObjects(),
        s = this.bodies,
        a = this.solver,
        c = this.gravity,
        l = this.doProfiling,
        u = this.profile,
        h = d.DYNAMIC,
        p = this.constraints,
        f = _,
        m = (c.norm(), c.x),
        g = c.y,
        v = c.z,
        y = 0;
      for (l && (e = performance.now()), y = 0; y !== o; y++) {
        if ((z = s[y]).type === h) {
          var w = z.force,
            M = z.mass;
          (w.x += M * m), (w.y += M * g), (w.z += M * v);
        }
      }
      y = 0;
      for (var E = this.subsystems.length; y !== E; y++)
        this.subsystems[y].update();
      l && (e = performance.now()),
        (n.length = 0),
        (r.length = 0),
        this.broadphase.collisionPairs(this, n, r),
        l && (u.broadphase = performance.now() - e);
      var b = p.length;
      for (y = 0; y !== b; y++) {
        if (!(U = p[y]).collideConnected)
          for (var x = n.length - 1; x >= 0; x -= 1)
            ((U.bodyA === n[x] && U.bodyB === r[x]) ||
              (U.bodyB === n[x] && U.bodyA === r[x])) &&
              (n.splice(x, 1), r.splice(x, 1));
      }
      this.collisionMatrixTick(), l && (e = performance.now());
      var A = C,
        T = i.length;
      for (y = 0; y !== T; y++) A.push(i[y]);
      i.length = 0;
      var L = this.frictionEquations.length;
      for (y = 0; y !== L; y++) f.push(this.frictionEquations[y]);
      (this.frictionEquations.length = 0),
        this.narrowphase.getContacts(
          n,
          r,
          this,
          i,
          A,
          this.frictionEquations,
          f
        ),
        l && (u.narrowphase = performance.now() - e),
        l && (e = performance.now());
      for (y = 0; y < this.frictionEquations.length; y++)
        a.addEquation(this.frictionEquations[y]);
      for (var O = i.length, R = 0; R !== O; R++) {
        var z = (U = i[R]).bi,
          k = U.bj,
          B = U.si,
          P = U.sj;
        (z.material && k.material
          ? this.getContactMaterial(z.material, k.material) ||
            this.defaultContactMaterial
          : this.defaultContactMaterial
        ).friction;
        if (
          (z.material &&
            k.material &&
            (z.material.friction >= 0 &&
              k.material.friction >= 0 &&
              z.material.friction * k.material.friction,
            z.material.restitution >= 0 &&
              k.material.restitution >= 0 &&
              (U.restitution =
                z.material.restitution * k.material.restitution)),
          a.addEquation(U),
          z.allowSleep &&
            z.type === d.DYNAMIC &&
            z.sleepState === d.SLEEPING &&
            k.sleepState === d.AWAKE &&
            k.type !== d.STATIC)
        )
          k.velocity.norm2() + k.angularVelocity.norm2() >=
            2 * Math.pow(k.sleepSpeedLimit, 2) &&
            (z._wakeUpAfterNarrowphase = !0);
        if (
          k.allowSleep &&
          k.type === d.DYNAMIC &&
          k.sleepState === d.SLEEPING &&
          z.sleepState === d.AWAKE &&
          z.type !== d.STATIC
        )
          z.velocity.norm2() + z.angularVelocity.norm2() >=
            2 * Math.pow(z.sleepSpeedLimit, 2) &&
            (k._wakeUpAfterNarrowphase = !0);
        this.collisionMatrix.set(z, k, !0),
          this.collisionMatrixPrevious.get(z, k) ||
            ((S.body = k),
            (S.contact = U),
            z.dispatchEvent(S),
            (S.body = z),
            k.dispatchEvent(S)),
          this.bodyOverlapKeeper.set(z.id, k.id),
          this.shapeOverlapKeeper.set(B.id, P.id);
      }
      for (
        this.emitContactEvents(),
          l &&
            ((u.makeContactConstraints = performance.now() - e),
            (e = performance.now())),
          y = 0;
        y !== o;
        y++
      ) {
        (z = s[y])._wakeUpAfterNarrowphase &&
          (z.wakeUp(), (z._wakeUpAfterNarrowphase = !1));
      }
      b = p.length;
      for (y = 0; y !== b; y++) {
        var U;
        (U = p[y]).update();
        x = 0;
        for (var F = U.equations.length; x !== F; x++) {
          var H = U.equations[x];
          a.addEquation(H);
        }
      }
      a.solve(t, this),
        l && (u.solve = performance.now() - e),
        a.removeAllEquations();
      var V = Math.pow;
      for (y = 0; y !== o; y++) {
        if ((z = s[y]).type & h) {
          var G = V(1 - z.linearDamping, t),
            Y = z.velocity;
          Y.mult(G, Y);
          var Q = z.angularVelocity;
          if (Q) {
            var W = V(1 - z.angularDamping, t);
            Q.mult(W, Q);
          }
        }
      }
      for (this.dispatchEvent(D), y = 0; y !== o; y++) {
        (z = s[y]).preStep && z.preStep.call(z);
      }
      l && (e = performance.now());
      var q = this.stepnumber % (this.quatNormalizeSkip + 1) == 0,
        X = this.quatNormalizeFast;
      for (y = 0; y !== o; y++) s[y].integrate(t, q, X);
      for (
        this.clearForces(),
          this.broadphase.dirty = !0,
          l && (u.integrate = performance.now() - e),
          this.time += t,
          this.stepnumber += 1,
          this.dispatchEvent(N),
          y = 0;
        y !== o;
        y++
      ) {
        var K = (z = s[y]).postStep;
        K && K.call(z);
      }
      if (this.allowSleep) for (y = 0; y !== o; y++) s[y].sleepTick(this.time);
    }),
      (y.prototype.emitContactEvents = ((E = []),
      (b = []),
      (x = { type: 'beginContact', bodyA: null, bodyB: null }),
      (A = { type: 'endContact', bodyA: null, bodyB: null }),
      (T = {
        type: 'beginShapeContact',
        bodyA: null,
        bodyB: null,
        shapeA: null,
        shapeB: null
      }),
      (L = {
        type: 'endShapeContact',
        bodyA: null,
        bodyB: null,
        shapeA: null,
        shapeB: null
      }),
      function() {
        var t = this.hasAnyEventListener('beginContact'),
          e = this.hasAnyEventListener('endContact');
        if (((t || e) && this.bodyOverlapKeeper.getDiff(E, b), t)) {
          for (var i = 0, n = E.length; i < n; i += 2)
            (x.bodyA = this.getBodyById(E[i])),
              (x.bodyB = this.getBodyById(E[i + 1])),
              this.dispatchEvent(x);
          x.bodyA = x.bodyB = null;
        }
        if (e) {
          for (i = 0, n = b.length; i < n; i += 2)
            (A.bodyA = this.getBodyById(b[i])),
              (A.bodyB = this.getBodyById(b[i + 1])),
              this.dispatchEvent(A);
          A.bodyA = A.bodyB = null;
        }
        E.length = b.length = 0;
        var r = this.hasAnyEventListener('beginShapeContact'),
          o = this.hasAnyEventListener('endShapeContact');
        if (((r || o) && this.shapeOverlapKeeper.getDiff(E, b), r)) {
          for (i = 0, n = E.length; i < n; i += 2) {
            var s = this.getShapeById(E[i]),
              a = this.getShapeById(E[i + 1]);
            (T.shapeA = s),
              (T.shapeB = a),
              (T.bodyA = s.body),
              (T.bodyB = a.body),
              this.dispatchEvent(T);
          }
          T.bodyA = T.bodyB = T.shapeA = T.shapeB = null;
        }
        if (o) {
          for (i = 0, n = b.length; i < n; i += 2)
            (s = this.getShapeById(b[i])),
              (a = this.getShapeById(b[i + 1])),
              (L.shapeA = s),
              (L.shapeB = a),
              (L.bodyA = s.body),
              (L.bodyB = a.body),
              this.dispatchEvent(L);
          L.bodyA = L.bodyB = L.shapeA = L.shapeB = null;
        }
      })),
      (y.prototype.clearForces = function() {
        for (var t = this.bodies, e = t.length, i = 0; i !== e; i++) {
          var n = t[i];
          n.force, n.torque;
          n.force.set(0, 0, 0), n.torque.set(0, 0, 0);
        }
      });
  },
  function(t, e) {
    function i() {
      (this.current = []), (this.previous = []);
    }
    function n(t, e) {
      t.push((4294901760 & e) >> 16, 65535 & e);
    }
    (t.exports = i),
      (i.prototype.getKey = function(t, e) {
        if (e < t) {
          var i = e;
          (e = t), (t = i);
        }
        return (t << 16) | e;
      }),
      (i.prototype.set = function(t, e) {
        for (var i = this.getKey(t, e), n = this.current, r = 0; i > n[r]; )
          r++;
        if (i !== n[r]) {
          for (e = n.length - 1; e >= r; e--) n[e + 1] = n[e];
          n[r] = i;
        }
      }),
      (i.prototype.tick = function() {
        var t = this.current;
        (this.current = this.previous),
          (this.previous = t),
          (this.current.length = 0);
      }),
      (i.prototype.getDiff = function(t, e) {
        for (
          var i = this.current,
            r = this.previous,
            o = i.length,
            s = r.length,
            a = 0,
            c = 0;
          c < o;
          c++
        ) {
          for (var l = i[c]; l > r[a]; ) a++;
          l === r[a] || n(t, l);
        }
        a = 0;
        for (c = 0; c < s; c++) {
          for (var u = r[c]; u > i[a]; ) a++;
          i[a] === u || n(e, u);
        }
      });
  },
  function(t, e) {
    function i() {
      this.data = { keys: [] };
    }
    (t.exports = i),
      (i.prototype.get = function(t, e) {
        if (t > e) {
          var i = e;
          (e = t), (t = i);
        }
        return this.data[t + '-' + e];
      }),
      (i.prototype.set = function(t, e, i) {
        if (t > e) {
          var n = e;
          (e = t), (t = n);
        }
        var r = t + '-' + e;
        this.get(t, e) || this.data.keys.push(r), (this.data[r] = i);
      }),
      (i.prototype.reset = function() {
        for (var t = this.data, e = t.keys; e.length > 0; ) {
          delete t[e.pop()];
        }
      });
  },
  function(t, e, i) {
    t.exports = {
      velocity: i(79),
      quaternion: i(80),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME).components.velocity ||
            t.registerComponent('velocity', this.velocity),
          t.components.quaternion ||
            t.registerComponent('quaternion', this.quaternion),
          (this._registered = !0));
      }
    };
  },
  function(t, e) {
    t.exports = {
      schema: { type: 'vec3' },
      init: function() {
        (this.system = this.el.sceneEl.systems.physics),
          this.system &&
            this.system.addBehavior(this, this.system.Phase.RENDER);
      },
      remove: function() {
        this.system &&
          this.system.removeBehavior(this, this.system.Phase.RENDER);
      },
      tick: function(t, e) {
        e && (this.system || this.step(t, e));
      },
      step: function(t, e) {
        if (e) {
          var i = this.el.sceneEl.systems.physics || {
              data: { maxInterval: 1 / 60 }
            },
            n = this.el.getAttribute('velocity') || { x: 0, y: 0, z: 0 },
            r = this.el.getAttribute('position') || { x: 0, y: 0, z: 0 };
          (e = Math.min(e, 1e3 * i.data.maxInterval)),
            this.el.setAttribute('position', {
              x: r.x + n.x * e / 1e3,
              y: r.y + n.y * e / 1e3,
              z: r.z + n.z * e / 1e3
            });
        }
      }
    };
  },
  function(t, e) {
    t.exports = {
      schema: { type: 'vec4' },
      play: function() {
        var t = this.el,
          e = t.object3D.quaternion;
        t.hasAttribute('rotation') &&
          (t.components.rotation.update(),
          t.setAttribute('quaternion', { x: e.x, y: e.y, z: e.z, w: e.w }),
          t.removeAttribute('rotation'),
          this.update());
      },
      update: function() {
        var t = this.data;
        this.el.object3D.quaternion.set(t.x, t.y, t.z, t.w);
      }
    };
  },
  function(t, e, i) {
    var n = i(39);
    t.exports = AFRAME.utils.extend({}, n, {
      dependencies: ['quaternion', 'velocity'],
      schema: AFRAME.utils.extend({}, n.schema, {
        mass: { default: 5 },
        linearDamping: { default: 0.01 },
        angularDamping: { default: 0.01 }
      }),
      step: function() {
        this.syncFromPhysics();
      }
    });
  },
  function(t, e, i) {
    var n = i(7),
      r = i(83),
      o = Math.PI / 2,
      s = {
        BOX: 'Box',
        CYLINDER: 'Cylinder',
        SPHERE: 'Sphere',
        HULL: 'ConvexPolyhedron',
        MESH: 'Trimesh'
      };
    function a(t) {
      if (!u(t).length) return null;
      t.computeBoundingBox();
      var e = t.boundingBox;
      return new n.Box(
        new n.Vec3(
          (e.max.x - e.min.x) / 2,
          (e.max.y - e.min.y) / 2,
          (e.max.z - e.min.z) / 2
        )
      );
    }
    function c(t) {
      var e,
        i,
        r,
        o = new THREE.Box3();
      return (
        o.setFromObject(t),
        isFinite(o.min.lengthSq())
          ? ((e = new n.Box(
              new n.Vec3(
                (o.max.x - o.min.x) / 2,
                (o.max.y - o.min.y) / 2,
                (o.max.z - o.min.z) / 2
              )
            )),
            t.updateMatrixWorld(),
            (r = new THREE.Vector3()).setFromMatrixPosition(t.matrixWorld),
            (i = o.translate(r.negate()).getCenter()).lengthSq() &&
              (e.offset = i),
            e)
          : null
      );
    }
    function l(t) {
      var e,
        i,
        n,
        r = ((n = []),
        t.traverse(function(t) {
          'Mesh' === t.type && n.push(t);
        }),
        n),
        o = new THREE.Geometry(),
        s = new THREE.Geometry();
      if (0 === r.length) return null;
      if (1 === r.length) {
        var a = new THREE.Vector3(),
          c = new THREE.Quaternion(),
          l = new THREE.Vector3();
        return (
          r[0].geometry.isBufferGeometry
            ? r[0].geometry.attributes.position &&
              o.fromBufferGeometry(r[0].geometry)
            : (o = r[0].geometry.clone()),
          (o.metadata = r[0].geometry.metadata),
          r[0].updateMatrixWorld(),
          r[0].matrixWorld.decompose(a, c, l),
          o.scale(l.x, l.y, l.z)
        );
      }
      for (; (i = r.pop()); )
        i.updateMatrixWorld(),
          i.geometry.isBufferGeometry
            ? (o.fromBufferGeometry(i.geometry), s.merge(o, i.matrixWorld))
            : s.merge(i.geometry, i.matrixWorld);
      return (e = new THREE.Matrix4()).scale(t.scale), s.applyMatrix(e), s;
    }
    function u(t) {
      return (
        t.attributes || (t = new THREE.BufferGeometry().fromGeometry(t)),
        (t.attributes.position || {}).array || []
      );
    }
    (t.exports = n.mesh2shape = function(t, e) {
      var i, h, d, p, f, m, g, v, y, w, M, E, b, x, A, T, L;
      if ((e = e || {}).type === s.BOX) return c(t);
      if (e.type === s.CYLINDER)
        return (
          (p = t),
          (f = e),
          (y = new THREE.Box3()),
          (w = ['x', 'y', 'z']),
          (M = f.cylinderAxis || 'y'),
          (E = w.splice(w.indexOf(M), 1) && w),
          y.setFromObject(p),
          isFinite(y.min.lengthSq())
            ? ((g = y.max[M] - y.min[M]),
              (v =
                0.5 *
                Math.max(y.max[E[0]] - y.min[E[0]], y.max[E[1]] - y.min[E[1]])),
              ((m = new n.Cylinder(v, v, g, 12))._type =
                n.Shape.types.CYLINDER),
              (m.radiusTop = v),
              (m.radiusBottom = v),
              (m.height = g),
              (m.numSegments = 12),
              (m.orientation = new n.Quaternion()),
              m.orientation
                .setFromEuler('y' === M ? o : 0, 'z' === M ? o : 0, 0, 'XYZ')
                .normalize(),
              m)
            : null
        );
      if (e.type === s.SPHERE)
        return (function(t, e) {
          if (e.sphereRadius) return new n.Sphere(e.sphereRadius);
          var i = l(t);
          return i
            ? (i.computeBoundingSphere(), new n.Sphere(i.boundingSphere.radius))
            : null;
        })(t, e);
      if (e.type === s.HULL)
        return (function(t) {
          var e,
            i,
            o,
            s,
            a = l(t);
          if (!a || !a.vertices.length) return null;
          for (e = 0; e < a.vertices.length; e++)
            (a.vertices[e].x += 1e-4 * (Math.random() - 0.5)),
              (a.vertices[e].y += 1e-4 * (Math.random() - 0.5)),
              (a.vertices[e].z += 1e-4 * (Math.random() - 0.5));
          for (
            s = r(a), i = new Array(s.vertices.length), e = 0;
            e < s.vertices.length;
            e++
          )
            i[e] = new n.Vec3(
              s.vertices[e].x,
              s.vertices[e].y,
              s.vertices[e].z
            );
          for (o = new Array(s.faces.length), e = 0; e < s.faces.length; e++)
            o[e] = [s.faces[e].a, s.faces[e].b, s.faces[e].c];
          return new n.ConvexPolyhedron(i, o);
        })(t);
      if (e.type === s.MESH)
        return (i = l(t))
          ? (d = u(i)).length
            ? ((h = Object.keys(d).map(Number)), new n.Trimesh(d, h))
            : null
          : null;
      if (e.type)
        throw new Error('[CANNON.mesh2shape] Invalid type "%s".', e.type);
      if (!(i = l(t))) return null;
      switch (i.metadata ? i.metadata.type : i.type) {
        case 'BoxGeometry':
        case 'BoxBufferGeometry':
          return a(i);
        case 'CylinderGeometry':
        case 'CylinderBufferGeometry':
          return (
            (L = (A = i).metadata ? A.metadata.parameters : A.parameters),
            ((T = new n.Cylinder(
              L.radiusTop,
              L.radiusBottom,
              L.height,
              L.radialSegments
            ))._type =
              n.Shape.types.CYLINDER),
            (T.radiusTop = L.radiusTop),
            (T.radiusBottom = L.radiusBottom),
            (T.height = L.height),
            (T.numSegments = L.radialSegments),
            (T.orientation = new n.Quaternion()),
            T.orientation
              .setFromEuler(THREE.Math.degToRad(-90), 0, 0, 'XYZ')
              .normalize(),
            T
          );
        case 'PlaneGeometry':
        case 'PlaneBufferGeometry':
          return (function(t) {
            t.computeBoundingBox();
            var e = t.boundingBox;
            return new n.Box(
              new n.Vec3(
                (e.max.x - e.min.x) / 2 || 0.1,
                (e.max.y - e.min.y) / 2 || 0.1,
                (e.max.z - e.min.z) / 2 || 0.1
              )
            );
          })(i);
        case 'SphereGeometry':
        case 'SphereBufferGeometry':
          return (
            (x = (b = i).metadata ? b.metadata.parameters : b.parameters),
            new n.Sphere(x.radius)
          );
        case 'TubeGeometry':
        case 'Geometry':
        case 'BufferGeometry':
          return c(t);
        default:
          return (
            console.warn(
              'Unrecognized geometry: "%s". Using bounding box as shape.',
              i.type
            ),
            a(i)
          );
      }
    }),
      (n.mesh2shape.Type = s);
  },
  function(t, e) {
    t.exports = (function() {
      var t,
        e,
        i,
        n,
        r,
        o,
        s,
        a,
        c,
        l,
        u,
        h,
        d,
        p,
        f,
        m,
        g,
        v,
        y,
        w = [],
        M = [],
        E = 0;
      var b,
        x,
        A,
        T = ((b = new THREE.Vector3()),
        (x = new THREE.Vector3()),
        (A = new THREE.Vector3()),
        function(t, e, i) {
          return (
            b.subVectors(i, t),
            x.subVectors(e, t),
            A.crossVectors(b, x),
            A.normalize()
          );
        });
      function L(t, e) {
        if (void 0 !== t.normal) return t.normal;
        var i = e[t[0]],
          n = e[t[1]],
          r = e[t[2]];
        return (
          u.subVectors(n, i),
          h.subVectors(r, i),
          f.crossVectors(h, u),
          f.normalize(),
          (t.normal = f.clone())
        );
      }
      function N(t, e, i) {
        var n = i[t[0]],
          r = [],
          o = L(t, i);
        e.sort(function(t, e) {
          return (
            (r[t.x / 3] =
              void 0 !== r[t.x / 3] ? r[t.x / 3] : o.dot(d.subVectors(t, n))),
            (r[e.x / 3] =
              void 0 !== r[e.x / 3] ? r[e.x / 3] : o.dot(p.subVectors(e, n))),
            r[t.x / 3] - r[e.x / 3]
          );
        });
        var s = e.length;
        for (
          1 === s && (r[e[0].x / 3] = o.dot(d.subVectors(e[0], n)));
          s-- > 0 && r[e[s].x / 3] > 0;

        );
        s + 1 < e.length &&
          r[e[s + 1].x / 3] > 0 &&
          (t.visiblePoints = e.splice(s + 1));
      }
      function D(t, e) {
        for (
          var i, n = w.length, r = [t], o = e.indexOf(t.visiblePoints.pop());
          n-- > 0;

        )
          (i = w[n]) !== t &&
            L(i, e).dot(m.subVectors(e[o], e[i[0]])) > 0 &&
            r.push(i);
        var s,
          a,
          c,
          l,
          u = (n = r.length),
          h = 1 === n,
          d = [],
          p = 0,
          f = [];
        r[0][0], r[0][1], r[0][1], r[0][2], r[0][2], r[0][0];
        if (1 === r.length)
          (d = [(i = r[0])[0], i[1], i[1], i[2], i[2], i[0]]),
            M.indexOf(i) > -1 && M.splice(M.indexOf(i), 1),
            i.visiblePoints && (f = f.concat(i.visiblePoints)),
            w.splice(w.indexOf(i), 1);
        else
          for (; n-- > 0; ) {
            var g;
            for (
              i = r[n],
                M.indexOf(i) > -1 && M.splice(M.indexOf(i), 1),
                i.visiblePoints && (f = f.concat(i.visiblePoints)),
                w.splice(w.indexOf(i), 1),
                cEdgeIndex = 0;
              cEdgeIndex < 3;

            ) {
              for (
                g = !1,
                  u = r.length,
                  c = i[cEdgeIndex],
                  l = i[(cEdgeIndex + 1) % 3];
                u-- > 0 && !g;

              )
                if (((p = 0), (s = r[u]) !== i))
                  for (; p < 3 && !g; )
                    (a = p + 1),
                      (g =
                        (s[p] === c && s[a % 3] === l) ||
                        (s[p] === l && s[a % 3] === c)),
                      p++;
              (g && !h) || (d.push(c), d.push(l)), cEdgeIndex++;
            }
          }
        n = 0;
        for (var v, y = d.length / 2; n < y; )
          N((v = [d[2 * n + 1], o, d[2 * n]]), f, e),
            w.push(v),
            void 0 !== v.visiblePoints && M.push(v),
            n++;
      }
      var S,
        C,
        _,
        I = ((S = new THREE.Vector3()),
        (C = new THREE.Vector3()),
        (_ = new THREE.Vector3()),
        function(t, e, i) {
          S.subVectors(e, t), C.subVectors(i, t), _.subVectors(i, e);
          var n = C.dot(S);
          if (n < 0) return C.dot(C);
          var r = S.dot(S);
          return n >= r ? _.dot(_) : C.dot(C) - n * n / r;
        });
      return function(b) {
        for (
          u = new THREE.Vector3(),
            h = new THREE.Vector3(),
            new THREE.Vector3(),
            d = new THREE.Vector3(),
            p = new THREE.Vector3(),
            f = new THREE.Vector3(),
            m = new THREE.Vector3(),
            g = new THREE.Vector3(),
            v = new THREE.Vector3(),
            y = new THREE.Vector3(),
            points = b.vertices,
            w = [],
            M = [],
            j = t = points.length,
            e = points.slice(0, 6),
            E = 0;
          j-- > 0;

        )
          points[j].x < e[0].x && (e[0] = points[j]),
            points[j].x > e[1].x && (e[1] = points[j]),
            points[j].y < e[2].y && (e[2] = points[j]),
            points[j].y < e[3].y && (e[3] = points[j]),
            points[j].z < e[4].z && (e[4] = points[j]),
            points[j].z < e[5].z && (e[5] = points[j]);
        for (n = j = 6; j-- > 0; )
          for (n = j - 1; n-- > 0; )
            E < (i = e[j].distanceToSquared(e[n])) &&
              ((E = i), (r = e[j]), (o = e[n]));
        for (j = 6, E = 0; j-- > 0; )
          (i = I(r, o, e[j])), E < i && ((E = i), (s = e[j]));
        for (c = T(r, o, s), l = c.dot(r), E = 0, j = t; j-- > 0; )
          (i = Math.abs(points[j].dot(c) - l)),
            E < i && ((E = i), (a = points[j]));
        var x = points.indexOf(r),
          A = points.indexOf(o),
          L = points.indexOf(s),
          S = points.indexOf(a),
          C = [[L, A, x], [A, S, x], [L, S, A], [x, S, L]];
        g.subVectors(o, r).normalize(),
          v.subVectors(s, r).normalize(),
          y.subVectors(a, r).normalize(),
          y.dot(new THREE.Vector3().crossVectors(v, g)) < 0 &&
            (C[0].reverse(), C[1].reverse(), C[2].reverse(), C[3].reverse());
        var _ = points.slice();
        _.splice(_.indexOf(r), 1),
          _.splice(_.indexOf(o), 1),
          _.splice(_.indexOf(s), 1),
          _.splice(_.indexOf(a), 1);
        for (var j = C.length; j-- > 0; )
          N(C[j], _, points),
            void 0 !== C[j].visiblePoints && M.push(C[j]),
            w.push(C[j]);
        !(function(t) {
          for (; M.length > 0; ) D(M.shift(), t);
        })(points);
        for (var O = w.length; O-- > 0; )
          b.faces[O] = new THREE.Face3(w[O][2], w[O][1], w[O][0], w[O].normal);
        return (b.normalsNeedUpdate = !0), b;
      };
    })();
  },
  function(t, e, i) {
    var n = i(7);
    (n.shape2mesh = function(t) {
      for (var e = new THREE.Object3D(), i = 0; i < t.shapes.length; i++) {
        var r,
          o = t.shapes[i];
        switch (o.type) {
          case n.Shape.types.SPHERE:
            var s = new THREE.SphereGeometry(o.radius, 8, 8);
            r = new THREE.Mesh(s, this.currentMaterial);
            break;
          case n.Shape.types.PARTICLE:
            r = new THREE.Mesh(this.particleGeo, this.particleMaterial);
            var a = this.settings;
            r.scale.set(a.particleSize, a.particleSize, a.particleSize);
            break;
          case n.Shape.types.PLANE:
            var c = new THREE.PlaneGeometry(10, 10, 4, 4);
            r = new THREE.Object3D();
            var l = new THREE.Object3D(),
              u = new THREE.Mesh(c, this.currentMaterial);
            u.scale.set(100, 100, 100),
              l.add(u),
              (u.castShadow = !0),
              (u.receiveShadow = !0),
              r.add(l);
            break;
          case n.Shape.types.BOX:
            var h = new THREE.BoxGeometry(
              2 * o.halfExtents.x,
              2 * o.halfExtents.y,
              2 * o.halfExtents.z
            );
            r = new THREE.Mesh(h, this.currentMaterial);
            break;
          case n.Shape.types.CONVEXPOLYHEDRON:
            for (
              var d = new THREE.Geometry(), p = 0;
              p < o.vertices.length;
              p++
            ) {
              var f = o.vertices[p];
              d.vertices.push(new THREE.Vector3(f.x, f.y, f.z));
            }
            for (p = 0; p < o.faces.length; p++)
              for (var m = o.faces[p], g = m[0], v = 1; v < m.length - 1; v++) {
                var y = m[v],
                  w = m[v + 1];
                d.faces.push(new THREE.Face3(g, y, w));
              }
            d.computeBoundingSphere(),
              d.computeFaceNormals(),
              (r = new THREE.Mesh(d, this.currentMaterial));
            break;
          case n.Shape.types.HEIGHTFIELD:
            c = new THREE.Geometry();
            for (
              var M = new n.Vec3(), E = new n.Vec3(), b = new n.Vec3(), x = 0;
              x < o.data.length - 1;
              x++
            )
              for (var A = 0; A < o.data[x].length - 1; A++)
                for (var T = 0; T < 2; T++) {
                  o.getConvexTrianglePillar(x, A, 0 === T),
                    M.copy(o.pillarConvex.vertices[0]),
                    E.copy(o.pillarConvex.vertices[1]),
                    b.copy(o.pillarConvex.vertices[2]),
                    M.vadd(o.pillarOffset, M),
                    E.vadd(o.pillarOffset, E),
                    b.vadd(o.pillarOffset, b),
                    c.vertices.push(
                      new THREE.Vector3(M.x, M.y, M.z),
                      new THREE.Vector3(E.x, E.y, E.z),
                      new THREE.Vector3(b.x, b.y, b.z)
                    );
                  p = c.vertices.length - 3;
                  c.faces.push(new THREE.Face3(p, p + 1, p + 2));
                }
            c.computeBoundingSphere(),
              c.computeFaceNormals(),
              (r = new THREE.Mesh(c, this.currentMaterial));
            break;
          case n.Shape.types.TRIMESH:
            for (
              c = new THREE.Geometry(),
                M = new n.Vec3(),
                E = new n.Vec3(),
                b = new n.Vec3(),
                p = 0;
              p < o.indices.length / 3;
              p++
            ) {
              o.getTriangleVertices(p, M, E, b),
                c.vertices.push(
                  new THREE.Vector3(M.x, M.y, M.z),
                  new THREE.Vector3(E.x, E.y, E.z),
                  new THREE.Vector3(b.x, b.y, b.z)
                );
              v = c.vertices.length - 3;
              c.faces.push(new THREE.Face3(v, v + 1, v + 2));
            }
            c.computeBoundingSphere(),
              c.computeFaceNormals(),
              (r = new THREE.Mesh(c, this.currentMaterial));
            break;
          default:
            throw 'Visual type not recognized: ' + o.type;
        }
        if (((r.receiveShadow = !0), (r.castShadow = !0), r.children))
          for (p = 0; p < r.children.length; p++)
            if (
              ((r.children[p].castShadow = !0),
              (r.children[p].receiveShadow = !0),
              r.children[p])
            )
              for (v = 0; v < r.children[p].length; v++)
                (r.children[p].children[v].castShadow = !0),
                  (r.children[p].children[v].receiveShadow = !0);
        var L = t.shapeOffsets[i],
          N = t.shapeOrientations[i];
        r.position.set(L.x, L.y, L.z),
          r.quaternion.set(N.x, N.y, N.z, N.w),
          e.add(r);
      }
      return e;
    }),
      (t.exports = n.shape2mesh);
  },
  function(t, e, i) {
    var n = i(39);
    t.exports = AFRAME.utils.extend({}, n, {
      step: function() {
        this.syncToPhysics();
      }
    });
  },
  function(t, e, i) {
    var n = i(7);
    t.exports = {
      dependencies: ['dynamic-body'],
      multiple: !0,
      schema: {
        type: {
          default: 'lock',
          oneOf: ['coneTwist', 'distance', 'hinge', 'lock', 'pointToPoint']
        },
        target: { type: 'selector' },
        maxForce: { default: 1e6, min: 0 },
        collideConnected: { default: !0 },
        wakeUpBodies: { default: !0 },
        distance: { default: 0, min: 0 },
        pivot: { type: 'vec3' },
        targetPivot: { type: 'vec3' },
        axis: { type: 'vec3', default: { x: 0, y: 0, z: 1 } },
        targetAxis: { type: 'vec3', default: { x: 0, y: 0, z: 1 } }
      },
      init: function() {
        (this.system = this.el.sceneEl.systems.physics),
          (this.constraint = null);
      },
      remove: function() {
        this.constraint &&
          (this.system.world.removeConstraint(this.constraint),
          (this.constraint = null));
      },
      update: function() {
        var t = this.el,
          e = this.data;
        this.remove(),
          t.body && e.target.body
            ? ((this.constraint = this.createConstraint()),
              this.system.world.addConstraint(this.constraint))
            : (t.body ? e.target : t).addEventListener(
                'body-loaded',
                this.update.bind(this, {})
              );
      },
      createConstraint: function() {
        var t,
          e = this.data,
          i = new n.Vec3(e.pivot.x, e.pivot.y, e.pivot.z),
          r = new n.Vec3(e.targetPivot.x, e.targetPivot.y, e.targetPivot.z),
          o = new n.Vec3(e.axis.x, e.axis.y, e.axis.z),
          s = new n.Vec3(e.targetAxis.x, e.targetAxis.y, e.targetAxis.z);
        switch (e.type) {
          case 'lock':
            t = new n.LockConstraint(this.el.body, e.target.body, {
              maxForce: e.maxForce
            });
            break;
          case 'distance':
            t = new n.DistanceConstraint(
              this.el.body,
              e.target.body,
              e.distance,
              e.maxForce
            );
            break;
          case 'hinge':
            t = new n.HingeConstraint(this.el.body, e.target.body, {
              pivotA: i,
              pivotB: r,
              axisA: o,
              axisB: s,
              maxForce: e.maxForce
            });
            break;
          case 'coneTwist':
            t = new n.ConeTwistConstraint(this.el.body, e.target.body, {
              pivotA: i,
              pivotB: r,
              axisA: o,
              axisB: s,
              maxForce: e.maxForce
            });
            break;
          case 'pointToPoint':
            t = new n.PointToPointConstraint(
              this.el.body,
              i,
              e.target.body,
              r,
              e.maxForce
            );
            break;
          default:
            throw new Error('[constraint] Unexpected type: ' + e.type);
        }
        return (t.collideConnected = e.collideConnected), t;
      }
    };
  },
  function(t, e, i) {
    var n = i(7),
      r = i(88),
      o = r.GRAVITY,
      s = r.CONTACT_MATERIAL;
    t.exports = {
      schema: {
        gravity: { default: o },
        iterations: { default: r.ITERATIONS },
        friction: { default: s.friction },
        restitution: { default: s.restitution },
        contactEquationStiffness: { default: s.contactEquationStiffness },
        contactEquationRelaxation: { default: s.contactEquationRelaxation },
        frictionEquationStiffness: { default: s.frictionEquationStiffness },
        frictionEquationRegularization: {
          default: s.frictionEquationRegularization
        },
        maxInterval: { default: 4 / 60 },
        debug: { default: !1 }
      },
      Phase: { SIMULATE: 'sim', RENDER: 'render' },
      init: function() {
        var t = this.data;
        (this.debug = t.debug),
          (this.children = {}),
          (this.children[this.Phase.SIMULATE] = []),
          (this.children[this.Phase.RENDER] = []),
          (this.listeners = {}),
          (this.world = new n.World()),
          (this.world.quatNormalizeSkip = 0),
          (this.world.quatNormalizeFast = !1),
          (this.world.solver.iterations = t.iterations),
          this.world.gravity.set(0, t.gravity, 0),
          (this.world.broadphase = new n.NaiveBroadphase()),
          (this.material = new n.Material({ name: 'defaultMaterial' })),
          (this.contactMaterial = new n.ContactMaterial(
            this.material,
            this.material,
            {
              friction: t.friction,
              restitution: t.restitution,
              contactEquationStiffness: t.contactEquationStiffness,
              contactEquationRelaxation: t.contactEquationRelaxation,
              frictionEquationStiffness: t.frictionEquationStiffness,
              frictionEquationRegularization: t.frictionEquationRegularization
            }
          )),
          this.world.addContactMaterial(this.contactMaterial);
      },
      tick: function(t, e) {
        if (e) {
          var i;
          for (
            this.world.step(Math.min(e / 1e3, this.data.maxInterval)), i = 0;
            i < this.children[this.Phase.SIMULATE].length;
            i++
          )
            this.children[this.Phase.SIMULATE][i].step(t, e);
          for (i = 0; i < this.children[this.Phase.RENDER].length; i++)
            this.children[this.Phase.RENDER][i].step(t, e);
        }
      },
      addBody: function(t) {
        (this.listeners[t.id] = function(e) {
          t.el.emit('collide', e);
        }),
          t.addEventListener('collide', this.listeners[t.id]),
          this.world.addBody(t);
      },
      removeBody: function(t) {
        t.removeEventListener('collide', this.listeners[t.id]),
          delete this.listeners[t.id],
          this.world.removeBody(t);
      },
      addBehavior: function(t, e) {
        this.children[e].push(t);
      },
      removeBehavior: function(t, e) {
        this.children[e].splice(this.children[e].indexOf(t), 1);
      },
      update: function(t) {
        var e = this.data;
        e.debug !== t.debug &&
          console.warn('[physics] `debug` cannot be changed dynamically.'),
          e.maxInterval,
          t.maxInterval,
          e.gravity !== t.gravity && this.world.gravity.set(0, e.gravity, 0),
          (this.contactMaterial.friction = e.friction),
          (this.contactMaterial.restitution = e.restitution),
          (this.contactMaterial.contactEquationStiffness =
            e.contactEquationStiffness),
          (this.contactMaterial.contactEquationRelaxation =
            e.contactEquationRelaxation),
          (this.contactMaterial.frictionEquationStiffness =
            e.frictionEquationStiffness),
          (this.contactMaterial.frictionEquationRegularization =
            e.frictionEquationRegularization);
      }
    };
  },
  function(t, e) {
    t.exports = {
      GRAVITY: -9.8,
      MAX_INTERVAL: 4 / 60,
      ITERATIONS: 10,
      CONTACT_MATERIAL: {
        friction: 0.01,
        restitution: 0.3,
        contactEquationStiffness: 1e8,
        contactEquationRelaxation: 3,
        frictionEquationStiffness: 1e8,
        frictionEquationRegularization: 3
      }
    };
  },
  function(t, e) {
    t.exports = {
      schema: {
        enabled: { default: !0 },
        mode: { default: 'teleport', oneOf: ['teleport', 'animate'] },
        animateSpeed: { default: 3 }
      },
      init: function() {
        (this.active = !0),
          (this.checkpoint = null),
          (this.offset = new THREE.Vector3()),
          (this.position = new THREE.Vector3()),
          (this.targetPosition = new THREE.Vector3());
      },
      play: function() {
        this.active = !0;
      },
      pause: function() {
        this.active = !1;
      },
      setCheckpoint: function(t) {
        var e = this.el;
        this.active &&
          this.checkpoint !== t &&
          (this.checkpoint &&
            e.emit('navigation-end', { checkpoint: this.checkpoint }),
          (this.checkpoint = t),
          this.sync(),
          this.position.distanceTo(this.targetPosition) < 0.1
            ? (this.checkpoint = null)
            : (e.emit('navigation-start', { checkpoint: t }),
              'teleport' === this.data.mode &&
                (this.el.setAttribute('position', this.targetPosition),
                (this.checkpoint = null),
                e.emit('navigation-end', { checkpoint: t }))));
      },
      isVelocityActive: function() {
        return !(!this.active || !this.checkpoint);
      },
      getVelocity: function() {
        if (this.active) {
          var t = this.data,
            e = this.offset,
            i = this.position,
            n = this.targetPosition,
            r = this.checkpoint;
          return (
            this.sync(),
            i.distanceTo(n) < 0.1
              ? ((this.checkpoint = null),
                this.el.emit('navigation-end', { checkpoint: r }),
                e.set(0, 0, 0))
              : (e.setLength(t.animateSpeed), e)
          );
        }
      },
      sync: function() {
        var t = this.offset,
          e = this.position,
          i = this.targetPosition;
        e.copy(this.el.getAttribute('position')),
          i.copy(this.checkpoint.object3D.getWorldPosition()),
          i.add(this.checkpoint.components.checkpoint.getOffset()),
          t.copy(i).sub(e);
      }
    };
  },
  function(t, e, i) {
    var n = i(91),
      r = i(92);
    t.exports = {
      GamepadButton: n,
      schema: {
        controller: { default: 0, oneOf: [0, 1, 2, 3] },
        enabled: { default: !0 },
        debug: { default: !1 }
      },
      init: function() {
        var t = this.el.sceneEl;
        (this.prevTime = window.performance.now()),
          (this.buttons = {}),
          t.addBehavior(this);
      },
      update: function() {
        this.tick();
      },
      tick: function() {
        this.updateButtonState();
      },
      remove: function() {},
      isVelocityActive: function() {
        if (!this.data.enabled || !this.isConnected()) return !1;
        var t = this.getDpad(),
          e = this.getJoystick(0),
          i = t.x || e.x,
          n = t.y || e.y;
        return Math.abs(i) > 0.2 || Math.abs(n) > 0.2;
      },
      getVelocityDelta: function() {
        var t = this.getDpad(),
          e = this.getJoystick(0),
          i = t.x || e.x,
          n = t.y || e.y,
          r = new THREE.Vector3();
        return (
          Math.abs(i) > 0.2 && (r.x += i), Math.abs(n) > 0.2 && (r.z += n), r
        );
      },
      isRotationActive: function() {
        if (!this.data.enabled || !this.isConnected()) return !1;
        var t = this.getJoystick(1);
        return Math.abs(t.x) > 0.2 || Math.abs(t.y) > 0.2;
      },
      getRotationDelta: function() {
        var t = this.getJoystick(1);
        return (
          Math.abs(t.x) <= 0.2 && (t.x = 0),
          Math.abs(t.y) <= 0.2 && (t.y = 0),
          t
        );
      },
      updateButtonState: function() {
        var t = this.getGamepad();
        if (this.data.enabled && t)
          for (var e = 0; e < t.buttons.length; e++)
            t.buttons[e].pressed && !this.buttons[e]
              ? this.emit(new r('gamepadbuttondown', e, t.buttons[e]))
              : !t.buttons[e].pressed &&
                this.buttons[e] &&
                this.emit(new r('gamepadbuttonup', e, t.buttons[e])),
              (this.buttons[e] = t.buttons[e].pressed);
        else Object.keys(this.buttons) && (this.buttons = {});
      },
      emit: function(t) {
        this.el.emit(t.type, t),
          this.el.emit(t.type + ':' + t.index, new r(t.type, t.index, t));
      },
      getGamepad: function() {
        var t =
            navigator.getGamepads &&
            navigator.getGamepads()[this.data.controller],
          e = this.el.sceneEl.components['proxy-controls'];
        return (
          (e && e.isConnected() && e.getGamepad(this.data.controller)) || t
        );
      },
      getButton: function(t) {
        return this.getGamepad().buttons[t];
      },
      getAxis: function(t) {
        return this.getGamepad().axes[t];
      },
      getJoystick: function(t) {
        var e = this.getGamepad();
        switch (t) {
          case 0:
            return new THREE.Vector2(e.axes[0], e.axes[1]);
          case 1:
            return new THREE.Vector2(e.axes[2], e.axes[3]);
          default:
            throw new Error('Unexpected joystick index "%d".', t);
        }
      },
      getDpad: function() {
        var t = this.getGamepad();
        return t.buttons[n.DPAD_RIGHT]
          ? new THREE.Vector2(
              (t.buttons[n.DPAD_RIGHT].pressed ? 1 : 0) +
                (t.buttons[n.DPAD_LEFT].pressed ? -1 : 0),
              (t.buttons[n.DPAD_UP].pressed ? -1 : 0) +
                (t.buttons[n.DPAD_DOWN].pressed ? 1 : 0)
            )
          : new THREE.Vector2();
      },
      isConnected: function() {
        var t = this.getGamepad();
        return !(!t || !t.connected);
      },
      getID: function() {
        return this.getGamepad().id;
      }
    };
  },
  function(t, e) {
    t.exports = Object.assign(function() {}, {
      FACE_1: 0,
      FACE_2: 1,
      FACE_3: 2,
      FACE_4: 3,
      L_SHOULDER_1: 4,
      R_SHOULDER_1: 5,
      L_SHOULDER_2: 6,
      R_SHOULDER_2: 7,
      SELECT: 8,
      START: 9,
      DPAD_UP: 12,
      DPAD_DOWN: 13,
      DPAD_LEFT: 14,
      DPAD_RIGHT: 15,
      VENDOR: 16
    });
  },
  function(t, e) {
    t.exports = function(t, e, i) {
      (this.type = t),
        (this.index = e),
        (this.pressed = i.pressed),
        (this.value = i.value);
    };
  },
  function(t, e) {
    var i = THREE.Math.radToDeg,
      n = AFRAME.utils.device.isMobile();
    function r(t) {
      return 0 === t.x && 0 === t.y && 0 === t.z;
    }
    t.exports = {
      schema: { enabled: { default: !0 }, standing: { default: !0 } },
      init: function() {
        (this.isPositionCalibrated = !1),
          (this.dolly = new THREE.Object3D()),
          (this.hmdEuler = new THREE.Euler()),
          (this.previousHMDPosition = new THREE.Vector3()),
          (this.deltaHMDPosition = new THREE.Vector3()),
          (this.vrControls = new THREE.VRControls(this.dolly)),
          (this.rotation = new THREE.Vector3());
      },
      update: function() {
        var t = this.data,
          e = this.vrControls;
        (e.standing = t.standing), e.update();
      },
      tick: function() {
        this.vrControls.update();
      },
      remove: function() {
        this.vrControls.dispose();
      },
      isRotationActive: function() {
        var t = this.hmdEuler;
        return (
          !(!this.data.enabled || (!this.el.sceneEl.is('vr-mode') && !n)) &&
          (t.setFromQuaternion(this.dolly.quaternion, 'YXZ'), !r(t))
        );
      },
      getRotation: function() {
        var t = this.hmdEuler;
        return this.rotation.set(i(t.x), i(t.y), i(t.z));
      },
      isVelocityActive: function() {
        var t = this.deltaHMDPosition,
          e = this.previousHMDPosition,
          i = this.calculateHMDPosition();
        return (
          (this.isPositionCalibrated = this.isPositionCalibrated || !r(e)),
          !(!this.data.enabled || !this.el.sceneEl.is('vr-mode') || n) &&
            (t.copy(i).sub(e), e.copy(i), this.isPositionCalibrated && !r(t))
        );
      },
      getPositionDelta: function() {
        return this.deltaHMDPosition;
      },
      calculateHMDPosition: function() {
        var t = this.dolly,
          e = new THREE.Vector3();
        return t.updateMatrix(), e.setFromMatrixPosition(t.matrix), e;
      }
    };
  },
  function(t, e, i) {
    i(95);
    var n = window.KeyboardEvent;
    t.exports = {
      schema: { enabled: { default: !0 }, debug: { default: !1 } },
      init: function() {
        (this.dVelocity = new THREE.Vector3()),
          (this.localKeys = {}),
          (this.listeners = {
            keydown: this.onKeyDown.bind(this),
            keyup: this.onKeyUp.bind(this),
            blur: this.onBlur.bind(this)
          }),
          this.attachEventListeners();
      },
      isVelocityActive: function() {
        return this.data.enabled && !!Object.keys(this.getKeys()).length;
      },
      getVelocityDelta: function() {
        var t = this.data,
          e = this.getKeys();
        return (
          this.dVelocity.set(0, 0, 0),
          t.enabled &&
            ((e.KeyW || e.ArrowUp) && (this.dVelocity.z -= 1),
            (e.KeyA || e.ArrowLeft) && (this.dVelocity.x -= 1),
            (e.KeyS || e.ArrowDown) && (this.dVelocity.z += 1),
            (e.KeyD || e.ArrowRight) && (this.dVelocity.x += 1)),
          this.dVelocity.clone()
        );
      },
      play: function() {
        this.attachEventListeners();
      },
      pause: function() {
        this.removeEventListeners();
      },
      remove: function() {
        this.pause();
      },
      attachEventListeners: function() {
        window.addEventListener('keydown', this.listeners.keydown, !1),
          window.addEventListener('keyup', this.listeners.keyup, !1),
          window.addEventListener('blur', this.listeners.blur, !1);
      },
      removeEventListeners: function() {
        window.removeEventListener('keydown', this.listeners.keydown),
          window.removeEventListener('keyup', this.listeners.keyup),
          window.removeEventListener('blur', this.listeners.blur);
      },
      onKeyDown: function(t) {
        AFRAME.utils.shouldCaptureKeyEvent(t) &&
          ((this.localKeys[t.code] = !0), this.emit(t));
      },
      onKeyUp: function(t) {
        AFRAME.utils.shouldCaptureKeyEvent(t) &&
          (delete this.localKeys[t.code], this.emit(t));
      },
      onBlur: function() {
        for (var t in this.localKeys)
          this.localKeys.hasOwnProperty(t) && delete this.localKeys[t];
      },
      emit: function(t) {
        '__keyboard-controls-proxy' in t && this.el.emit(t.type, t),
          this.el.emit(t.type + ':' + t.code, new n(t.type, t)),
          this.data.debug && console.log(t.type + ':' + t.code);
      },
      isPressed: function(t) {
        return t in this.getKeys();
      },
      getKeys: function() {
        return this.isProxied()
          ? this.el.sceneEl.components['proxy-controls'].getKeyboard()
          : this.localKeys;
      },
      isProxied: function() {
        var t = this.el.sceneEl.components['proxy-controls'];
        return t && t.isConnected();
      }
    };
  },
  function(t, e) {
    !(function(t) {
      var e = 'KeyboardEvent' in t;
      e ||
        (t.KeyboardEvent = function() {
          throw TypeError('Illegal constructor');
        }),
        (t.KeyboardEvent.DOM_KEY_LOCATION_STANDARD = 0),
        (t.KeyboardEvent.DOM_KEY_LOCATION_LEFT = 1),
        (t.KeyboardEvent.DOM_KEY_LOCATION_RIGHT = 2),
        (t.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD = 3);
      var i = window.KeyboardEvent.DOM_KEY_LOCATION_STANDARD,
        n = window.KeyboardEvent.DOM_KEY_LOCATION_LEFT,
        r = window.KeyboardEvent.DOM_KEY_LOCATION_RIGHT,
        o = window.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD;
      function s(t, e) {
        return -1 !== String(t).indexOf(e);
      }
      var a = s(navigator.platform, 'Win')
          ? 'win'
          : s(navigator.platform, 'Mac')
            ? 'mac'
            : s(navigator.platform, 'CrOS')
              ? 'cros'
              : s(navigator.platform, 'Linux')
                ? 'linux'
                : s(navigator.userAgent, 'iPad') ||
                  s(navigator.platform, 'iPod') ||
                  s(navigator.platform, 'iPhone')
                  ? 'ios'
                  : '',
        c = s(navigator.userAgent, 'Chrome/')
          ? 'chrome'
          : s(navigator.vendor, 'Apple')
            ? 'safari'
            : s(navigator.userAgent, 'MSIE')
              ? 'ie'
              : s(navigator.userAgent, 'Gecko/')
                ? 'moz'
                : s(navigator.userAgent, 'Opera/') ? 'opera' : '',
        l = c + '-' + a;
      function u(t, e, i) {
        (l !== e && c !== e && a !== e) ||
          Object.keys(i).forEach(function(e) {
            t[e] = i[e];
          });
      }
      var h = {
        3: { code: 'Cancel' },
        6: { code: 'Help' },
        8: { code: 'Backspace' },
        9: { code: 'Tab' },
        12: { code: 'Clear' },
        13: { code: 'Enter' },
        16: { code: 'Shift' },
        17: { code: 'Control' },
        18: { code: 'Alt' },
        19: { code: 'Pause' },
        20: { code: 'CapsLock' },
        21: { code: 'KanaMode' },
        22: { code: 'HangulMode' },
        23: { code: 'JunjaMode' },
        24: { code: 'FinalMode' },
        25: { code: 'KanjiMode' },
        27: { code: 'Escape' },
        28: { code: 'Convert' },
        29: { code: 'NonConvert' },
        30: { code: 'Accept' },
        31: { code: 'ModeChange' },
        32: { code: 'Space' },
        33: { code: 'PageUp' },
        34: { code: 'PageDown' },
        35: { code: 'End' },
        36: { code: 'Home' },
        37: { code: 'ArrowLeft' },
        38: { code: 'ArrowUp' },
        39: { code: 'ArrowRight' },
        40: { code: 'ArrowDown' },
        41: { code: 'Select' },
        42: { code: 'Print' },
        43: { code: 'Execute' },
        44: { code: 'PrintScreen' },
        45: { code: 'Insert' },
        46: { code: 'Delete' },
        47: { code: 'Help' },
        48: { code: 'Digit0', keyCap: '0' },
        49: { code: 'Digit1', keyCap: '1' },
        50: { code: 'Digit2', keyCap: '2' },
        51: { code: 'Digit3', keyCap: '3' },
        52: { code: 'Digit4', keyCap: '4' },
        53: { code: 'Digit5', keyCap: '5' },
        54: { code: 'Digit6', keyCap: '6' },
        55: { code: 'Digit7', keyCap: '7' },
        56: { code: 'Digit8', keyCap: '8' },
        57: { code: 'Digit9', keyCap: '9' },
        65: { code: 'KeyA', keyCap: 'a' },
        66: { code: 'KeyB', keyCap: 'b' },
        67: { code: 'KeyC', keyCap: 'c' },
        68: { code: 'KeyD', keyCap: 'd' },
        69: { code: 'KeyE', keyCap: 'e' },
        70: { code: 'KeyF', keyCap: 'f' },
        71: { code: 'KeyG', keyCap: 'g' },
        72: { code: 'KeyH', keyCap: 'h' },
        73: { code: 'KeyI', keyCap: 'i' },
        74: { code: 'KeyJ', keyCap: 'j' },
        75: { code: 'KeyK', keyCap: 'k' },
        76: { code: 'KeyL', keyCap: 'l' },
        77: { code: 'KeyM', keyCap: 'm' },
        78: { code: 'KeyN', keyCap: 'n' },
        79: { code: 'KeyO', keyCap: 'o' },
        80: { code: 'KeyP', keyCap: 'p' },
        81: { code: 'KeyQ', keyCap: 'q' },
        82: { code: 'KeyR', keyCap: 'r' },
        83: { code: 'KeyS', keyCap: 's' },
        84: { code: 'KeyT', keyCap: 't' },
        85: { code: 'KeyU', keyCap: 'u' },
        86: { code: 'KeyV', keyCap: 'v' },
        87: { code: 'KeyW', keyCap: 'w' },
        88: { code: 'KeyX', keyCap: 'x' },
        89: { code: 'KeyY', keyCap: 'y' },
        90: { code: 'KeyZ', keyCap: 'z' },
        91: { code: 'OSLeft', location: n },
        92: { code: 'OSRight', location: r },
        93: { code: 'ContextMenu' },
        95: { code: 'Standby' },
        96: { code: 'Numpad0', keyCap: '0', location: o },
        97: { code: 'Numpad1', keyCap: '1', location: o },
        98: { code: 'Numpad2', keyCap: '2', location: o },
        99: { code: 'Numpad3', keyCap: '3', location: o },
        100: { code: 'Numpad4', keyCap: '4', location: o },
        101: { code: 'Numpad5', keyCap: '5', location: o },
        102: { code: 'Numpad6', keyCap: '6', location: o },
        103: { code: 'Numpad7', keyCap: '7', location: o },
        104: { code: 'Numpad8', keyCap: '8', location: o },
        105: { code: 'Numpad9', keyCap: '9', location: o },
        106: { code: 'NumpadMultiply', keyCap: '*', location: o },
        107: { code: 'NumpadAdd', keyCap: '+', location: o },
        108: { code: 'NumpadComma', keyCap: ',', location: o },
        109: { code: 'NumpadSubtract', keyCap: '-', location: o },
        110: { code: 'NumpadDecimal', keyCap: '.', location: o },
        111: { code: 'NumpadDivide', keyCap: '/', location: o },
        112: { code: 'F1' },
        113: { code: 'F2' },
        114: { code: 'F3' },
        115: { code: 'F4' },
        116: { code: 'F5' },
        117: { code: 'F6' },
        118: { code: 'F7' },
        119: { code: 'F8' },
        120: { code: 'F9' },
        121: { code: 'F10' },
        122: { code: 'F11' },
        123: { code: 'F12' },
        124: { code: 'F13' },
        125: { code: 'F14' },
        126: { code: 'F15' },
        127: { code: 'F16' },
        128: { code: 'F17' },
        129: { code: 'F18' },
        130: { code: 'F19' },
        131: { code: 'F20' },
        132: { code: 'F21' },
        133: { code: 'F22' },
        134: { code: 'F23' },
        135: { code: 'F24' },
        144: { code: 'NumLock', location: o },
        145: { code: 'ScrollLock' },
        160: { code: 'ShiftLeft', location: n },
        161: { code: 'ShiftRight', location: r },
        162: { code: 'ControlLeft', location: n },
        163: { code: 'ControlRight', location: r },
        164: { code: 'AltLeft', location: n },
        165: { code: 'AltRight', location: r },
        166: { code: 'BrowserBack' },
        167: { code: 'BrowserForward' },
        168: { code: 'BrowserRefresh' },
        169: { code: 'BrowserStop' },
        170: { code: 'BrowserSearch' },
        171: { code: 'BrowserFavorites' },
        172: { code: 'BrowserHome' },
        173: { code: 'VolumeMute' },
        174: { code: 'VolumeDown' },
        175: { code: 'VolumeUp' },
        176: { code: 'MediaTrackNext' },
        177: { code: 'MediaTrackPrevious' },
        178: { code: 'MediaStop' },
        179: { code: 'MediaPlayPause' },
        180: { code: 'LaunchMail' },
        181: { code: 'MediaSelect' },
        182: { code: 'LaunchApp1' },
        183: { code: 'LaunchApp2' },
        186: { code: 'Semicolon', keyCap: ';' },
        187: { code: 'Equal', keyCap: '=' },
        188: { code: 'Comma', keyCap: ',' },
        189: { code: 'Minus', keyCap: '-' },
        190: { code: 'Period', keyCap: '.' },
        191: { code: 'Slash', keyCap: '/' },
        192: { code: 'Backquote', keyCap: '`' },
        219: { code: 'BracketLeft', keyCap: '[' },
        220: { code: 'Backslash', keyCap: '\\' },
        221: { code: 'BracketRight', keyCap: ']' },
        222: { code: 'Quote', keyCap: "'" },
        226: { code: 'IntlBackslash', keyCap: '\\' },
        229: { code: 'Process' },
        246: { code: 'Attn' },
        247: { code: 'CrSel' },
        248: { code: 'ExSel' },
        249: { code: 'EraseEof' },
        250: { code: 'Play' },
        251: { code: 'ZoomToggle' },
        254: { code: 'Clear' }
      };
      u(h, 'moz', {
        59: { code: 'Semicolon', keyCap: ';' },
        61: { code: 'Equal', keyCap: '=' },
        107: { code: 'Equal', keyCap: '=' },
        109: { code: 'Minus', keyCap: '-' },
        187: { code: 'NumpadAdd', keyCap: '+', location: o },
        189: { code: 'NumpadSubtract', keyCap: '-', location: o }
      }),
        u(h, 'moz-mac', {
          12: { code: 'NumLock', location: o },
          173: { code: 'Minus', keyCap: '-' }
        }),
        u(h, 'moz-win', { 173: { code: 'Minus', keyCap: '-' } }),
        u(h, 'chrome-mac', { 93: { code: 'OSRight', location: r } }),
        u(h, 'safari', { 3: { code: 'Enter' }, 25: { code: 'Tab' } }),
        u(h, 'ios', { 10: { code: 'Enter', location: i } }),
        u(h, 'safari-mac', {
          91: { code: 'OSLeft', location: n },
          93: { code: 'OSRight', location: r },
          229: { code: 'KeyQ', keyCap: 'Q' }
        });
      var d = {};
      'cros' === a &&
        ((d['U+00A0'] = { code: 'ShiftLeft', location: n }),
        (d['U+00A1'] = { code: 'ShiftRight', location: r }),
        (d['U+00A2'] = { code: 'ControlLeft', location: n }),
        (d['U+00A3'] = { code: 'ControlRight', location: r }),
        (d['U+00A4'] = { code: 'AltLeft', location: n }),
        (d['U+00A5'] = { code: 'AltRight', location: r })),
        'chrome-mac' === l && (d['U+0010'] = { code: 'ContextMenu' }),
        'safari-mac' === l && (d['U+0010'] = { code: 'ContextMenu' }),
        'ios' === a &&
          ((d['U+0010'] = { code: 'Function' }),
          (d['U+001C'] = { code: 'ArrowLeft' }),
          (d['U+001D'] = { code: 'ArrowRight' }),
          (d['U+001E'] = { code: 'ArrowUp' }),
          (d['U+001F'] = { code: 'ArrowDown' }),
          (d['U+0001'] = { code: 'Home' }),
          (d['U+0004'] = { code: 'End' }),
          (d['U+000B'] = { code: 'PageUp' }),
          (d['U+000C'] = { code: 'PageDown' }));
      var p = [];
      (p[n] = {
        16: { code: 'ShiftLeft', location: n },
        17: { code: 'ControlLeft', location: n },
        18: { code: 'AltLeft', location: n }
      }),
        (p[r] = {
          16: { code: 'ShiftRight', location: r },
          17: { code: 'ControlRight', location: r },
          18: { code: 'AltRight', location: r }
        }),
        (p[o] = { 13: { code: 'NumpadEnter', location: o } }),
        u(p[o], 'moz', {
          109: { code: 'NumpadSubtract', location: o },
          107: { code: 'NumpadAdd', location: o }
        }),
        u(p[n], 'moz-mac', { 224: { code: 'OSLeft', location: n } }),
        u(p[r], 'moz-mac', { 224: { code: 'OSRight', location: r } }),
        u(p[r], 'moz-win', { 91: { code: 'OSRight', location: r } }),
        u(p[r], 'mac', { 93: { code: 'OSRight', location: r } }),
        u(p[o], 'chrome-mac', { 12: { code: 'NumLock', location: o } }),
        u(p[o], 'safari-mac', {
          12: { code: 'NumLock', location: o },
          187: { code: 'NumpadAdd', location: o },
          189: { code: 'NumpadSubtract', location: o },
          190: { code: 'NumpadDecimal', location: o },
          191: { code: 'NumpadDivide', location: o }
        });
      var f = {
        ShiftLeft: { key: 'Shift' },
        ShiftRight: { key: 'Shift' },
        ControlLeft: { key: 'Control' },
        ControlRight: { key: 'Control' },
        AltLeft: { key: 'Alt' },
        AltRight: { key: 'Alt' },
        OSLeft: { key: 'OS' },
        OSRight: { key: 'OS' },
        NumpadEnter: { key: 'Enter' },
        Space: { key: ' ' },
        Digit0: { key: '0', shiftKey: ')' },
        Digit1: { key: '1', shiftKey: '!' },
        Digit2: { key: '2', shiftKey: '@' },
        Digit3: { key: '3', shiftKey: '#' },
        Digit4: { key: '4', shiftKey: '$' },
        Digit5: { key: '5', shiftKey: '%' },
        Digit6: { key: '6', shiftKey: '^' },
        Digit7: { key: '7', shiftKey: '&' },
        Digit8: { key: '8', shiftKey: '*' },
        Digit9: { key: '9', shiftKey: '(' },
        KeyA: { key: 'a', shiftKey: 'A' },
        KeyB: { key: 'b', shiftKey: 'B' },
        KeyC: { key: 'c', shiftKey: 'C' },
        KeyD: { key: 'd', shiftKey: 'D' },
        KeyE: { key: 'e', shiftKey: 'E' },
        KeyF: { key: 'f', shiftKey: 'F' },
        KeyG: { key: 'g', shiftKey: 'G' },
        KeyH: { key: 'h', shiftKey: 'H' },
        KeyI: { key: 'i', shiftKey: 'I' },
        KeyJ: { key: 'j', shiftKey: 'J' },
        KeyK: { key: 'k', shiftKey: 'K' },
        KeyL: { key: 'l', shiftKey: 'L' },
        KeyM: { key: 'm', shiftKey: 'M' },
        KeyN: { key: 'n', shiftKey: 'N' },
        KeyO: { key: 'o', shiftKey: 'O' },
        KeyP: { key: 'p', shiftKey: 'P' },
        KeyQ: { key: 'q', shiftKey: 'Q' },
        KeyR: { key: 'r', shiftKey: 'R' },
        KeyS: { key: 's', shiftKey: 'S' },
        KeyT: { key: 't', shiftKey: 'T' },
        KeyU: { key: 'u', shiftKey: 'U' },
        KeyV: { key: 'v', shiftKey: 'V' },
        KeyW: { key: 'w', shiftKey: 'W' },
        KeyX: { key: 'x', shiftKey: 'X' },
        KeyY: { key: 'y', shiftKey: 'Y' },
        KeyZ: { key: 'z', shiftKey: 'Z' },
        Numpad0: { key: '0' },
        Numpad1: { key: '1' },
        Numpad2: { key: '2' },
        Numpad3: { key: '3' },
        Numpad4: { key: '4' },
        Numpad5: { key: '5' },
        Numpad6: { key: '6' },
        Numpad7: { key: '7' },
        Numpad8: { key: '8' },
        Numpad9: { key: '9' },
        NumpadMultiply: { key: '*' },
        NumpadAdd: { key: '+' },
        NumpadComma: { key: ',' },
        NumpadSubtract: { key: '-' },
        NumpadDecimal: { key: '.' },
        NumpadDivide: { key: '/' },
        Semicolon: { key: ';', shiftKey: ':' },
        Equal: { key: '=', shiftKey: '+' },
        Comma: { key: ',', shiftKey: '<' },
        Minus: { key: '-', shiftKey: '_' },
        Period: { key: '.', shiftKey: '>' },
        Slash: { key: '/', shiftKey: '?' },
        Backquote: { key: '`', shiftKey: '~' },
        BracketLeft: { key: '[', shiftKey: '{' },
        Backslash: { key: '\\', shiftKey: '|' },
        BracketRight: { key: ']', shiftKey: '}' },
        Quote: { key: "'", shiftKey: '"' },
        IntlBackslash: { key: '\\', shiftKey: '|' }
      };
      u(f, 'mac', { OSLeft: { key: 'Meta' }, OSRight: { key: 'Meta' } });
      var m,
        g,
        v,
        y = {
          Esc: 'Escape',
          Nonconvert: 'NonConvert',
          Left: 'ArrowLeft',
          Up: 'ArrowUp',
          Right: 'ArrowRight',
          Down: 'ArrowDown',
          Del: 'Delete',
          Menu: 'ContextMenu',
          MediaNextTrack: 'MediaTrackNext',
          MediaPreviousTrack: 'MediaTrackPrevious',
          SelectMedia: 'MediaSelect',
          HalfWidth: 'Hankaku',
          FullWidth: 'Zenkaku',
          RomanCharacters: 'Romaji',
          Crsel: 'CrSel',
          Exsel: 'ExSel',
          Zoom: 'ZoomToggle'
        },
        w = ((m = h),
        (g = 'code'),
        (v = {}),
        Object.keys(m).forEach(function(t) {
          var e = m[t];
          g in e && (v[e[g]] = e);
        }),
        v);
      try {
        var M = e && 'location' in new KeyboardEvent('');
      } catch (t) {}
      function E(t) {
        var e = 'keyCode' in t ? t.keyCode : 'which' in t ? t.which : 0,
          i = (function() {
            if (M || 'keyLocation' in t) {
              var i = M ? t.location : t.keyLocation;
              if (i && e in p[i]) return p[i][e];
            }
            return 'keyIdentifier' in t && t.keyIdentifier in d
              ? d[t.keyIdentifier]
              : e in h ? h[e] : null;
          })();
        if (!i) return null;
        var n,
          r = (n = f[i.code])
            ? t.shiftKey && 'shiftKey' in n ? n.shiftKey : n.key
            : i.code;
        return { code: i.code, key: r, location: i.location, keyCap: i.keyCap };
      }
      'KeyboardEvent' in t &&
        'defineProperty' in Object &&
        (function() {
          function t(t, e, i) {
            e in t || Object.defineProperty(t, e, i);
          }
          if (
            (t(KeyboardEvent.prototype, 'code', {
              get: function() {
                var t = E(this);
                return t ? t.code : '';
              }
            }),
            'key' in KeyboardEvent.prototype)
          ) {
            var e = Object.getOwnPropertyDescriptor(
              KeyboardEvent.prototype,
              'key'
            );
            Object.defineProperty(KeyboardEvent.prototype, 'key', {
              get: function() {
                var t = e.get.call(this);
                return y.hasOwnProperty(t) ? y[t] : t;
              }
            });
          }
          t(KeyboardEvent.prototype, 'key', {
            get: function() {
              var t = E(this);
              return t && 'key' in t ? t.key : 'Unidentified';
            }
          }),
            t(KeyboardEvent.prototype, 'location', {
              get: function() {
                var t = E(this);
                return t && 'location' in t ? t.location : i;
              }
            }),
            t(KeyboardEvent.prototype, 'locale', {
              get: function() {
                return '';
              }
            });
        })(),
        'queryKeyCap' in t.KeyboardEvent ||
          (t.KeyboardEvent.queryKeyCap = function(t, e) {
            if (((t = String(t)), !w.hasOwnProperty(t))) return 'Undefined';
            if (e && 'en-us' !== String(e).toLowerCase())
              throw Error('Unsupported locale');
            var i = w[t];
            return i.keyCap || i.code || 'Undefined';
          }),
        (t.identifyKey = function(t) {
          if (!('code' in t)) {
            var e = E(t);
            (t.code = e ? e.code : ''),
              (t.key = e && 'key' in e ? e.key : 'Unidentified'),
              (t.location =
                'location' in t
                  ? t.location
                  : 'keyLocation' in t
                    ? t.keyLocation
                    : e && 'location' in e ? e.location : i),
              (t.locale = '');
          }
        });
    })(window);
  },
  function(t, e) {
    (document.exitPointerLock =
      document.exitPointerLock || document.mozExitPointerLock),
      (t.exports = {
        schema: {
          enabled: { default: !0 },
          pointerlockEnabled: { default: !0 },
          sensitivity: { default: 0.04 }
        },
        init: function() {
          (this.mouseDown = !1),
            (this.pointerLocked = !1),
            (this.lookVector = new THREE.Vector2()),
            this.bindMethods();
        },
        update: function(t) {
          var e = this.data;
          t.pointerlockEnabled &&
            !e.pointerlockEnabled &&
            this.pointerLocked &&
            document.exitPointerLock();
        },
        play: function() {
          this.addEventListeners();
        },
        pause: function() {
          this.removeEventListeners(), this.lookVector.set(0, 0);
        },
        remove: function() {
          this.pause();
        },
        bindMethods: function() {
          (this.onMouseDown = this.onMouseDown.bind(this)),
            (this.onMouseMove = this.onMouseMove.bind(this)),
            (this.onMouseUp = this.onMouseUp.bind(this)),
            (this.onMouseUp = this.onMouseUp.bind(this)),
            (this.onPointerLockChange = this.onPointerLockChange.bind(this)),
            (this.onPointerLockChange = this.onPointerLockChange.bind(this)),
            (this.onPointerLockChange = this.onPointerLockChange.bind(this));
        },
        addEventListeners: function() {
          var t = this.el.sceneEl,
            e = t.canvas,
            i = this.data;
          e
            ? (e.addEventListener('mousedown', this.onMouseDown, !1),
              e.addEventListener('mousemove', this.onMouseMove, !1),
              e.addEventListener('mouseup', this.onMouseUp, !1),
              e.addEventListener('mouseout', this.onMouseUp, !1),
              i.pointerlockEnabled &&
                (document.addEventListener(
                  'pointerlockchange',
                  this.onPointerLockChange,
                  !1
                ),
                document.addEventListener(
                  'mozpointerlockchange',
                  this.onPointerLockChange,
                  !1
                ),
                document.addEventListener(
                  'pointerlockerror',
                  this.onPointerLockError,
                  !1
                )))
            : t.addEventListener(
                'render-target-loaded',
                this.addEventListeners.bind(this)
              );
        },
        removeEventListeners: function() {
          var t = this.el.sceneEl && this.el.sceneEl.canvas;
          t &&
            (t.removeEventListener('mousedown', this.onMouseDown, !1),
            t.removeEventListener('mousemove', this.onMouseMove, !1),
            t.removeEventListener('mouseup', this.onMouseUp, !1),
            t.removeEventListener('mouseout', this.onMouseUp, !1)),
            document.removeEventListener(
              'pointerlockchange',
              this.onPointerLockChange,
              !1
            ),
            document.removeEventListener(
              'mozpointerlockchange',
              this.onPointerLockChange,
              !1
            ),
            document.removeEventListener(
              'pointerlockerror',
              this.onPointerLockError,
              !1
            );
        },
        isRotationActive: function() {
          return this.data.enabled && (this.mouseDown || this.pointerLocked);
        },
        getRotationDelta: function() {
          var t = this.lookVector.clone().multiplyScalar(this.data.sensitivity);
          return this.lookVector.set(0, 0), t;
        },
        onMouseMove: function(t) {
          var e = this.previousMouseEvent;
          if (this.data.enabled && (this.mouseDown || this.pointerLocked)) {
            var i = t.movementX || t.mozMovementX || 0,
              n = t.movementY || t.mozMovementY || 0;
            this.pointerLocked ||
              ((i = t.screenX - e.screenX), (n = t.screenY - e.screenY)),
              (this.lookVector.x += i),
              (this.lookVector.y += n),
              (this.previousMouseEvent = t);
          }
        },
        onMouseDown: function(t) {
          var e = this.el.sceneEl.canvas,
            i = (AFRAME.INSPECTOR || {}).opened;
          (this.mouseDown = !0),
            (this.previousMouseEvent = t),
            !this.data.pointerlockEnabled ||
              this.pointerLocked ||
              i ||
              (e.requestPointerLock
                ? e.requestPointerLock()
                : e.mozRequestPointerLock && e.mozRequestPointerLock());
        },
        onMouseUp: function() {
          this.mouseDown = !1;
        },
        onPointerLockChange: function() {
          this.pointerLocked = !(
            !document.pointerLockElement && !document.mozPointerLockElement
          );
        },
        onPointerLockError: function() {
          this.pointerLocked = !1;
        }
      });
  },
  function(t, e) {
    t.exports = {
      schema: { enabled: { default: !0 } },
      init: function() {
        (this.dVelocity = new THREE.Vector3()), this.bindMethods();
      },
      play: function() {
        this.addEventListeners();
      },
      pause: function() {
        this.removeEventListeners(), this.dVelocity.set(0, 0, 0);
      },
      remove: function() {
        this.pause();
      },
      addEventListeners: function() {
        var t = this.el.sceneEl,
          e = t.canvas;
        e
          ? (e.addEventListener('touchstart', this.onTouchStart),
            e.addEventListener('touchend', this.onTouchEnd))
          : t.addEventListener(
              'render-target-loaded',
              this.addEventListeners.bind(this)
            );
      },
      removeEventListeners: function() {
        var t = this.el.sceneEl && this.el.sceneEl.canvas;
        t &&
          (t.removeEventListener('touchstart', this.onTouchStart),
          t.removeEventListener('touchend', this.onTouchEnd));
      },
      isVelocityActive: function() {
        return this.data.enabled && this.isMoving;
      },
      getVelocityDelta: function() {
        return (
          (this.dVelocity.z = this.isMoving ? -1 : 0), this.dVelocity.clone()
        );
      },
      bindMethods: function() {
        (this.onTouchStart = this.onTouchStart.bind(this)),
          (this.onTouchEnd = this.onTouchEnd.bind(this));
      },
      onTouchStart: function(t) {
        (this.isMoving = !0), t.preventDefault();
      },
      onTouchEnd: function(t) {
        (this.isMoving = !1), t.preventDefault();
      }
    };
  },
  function(t, e) {
    var i = '-controls',
      n = Math.PI / 2;
    t.exports = {
      dependencies: ['velocity', 'rotation'],
      schema: {
        enabled: { default: !0 },
        movementEnabled: { default: !0 },
        movementControls: { default: ['gamepad', 'keyboard', 'touch', 'hmd'] },
        rotationEnabled: { default: !0 },
        rotationControls: { default: ['hmd', 'gamepad', 'mouse'] },
        movementSpeed: { default: 5 },
        movementEasing: { default: 15 },
        movementEasingY: { default: 0 },
        movementAcceleration: { default: 80 },
        rotationSensitivity: { default: 0.05 },
        fly: { default: !1 }
      },
      init: function() {
        var t = this.el.getAttribute('rotation');
        this.el.hasAttribute('look-controls') &&
          this.data.rotationEnabled &&
          console.error(
            '[universal-controls] The `universal-controls` component is a replacement for `look-controls`, and cannot be used in combination with it.'
          ),
          (this.velocity = new THREE.Vector3()),
          (this.pitch = new THREE.Object3D()),
          (this.pitch.rotation.x = THREE.Math.degToRad(t.x)),
          (this.yaw = new THREE.Object3D()),
          (this.yaw.position.y = 10),
          (this.yaw.rotation.y = THREE.Math.degToRad(t.y)),
          this.yaw.add(this.pitch),
          (this.heading = new THREE.Euler(0, 0, 0, 'YXZ')),
          this.el.sceneEl.hasLoaded
            ? this.injectControls()
            : this.el.sceneEl.addEventListener(
                'loaded',
                this.injectControls.bind(this)
              );
      },
      update: function() {
        this.el.sceneEl.hasLoaded && this.injectControls();
      },
      injectControls: function() {
        var t,
          e,
          n = this.data;
        for (t = 0; t < n.movementControls.length; t++)
          (e = n.movementControls[t] + i),
            this.el.components[e] || this.el.setAttribute(e, '');
        for (t = 0; t < n.rotationControls.length; t++)
          (e = n.rotationControls[t] + i),
            this.el.components[e] || this.el.setAttribute(e, '');
      },
      tick: function(t, e) {
        e &&
          (this.data.rotationEnabled && this.updateRotation(e),
          this.data.movementEnabled && e / 1e3 > 0.2
            ? (this.velocity.set(0, 0, 0),
              this.el.setAttribute('velocity', this.velocity))
            : this.updateVelocity(e));
      },
      updateRotation: function(t) {
        for (
          var e, r, o = this.data, s = 0, a = o.rotationControls.length;
          s < a;
          s++
        )
          if (
            (e = this.el.components[o.rotationControls[s] + i]) &&
            e.isRotationActive()
          ) {
            if (e.getRotationDelta)
              (r = e.getRotationDelta(t)).multiplyScalar(o.rotationSensitivity),
                (this.yaw.rotation.y -= r.x),
                (this.pitch.rotation.x -= r.y),
                (this.pitch.rotation.x = Math.max(
                  -n,
                  Math.min(n, this.pitch.rotation.x)
                )),
                this.el.setAttribute('rotation', {
                  x: THREE.Math.radToDeg(this.pitch.rotation.x),
                  y: THREE.Math.radToDeg(this.yaw.rotation.y),
                  z: 0
                });
            else {
              if (!e.getRotation)
                throw new Error(
                  'Incompatible rotation controls: %s',
                  o.rotationControls[s]
                );
              this.el.setAttribute('rotation', e.getRotation());
            }
            break;
          }
      },
      updateVelocity: function(t) {
        var e,
          n,
          r = this.velocity,
          o = this.data;
        if (o.movementEnabled)
          for (var s = 0, a = o.movementControls.length; s < a; s++)
            if (
              (e = this.el.components[o.movementControls[s] + i]) &&
              e.isVelocityActive()
            ) {
              if (!e.getVelocityDelta) {
                if (e.getVelocity)
                  return void this.el.setAttribute('velocity', e.getVelocity());
                if (e.getPositionDelta)
                  return (
                    r.copy(e.getPositionDelta(t).multiplyScalar(1e3 / t)),
                    void this.el.setAttribute('velocity', r)
                  );
                throw new Error(
                  'Incompatible movement controls: ',
                  o.movementControls[s]
                );
              }
              n = e.getVelocityDelta(t);
              break;
            }
        if (
          (r.copy(this.el.getAttribute('velocity')),
          (r.x -= r.x * o.movementEasing * t / 1e3),
          (r.y -= r.y * o.movementEasingY * t / 1e3),
          (r.z -= r.z * o.movementEasing * t / 1e3),
          n && o.movementEnabled)
        ) {
          n.length() > 1
            ? n.setLength(this.data.movementAcceleration * t / 1e3)
            : n.multiplyScalar(this.data.movementAcceleration * t / 1e3);
          var c = this.el.getAttribute('rotation');
          c &&
            (this.heading.set(
              o.fly ? THREE.Math.degToRad(c.x) : 0,
              THREE.Math.degToRad(c.y),
              0
            ),
            n.applyEuler(this.heading)),
            r.add(n);
        }
        this.el.setAttribute('velocity', r);
      }
    };
  },
  function(t, e, i) {
    t.exports = {
      'animation-mixer': i(100),
      'fbx-model': i(101),
      'gltf-model-legacy': i(103),
      'json-model': i(105),
      'object-model': i(106),
      'ply-model': i(107),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME).components['animation-mixer'] ||
            t.registerComponent('animation-mixer', this['animation-mixer']),
          t.systems['ply-model'] ||
            t.registerSystem('ply-model', this['ply-model'].System),
          t.components['ply-model'] ||
            t.registerComponent('ply-model', this['ply-model'].Component),
          t.components['fbx-model'] ||
            t.registerComponent('fbx-model', this['fbx-model']),
          t.components['gltf-model-legacy'] ||
            t.registerComponent('gltf-model-legacy', this['gltf-model-legacy']),
          t.components['json-model'] ||
            t.registerComponent('json-model', this['json-model']),
          t.components['object-model'] ||
            t.registerComponent('object-model', this['object-model']),
          (this._registered = !0));
      }
    };
  },
  function(t, e) {
    var i = {
      once: THREE.LoopOnce,
      repeat: THREE.LoopRepeat,
      pingpong: THREE.LoopPingPong
    };
    function n(t) {
      return t.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&');
    }
    t.exports = {
      schema: {
        clip: { default: '*' },
        duration: { default: 0 },
        crossFadeDuration: { default: 0 },
        loop: { default: 'repeat', oneOf: Object.keys(i) },
        repetitions: { default: 1 / 0, min: 0 }
      },
      init: function() {
        (this.model = null), (this.mixer = null), (this.activeActions = []);
        var t = this.el.getObject3D('mesh');
        t
          ? this.load(t)
          : this.el.addEventListener(
              'model-loaded',
              function(t) {
                this.load(t.detail.model);
              }.bind(this)
            );
      },
      load: function(t) {
        var e = this.el;
        (this.model = t),
          (this.mixer = new THREE.AnimationMixer(t)),
          this.mixer.addEventListener(
            'loop',
            function(t) {
              e.emit('animation-loop', {
                action: t.action,
                loopDelta: t.loopDelta
              });
            }.bind(this)
          ),
          this.mixer.addEventListener(
            'finished',
            function(t) {
              e.emit('animation-finished', {
                action: t.action,
                direction: t.direction
              });
            }.bind(this)
          ),
          this.data.clip && this.update({});
      },
      remove: function() {
        this.mixer && this.mixer.stopAllAction();
      },
      update: function(t) {
        t && (this.stopAction(), this.data.clip && this.playAction());
      },
      stopAction: function() {
        for (var t = this.data, e = 0; e < this.activeActions.length; e++)
          t.crossFadeDuration
            ? this.activeActions[e].fadeOut(t.crossFadeDuration)
            : this.activeActions[e].stop();
        this.activeActions.length = 0;
      },
      playAction: function() {
        if (this.mixer) {
          var t = this.model,
            e = this.data,
            r = t.animations || (t.geometry || {}).animations || [];
          if (r.length)
            for (
              var o,
                s,
                a = ((o = e.clip),
                new RegExp(
                  '^' +
                    o
                      .split(/\*+/)
                      .map(n)
                      .join('.*') +
                    '$'
                )),
                c = 0;
              (s = r[c]);
              c++
            )
              if (s.name.match(a)) {
                var l = this.mixer.clipAction(s, t);
                (l.enabled = !0),
                  e.duration && l.setDuration(e.duration),
                  l
                    .setLoop(i[e.loop], e.repetitions)
                    .fadeIn(e.crossFadeDuration)
                    .play(),
                  this.activeActions.push(l);
              }
        }
      },
      tick: function(t, e) {
        this.mixer && !isNaN(e) && this.mixer.update(e / 1e3);
      }
    };
  },
  function(t, e, i) {
    (THREE.FBXLoader = i(102)),
      (t.exports = {
        schema: { src: { type: 'asset' }, crossorigin: { default: '' } },
        init: function() {
          this.model = null;
        },
        update: function() {
          var t,
            e = this.data;
          e.src &&
            (this.remove(),
            (t = new THREE.FBXLoader()),
            e.crossorigin && t.setCrossOrigin(e.crossorigin),
            t.load(e.src, this.load.bind(this)));
        },
        load: function(t) {
          (this.model = t),
            this.el.setObject3D('mesh', t),
            this.el.emit('model-loaded', { format: 'fbx', model: t });
        },
        remove: function() {
          this.model && this.el.removeObject3D('mesh');
        }
      });
  },
  function(t, e) {
    !(function() {
      function e(t) {
        var e,
          i = t.properties.Content,
          n = t.properties.RelativeFilename || t.properties.Filename,
          r = n.slice(n.lastIndexOf('.') + 1).toLowerCase();
        switch (r) {
          case 'bmp':
            e = 'image/bmp';
            break;
          case 'jpg':
            e = 'image/jpeg';
            break;
          case 'png':
            e = 'image/png';
            break;
          case 'tif':
            e = 'image/tiff';
            break;
          default:
            return void console.warn('FBXLoader: No support image type ' + r);
        }
        if ('string' == typeof i) return 'data:' + e + ';base64,' + i;
        var o = new Uint8Array(i);
        return window.URL.createObjectURL(new Blob([o], { type: e }));
      }
      function i(t, e, i, n) {
        var r,
          o = t.id,
          s = t.name,
          a = t.properties.FileName,
          c = t.properties.RelativeFilename,
          l = n.get(o).children;
        if (void 0 !== l && l.length > 0 && i.has(l[0].ID)) r = i.get(l[0].ID);
        else if (void 0 !== c && '/' !== c[0] && null === c.match(/^[a-zA-Z]:/))
          r = c;
        else {
          var u = a.split(/[\\\/]/);
          r = u.length > 0 ? u[u.length - 1] : a;
        }
        var h = e.path;
        (0 !== r.indexOf('blob:') && 0 !== r.indexOf('data:')) ||
          e.setPath(void 0);
        var d = e.load(r);
        (d.name = s), (d.FBX_ID = o);
        var p = t.properties.WrapModeU,
          f = t.properties.WrapModeV,
          m = void 0 !== p ? p.value : 0,
          g = void 0 !== f ? f.value : 0;
        return (
          (d.wrapS =
            0 === m ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping),
          (d.wrapT =
            0 === g ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping),
          e.setPath(h),
          d
        );
      }
      function n(t, e, i) {
        var n = t.id,
          r = t.attrName,
          o = t.properties.ShadingModel;
        if (('object' == typeof o && (o = o.value), !i.has(n))) return null;
        var s,
          a = i.get(n).children,
          c = (function(t, e, i) {
            var n = {};
            t.Diffuse && (n.color = I(t.Diffuse));
            t.Specular && (n.specular = I(t.Specular));
            t.Shininess && (n.shininess = t.Shininess.value);
            t.Emissive && (n.emissive = I(t.Emissive));
            t.EmissiveFactor && (n.emissiveIntensity = t.EmissiveFactor.value);
            t.Opacity && (n.opacity = t.Opacity.value);
            n.opacity < 1 && (n.transparent = !0);
            for (var r = 0, o = i.length; r < o; ++r) {
              var s = i[r],
                a = s.relationship;
              switch (a) {
                case 'DiffuseColor':
                case ' "DiffuseColor':
                  n.map = e.get(s.ID);
                  break;
                case 'Bump':
                case ' "Bump':
                  n.bumpMap = e.get(s.ID);
                  break;
                case 'NormalMap':
                case ' "NormalMap':
                  n.normalMap = e.get(s.ID);
                  break;
                case 'AmbientColor':
                case 'EmissiveColor':
                case ' "AmbientColor':
                case ' "EmissiveColor':
                default:
                  console.warn(
                    'THREE.FBXLoader: Unknown texture application of type %s, skipping texture.',
                    a
                  );
              }
            }
            return n;
          })(t.properties, e, a);
        switch (o.toLowerCase()) {
          case 'phong':
            s = new THREE.MeshPhongMaterial();
            break;
          case 'lambert':
            s = new THREE.MeshLambertMaterial();
            break;
          default:
            console.warn(
              'THREE.FBXLoader: No implementation given for material type %s in FBXLoader.js. Defaulting to standard material.',
              o
            ),
              (s = new THREE.MeshStandardMaterial({ color: 3342591 }));
        }
        return s.setValues(c), (s.name = r), s;
      }
      function r(t, e) {
        for (var i = {}, n = t.children, r = 0, o = n.length; r < o; ++r) {
          var s = n[r],
            a = e[s.ID],
            c = {
              FBX_ID: s.ID,
              index: r,
              indices: [],
              weights: [],
              transform: j(a.subNodes.Transform.properties.a),
              transformLink: j(a.subNodes.TransformLink.properties.a),
              linkMode: a.properties.Mode
            };
          'Indexes' in a.subNodes &&
            ((c.indices = C(a.subNodes.Indexes.properties.a)),
            (c.weights = S(a.subNodes.Weights.properties.a))),
            (i[s.ID] = c);
        }
        return { map: i, bones: [] };
      }
      function o(t, e, i) {
        switch (t.attrType) {
          case 'Mesh':
            return (function(t, e, i) {
              for (var n = 0; n < e.children.length; ++n) {
                var r = i[e.children[n].ID];
                if (void 0 !== r) break;
              }
              return (function(t, e) {
                var i = new b(),
                  n = t.subNodes,
                  r = S(n.Vertices.properties.a),
                  o = C(n.PolygonVertexIndex.properties.a);
                if (n.LayerElementNormal)
                  var s = (function(t) {
                    var e = t.properties.MappingInformationType,
                      i = t.properties.ReferenceInformationType,
                      n = S(t.subNodes.Normals.properties.a),
                      r = [];
                    'IndexToDirect' === i &&
                      ('NormalIndex' in t.subNodes
                        ? (r = C(t.subNodes.NormalIndex.properties.a))
                        : 'NormalsIndex' in t.subNodes &&
                          (r = C(t.subNodes.NormalsIndex.properties.a)));
                    return {
                      dataSize: 3,
                      buffer: n,
                      indices: r,
                      mappingType: e,
                      referenceType: i
                    };
                  })(n.LayerElementNormal[0]);
                if (n.LayerElementUV)
                  var a = (function(t) {
                    var e = t.properties.MappingInformationType,
                      i = t.properties.ReferenceInformationType,
                      n = S(t.subNodes.UV.properties.a),
                      r = [];
                    'IndexToDirect' === i &&
                      (r = C(t.subNodes.UVIndex.properties.a));
                    return {
                      dataSize: 2,
                      buffer: n,
                      indices: r,
                      mappingType: e,
                      referenceType: i
                    };
                  })(n.LayerElementUV[0]);
                if (n.LayerElementColor)
                  var l = (function(t) {
                    var e = t.properties.MappingInformationType,
                      i = t.properties.ReferenceInformationType,
                      n = S(t.subNodes.Colors.properties.a),
                      r = [];
                    'IndexToDirect' === i &&
                      (r = S(t.subNodes.ColorIndex.properties.a));
                    return {
                      dataSize: 4,
                      buffer: n,
                      indices: r,
                      mappingType: e,
                      referenceType: i
                    };
                  })(n.LayerElementColor[0]);
                if (n.LayerElementMaterial)
                  var u = (function(t) {
                    var e = t.properties.MappingInformationType,
                      i = t.properties.ReferenceInformationType;
                    if ('NoMappingInformation' === e)
                      return {
                        dataSize: 1,
                        buffer: [0],
                        indices: [0],
                        mappingType: 'AllSame',
                        referenceType: i
                      };
                    for (
                      var n = C(t.subNodes.Materials.properties.a),
                        r = [],
                        o = 0,
                        s = n.length;
                      o < s;
                      ++o
                    )
                      r.push(o);
                    return {
                      dataSize: 1,
                      buffer: n,
                      indices: r,
                      mappingType: e,
                      referenceType: i
                    };
                  })(n.LayerElementMaterial[0]);
                var h = {};
                if (e) {
                  var d = e.map;
                  for (var p in d)
                    for (
                      var f = d[p], m = f.indices, g = 0;
                      g < m.length;
                      g++
                    ) {
                      var v = m[g],
                        y = f.weights[g];
                      void 0 === h[v] && (h[v] = []),
                        h[v].push({ id: f.index, weight: y });
                    }
                }
                for (var M = [], x = 0, A = !1, T = 0; T < o.length; T++) {
                  var L = o[T],
                    N = !1;
                  L < 0 && ((L ^= -1), (o[T] = L), (N = !0));
                  var D = new w(),
                    _ = [],
                    I = [];
                  if ((D.position.fromArray(r, 3 * L), e)) {
                    if (void 0 !== h[L])
                      for (var j = h[L], g = 0, O = j.length; g < O; g++)
                        I.push(j[g].weight), _.push(j[g].id);
                    if (I.length > 4) {
                      A ||
                        (console.warn(
                          'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.'
                        ),
                        (A = !0));
                      var R = [0, 0, 0, 0],
                        z = [0, 0, 0, 0];
                      I.forEach(function(t, e) {
                        var i = t,
                          n = _[e];
                        z.forEach(function(t, e, r) {
                          if (i > t) {
                            (r[e] = i), (i = t);
                            var o = R[e];
                            (R[e] = n), (n = o);
                          }
                        });
                      }),
                        (_ = R),
                        (I = z);
                    }
                    for (var k = I.length; k < 4; ++k) (I[k] = 0), (_[k] = 0);
                    D.skinWeights.fromArray(I), D.skinIndices.fromArray(_);
                  }
                  if (
                    (s && D.normal.fromArray(c(T, x, L, s)),
                    a && D.uv.fromArray(c(T, x, L, a)),
                    l && D.color.fromArray(c(T, x, L, l)),
                    M.push(D),
                    N)
                  ) {
                    var B = new E();
                    if ((B.genTrianglesFromVertices(M), void 0 !== u)) {
                      var P = c(T, x, L, u);
                      B.materialIndex = P[0];
                    } else B.materialIndex = 0;
                    i.faces.push(B), (M = []), x++, (N = !1);
                  }
                }
                var U = i.flattenToBuffers(),
                  F = new THREE.BufferGeometry();
                (F.name = t.name),
                  F.addAttribute(
                    'position',
                    new THREE.Float32BufferAttribute(U.vertexBuffer, 3)
                  ),
                  U.normalBuffer.length > 0 &&
                    F.addAttribute(
                      'normal',
                      new THREE.Float32BufferAttribute(U.normalBuffer, 3)
                    );
                U.uvBuffer.length > 0 &&
                  F.addAttribute(
                    'uv',
                    new THREE.Float32BufferAttribute(U.uvBuffer, 2)
                  );
                n.LayerElementColor &&
                  F.addAttribute(
                    'color',
                    new THREE.Float32BufferAttribute(U.colorBuffer, 3)
                  );
                e &&
                  (F.addAttribute(
                    'skinIndex',
                    new THREE.Float32BufferAttribute(U.skinIndexBuffer, 4)
                  ),
                  F.addAttribute(
                    'skinWeight',
                    new THREE.Float32BufferAttribute(U.skinWeightBuffer, 4)
                  ),
                  (F.FBX_Deformer = e));
                for (
                  var H = U.materialIndexBuffer, V = H[0], G = 0, k = 0;
                  k < H.length;
                  ++k
                )
                  H[k] !== V && (F.addGroup(G, k - G, V), (V = H[k]), (G = k));
                return F;
              })(t, r);
            })(t, e, i);
          case 'NurbsCurve':
            return (function(t) {
              if (void 0 === THREE.NURBSCurve)
                return (
                  console.error(
                    'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.'
                  ),
                  new THREE.BufferGeometry()
                );
              var e = parseInt(t.properties.Order);
              if (isNaN(e))
                return (
                  console.error(
                    'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s',
                    t.properties.Order,
                    t.id
                  ),
                  new THREE.BufferGeometry()
                );
              for (
                var i,
                  n,
                  r = e - 1,
                  o = S(t.subNodes.KnotVector.properties.a),
                  s = [],
                  a = S(t.subNodes.Points.properties.a),
                  c = 0,
                  l = a.length;
                c < l;
                c += 4
              )
                s.push(new THREE.Vector4().fromArray(a, c));
              if ('Closed' === t.properties.Form) s.push(s[0]);
              else if ('Periodic' === t.properties.Form) {
                (i = r), (n = o.length - 1 - i);
                for (var c = 0; c < r; ++c) s.push(s[c]);
              }
              for (
                var u = new THREE.NURBSCurve(r, o, s, i, n).getPoints(
                    7 * s.length
                  ),
                  h = new Float32Array(3 * u.length),
                  c = 0,
                  l = u.length;
                c < l;
                ++c
              )
                u[c].toArray(h, 3 * c);
              var d = new THREE.BufferGeometry();
              return (
                d.addAttribute('position', new THREE.BufferAttribute(h, 3)), d
              );
            })(t);
        }
      }
      (t.exports = THREE.FBXLoader = function(t) {
        this.manager = void 0 !== t ? t : THREE.DefaultLoadingManager;
      }),
        Object.assign(THREE.FBXLoader.prototype, {
          load: function(t, e, i, n) {
            var r = this,
              o = THREE.Loader.prototype.extractUrlBase(t),
              s = new THREE.FileLoader(this.manager);
            s.setResponseType('arraybuffer'),
              s.load(
                t,
                function(i) {
                  try {
                    var s = r.parse(i, o);
                    e(s);
                  } catch (e) {
                    window.setTimeout(function() {
                      n && n(e), r.manager.itemError(t);
                    }, 0);
                  }
                },
                i,
                n
              );
          },
          parse: function(t, s) {
            var a, c, h;
            if (
              ((h = 'Kaydara FBX Binary  \0'),
              (c = t).byteLength >= h.length && h === O(c, 0, h.length))
            )
              a = new A().parse(t);
            else {
              var d = O(t);
              if (
                !(function(t) {
                  var e = [
                      'K',
                      'a',
                      'y',
                      'd',
                      'a',
                      'r',
                      'a',
                      '\\',
                      'F',
                      'B',
                      'X',
                      '\\',
                      'B',
                      'i',
                      'n',
                      'a',
                      'r',
                      'y',
                      '\\',
                      '\\'
                    ],
                    i = 0;
                  function n(e) {
                    var n = t[e - 1];
                    return (t = t.slice(i + e)), i++, n;
                  }
                  for (var r = 0; r < e.length; ++r) {
                    var o = n(1);
                    if (o === e[r]) return !1;
                  }
                  return !0;
                })(d)
              )
                throw new Error('THREE.FBXLoader: Unknown format.');
              if (N(d) < 7e3)
                throw new Error(
                  'THREE.FBXLoader: FBX version not supported, FileVersion: ' +
                    N(d)
                );
              a = new x().parse(d);
            }
            var p = (function(t) {
                var e = new Map();
                if ('Connections' in t)
                  for (
                    var i = t.Connections.properties.connections,
                      n = 0,
                      r = i.length;
                    n < r;
                    ++n
                  ) {
                    var o = i[n];
                    e.has(o[0]) || e.set(o[0], { parents: [], children: [] });
                    var s = { ID: o[1], relationship: o[2] };
                    e.get(o[0]).parents.push(s),
                      e.has(o[1]) || e.set(o[1], { parents: [], children: [] });
                    var a = { ID: o[0], relationship: o[2] };
                    e.get(o[1]).children.push(a);
                  }
                return e;
              })(a),
              f = (function(t) {
                var i = new Map();
                if ('Video' in t.Objects.subNodes) {
                  var n = t.Objects.subNodes.Video;
                  for (var r in n) {
                    var o = n[r];
                    if ('Content' in o.properties) {
                      var s = e(n[r]);
                      i.set(parseInt(r), s);
                    }
                  }
                }
                return i;
              })(a),
              g = (function(t, e, i) {
                var r = new Map();
                if ('Material' in t.Objects.subNodes) {
                  var o = t.Objects.subNodes.Material;
                  for (var s in o) {
                    var a = n(o[s], e, i);
                    null !== a && r.set(parseInt(s), a);
                  }
                }
                return r;
              })(
                a,
                (function(t, e, n, r) {
                  var o = new Map();
                  if ('Texture' in t.Objects.subNodes) {
                    var s = t.Objects.subNodes.Texture;
                    for (var a in s) {
                      var c = i(s[a], e, n, r);
                      o.set(parseInt(a), c);
                    }
                  }
                  return o;
                })(a, new THREE.TextureLoader(this.manager).setPath(s), f, p),
                p
              ),
              v = (function(t, e) {
                var i = {};
                if ('Deformer' in t.Objects.subNodes) {
                  var n = t.Objects.subNodes.Deformer;
                  for (var o in n) {
                    var s = n[o];
                    if ('Skin' === s.attrType) {
                      var a = e.get(parseInt(o)),
                        c = r(a, n);
                      (c.FBX_ID = parseInt(o)), (i[o] = c);
                    }
                  }
                }
                return i;
              })(a, p);
            return (function(t, e, i, n, r) {
              var o = new THREE.Group(),
                s = t.Objects.subNodes.Model,
                a = [],
                c = new Map();
              for (var h in s) {
                for (
                  var d = parseInt(h), p = s[h], f = e.get(d), g = null, v = 0;
                  v < f.parents.length;
                  ++v
                )
                  for (var y in i) {
                    var w = i[y],
                      M = w.map,
                      E = M[f.parents[v].ID];
                    if (E) {
                      var b = g;
                      (g = new THREE.Bone()),
                        (w.bones[E.index] = g),
                        null !== b && g.add(b);
                    }
                  }
                if (!g)
                  switch (p.attrType) {
                    case 'Mesh':
                      for (
                        var x = null,
                          A = null,
                          T = [],
                          L = 0,
                          N = f.children.length;
                        L < N;
                        ++L
                      ) {
                        var I = f.children[L];
                        n.has(I.ID) && (x = n.get(I.ID)),
                          r.has(I.ID) && T.push(r.get(I.ID));
                      }
                      if (
                        (T.length > 1
                          ? (A = T)
                          : T.length > 0
                            ? (A = T[0])
                            : ((A = new THREE.MeshStandardMaterial({
                                color: 3342591
                              })),
                              T.push(A)),
                        'color' in x.attributes)
                      )
                        for (var O = 0, B = T.length; O < B; ++O)
                          T[O].vertexColors = THREE.VertexColors;
                      if (x.FBX_Deformer) {
                        for (var P = 0, U = T.length; P < U; ++P)
                          T[P].skinning = !0;
                        g = new THREE.SkinnedMesh(x, A);
                      } else g = new THREE.Mesh(x, A);
                      break;
                    case 'NurbsCurve':
                      for (
                        var x = null, L = 0, N = f.children.length;
                        L < N;
                        ++L
                      ) {
                        var I = f.children[L];
                        n.has(I.ID) && (x = n.get(I.ID));
                      }
                      (A = new THREE.LineBasicMaterial({
                        color: 3342591,
                        linewidth: 5
                      })),
                        (g = new THREE.Line(x, A));
                      break;
                    default:
                      g = new THREE.Object3D();
                  }
                (g.name = p.attrName
                  .replace(/:/, '')
                  .replace(/_/, '')
                  .replace(/-/, '')),
                  (g.FBX_ID = d),
                  a.push(g),
                  c.set(d, g);
              }
              for (var F = 0, H = a.length; F < H; ++F) {
                var g = a[F],
                  p = s[g.FBX_ID];
                if (
                  ('Lcl_Translation' in p.properties &&
                    g.position.fromArray(S(p.properties.Lcl_Translation.value)),
                  'Lcl_Rotation' in p.properties)
                ) {
                  var V = S(p.properties.Lcl_Rotation.value).map(R);
                  V.push('ZYX'), g.rotation.fromArray(V);
                }
                if (
                  ('Lcl_Scaling' in p.properties &&
                    g.scale.fromArray(S(p.properties.Lcl_Scaling.value)),
                  'PreRotation' in p.properties)
                ) {
                  var G = new THREE.Euler().setFromVector3(
                    _(p.properties.PreRotation).multiplyScalar(z),
                    'ZYX'
                  );
                  G = new THREE.Quaternion().setFromEuler(G);
                  var Y = new THREE.Quaternion().setFromEuler(g.rotation);
                  G.multiply(Y), g.rotation.setFromQuaternion(G, 'ZYX');
                }
                for (
                  var f = e.get(g.FBX_ID), Q = 0;
                  Q < f.parents.length;
                  Q++
                ) {
                  var W = k(a, function(t) {
                    return t.FBX_ID === f.parents[Q].ID;
                  });
                  if (W > -1) {
                    a[W].add(g);
                    break;
                  }
                }
                null === g.parent && o.add(g);
              }
              o.updateMatrixWorld(!0);
              var q = t.Objects.subNodes.Pose;
              for (var h in q)
                if ('BindPose' === q[h].attrType) {
                  q = q[h];
                  break;
                }
              if (q)
                for (
                  var X = q.subNodes.PoseNode,
                    K = new Map(),
                    Z = 0,
                    J = X.length;
                  Z < J;
                  ++Z
                ) {
                  var p = X[Z],
                    $ = j(p.subNodes.Matrix.properties.a);
                  K.set(parseInt(p.id), $);
                }
              for (var y in i) {
                var w = i[y],
                  M = w.map;
                for (var tt in M) {
                  var E = M[tt],
                    et = E.index,
                    it = w.bones[et];
                  if (!K.has(it.FBX_ID)) break;
                  var nt = K.get(it.FBX_ID);
                  it.matrixWorld.copy(nt);
                }
                w.skeleton = new THREE.Skeleton(w.bones);
                for (
                  var f = e.get(w.FBX_ID),
                    rt = f.parents,
                    ot = 0,
                    st = rt.length;
                  ot < st;
                  ++ot
                ) {
                  var at = rt[ot];
                  if (n.has(at.ID))
                    for (
                      var ct = at.ID, lt = e.get(ct), v = 0;
                      v < lt.parents.length;
                      ++v
                    )
                      if (c.has(lt.parents[v].ID)) {
                        var g = c.get(lt.parents[v].ID);
                        g.bind(w.skeleton, g.matrixWorld);
                        break;
                      }
                }
              }
              o.updateMatrixWorld(!0), (o.skeleton = { bones: a });
              var ut = (function(t, e, i) {
                var n = t.Objects.subNodes.AnimationCurveNode,
                  r = t.Objects.subNodes.AnimationCurve,
                  o = t.Objects.subNodes.AnimationLayer,
                  s = t.Objects.subNodes.AnimationStack,
                  a = {
                    curves: new Map(),
                    layers: {},
                    stacks: {},
                    length: 0,
                    fps: 30,
                    frames: 0
                  },
                  c = [];
                for (var h in n)
                  if (h.match(/\d+/)) {
                    var d = l(t, n[h], e, i);
                    c.push(d);
                  }
                for (var p = new Map(), f = 0; f < c.length; ++f)
                  null !== c[f] && p.set(c[f].id, c[f]);
                var m = [];
                for (h in r)
                  if (h.match(/\d+/)) {
                    var g = {
                      version: null,
                      id: (E = r[h]).id,
                      internalID: E.id,
                      times: S(E.subNodes.KeyTime.properties.a).map(D),
                      values: S(E.subNodes.KeyValueFloat.properties.a),
                      attrFlag: C(E.subNodes.KeyAttrFlags.properties.a),
                      attrData: S(E.subNodes.KeyAttrDataFloat.properties.a)
                    };
                    if (!e.has(g.id)) continue;
                    m.push(g);
                    var v = e.get(g.id).parents[0],
                      y = v.ID,
                      w = v.relationship,
                      M = '';
                    if (w.match(/X/)) M = 'x';
                    else if (w.match(/Y/)) M = 'y';
                    else {
                      if (!w.match(/Z/)) continue;
                      M = 'z';
                    }
                    p.get(y).curves[M] = g;
                  }
                var E;
                p.forEach(function(t) {
                  var e = t.containerBoneID;
                  if (
                    (a.curves.has(e) ||
                      a.curves.set(e, { T: null, R: null, S: null }),
                    (a.curves.get(e)[t.attr] = t),
                    'R' === t.attr)
                  ) {
                    var i = t.curves;
                    if (
                      (null === i.x &&
                        (i.x = { version: null, times: [0], values: [0] }),
                      null === i.y &&
                        (i.y = { version: null, times: [0], values: [0] }),
                      null === i.z &&
                        (i.z = { version: null, times: [0], values: [0] }),
                      (i.x.values = i.x.values.map(R)),
                      (i.y.values = i.y.values.map(R)),
                      (i.z.values = i.z.values.map(R)),
                      null !== t.preRotations)
                    ) {
                      var n = new THREE.Euler().setFromVector3(
                        t.preRotations,
                        'ZYX'
                      );
                      n = new THREE.Quaternion().setFromEuler(n);
                      for (
                        var r = new THREE.Euler(),
                          o = new THREE.Quaternion(),
                          s = 0;
                        s < i.x.times.length;
                        ++s
                      )
                        r.set(
                          i.x.values[s],
                          i.y.values[s],
                          i.z.values[s],
                          'ZYX'
                        ),
                          o.setFromEuler(r).premultiply(n),
                          r.setFromQuaternion(o, 'ZYX'),
                          (i.x.values[s] = r.x),
                          (i.y.values[s] = r.y),
                          (i.z.values[s] = r.z);
                    }
                  }
                });
                for (var h in o) {
                  for (
                    var b = [], x = e.get(parseInt(h)).children, A = 0;
                    A < x.length;
                    A++
                  )
                    if (p.has(x[A].ID)) {
                      var T = p.get(x[A].ID),
                        L = T.containerBoneID;
                      void 0 === b[L] && (b[L] = { T: null, R: null, S: null }),
                        (b[L][T.attr] = T);
                    }
                  a.layers[h] = b;
                }
                for (var h in s) {
                  for (
                    var N = [],
                      x = e.get(parseInt(h)).children,
                      _ = { max: 0, min: Number.MAX_VALUE },
                      A = 0;
                    A < x.length;
                    ++A
                  ) {
                    var I = a.layers[x[A].ID];
                    if (void 0 !== I) {
                      N.push(I);
                      for (var j = 0, O = I.length; j < O; ++j) {
                        var b = I[j];
                        b && u(b, _);
                      }
                    }
                  }
                  _.max > _.min &&
                    (a.stacks[h] = {
                      name: s[h].attrName,
                      layers: N,
                      length: _.max - _.min,
                      frames: 30 * (_.max - _.min)
                    });
                }
                return a;
              })(t, e, o);
              return (
                (function(t, e) {
                  void 0 === t.animations && (t.animations = []);
                  var i = e.stacks;
                  for (var n in i) {
                    for (
                      var r = i[n],
                        o = {
                          name: r.name,
                          fps: 30,
                          length: r.length,
                          hierarchy: []
                        },
                        s = t.skeleton.bones,
                        a = 0,
                        c = s.length;
                      a < c;
                      ++a
                    ) {
                      var l = s[a],
                        u = l.name.replace(/.*:/, ''),
                        h = k(s, function(t) {
                          return l.parent === t;
                        });
                      o.hierarchy.push({ parent: h, name: u, keys: [] });
                    }
                    for (var d = 0; d <= r.frames; d++)
                      for (var a = 0, c = s.length; a < c; ++a)
                        for (
                          var l = s[a],
                            p = a,
                            f = r.layers[0][p],
                            g = 0,
                            v = o.hierarchy.length;
                          g < v;
                          ++g
                        ) {
                          var y = o.hierarchy[g];
                          y.name === l.name && y.keys.push(m(e, f, l, d));
                        }
                    t.animations.push(THREE.AnimationClip.parseAnimation(o, s));
                  }
                })(o, ut),
                o
              );
            })(
              a,
              p,
              v,
              (function(t, e, i) {
                var n = new Map();
                if ('Geometry' in t.Objects.subNodes) {
                  var r = t.Objects.subNodes.Geometry;
                  for (var s in r) {
                    var a = e.get(parseInt(s)),
                      c = o(r[s], a, i);
                    n.set(parseInt(s), c);
                  }
                }
                return n;
              })(a, p, v),
              g
            );
          }
        });
      var s = [],
        a = {
          ByPolygonVertex: {
            Direct: function(t, e, i, n) {
              var r = t * n.dataSize,
                o = t * n.dataSize + n.dataSize;
              return P(s, n.buffer, r, o);
            },
            IndexToDirect: function(t, e, i, n) {
              var r = n.indices[t],
                o = r * n.dataSize,
                a = r * n.dataSize + n.dataSize;
              return P(s, n.buffer, o, a);
            }
          },
          ByPolygon: {
            Direct: function(t, e, i, n) {
              var r = e * n.dataSize,
                o = e * n.dataSize + n.dataSize;
              return P(s, n.buffer, r, o);
            },
            IndexToDirect: function(t, e, i, n) {
              var r = n.indices[e],
                o = r * n.dataSize,
                a = r * n.dataSize + n.dataSize;
              return P(s, n.buffer, o, a);
            }
          },
          ByVertice: {
            Direct: function(t, e, i, n) {
              var r = i * n.dataSize,
                o = i * n.dataSize + n.dataSize;
              return P(s, n.buffer, r, o);
            }
          },
          AllSame: {
            IndexToDirect: function(t, e, i, n) {
              var r = n.indices[0] * n.dataSize,
                o = n.indices[0] * n.dataSize + n.dataSize;
              return P(s, n.buffer, r, o);
            }
          }
        };
      function c(t, e, i, n) {
        return a[n.mappingType][n.referenceType](t, e, i, n);
      }
      function l(t, e, i, n) {
        var r = t.Objects.subNodes.Model,
          o = {
            id: e.id,
            attr: e.attrName,
            internalID: e.id,
            attrX: !1,
            attrY: !1,
            attrZ: !1,
            containerBoneID: -1,
            containerID: -1,
            curves: { x: null, y: null, z: null },
            preRotations: null
          };
        if (!o.attr.match(/S|R|T/)) return null;
        for (var s in e.properties)
          s.match(/X/) && (o.attrX = !0),
            s.match(/Y/) && (o.attrY = !0),
            s.match(/Z/) && (o.attrZ = !0);
        for (var a = i.get(o.id).parents, c = a.length - 1; c >= 0; --c) {
          var l = k(n.skeleton.bones, function(t) {
            return t.FBX_ID === a[c].ID;
          });
          if (l > -1) {
            (o.containerBoneID = l), (o.containerID = a[c].ID);
            var u = r[o.containerID.toString()];
            'PreRotation' in u.properties &&
              (o.preRotations = _(u.properties.PreRotation).multiplyScalar(
                Math.PI / 180
              ));
            break;
          }
        }
        return o;
      }
      function u(t, e) {
        t.R && h(t.R.curves, e),
          t.S && h(t.S.curves, e),
          t.T && h(t.T.curves, e);
      }
      function h(t, e) {
        t.x && d(t.x, e), t.y && d(t.y, e), t.z && d(t.z, e);
      }
      function d(t, e) {
        (e.max =
          t.times[t.times.length - 1] > e.max
            ? t.times[t.times.length - 1]
            : e.max),
          (e.min = t.times[0] < e.min ? t.times[0] : e.min);
      }
      var p = new THREE.Euler(),
        f = new THREE.Quaternion();
      function m(t, e, i, n) {
        var r = {
          time: n / t.fps,
          pos: i.position.toArray(),
          rot: i.quaternion.toArray(),
          scl: i.scale.toArray()
        };
        if (void 0 === e) return r;
        try {
          if (
            (v(e, 'T') &&
              y(e.T, n) &&
              (r.pos = [
                e.T.curves.x.values[n],
                e.T.curves.y.values[n],
                e.T.curves.z.values[n]
              ]),
            v(e, 'R') && y(e.R, n))
          ) {
            var o = e.R.curves.x.values[n],
              s = e.R.curves.y.values[n],
              a = e.R.curves.z.values[n];
            f.setFromEuler(p.set(o, s, a, 'ZYX')), (r.rot = f.toArray());
          }
          v(e, 'S') &&
            y(e.S, n) &&
            (r.scl = [
              e.S.curves.x.values[n],
              e.S.curves.y.values[n],
              e.S.curves.z.values[n]
            ]);
        } catch (t) {
          console.log('THREE.FBXLoader: ', i),
            console.log('THREE.FBXLoader: ', t);
        }
        return r;
      }
      var g = ['x', 'y', 'z'];
      function v(t, e) {
        if (void 0 === t) return !1;
        var i = t[e];
        return (
          !!i &&
          g.every(function(t) {
            return null !== i.curves[t];
          })
        );
      }
      function y(t, e) {
        return g.every(function(i) {
          return (n = t.curves[i]), (r = e), void 0 !== n.values[r];
          var n, r;
        });
      }
      function w() {
        (this.position = new THREE.Vector3()),
          (this.normal = new THREE.Vector3()),
          (this.uv = new THREE.Vector2()),
          (this.color = new THREE.Vector3()),
          (this.skinIndices = new THREE.Vector4(0, 0, 0, 0)),
          (this.skinWeights = new THREE.Vector4(0, 0, 0, 0));
      }
      function M() {
        this.vertices = [];
      }
      function E() {
        (this.triangles = []), (this.materialIndex = 0);
      }
      function b() {
        (this.faces = []), (this.skeleton = null);
      }
      function x() {}
      function A() {}
      function T(t, e) {
        (this.dv = new DataView(t)),
          (this.offset = 0),
          (this.littleEndian = void 0 === e || e);
      }
      function L() {}
      function N(t) {
        var e = t.match(/FBXVersion: (\d+)/);
        if (e) return parseInt(e[1]);
        throw new Error(
          'THREE.FBXLoader: Cannot find the version number for the file given.'
        );
      }
      function D(t) {
        return t / 46186158e3;
      }
      function S(t) {
        for (var e = t.split(','), i = 0, n = e.length; i < n; i++)
          e[i] = parseFloat(e[i]);
        return e;
      }
      function C(t) {
        for (var e = t.split(','), i = 0, n = e.length; i < n; i++)
          e[i] = parseInt(e[i]);
        return e;
      }
      function _(t) {
        return new THREE.Vector3().fromArray(t.value);
      }
      function I(t) {
        return new THREE.Color().fromArray(t.value);
      }
      function j(t) {
        return new THREE.Matrix4().fromArray(S(t));
      }
      function O(t, e, i) {
        void 0 === e && (e = 0), void 0 === i && (i = t.byteLength);
        var n = new Uint8Array(t, e, i);
        if (void 0 !== window.TextDecoder) return new TextDecoder().decode(n);
        for (var r = '', o = 0, s = n.length; o < s; o++)
          r += String.fromCharCode(n[o]);
        return r;
      }
      function R(t) {
        return t * z;
      }
      Object.assign(w.prototype, {
        copy: function(t) {
          var e = t || new w();
          return (
            e.position.copy(this.position),
            e.normal.copy(this.normal),
            e.uv.copy(this.uv),
            e.skinIndices.copy(this.skinIndices),
            e.skinWeights.copy(this.skinWeights),
            e
          );
        },
        flattenToBuffers: function(t, e, i, n, r, o) {
          this.position.toArray(t, t.length),
            this.normal.toArray(e, e.length),
            this.uv.toArray(i, i.length),
            this.color.toArray(n, n.length),
            this.skinIndices.toArray(r, r.length),
            this.skinWeights.toArray(o, o.length);
        }
      }),
        Object.assign(M.prototype, {
          copy: function(t) {
            for (var e = t || new M(), i = 0; i < this.vertices.length; ++i)
              this.vertices[i].copy(e.vertices[i]);
            return e;
          },
          flattenToBuffers: function(t, e, i, n, r, o) {
            for (var s = this.vertices, a = 0, c = s.length; a < c; ++a)
              s[a].flattenToBuffers(t, e, i, n, r, o);
          }
        }),
        Object.assign(E.prototype, {
          copy: function(t) {
            for (var e = t || new E(), i = 0; i < this.triangles.length; ++i)
              this.triangles[i].copy(e.triangles[i]);
            return (e.materialIndex = this.materialIndex), e;
          },
          genTrianglesFromVertices: function(t) {
            for (var e = 2; e < t.length; ++e) {
              var i = new M();
              (i.vertices[0] = t[0]),
                (i.vertices[1] = t[e - 1]),
                (i.vertices[2] = t[e]),
                this.triangles.push(i);
            }
          },
          flattenToBuffers: function(t, e, i, n, r, o, s) {
            for (
              var a = this.triangles,
                c = this.materialIndex,
                l = 0,
                u = a.length;
              l < u;
              ++l
            )
              a[l].flattenToBuffers(t, e, i, n, r, o), B(s, [c, c, c]);
          }
        }),
        Object.assign(b.prototype, {
          flattenToBuffers: function() {
            for (
              var t = [],
                e = [],
                i = [],
                n = [],
                r = [],
                o = [],
                s = [],
                a = this.faces,
                c = 0,
                l = a.length;
              c < l;
              ++c
            )
              a[c].flattenToBuffers(t, e, i, n, r, o, s);
            return {
              vertexBuffer: t,
              normalBuffer: e,
              uvBuffer: i,
              colorBuffer: n,
              skinIndexBuffer: r,
              skinWeightBuffer: o,
              materialIndexBuffer: s
            };
          }
        }),
        Object.assign(x.prototype, {
          getPrevNode: function() {
            return this.nodeStack[this.currentIndent - 2];
          },
          getCurrentNode: function() {
            return this.nodeStack[this.currentIndent - 1];
          },
          getCurrentProp: function() {
            return this.currentProp;
          },
          pushStack: function(t) {
            this.nodeStack.push(t), (this.currentIndent += 1);
          },
          popStack: function() {
            this.nodeStack.pop(), (this.currentIndent -= 1);
          },
          setCurrentProp: function(t, e) {
            (this.currentProp = t), (this.currentPropName = e);
          },
          parse: function(t) {
            (this.currentIndent = 0),
              (this.allNodes = new L()),
              (this.nodeStack = []),
              (this.currentProp = []),
              (this.currentPropName = '');
            for (var e = t.split('\n'), i = 0, n = e.length; i < n; i++) {
              if (!(c = e[i]).match(/^[\s\t]*;/) && !c.match(/^[\s\t]*$/)) {
                var r = new RegExp(
                  '^\\t{' + this.currentIndent + '}(\\w+):(.*){',
                  ''
                );
                if ((l = c.match(r))) {
                  for (
                    var o = l[1]
                        .trim()
                        .replace(/^"/, '')
                        .replace(/"$/, ''),
                      s = l[2].split(','),
                      a = 0,
                      c = s.length;
                    a < c;
                    a++
                  )
                    s[a] = s[a]
                      .trim()
                      .replace(/^"/, '')
                      .replace(/"$/, '');
                  this.parseNodeBegin(c, o, s || null);
                } else {
                  var l,
                    u = new RegExp(
                      '^\\t{' +
                        this.currentIndent +
                        '}(\\w+):[\\s\\t\\r\\n](.*)'
                    );
                  if ((l = c.match(u))) {
                    var h = l[1]
                        .replace(/^"/, '')
                        .replace(/"$/, '')
                        .trim(),
                      d = l[2]
                        .replace(/^"/, '')
                        .replace(/"$/, '')
                        .trim();
                    'Content' === h &&
                      ',' === d &&
                      (d = e[++i].replace(/"/g, '').trim()),
                      this.parseNodeProperty(c, h, d);
                  } else {
                    var p = new RegExp(
                      '^\\t{' + (this.currentIndent - 1) + '}}'
                    );
                    c.match(p)
                      ? this.nodeEnd()
                      : c.match(/^[^\s\t}]/) &&
                        this.parseNodePropertyContinued(c);
                  }
                }
              }
            }
            return this.allNodes;
          },
          parseNodeBegin: function(t, e, i) {
            var n = { name: e, properties: {}, subNodes: {} },
              r = this.parseNodeAttr(i),
              o = this.getCurrentNode();
            if (0 === this.currentIndent) this.allNodes.add(e, n);
            else if (e in o.subNodes) {
              var s = o.subNodes[e];
              this.isFlattenNode(o.subNodes[e]) &&
                ('' === r.id
                  ? ((o.subNodes[e] = []), o.subNodes[e].push(s))
                  : ((o.subNodes[e] = {}), (o.subNodes[e][s.id] = s))),
                '' === r.id ? o.subNodes[e].push(n) : (o.subNodes[e][r.id] = n);
            } else
              'number' == typeof r.id || r.id.match(/^\d+$/)
                ? ((o.subNodes[e] = {}), (o.subNodes[e][r.id] = n))
                : (o.subNodes[e] = n);
            i && ((n.id = r.id), (n.attrName = r.name), (n.attrType = r.type)),
              this.pushStack(n);
          },
          parseNodeAttr: function(t) {
            var e = t[0];
            '' !== t[0] && ((e = parseInt(t[0])), isNaN(e) && (e = t[0]));
            var i = '',
              n = '';
            return (
              t.length > 1 && ((i = t[1].replace(/^(\w+)::/, '')), (n = t[2])),
              { id: e, name: i, type: n }
            );
          },
          parseNodeProperty: function(t, e, i) {
            var n = this.getCurrentNode(),
              r = n.name;
            if (void 0 !== r && r.match(/Properties(\d)+/))
              return void this.parseNodeSpecialProperty(t, e, i);
            if ('C' === e) {
              var o = i.split(',').slice(1),
                s = parseInt(o[0]),
                a = parseInt(o[1]),
                c = i.split(',').slice(3);
              (e = 'connections'),
                B((i = [s, a]), c),
                void 0 === n.properties[e] && (n.properties[e] = []);
            }
            if ('Node' === e) {
              var l = parseInt(i);
              (n.properties.id = l), (n.id = l);
            }
            e in n.properties
              ? Array.isArray(n.properties[e])
                ? n.properties[e].push(i)
                : (n.properties[e] += i)
              : Array.isArray(n.properties[e])
                ? n.properties[e].push(i)
                : (n.properties[e] = i),
              this.setCurrentProp(n.properties, e);
          },
          parseNodePropertyContinued: function(t) {
            this.currentProp[this.currentPropName] += t;
          },
          parseNodeSpecialProperty: function(t, e, i) {
            for (var n = i.split('",'), r = 0, o = n.length; r < o; r++)
              n[r] = n[r]
                .trim()
                .replace(/^\"/, '')
                .replace(/\s/, '_');
            var s = n[0],
              a = n[1],
              c = n[2],
              l = n[3],
              u = n[4];
            switch (a) {
              case 'int':
                u = parseInt(u);
                break;
              case 'double':
                u = parseFloat(u);
                break;
              case 'ColorRGB':
              case 'Vector3D':
                u = S(u);
            }
            (this.getPrevNode().properties[s] = {
              type: a,
              type2: c,
              flag: l,
              value: u
            }),
              this.setCurrentProp(this.getPrevNode().properties, s);
          },
          nodeEnd: function() {
            this.popStack();
          },
          isFlattenNode: function(t) {
            return 'subNodes' in t && 'properties' in t;
          }
        }),
        Object.assign(A.prototype, {
          parse: function(t) {
            var e = new T(t);
            e.skip(23);
            var i = e.getUint32();
            console.log('THREE.FBXLoader: FBX binary version: ' + i);
            for (var n = new L(); !this.endOfContent(e); ) {
              var r = this.parseNode(e, i);
              null !== r && n.add(r.name, r);
            }
            return n;
          },
          endOfContent: function(t) {
            return t.size() % 16 == 0
              ? ((t.getOffset() + 160 + 16) & -16) >= t.size()
              : t.getOffset() + 160 + 16 >= t.size();
          },
          parseNode: function(t, e) {
            var i = e >= 7500 ? t.getUint64() : t.getUint32(),
              n = e >= 7500 ? t.getUint64() : t.getUint32(),
              r = (e >= 7500 ? t.getUint64() : t.getUint32(), t.getUint8()),
              o = t.getString(r);
            if (0 === i) return null;
            for (var s = [], a = 0; a < n; a++) s.push(this.parseProperty(t));
            var c = s.length > 0 ? s[0] : '',
              l = s.length > 1 ? s[1] : '',
              u = s.length > 2 ? s[2] : '',
              h = {},
              d = {},
              p = !1;
            for (
              1 === n && t.getOffset() === i && (p = !0);
              i > t.getOffset();

            ) {
              var f = this.parseNode(t, e);
              if (null !== f)
                if (!0 !== f.singleProperty)
                  if ('Connections' !== o || 'C' !== f.name)
                    if (f.name.match(/^Properties\d+$/)) {
                      var m = Object.keys(f.properties);
                      for (a = 0, x = m.length; a < x; a++) {
                        var g = m[a];
                        d[g] = f.properties[g];
                      }
                    } else if (o.match(/^Properties\d+$/) && 'P' === f.name) {
                      var v,
                        y = f.propertyList[0],
                        w = f.propertyList[1],
                        M = f.propertyList[2],
                        E = f.propertyList[3];
                      0 === y.indexOf('Lcl ') &&
                        (y = y.replace('Lcl ', 'Lcl_')),
                        0 === w.indexOf('Lcl ') &&
                          (w = w.replace('Lcl ', 'Lcl_')),
                        (v =
                          'ColorRGB' === w ||
                          'Vector' === w ||
                          'Vector3D' === w ||
                          0 === w.indexOf('Lcl_')
                            ? [
                                f.propertyList[4],
                                f.propertyList[5],
                                f.propertyList[6]
                              ]
                            : f.propertyList[4]),
                        0 === w.indexOf('Lcl_') && (v = v.toString()),
                        (d[y] = { type: w, type2: M, flag: E, value: v });
                    } else
                      void 0 === h[f.name]
                        ? 'number' == typeof f.id
                          ? ((h[f.name] = {}), (h[f.name][f.id] = f))
                          : (h[f.name] = f)
                        : '' === f.id
                          ? (Array.isArray(h[f.name]) ||
                              (h[f.name] = [h[f.name]]),
                            h[f.name].push(f))
                          : void 0 === h[f.name][f.id]
                            ? (h[f.name][f.id] = f)
                            : (Array.isArray(h[f.name][f.id]) ||
                                (h[f.name][f.id] = [h[f.name][f.id]]),
                              h[f.name][f.id].push(f));
                  else {
                    for (
                      var b = [], a = 1, x = f.propertyList.length;
                      a < x;
                      a++
                    )
                      b[a - 1] = f.propertyList[a];
                    void 0 === d.connections && (d.connections = []),
                      d.connections.push(b);
                  }
                else {
                  var A = f.propertyList[0];
                  Array.isArray(A)
                    ? ((f.properties[f.name] = f.propertyList[0]),
                      (h[f.name] = f),
                      (f.properties.a = A.toString()))
                    : (d[f.name] = A);
                }
            }
            return {
              singleProperty: p,
              id: c,
              attrName: l,
              attrType: u,
              name: o,
              properties: d,
              propertyList: s,
              subNodes: h
            };
          },
          parseProperty: function(t) {
            var e = t.getChar();
            switch (e) {
              case 'F':
                return t.getFloat32();
              case 'D':
                return t.getFloat64();
              case 'L':
                return t.getInt64();
              case 'I':
                return t.getInt32();
              case 'Y':
                return t.getInt16();
              case 'C':
                return t.getBoolean();
              case 'f':
              case 'd':
              case 'l':
              case 'i':
              case 'b':
                var i = t.getUint32(),
                  n = t.getUint32(),
                  r = t.getUint32();
                if (0 === n)
                  switch (e) {
                    case 'f':
                      return t.getFloat32Array(i);
                    case 'd':
                      return t.getFloat64Array(i);
                    case 'l':
                      return t.getInt64Array(i);
                    case 'i':
                      return t.getInt32Array(i);
                    case 'b':
                      return t.getBooleanArray(i);
                  }
                if (void 0 === window.Zlib)
                  throw new Error(
                    'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js'
                  );
                var o = new T(
                  new Zlib.Inflate(
                    new Uint8Array(t.getArrayBuffer(r))
                  ).decompress().buffer
                );
                switch (e) {
                  case 'f':
                    return o.getFloat32Array(i);
                  case 'd':
                    return o.getFloat64Array(i);
                  case 'l':
                    return o.getInt64Array(i);
                  case 'i':
                    return o.getInt32Array(i);
                  case 'b':
                    return o.getBooleanArray(i);
                }
              case 'S':
                var s = t.getUint32();
                return t.getString(s);
              case 'R':
                s = t.getUint32();
                return t.getArrayBuffer(s);
              default:
                throw new Error('THREE.FBXLoader: Unknown property type ' + e);
            }
          }
        }),
        Object.assign(T.prototype, {
          getOffset: function() {
            return this.offset;
          },
          size: function() {
            return this.dv.buffer.byteLength;
          },
          skip: function(t) {
            this.offset += t;
          },
          getBoolean: function() {
            return 1 == (1 & this.getUint8());
          },
          getBooleanArray: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getBoolean());
            return e;
          },
          getInt8: function() {
            var t = this.dv.getInt8(this.offset);
            return (this.offset += 1), t;
          },
          getInt8Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getInt8());
            return e;
          },
          getUint8: function() {
            var t = this.dv.getUint8(this.offset);
            return (this.offset += 1), t;
          },
          getUint8Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getUint8());
            return e;
          },
          getInt16: function() {
            var t = this.dv.getInt16(this.offset, this.littleEndian);
            return (this.offset += 2), t;
          },
          getInt16Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getInt16());
            return e;
          },
          getUint16: function() {
            var t = this.dv.getUint16(this.offset, this.littleEndian);
            return (this.offset += 2), t;
          },
          getUint16Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getUint16());
            return e;
          },
          getInt32: function() {
            var t = this.dv.getInt32(this.offset, this.littleEndian);
            return (this.offset += 4), t;
          },
          getInt32Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getInt32());
            return e;
          },
          getUint32: function() {
            var t = this.dv.getUint32(this.offset, this.littleEndian);
            return (this.offset += 4), t;
          },
          getUint32Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getUint32());
            return e;
          },
          getInt64: function() {
            var t, e;
            return (
              this.littleEndian
                ? ((t = this.getUint32()), (e = this.getUint32()))
                : ((e = this.getUint32()), (t = this.getUint32())),
              2147483648 & e
                ? ((e = 4294967295 & ~e),
                  4294967295 === (t = 4294967295 & ~t) &&
                    (e = (e + 1) & 4294967295),
                  -(4294967296 * e + (t = (t + 1) & 4294967295)))
                : 4294967296 * e + t
            );
          },
          getInt64Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getInt64());
            return e;
          },
          getUint64: function() {
            var t, e;
            return (
              this.littleEndian
                ? ((t = this.getUint32()), (e = this.getUint32()))
                : ((e = this.getUint32()), (t = this.getUint32())),
              4294967296 * e + t
            );
          },
          getUint64Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getUint64());
            return e;
          },
          getFloat32: function() {
            var t = this.dv.getFloat32(this.offset, this.littleEndian);
            return (this.offset += 4), t;
          },
          getFloat32Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getFloat32());
            return e;
          },
          getFloat64: function() {
            var t = this.dv.getFloat64(this.offset, this.littleEndian);
            return (this.offset += 8), t;
          },
          getFloat64Array: function(t) {
            for (var e = [], i = 0; i < t; i++) e.push(this.getFloat64());
            return e;
          },
          getArrayBuffer: function(t) {
            var e = this.dv.buffer.slice(this.offset, this.offset + t);
            return (this.offset += t), e;
          },
          getChar: function() {
            return String.fromCharCode(this.getUint8());
          },
          getString: function(t) {
            for (var e = ''; t > 0; ) {
              var i = this.getUint8();
              if ((t--, 0 === i)) break;
              e += String.fromCharCode(i);
            }
            return this.skip(t), e;
          }
        }),
        Object.assign(L.prototype, {
          add: function(t, e) {
            this[t] = e;
          },
          searchConnectionParent: function(t) {
            if (
              (void 0 === this.__cache_search_connection_parent &&
                (this.__cache_search_connection_parent = []),
              void 0 !== this.__cache_search_connection_parent[t])
            )
              return this.__cache_search_connection_parent[t];
            this.__cache_search_connection_parent[t] = [];
            for (
              var e = this.Connections.properties.connections, i = [], n = 0;
              n < e.length;
              ++n
            )
              if (e[n][0] == t) {
                var r = 0 === e[n][1] ? -1 : e[n][1];
                i.push(r);
              }
            return i.length > 0
              ? (B(this.__cache_search_connection_parent[t], i), i)
              : ((this.__cache_search_connection_parent[t] = [-1]), [-1]);
          },
          searchConnectionChildren: function(t) {
            if (
              (void 0 === this.__cache_search_connection_children &&
                (this.__cache_search_connection_children = []),
              void 0 !== this.__cache_search_connection_children[t])
            )
              return this.__cache_search_connection_children[t];
            this.__cache_search_connection_children[t] = [];
            for (
              var e = this.Connections.properties.connections, i = [], n = 0;
              n < e.length;
              ++n
            )
              e[n][1] == t && i.push(0 === e[n][0] ? -1 : e[n][0]);
            return i.length > 0
              ? (B(this.__cache_search_connection_children[t], i), i)
              : ((this.__cache_search_connection_children[t] = []), []);
          },
          searchConnectionType: function(t, e) {
            var i = t + ',' + e;
            if (
              (void 0 === this.__cache_search_connection_type &&
                (this.__cache_search_connection_type = {}),
              void 0 !== this.__cache_search_connection_type[i])
            )
              return this.__cache_search_connection_type[i];
            this.__cache_search_connection_type[i] = '';
            for (
              var n = this.Connections.properties.connections, r = 0;
              r < n.length;
              ++r
            )
              if (n[r][0] == t && n[r][1] == e)
                return (
                  (this.__cache_search_connection_type[i] = n[r][2]), n[r][2]
                );
            return (this.__cache_search_connection_type[t] = null), null;
          }
        });
      var z = Math.PI / 180;
      function k(t, e) {
        for (var i = 0, n = t.length; i < n; i++) if (e(t[i])) return i;
        return -1;
      }
      function B(t, e) {
        for (var i = 0, n = t.length, r = e.length; i < r; i++, n++)
          t[n] = e[i];
      }
      function P(t, e, i, n) {
        for (var r = i, o = 0; r < n; r++, o++) t[o] = e[r];
        return t;
      }
    })();
  },
  function(t, e, i) {
    var n = i(104)();
    t.exports = {
      schema: { type: 'model' },
      init: function() {
        (this.model = null),
          (this.loader = null),
          (this.loaderPromise = o().then(
            function() {
              (this.loader = new THREE.GLTFLoader()),
                this.loader.setCrossOrigin('Anonymous');
            }.bind(this)
          ));
      },
      update: function() {
        var t = this,
          e = this.el,
          i = this.data;
        i &&
          (this.remove(),
          this.loaderPromise.then(
            function() {
              this.loader.load(i, function(i) {
                (t.model = i.scene),
                  (t.model.animations = i.animations),
                  e.setObject3D('mesh', t.model),
                  e.emit('model-loaded', { format: 'gltf', model: t.model });
              });
            }.bind(this)
          ));
      },
      remove: function() {
        this.model && this.el.removeObject3D('mesh');
      }
    };
    var r,
      o = function() {
        return (r =
          r ||
          n(
            'https://rawgit.com/mrdoob/three.js/r86/examples/js/loaders/GLTFLoader.js'
          ));
      };
  },
  function(t, e) {
    function i(t) {
      const e = document.getElementById(t),
        i = e.parentNode;
      try {
        i && i.removeChild(e);
      } catch (t) {}
    }
    function n(t, e, n) {
      return new n(function(n, r) {
        const o = e.timeout || 5e3,
          s = 'script_' + Date.now() + '_' + Math.ceil(1e5 * Math.random()),
          a = ((c = t),
          (l = s),
          ((u = document.createElement('script')).type = 'text/javascript'),
          (u.async = !0),
          (u.id = l),
          (u.src = c),
          u);
        var c, l, u;
        const h = setTimeout(function() {
            r(new Error('Script request to ' + t + ' timed out')), i(s);
          }, o),
          d = function(t) {
            clearTimeout(t);
          };
        a.addEventListener('load', function(t) {
          n({ ok: !0 }), d(h), i(s);
        }),
          a.addEventListener('error', function(e) {
            r(new Error('Script request to ' + t + ' failed ' + e)), d(h), i(s);
          }),
          (function(t) {
            const e = document.getElementsByTagName('script')[0];
            e.parentNode.insertBefore(t, e);
          })(a);
      });
    }
    t.exports = function(t) {
      return (
        (t = t || {}),
        function(e, i) {
          return n(e, (i = i || {}), t.Promise || Promise);
        }
      );
    };
  },
  function(t, e) {
    t.exports = {
      schema: { src: { type: 'asset' }, crossorigin: { default: '' } },
      init: function() {
        this.model = null;
      },
      update: function() {
        var t,
          e = this.data;
        e.src &&
          (this.remove(),
          (t = new THREE.JSONLoader()),
          e.crossorigin && (t.crossOrigin = e.crossorigin),
          t.load(
            e.src,
            function(t, e) {
              e.forEach(function(e) {
                (e.vertexColors = (t.faces[0] || {}).color
                  ? THREE.FaceColors
                  : THREE.NoColors),
                  (e.skinning = !!(t.bones || []).length),
                  (e.morphTargets = !!(t.morphTargets || []).length),
                  (e.morphNormals = !!(t.morphNormals || []).length);
              });
              var i = (t.bones || []).length
                ? new THREE.SkinnedMesh(t, new THREE.MultiMaterial(e))
                : new THREE.Mesh(t, new THREE.MultiMaterial(e));
              this.load(i);
            }.bind(this)
          ));
      },
      load: function(t) {
        (this.model = t),
          this.el.setObject3D('mesh', t),
          this.el.emit('model-loaded', { format: 'json', model: t });
      },
      remove: function() {
        this.model && this.el.removeObject3D('mesh');
      }
    };
  },
  function(t, e) {
    t.exports = {
      schema: { src: { type: 'asset' }, crossorigin: { default: '' } },
      init: function() {
        this.model = null;
      },
      update: function() {
        var t,
          e = this.data;
        e.src &&
          (this.remove(),
          (t = new THREE.ObjectLoader()),
          e.crossorigin && t.setCrossOrigin(e.crossorigin),
          t.load(
            e.src,
            function(t) {
              t.traverse(function(t) {
                t instanceof THREE.SkinnedMesh &&
                  t.material &&
                  (t.material.skinning = !!(
                    (t.geometry && t.geometry.bones) ||
                    []
                  ).length);
              }),
                this.load(t);
            }.bind(this)
          ));
      },
      load: function(t) {
        (this.model = t),
          this.el.setObject3D('mesh', t),
          this.el.emit('model-loaded', { format: 'json', model: t });
      },
      remove: function() {
        this.model && this.el.removeObject3D('mesh');
      }
    };
  },
  function(t, e, i) {
    (THREE.PLYLoader = i(108)),
      (t.exports.System = {
        init: function() {
          this.cache = {};
        },
        getOrLoadGeometry: function(t, e) {
          var i = this.cache,
            n = i[t];
          return !e && n
            ? n
            : ((i[t] = new Promise(function(e) {
                new THREE.PLYLoader().load(t, function(t) {
                  e(t);
                });
              })),
              i[t]);
        }
      }),
      (t.exports.Component = {
        schema: {
          skipCache: { type: 'boolean', default: !1 },
          src: { type: 'asset' }
        },
        init: function() {
          this.model = null;
        },
        update: function() {
          var t = this.data,
            e = this.el;
          t.src
            ? this.system
                .getOrLoadGeometry(t.src, t.skipCache)
                .then(function(t) {
                  var i,
                    n = ((i = t),
                    new THREE.Mesh(
                      i,
                      new THREE.MeshPhongMaterial({
                        color: 16777215,
                        shading: THREE.FlatShading,
                        vertexColors: THREE.VertexColors,
                        shininess: 0
                      })
                    ));
                  e.setObject3D('mesh', n),
                    e.emit('model-loaded', { format: 'ply', model: n });
                })
            : console.warn('[%s] `src` property is required.', this.name);
        },
        remove: function() {
          this.model && this.el.removeObject3D('mesh');
        }
      });
  },
  function(t, e) {
    (t.exports = THREE.PLYLoader = function(t) {
      (this.manager = void 0 !== t ? t : THREE.DefaultLoadingManager),
        (this.propertyNameMapping = {});
    }),
      (THREE.PLYLoader.prototype = {
        constructor: THREE.PLYLoader,
        load: function(t, e, i, n) {
          var r = this,
            o = new THREE.XHRLoader(this.manager);
          o.setResponseType('arraybuffer'),
            o.load(
              t,
              function(t) {
                e(r.parse(t));
              },
              i,
              n
            );
        },
        setPropertyNameMapping: function(t) {
          this.propertyNameMapping = t;
        },
        bin2str: function(t) {
          for (var e = new Uint8Array(t), i = '', n = 0; n < t.byteLength; n++)
            i += String.fromCharCode(e[n]);
          return i;
        },
        isASCII: function(t) {
          return 'ascii' === this.parseHeader(this.bin2str(t)).format;
        },
        parse: function(t) {
          return t instanceof ArrayBuffer
            ? this.isASCII(t)
              ? this.parseASCII(this.bin2str(t))
              : this.parseBinary(t)
            : this.parseASCII(t);
        },
        parseHeader: function(t) {
          var e = '',
            i = 0,
            n = /ply([\s\S]*)end_header\s/.exec(t);
          null !== n && ((e = n[1]), (i = n[0].length));
          var r,
            o,
            s,
            a,
            c,
            l = { comments: [], elements: [], headerLength: i },
            u = e.split('\n'),
            h = void 0;
          for (var d = 0; d < u.length; d++) {
            var p = u[d];
            if ('' !== (p = p.trim()))
              switch (((r = (o = p.split(/\s+/)).shift()),
              (p = o.join(' ')),
              r)) {
                case 'format':
                  (l.format = o[0]), (l.version = o[1]);
                  break;
                case 'comment':
                  l.comments.push(p);
                  break;
                case 'element':
                  void 0 !== h && l.elements.push(h),
                    ((h = Object()).name = o[0]),
                    (h.count = parseInt(o[1])),
                    (h.properties = []);
                  break;
                case 'property':
                  h.properties.push(
                    ((s = o),
                    (a = this.propertyNameMapping),
                    (c = void 0),
                    'list' === (c = { type: s[0] }).type
                      ? ((c.name = s[3]),
                        (c.countType = s[1]),
                        (c.itemType = s[2]))
                      : (c.name = s[1]),
                    c.name in a && (c.name = a[c.name]),
                    c)
                  );
                  break;
                default:
                  console.log('unhandled', r, o);
              }
          }
          return void 0 !== h && l.elements.push(h), l;
        },
        parseASCIINumber: function(t, e) {
          switch (e) {
            case 'char':
            case 'uchar':
            case 'short':
            case 'ushort':
            case 'int':
            case 'uint':
            case 'int8':
            case 'uint8':
            case 'int16':
            case 'uint16':
            case 'int32':
            case 'uint32':
              return parseInt(t);
            case 'float':
            case 'double':
            case 'float32':
            case 'float64':
              return parseFloat(t);
          }
        },
        parseASCIIElement: function(t, e) {
          for (var i = e.split(/\s+/), n = Object(), r = 0; r < t.length; r++)
            if ('list' === t[r].type) {
              for (
                var o = [],
                  s = this.parseASCIINumber(i.shift(), t[r].countType),
                  a = 0;
                a < s;
                a++
              )
                o.push(this.parseASCIINumber(i.shift(), t[r].itemType));
              n[t[r].name] = o;
            } else n[t[r].name] = this.parseASCIINumber(i.shift(), t[r].type);
          return n;
        },
        parseASCII: function(t) {
          var e,
            i = new THREE.Geometry(),
            n = this.parseHeader(t),
            r = '';
          null !== (e = /end_header\s([\s\S]*)$/.exec(t)) && (r = e[1]);
          var o = r.split('\n'),
            s = 0,
            a = 0;
          i.useColor = !1;
          for (var c = 0; c < o.length; c++) {
            var l = o[c];
            if ('' !== (l = l.trim())) {
              a >= n.elements[s].count && (s++, (a = 0));
              var u = this.parseASCIIElement(n.elements[s].properties, l);
              this.handleElement(i, n.elements[s].name, u), a++;
            }
          }
          return this.postProcess(i);
        },
        postProcess: function(t) {
          if (t.useColor) {
            for (var e = 0; e < t.faces.length; e++)
              t.faces[e].vertexColors = [
                t.colors[t.faces[e].a],
                t.colors[t.faces[e].b],
                t.colors[t.faces[e].c]
              ];
            t.elementsNeedUpdate = !0;
          }
          return t.computeBoundingSphere(), t;
        },
        handleElement: function(t, e, i) {
          if ('vertex' === e) {
            if (
              (t.vertices.push(new THREE.Vector3(i.x, i.y, i.z)),
              'red' in i && 'green' in i && 'blue' in i)
            ) {
              t.useColor = !0;
              var n = new THREE.Color();
              n.setRGB(i.red / 255, i.green / 255, i.blue / 255),
                t.colors.push(n);
            }
          } else if ('face' === e) {
            var r = i.vertex_indices || i.vertex_index;
            3 === r.length
              ? t.faces.push(new THREE.Face3(r[0], r[1], r[2]))
              : 4 === r.length &&
                t.faces.push(
                  new THREE.Face3(r[0], r[1], r[3]),
                  new THREE.Face3(r[1], r[2], r[3])
                );
          }
        },
        binaryRead: function(t, e, i, n) {
          switch (i) {
            case 'int8':
            case 'char':
              return [t.getInt8(e), 1];
            case 'uint8':
            case 'uchar':
              return [t.getUint8(e), 1];
            case 'int16':
            case 'short':
              return [t.getInt16(e, n), 2];
            case 'uint16':
            case 'ushort':
              return [t.getUint16(e, n), 2];
            case 'int32':
            case 'int':
              return [t.getInt32(e, n), 4];
            case 'uint32':
            case 'uint':
              return [t.getUint32(e, n), 4];
            case 'float32':
            case 'float':
              return [t.getFloat32(e, n), 4];
            case 'float64':
            case 'double':
              return [t.getFloat64(e, n), 8];
          }
        },
        binaryReadElement: function(t, e, i, n) {
          for (var r, o = Object(), s = 0, a = 0; a < i.length; a++)
            if ('list' === i[a].type) {
              var c = [],
                l = (r = this.binaryRead(t, e + s, i[a].countType, n))[0];
              s += r[1];
              for (var u = 0; u < l; u++)
                (r = this.binaryRead(t, e + s, i[a].itemType, n)),
                  c.push(r[0]),
                  (s += r[1]);
              o[i[a].name] = c;
            } else
              (r = this.binaryRead(t, e + s, i[a].type, n)),
                (o[i[a].name] = r[0]),
                (s += r[1]);
          return [o, s];
        },
        parseBinary: function(t) {
          for (
            var e,
              i = new THREE.Geometry(),
              n = this.parseHeader(this.bin2str(t)),
              r = 'binary_little_endian' === n.format,
              o = new DataView(t, n.headerLength),
              s = 0,
              a = 0;
            a < n.elements.length;
            a++
          )
            for (var c = 0; c < n.elements[a].count; c++) {
              s += (e = this.binaryReadElement(
                o,
                s,
                n.elements[a].properties,
                r
              ))[1];
              var l = e[0];
              this.handleElement(i, n.elements[a].name, l);
            }
          return this.postProcess(i);
        }
      });
  },
  function(t, e, i) {
    var n = i(23);
    t.exports = {
      checkpoint: i(110),
      'cube-env-map': i(111),
      grab: i(112),
      'jump-ability': i(113),
      'kinematic-body': i(114),
      'mesh-smooth': i(115),
      'sphere-collider': i(116),
      'toggle-velocity': i(117),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME),
          n.registerAll(),
          t.components.checkpoint ||
            t.registerComponent('checkpoint', this.checkpoint),
          t.components['cube-env-map'] ||
            t.registerComponent('cube-env-map', this['cube-env-map']),
          t.components.grab || t.registerComponent('grab', this.grab),
          t.components['jump-ability'] ||
            t.registerComponent('jump-ability', this['jump-ability']),
          t.components['kinematic-body'] ||
            t.registerComponent('kinematic-body', this['kinematic-body']),
          t.components['mesh-smooth'] ||
            t.registerComponent('mesh-smooth', this['mesh-smooth']),
          t.components['sphere-collider'] ||
            t.registerComponent('sphere-collider', this['sphere-collider']),
          t.components['toggle-velocity'] ||
            t.registerComponent('toggle-velocity', this['toggle-velocity']),
          (this._registered = !0));
      }
    };
  },
  function(t, e) {
    t.exports = {
      schema: { offset: { default: { x: 0, y: 0, z: 0 }, type: 'vec3' } },
      init: function() {
        (this.active = !1),
          (this.targetEl = null),
          (this.fire = this.fire.bind(this)),
          (this.offset = new THREE.Vector3());
      },
      update: function() {
        this.offset.copy(this.data.offset);
      },
      play: function() {
        this.el.addEventListener('click', this.fire);
      },
      pause: function() {
        this.el.removeEventListener('click', this.fire);
      },
      remove: function() {
        this.pause();
      },
      fire: function() {
        var t = this.el.sceneEl.querySelector('[checkpoint-controls]');
        if (!t) throw new Error('No `checkpoint-controls` component found.');
        t.components['checkpoint-controls'].setCheckpoint(this.el);
      },
      getOffset: function() {
        return this.offset.copy(this.data.offset);
      }
    };
  },
  function(t, e) {
    t.exports = {
      schema: {
        path: { default: '' },
        extension: { default: 'jpg' },
        format: { default: 'RGBFormat' },
        enableBackground: { default: !1 }
      },
      init: function() {
        var t = this.data;
        (this.texture = new THREE.CubeTextureLoader().load([
          t.path + 'posx.' + t.extension,
          t.path + 'negx.' + t.extension,
          t.path + 'posy.' + t.extension,
          t.path + 'negy.' + t.extension,
          t.path + 'posz.' + t.extension,
          t.path + 'negz.' + t.extension
        ])),
          (this.texture.format = THREE[t.format]),
          t.enableBackground &&
            (this.el.sceneEl.object3D.background = this.texture),
          this.applyEnvMap(),
          this.el.addEventListener('object3dset', this.applyEnvMap.bind(this));
      },
      applyEnvMap: function() {
        var t = this.el.getObject3D('mesh'),
          e = this.texture;
        t &&
          t.traverse(function(t) {
            t.material &&
              'envMap' in t.material &&
              ((t.material.envMap = e), (t.material.needsUpdate = !0));
          });
      }
    };
  },
  function(t, e) {
    t.exports = {
      init: function() {
        (this.GRABBED_STATE = 'grabbed'),
          (this.grabbing = !1),
          (this.hitEl = null),
          (this.physics = this.el.sceneEl.systems.physics),
          (this.constraint = null),
          (this.onHit = this.onHit.bind(this)),
          (this.onGripOpen = this.onGripOpen.bind(this)),
          (this.onGripClose = this.onGripClose.bind(this));
      },
      play: function() {
        var t = this.el;
        t.addEventListener('hit', this.onHit),
          t.addEventListener('gripdown', this.onGripClose),
          t.addEventListener('gripup', this.onGripOpen),
          t.addEventListener('trackpaddown', this.onGripClose),
          t.addEventListener('trackpadup', this.onGripOpen),
          t.addEventListener('triggerdown', this.onGripClose),
          t.addEventListener('triggerup', this.onGripOpen);
      },
      pause: function() {
        var t = this.el;
        t.removeEventListener('hit', this.onHit),
          t.removeEventListener('gripdown', this.onGripClose),
          t.removeEventListener('gripup', this.onGripOpen),
          t.removeEventListener('trackpaddown', this.onGripClose),
          t.removeEventListener('trackpadup', this.onGripOpen),
          t.removeEventListener('triggerdown', this.onGripClose),
          t.removeEventListener('triggerup', this.onGripOpen);
      },
      onGripClose: function(t) {
        this.grabbing = !0;
      },
      onGripOpen: function(t) {
        var e = this.hitEl;
        (this.grabbing = !1),
          e &&
            (e.removeState(this.GRABBED_STATE),
            (this.hitEl = void 0),
            this.physics.world.removeConstraint(this.constraint),
            (this.constraint = null));
      },
      onHit: function(t) {
        var e = t.detail.el;
        e &&
          !e.is(this.GRABBED_STATE) &&
          this.grabbing &&
          !this.hitEl &&
          (e.addState(this.GRABBED_STATE),
          (this.hitEl = e),
          (this.constraint = new CANNON.LockConstraint(this.el.body, e.body)),
          this.physics.world.addConstraint(this.constraint));
      }
    };
  },
  function(t, e) {
    t.exports = {
      dependencies: ['velocity'],
      schema: {
        on: { default: 'keydown:Space gamepadbuttondown:0' },
        playerHeight: { default: 1.764 },
        maxJumps: { default: 1 },
        distance: { default: 5 },
        soundJump: { default: '' },
        soundLand: { default: '' },
        debug: { default: !1 }
      },
      init: function() {
        (this.velocity = 0), (this.numJumps = 0);
        var t = this.beginJump.bind(this),
          e = this.data.on.split(' ');
        this.bindings = {};
        for (var i = 0; i < e.length; i++)
          (this.bindings[e[i]] = t), this.el.addEventListener(e[i], t);
        (this.bindings.collide = this.onCollide.bind(this)),
          this.el.addEventListener('collide', this.bindings.collide);
      },
      remove: function() {
        for (var t in this.bindings)
          this.bindings.hasOwnProperty(t) &&
            (this.el.removeEventListener(t, this.bindings[t]),
            delete this.bindings[t]);
        this.el.removeEventListener('collide', this.bindings.collide),
          delete this.bindings.collide;
      },
      beginJump: function() {
        if (this.numJumps < this.data.maxJumps) {
          var t = this.data,
            e = Math.sqrt(-2 * t.distance * -24.8),
            i = this.el.getAttribute('velocity');
          this.el.setAttribute('velocity', { x: i.x, y: e, z: i.z }),
            this.numJumps++;
        }
      },
      onCollide: function() {
        this.numJumps = 0;
      }
    };
  },
  function(t, e) {
    var i,
      n,
      r,
      o,
      s = window.CANNON;
    t.exports = {
      dependencies: ['velocity'],
      schema: {
        mass: { default: 5 },
        radius: { default: 1.3 },
        height: { default: 1.764 },
        linearDamping: { default: 0.05 },
        enableSlopes: { default: !0 }
      },
      init: function() {
        (this.system = this.el.sceneEl.systems.physics),
          this.system.addBehavior(this, this.system.Phase.SIMULATE);
        var t = this.el,
          e = this.data,
          i = new s.Vec3().copy(t.getAttribute('position'));
        (this.body = new s.Body({
          material: this.system.material,
          position: i,
          mass: e.mass,
          linearDamping: e.linearDamping,
          fixedRotation: !0
        })),
          this.body.addShape(
            new s.Sphere(e.radius),
            new s.Vec3(0, e.radius - e.height, 0)
          ),
          (this.body.el = this.el),
          (this.el.body = this.body),
          this.system.addBody(this.body);
      },
      remove: function() {
        this.system.removeBody(this.body),
          this.system.removeBehavior(this, this.system.Phase.SIMULATE),
          delete this.el.body;
      },
      step: ((i = new THREE.Vector3()),
      (n = new THREE.Vector3()),
      (r = new THREE.Vector3()),
      (o = new THREE.Vector3()),
      function(t, e) {
        if (e) {
          var s,
            a,
            c = this.body,
            l = this.data,
            u = -1 / 0;
          (e = Math.min(e, 1e3 * this.system.data.maxInterval)),
            o.set(0, 0, 0),
            i.copy(this.el.getAttribute('velocity')),
            c.velocity.copy(i),
            c.position.copy(this.el.getAttribute('position'));
          for (var h, d = 0; (h = this.system.world.contacts[d]); d++)
            if (h.enabled) {
              if (c.id === h.bi.id) h.ni.negate(r);
              else {
                if (c.id !== h.bj.id) continue;
                r.copy(h.ni);
              }
              c.velocity.dot(r) < -1e-6 && r.y <= 0.5
                ? (i = i.projectOnPlane(r))
                : r.y > 0.5 &&
                  (s =
                    c.id === h.bi.id
                      ? Math.abs(h.rj.y + h.bj.position.y)
                      : Math.abs(h.ri.y + h.bi.position.y)) > u &&
                  ((u = s), o.copy(r), (a = c.id === h.bi.id ? h.bj : h.bi));
            }
          if (
            (n.copy(i).normalize(),
            a && n.y < 0.5
              ? (l.enableSlopes
                  ? o.y < 1 - 1e-6 && o.copy(this.raycastToGround(a, o))
                  : o.set(0, 1, 0),
                (i = i.projectOnPlane(o)))
              : i.add(this.system.world.gravity.scale(4 * e / 1e3)),
            a && a.el && a.el.components.velocity)
          ) {
            var p = a.el.getAttribute('velocity');
            c.position.copy({
              x: c.position.x + p.x * e / 1e3,
              y: c.position.y + p.y * e / 1e3,
              z: c.position.z + p.z * e / 1e3
            }),
              this.el.setAttribute('position', c.position);
          }
          c.velocity.copy(i), this.el.setAttribute('velocity', i);
        }
      }),
      raycastToGround: function(t, e) {
        var i,
          n,
          r = this.body.position,
          o = this.body.position.clone();
        return (
          (o.y -= this.data.height),
          (i = new s.Ray(r, o))._updateDirection(),
          i.intersectBody(t),
          i.hasHit
            ? ((n = i.result.hitNormalWorld),
              Math.abs(n.y) > Math.abs(e.y) ? n : e)
            : e
        );
      }
    };
  },
  function(t, e) {
    t.exports = {
      init: function() {
        this.el.addEventListener('model-loaded', function(t) {
          t.detail.model.traverse(function(t) {
            t.isMesh && t.geometry.computeVertexNormals();
          });
        });
      }
    };
  },
  function(t, e) {
    var i, n, r, o;
    t.exports = {
      schema: {
        objects: { default: '' },
        state: { default: 'collided' },
        radius: { default: 0.05 },
        watch: { default: !0 }
      },
      init: function() {
        (this.observer = null),
          (this.els = []),
          (this.collisions = []),
          (this.handleHit = this.handleHit.bind(this)),
          (this.handleHitEnd = this.handleHitEnd.bind(this));
      },
      remove: function() {
        this.pause();
      },
      play: function() {
        var t = this.el.sceneEl;
        this.data.watch &&
          ((this.observer = new MutationObserver(this.update.bind(this, null))),
          this.observer.observe(t, { childList: !0, subtree: !0 }));
      },
      pause: function() {
        this.observer && (this.observer.disconnect(), (this.observer = null));
      },
      update: function() {
        var t,
          e = this.data;
        (t = e.objects
          ? this.el.sceneEl.querySelectorAll(e.objects)
          : this.el.sceneEl.children),
          (this.els = Array.prototype.slice.call(t));
      },
      tick: ((i = new THREE.Vector3()),
      (n = new THREE.Vector3()),
      new THREE.Vector3(),
      (r = new THREE.Vector3()),
      (o = new Map()),
      function() {
        var t,
          e,
          s = this.el,
          a = this.data,
          c = [];
        s.getObject3D('mesh') &&
          (o.clear(),
          i.copy(s.object3D.getWorldPosition()),
          s.object3D.getWorldScale(r),
          (t = a.radius * ((e = r), Math.max.apply(null, e.toArray()))),
          this.els.forEach(function(e) {
            var r, s, a, l, u, h;
            e.isEntity &&
              (s = e.getObject3D('mesh')) &&
              ((l = new THREE.Box3().setFromObject(s)),
              (h = l.getSize()),
              (u = Math.max(h.x, h.y, h.z) / 2),
              (r = Math.sqrt(2 * u * u)),
              l.getCenter(n),
              r && (a = i.distanceTo(n)) < r + t && (c.push(e), o.set(e, a)));
          }),
          c
            .sort(function(t, e) {
              return o.get(t) > o.get(e) ? 1 : -1;
            })
            .forEach(this.handleHit),
          0 === c.length && s.emit('hit', { el: null }),
          this.collisions
            .filter(function(t) {
              return !o.has(t);
            })
            .forEach(this.handleHitEnd),
          (this.collisions = c));
      }),
      handleHit: function(t) {
        t.emit('hit'),
          t.addState(this.data.state),
          this.el.emit('hit', { el: t });
      },
      handleHitEnd: function(t) {
        t.emit('hitend'),
          t.removeState(this.data.state),
          this.el.emit('hitend', { el: t });
      }
    };
  },
  function(t, e) {
    t.exports = {
      dependencies: ['velocity'],
      schema: {
        axis: { default: 'x', oneOf: ['x', 'y', 'z'] },
        min: { default: 0 },
        max: { default: 0 },
        speed: { default: 1 }
      },
      init: function() {
        var t = { x: 0, y: 0, z: 0 };
        (t[this.data.axis] = this.data.speed),
          this.el.setAttribute('velocity', t),
          this.el.sceneEl.addBehavior && this.el.sceneEl.addBehavior(this);
      },
      remove: function() {},
      update: function() {
        this.tick();
      },
      tick: function() {
        var t = this.data,
          e = this.el.getAttribute('velocity'),
          i = this.el.getAttribute('position');
        e[t.axis] > 0 && i[t.axis] > t.max
          ? ((e[t.axis] = -t.speed), this.el.setAttribute('velocity', e))
          : e[t.axis] < 0 &&
            i[t.axis] < t.min &&
            ((e[t.axis] = t.speed), this.el.setAttribute('velocity', e));
      }
    };
  },
  function(t, e, i) {
    t.exports = {
      'nav-mesh': i(119),
      'nav-controller': i(120),
      system: i(121),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME).components['nav-mesh'] ||
            t.registerComponent('nav-mesh', this['nav-mesh']),
          t.components['nav-controller'] ||
            t.registerComponent('nav-controller', this['nav-controller']),
          t.systems.nav || t.registerSystem('nav', this.system),
          (this._registered = !0));
      }
    };
  },
  function(t, e) {
    t.exports = {
      init: function() {
        (this.system = this.el.sceneEl.systems.nav),
          this.loadNavMesh(),
          this.el.addEventListener('model-loaded', this.loadNavMesh.bind(this));
      },
      loadNavMesh: function() {
        var t,
          e = this.el.getObject3D('mesh');
        e &&
          (e.traverse(function(e) {
            e.isMesh && (t = e);
          }),
          t && this.system.setNavMesh(t));
      }
    };
  },
  function(t, e) {
    var i, n, r;
    t.exports = {
      schema: {
        destination: { type: 'vec3' },
        active: { default: !1 },
        speed: { default: 2 }
      },
      init: function() {
        (this.system = this.el.sceneEl.systems.nav),
          this.system.addController(this),
          (this.path = []),
          (this.raycaster = new THREE.Raycaster());
      },
      remove: function() {
        this.system.removeController(this);
      },
      update: function() {
        this.path.length = 0;
      },
      tick: ((i = new THREE.Vector3()),
      (n = new THREE.Vector3()),
      (r = new THREE.Vector3()),
      function(t, e) {
        var o = this.el,
          s = this.data,
          a = this.raycaster,
          c = s.speed * e / 1e3;
        if (s.active) {
          if (
            (this.path.length ||
              ((this.path = this.system.getPath(
                this.el.object3D,
                i.copy(s.destination)
              )),
              (this.path = this.path || []),
              o.emit('nav-start')),
            !this.path.length)
          )
            return (
              console.warn('[nav] Unable to find path to %o.', s.destination),
              this.el.setAttribute('nav-controller', { active: !1 }),
              void o.emit('nav-end')
            );
          var l,
            u = o.object3D.position,
            h = this.path[0];
          if ((n.subVectors(h, u), n.length() < c)) {
            if ((this.path.shift(), !this.path.length))
              return (
                this.el.setAttribute('nav-controller', { active: !1 }),
                void o.emit('nav-end')
              );
            l = this.path[0];
          } else r.copy(n.setLength(c)).add(u), (l = h);
          (l.y = u.y),
            o.object3D.lookAt(l),
            a.ray.origin.copy(r),
            (a.ray.origin.y += 1.5),
            (a.ray.direction.y = -1);
          var d = a.intersectObject(this.system.getNavMesh());
          d.length
            ? (n.subVectors(d[0].point, u), u.add(n.setLength(c)))
            : u.copy(r);
        }
      })
    };
  },
  function(t, e, i) {
    var n = i(122);
    t.exports = {
      init: function() {
        (this.navMesh = null),
          (this.nodes = null),
          (this.controllers = new Set());
      },
      setNavMesh: function(t) {
        var e = t.geometry.isBufferGeometry
          ? new THREE.Geometry().fromBufferGeometry(t.geometry)
          : t.geometry;
        (this.navMesh = new THREE.Mesh(e)),
          (this.nodes = n.buildNodes(this.navMesh.geometry)),
          n.setZoneData('level', this.nodes);
      },
      getNavMesh: function() {
        return this.navMesh;
      },
      addController: function(t) {
        this.controllers.add(t);
      },
      removeController: function(t) {
        this.controllers.remove(t);
      },
      getPath: function(t, e) {
        var i = t.el.object3D.position,
          r = n.getGroup('level', i);
        return n.findPath(i, e, 'level', r);
      }
    };
  },
  function(t, e, i) {
    const n = i(27),
      r = i(123),
      o = i(125);
    var s = 1,
      a = function(t) {
        console.log(
          'Vertices:',
          t.vertices.length,
          'polygons:',
          t.faces.length
        );
        var e = [],
          i = t.vertices,
          r = t.faceVertexUvs;
        t.faces.forEach(t => {
          e.push({
            id: s++,
            vertexIds: [t.a, t.b, t.c],
            centroid: t.centroid,
            normal: t.normal,
            neighbours: []
          });
        });
        var o = { polygons: e, vertices: i, faceVertexUvs: r };
        return (
          e.forEach(t => {
            !(function(t, e) {
              t.neighbours = [];
              for (var i = 0, r = e.polygons.length; i < r; i++)
                t !== e.polygons[i] &&
                  (t.centroid.distanceToSquared(e.polygons[i].centroid) > 1e4 ||
                    (n.array_intersect(t.vertexIds, e.polygons[i].vertexIds)
                      .length >= 2 &&
                      t.neighbours.push(e.polygons[i])));
            })(t, o);
          }),
          o
        );
      },
      c = function(t) {
        var e = {};
        t.vertices.forEach(t => {
          (t.x = n.roundNumber(t.x, 2)),
            (t.y = n.roundNumber(t.y, 2)),
            (t.z = n.roundNumber(t.z, 2));
        }),
          (e.vertices = t.vertices);
        var i,
          r,
          o,
          s = ((i = []),
          (r = 0),
          (o = function(t) {
            t.neighbours.forEach(e => {
              void 0 === e.group && ((e.group = t.group), o(e));
            });
          }),
          t.polygons.forEach(t => {
            void 0 === t.group && ((t.group = r++), o(t)),
              i[t.group] || (i[t.group] = []),
              i[t.group].push(t);
          }),
          console.log('Groups built: ', i.length),
          i);
        e.groups = [];
        var a,
          c,
          l,
          u,
          h = function(t, e) {
            for (var i = 0; i < t.length; i++) if (e === t[i]) return i;
          };
        return (
          s.forEach(t => {
            var i = [];
            t.forEach(e => {
              var r = [];
              e.neighbours.forEach(e => {
                r.push(h(t, e));
              });
              var o = [];
              e.neighbours.forEach(t => {
                o.push(
                  ((a = t),
                  (c = e.vertexIds),
                  (l = a.vertexIds),
                  (u = []),
                  c.forEach(t => {
                    l.includes(t) && u.push(t);
                  }),
                  u.length < 2
                    ? []
                    : (u.includes(c[0]) &&
                        u.includes(c[c.length - 1]) &&
                        c.push(c.shift()),
                      u.includes(l[0]) &&
                        u.includes(l[l.length - 1]) &&
                        l.push(l.shift()),
                      (u = []),
                      c.forEach(t => {
                        l.includes(t) && u.push(t);
                      }),
                      u))
                );
              }),
                (e.centroid.x = n.roundNumber(e.centroid.x, 2)),
                (e.centroid.y = n.roundNumber(e.centroid.y, 2)),
                (e.centroid.z = n.roundNumber(e.centroid.z, 2)),
                i.push({
                  id: h(t, e),
                  neighbours: r,
                  vertexIds: e.vertexIds,
                  centroid: e.centroid,
                  portals: o
                });
            }),
              e.groups.push(i);
          }),
          e
        );
      },
      l = {};
    t.exports = {
      buildNodes: function(t) {
        var e,
          i = ((e = t), n.computeCentroids(e), e.mergeVertices(), a(e));
        return c(i);
      },
      setZoneData: function(t, e) {
        l[t] = e;
      },
      getGroup: function(t, e) {
        if (!l[t]) return null;
        var i = null,
          r = Math.pow(50, 2);
        return (
          l[t].groups.forEach((t, o) => {
            t.forEach(t => {
              var s = n.distanceToSquared(t.centroid, e);
              s < r && ((i = o), (r = s));
            });
          }),
          i
        );
      },
      getRandomNode: function(t, e, i, r) {
        if (!l[t]) return new THREE.Vector3();
        (i = i || null), (r = r || 0);
        var o = [];
        return (
          l[t].groups[e].forEach(t => {
            i && r
              ? n.distanceToSquared(i, t.centroid) < r * r && o.push(t.centroid)
              : o.push(t.centroid);
          }),
          n.sample(o) || new THREE.Vector3()
        );
      },
      getClosestNode: function(t, e, i, r = !1) {
        const o = l[e].groups[i],
          s = l[e].vertices;
        let a = null,
          c = 1 / 0;
        return (
          o.forEach(e => {
            const i = n.distanceToSquared(e.centroid, t);
            i < c && (!r || n.isVectorInPolygon(t, e, s)) && ((a = e), (c = i));
          }),
          a
        );
      },
      findPath: function(t, e, i, n) {
        const s = l[i].groups[n],
          a = l[i].vertices,
          c = this.getClosestNode(t, i, n),
          u = this.getClosestNode(e, i, n, !0);
        if (!c || !u) return null;
        const h = r.search(s, c, u),
          d = function(t, e) {
            for (var i = 0; i < t.neighbours.length; i++)
              if (t.neighbours[i] === e.id) return t.portals[i];
          },
          p = new o();
        p.push(t);
        for (let t = 0; t < h.length; t++) {
          const e = h[t],
            i = h[t + 1];
          if (i) {
            const t = d(e, i);
            p.push(a[t[0]], a[t[1]]);
          }
        }
        p.push(e), p.stringPull();
        const f = p.path.map(t => new THREE.Vector3(t.x, t.y, t.z));
        return f.shift(), f;
      }
    };
  },
  function(t, e, i) {
    const n = i(124),
      r = i(27);
    t.exports = class {
      static init(t) {
        for (let e = 0; e < t.length; e++) {
          const i = t[e];
          (i.f = 0),
            (i.g = 0),
            (i.h = 0),
            (i.cost = 1),
            (i.visited = !1),
            (i.closed = !1),
            (i.parent = null);
        }
      }
      static cleanUp(t) {
        for (let e = 0; e < t.length; e++) {
          const i = t[e];
          delete i.f,
            delete i.g,
            delete i.h,
            delete i.cost,
            delete i.visited,
            delete i.closed,
            delete i.parent;
        }
      }
      static heap() {
        return new n(function(t) {
          return t.f;
        });
      }
      static search(t, e, i) {
        this.init(t);
        const n = this.heap();
        for (n.push(e); n.size() > 0; ) {
          const e = n.pop();
          if (e === i) {
            let t = e;
            const i = [];
            for (; t.parent; ) i.push(t), (t = t.parent);
            return this.cleanUp(i), i.reverse();
          }
          e.closed = !0;
          const r = this.neighbours(t, e);
          for (let t = 0, o = r.length; t < o; t++) {
            const o = r[t];
            if (o.closed) continue;
            const s = e.g + o.cost,
              a = o.visited;
            if (!a || s < o.g) {
              if (
                ((o.visited = !0), (o.parent = e), !o.centroid || !i.centroid)
              )
                throw new Error('Unexpected state');
              (o.h = o.h || this.heuristic(o.centroid, i.centroid)),
                (o.g = s),
                (o.f = o.g + o.h),
                a ? n.rescoreElement(o) : n.push(o);
            }
          }
        }
        return [];
      }
      static heuristic(t, e) {
        return r.distanceToSquared(t, e);
      }
      static neighbours(t, e) {
        const i = [];
        for (let n = 0; n < e.neighbours.length; n++)
          i.push(t[e.neighbours[n]]);
        return i;
      }
    };
  },
  function(t, e) {
    t.exports = class {
      constructor(t) {
        (this.content = []), (this.scoreFunction = t);
      }
      push(t) {
        this.content.push(t), this.sinkDown(this.content.length - 1);
      }
      pop() {
        const t = this.content[0],
          e = this.content.pop();
        return (
          this.content.length > 0 && ((this.content[0] = e), this.bubbleUp(0)),
          t
        );
      }
      remove(t) {
        const e = this.content.indexOf(t),
          i = this.content.pop();
        e !== this.content.length - 1 &&
          ((this.content[e] = i),
          this.scoreFunction(i) < this.scoreFunction(t)
            ? this.sinkDown(e)
            : this.bubbleUp(e));
      }
      size() {
        return this.content.length;
      }
      rescoreElement(t) {
        this.sinkDown(this.content.indexOf(t));
      }
      sinkDown(t) {
        const e = this.content[t];
        for (; t > 0; ) {
          const i = ((t + 1) >> 1) - 1,
            n = this.content[i];
          if (!(this.scoreFunction(e) < this.scoreFunction(n))) break;
          (this.content[i] = e), (this.content[t] = n), (t = i);
        }
      }
      bubbleUp(t) {
        const e = this.content.length,
          i = this.content[t],
          n = this.scoreFunction(i);
        for (;;) {
          const r = (t + 1) << 1,
            o = r - 1;
          let s,
            a = null;
          if (o < e) {
            const t = this.content[o];
            (s = this.scoreFunction(t)) < n && (a = o);
          }
          if (r < e) {
            const t = this.content[r];
            this.scoreFunction(t) < (null === a ? n : s) && (a = r);
          }
          if (null === a) break;
          (this.content[t] = this.content[a]), (this.content[a] = i), (t = a);
        }
      }
    };
  },
  function(t, e, i) {
    const n = i(27);
    t.exports = class {
      constructor() {
        this.portals = [];
      }
      push(t, e) {
        void 0 === e && (e = t), this.portals.push({ left: t, right: e });
      }
      stringPull() {
        const t = this.portals,
          e = [];
        let i,
          r,
          o,
          s = 0,
          a = 0,
          c = 0;
        (i = t[0].left), (r = t[0].left), (o = t[0].right), e.push(i);
        for (let l = 1; l < t.length; l++) {
          const u = t[l].left,
            h = t[l].right;
          if (n.triarea2(i, o, h) <= 0) {
            if (!(n.vequal(i, o) || n.triarea2(i, r, h) > 0)) {
              e.push(r), (r = i = r), (o = i), (a = s = a), (c = s), (l = s);
              continue;
            }
            (o = h), (c = l);
          }
          if (n.triarea2(i, r, u) >= 0) {
            if (!(n.vequal(i, r) || n.triarea2(i, o, u) < 0)) {
              e.push(o), (r = i = o), (o = i), (a = s = c), (c = s), (l = s);
              continue;
            }
            (r = u), (a = l);
          }
        }
        return (
          (0 !== e.length && n.vequal(e[e.length - 1], t[t.length - 1].left)) ||
            e.push(t[t.length - 1].left),
          (this.path = e),
          e
        );
      }
    };
  },
  function(t, e, i) {
    t.exports = {
      'a-grid': i(127),
      'a-hexgrid': i(128),
      'a-ocean': i(131),
      'a-tube': i(132),
      registerAll: function(t) {
        this._registered ||
          ((t = t || window.AFRAME),
          this['a-grid'].registerAll(t),
          this['a-hexgrid'].registerAll(t),
          this['a-ocean'].registerAll(t),
          this['a-tube'].registerAll(t),
          (this._registered = !0));
      }
    };
  },
  function(t, e) {
    var i,
      n = (t.exports = {
        defaultComponents: {
          geometry: { primitive: 'plane', width: 75, height: 75 },
          rotation: { x: -90, y: 0, z: 0 },
          material: {
            src:
              'url(https://cdn.rawgit.com/donmccurdy/aframe-extras/v1.16.3/assets/grid.png)',
            repeat: '75 75'
          }
        },
        mappings: {
          width: 'geometry.width',
          height: 'geometry.height',
          src: 'material.src'
        }
      });
    t.exports.registerAll = ((i = !1),
    function(t) {
      i || ((t = t || window.AFRAME).registerPrimitive('a-grid', n), (i = !0));
    });
  },
  function(t, e, i) {
    var n,
      r = i(129),
      o = i(130),
      s = (t.exports.Primitive = {
        defaultComponents: { hexgrid: {} },
        mappings: { src: 'hexgrid.src' }
      }),
      a = (t.exports.Component = {
        dependencies: ['material'],
        schema: { src: { type: 'asset' } },
        init: function() {
          var t = this.data;
          t.src
            ? fetch(t.src)
                .then(function(t) {
                  t.json();
                })
                .then(function(t) {
                  this.addMesh(t);
                })
            : this.addMesh(o);
        },
        addMesh: function(t) {
          var e = new r.HexGrid();
          e.fromJSON(t);
          var i = new r.Board(e);
          i.generateTilemap(),
            this.el.setObject3D('mesh', i.group),
            this.addMaterial();
        },
        addMaterial: function() {
          var t = (this.el.components.material || {}).material;
          t &&
            this.el.object3D.traverse(function(e) {
              e.isMesh && (e.material = t);
            });
        },
        remove: function() {
          this.el.removeObject3D('mesh');
        }
      });
    t.exports.registerAll = ((n = !1),
    function(t) {
      n ||
        ((t = t || window.AFRAME).registerComponent('hexgrid', a),
        t.registerPrimitive('a-hexgrid', s),
        (n = !0));
    });
  },
  function(t, e) {
    var i,
      n = (t.exports = {
        VERSION: '0.1.1',
        PI: Math.PI,
        TAU: 2 * Math.PI,
        DEG_TO_RAD: 0.0174532925,
        RAD_TO_DEG: 57.2957795,
        SQRT3: Math.sqrt(3),
        TILE: 'tile',
        ENT: 'entity',
        STR: 'structure',
        HEX: 'hex',
        SQR: 'square',
        ABS: 'abstract'
      });
    (n.Board = function(t, e) {
      if (!t)
        throw new Error('You must pass in a grid system for the board to use.');
      (this.tiles = []),
        (this.tileGroup = null),
        (this.group = new THREE.Object3D()),
        (this.grid = null),
        (this.overlay = null),
        (this.finder = new n.AStarFinder(e)),
        n.Loader.init(),
        this.setGrid(t);
    }),
      (n.Board.prototype = {
        setEntityOnTile: function(t, e) {
          var i = this.grid.cellToPixel(e.cell);
          t.position.copy(i),
            (t.position.y += t.heightOffset || 0),
            t.tile && (t.tile.entity = null),
            (t.tile = e),
            (e.entity = t);
        },
        addTile: function(t) {
          -1 === this.tiles.indexOf(t) &&
            (this.tiles.push(t),
            this.snapTileToGrid(t),
            (t.position.y = 0),
            this.tileGroup.add(t.mesh),
            this.grid.add(t.cell),
            (t.cell.tile = t));
        },
        removeTile: function(t) {
          if (t) {
            var e = this.tiles.indexOf(t);
            this.grid.remove(t.cell),
              -1 !== e && this.tiles.splice(e, 1),
              t.dispose();
          }
        },
        removeAllTiles: function() {
          if (this.tileGroup)
            for (var t = this.tileGroup.children, e = 0; e < t.length; e++)
              this.tileGroup.remove(t[e]);
        },
        getTileAtCell: function(t) {
          var e = this.grid.cellToHash(t);
          return (
            t.tile ||
            (void 0 !== this.grid.cells[e] ? this.grid.cells[e].tile : null)
          );
        },
        snapToGrid: function(t) {
          var e = this.grid.pixelToCell(t);
          t.copy(this.grid.cellToPixel(e));
        },
        snapTileToGrid: function(t) {
          if (t.cell) t.position.copy(this.grid.cellToPixel(t.cell));
          else {
            var e = this.grid.pixelToCell(t.position);
            t.position.copy(this.grid.cellToPixel(e));
          }
          return t;
        },
        getRandomTile: function() {
          var t = n.Tools.randomInt(0, this.tiles.length - 1);
          return this.tiles[t];
        },
        findPath: function(t, e, i) {
          return this.finder.findPath(t.cell, e.cell, i, this.grid);
        },
        setGrid: function(t) {
          this.group.remove(this.tileGroup),
            this.grid &&
              t !== this.grid &&
              (this.removeAllTiles(),
              this.tiles.forEach(function(t) {
                this.grid.remove(t.cell), t.dispose();
              }),
              this.grid.dispose()),
            (this.grid = t),
            (this.tiles = []),
            (this.tileGroup = new THREE.Object3D()),
            this.group.add(this.tileGroup);
        },
        generateOverlay: function(t) {
          var e = new THREE.LineBasicMaterial({ color: 0, opacity: 0.3 });
          this.overlay && this.group.remove(this.overlay),
            (this.overlay = new THREE.Object3D()),
            this.grid.generateOverlay(t, this.overlay, e),
            this.group.add(this.overlay);
        },
        generateTilemap: function(t) {
          this.reset();
          var e = this.grid.generateTiles(t);
          (this.tiles = e), (this.tileGroup = new THREE.Object3D());
          for (var i = 0; i < e.length; i++) this.tileGroup.add(e[i].mesh);
          this.group.add(this.tileGroup);
        },
        reset: function() {
          this.removeAllTiles(),
            this.tileGroup && this.group.remove(this.tileGroup);
        }
      }),
      (n.Board.prototype.constructor = n.Board),
      (n.Cell = function(t, e, i, r) {
        (this.q = t || 0),
          (this.r = e || 0),
          (this.s = i || 0),
          (this.h = r || 1),
          (this.tile = null),
          (this.userData = {}),
          (this.walkable = !0),
          (this._calcCost = 0),
          (this._priority = 0),
          (this._visited = !1),
          (this._parent = null),
          (this.uniqueID = n.LinkedList.generateID());
      }),
      (n.Cell.prototype = {
        set: function(t, e, i) {
          return (this.q = t), (this.r = e), (this.s = i), this;
        },
        copy: function(t) {
          return (
            (this.q = t.q),
            (this.r = t.r),
            (this.s = t.s),
            (this.h = t.h),
            (this.tile = t.tile || null),
            (this.userData = t.userData || {}),
            (this.walkable = t.walkable),
            this
          );
        },
        add: function(t) {
          return (this.q += t.q), (this.r += t.r), (this.s += t.s), this;
        },
        equals: function(t) {
          return this.q === t.q && this.r === t.r && this.s === t.s;
        }
      }),
      (n.Cell.prototype.constructor = n.Cell),
      (n.HexGrid = function(t) {
        (t = t || {}),
          (this.type = n.HEX),
          (this.size = 5),
          (this.cellSize = void 0 === t.cellSize ? 10 : t.cellSize),
          (this.cells = {}),
          (this.numCells = 0),
          (this.extrudeSettings = null),
          (this.autogenerated = !1);
        var e,
          i = [];
        for (e = 0; 6 > e; e++) i.push(this._createVertex(e));
        for (
          this.cellShape = new THREE.Shape(),
            this.cellShape.moveTo(i[0].x, i[0].y),
            e = 1;
          6 > e;
          e++
        )
          this.cellShape.lineTo(i[e].x, i[e].y);
        this.cellShape.lineTo(i[0].x, i[0].y),
          (this.cellShape.autoClose = !0),
          (this.cellGeo = new THREE.Geometry()),
          (this.cellGeo.vertices = i),
          (this.cellGeo.verticesNeedUpdate = !0),
          (this.cellShapeGeo = new THREE.ShapeGeometry(this.cellShape)),
          (this._cellWidth = 2 * this.cellSize),
          (this._cellLength = 0.5 * n.SQRT3 * this._cellWidth),
          (this._hashDelimeter = '.'),
          (this._directions = [
            new n.Cell(1, -1, 0),
            new n.Cell(1, 0, -1),
            new n.Cell(0, 1, -1),
            new n.Cell(-1, 1, 0),
            new n.Cell(-1, 0, 1),
            new n.Cell(0, -1, 1)
          ]),
          (this._diagonals = [
            new n.Cell(2, -1, -1),
            new n.Cell(1, 1, -2),
            new n.Cell(-1, 2, -1),
            new n.Cell(-2, 1, 1),
            new n.Cell(-1, -1, 2),
            new n.Cell(1, -2, 1)
          ]),
          (this._list = []),
          (this._vec3 = new THREE.Vector3()),
          (this._cel = new n.Cell()),
          (this._conversionVec = new THREE.Vector3()),
          (this._geoCache = []),
          (this._matCache = []);
      }),
      (n.HexGrid.TWO_THIRDS = 2 / 3),
      (n.HexGrid.prototype = {
        cellToPixel: function(t) {
          return (
            (this._vec3.x = t.q * this._cellWidth * 0.75),
            (this._vec3.y = t.h),
            (this._vec3.z = -(t.s - t.r) * this._cellLength * 0.5),
            this._vec3
          );
        },
        pixelToCell: function(t) {
          var e = t.x * (n.HexGrid.TWO_THIRDS / this.cellSize),
            i = (-t.x / 3 + n.SQRT3 / 3 * t.z) / this.cellSize;
          return this._cel.set(e, i, -e - i), this._cubeRound(this._cel);
        },
        getCellAt: function(t) {
          var e = t.x * (n.HexGrid.TWO_THIRDS / this.cellSize),
            i = (-t.x / 3 + n.SQRT3 / 3 * t.z) / this.cellSize;
          return (
            this._cel.set(e, i, -e - i),
            this._cubeRound(this._cel),
            this.cells[this.cellToHash(this._cel)]
          );
        },
        getNeighbors: function(t, e, i) {
          var n,
            r,
            o = this._directions.length;
          for (this._list.length = 0, n = 0; o > n; n++)
            this._cel.copy(t),
              this._cel.add(this._directions[n]),
              (r = this.cells[this.cellToHash(this._cel)]),
              !r || (i && !i(t, r)) || this._list.push(r);
          if (e)
            for (n = 0; o > n; n++)
              this._cel.copy(t),
                this._cel.add(this._diagonals[n]),
                (r = this.cells[this.cellToHash(this._cel)]),
                !r || (i && !i(t, r)) || this._list.push(r);
          return this._list;
        },
        getRandomCell: function() {
          var t,
            e = 0,
            i = n.Tools.randomInt(0, this.numCells);
          for (t in this.cells) {
            if (e === i) return this.cells[t];
            e++;
          }
          return this.cells[t];
        },
        cellToHash: function(t) {
          return t.q + this._hashDelimeter + t.r + this._hashDelimeter + t.s;
        },
        distance: function(t, e) {
          return (
            Math.max(
              Math.abs(t.q - e.q),
              Math.abs(t.r - e.r),
              Math.abs(t.s - e.s)
            ) +
            (e.h - t.h)
          );
        },
        clearPath: function() {
          var t, e;
          for (t in this.cells)
            (e = this.cells[t]),
              (e._calcCost = 0),
              (e._priority = 0),
              (e._parent = null),
              (e._visited = !1);
        },
        traverse: function(t) {
          var e;
          for (e in this.cells) t(this.cells[e]);
        },
        generateTile: function(t, e, i) {
          var r = Math.abs(t.h);
          1 > r && (r = 1);
          var o = this._geoCache[r];
          o ||
            ((this.extrudeSettings.amount = r),
            (o = new THREE.ExtrudeGeometry(
              this.cellShape,
              this.extrudeSettings
            )),
            (this._geoCache[r] = o));
          var s = new n.Tile({
            size: this.cellSize,
            scale: e,
            cell: t,
            geometry: o,
            material: i
          });
          return (t.tile = s), s;
        },
        generateTiles: function(t) {
          t = t || {};
          var e,
            i,
            r,
            o = [],
            s = {
              tileScale: 0.95,
              cellSize: this.cellSize,
              material: null,
              extrudeSettings: {
                amount: 1,
                bevelEnabled: !0,
                bevelSegments: 1,
                steps: 1,
                bevelSize: 0.5,
                bevelThickness: 0.5
              }
            };
          (s = n.Tools.merge(s, t)),
            (this.cellSize = s.cellSize),
            (this._cellWidth = 2 * this.cellSize),
            (this._cellLength = 0.5 * n.SQRT3 * this._cellWidth),
            (this.autogenerated = !0),
            (this.extrudeSettings = s.extrudeSettings);
          for (e in this.cells)
            (r = this.cells[e]),
              (i = this.generateTile(r, s.tileScale, s.material)),
              i.position.copy(this.cellToPixel(r)),
              (i.position.y = 0),
              o.push(i);
          return o;
        },
        generateTilePoly: function(t) {
          t || (t = new THREE.MeshBasicMaterial({ color: 2405631 }));
          var e = new THREE.Mesh(this.cellShapeGeo, t);
          return (
            this._vec3.set(1, 0, 0), e.rotateOnAxis(this._vec3, n.PI / 2), e
          );
        },
        generate: function(t) {
          var e, i, r, o;
          for (
            t = t || {},
              this.size = void 0 === t.size ? this.size : t.size,
              e = -this.size;
            e < this.size + 1;
            e++
          )
            for (i = -this.size; i < this.size + 1; i++)
              (r = -e - i),
                Math.abs(e) <= this.size &&
                  Math.abs(i) <= this.size &&
                  Math.abs(r) <= this.size &&
                  ((o = new n.Cell(e, i, r)), this.add(o));
        },
        generateOverlay: function(t, e, i) {
          var r,
            o,
            s,
            a = this.cellShape.createPointsGeometry();
          for (r = -t; t + 1 > r; r++)
            for (o = -t; t + 1 > o; o++)
              if (
                ((s = -r - o),
                Math.abs(r) <= t && Math.abs(o) <= t && Math.abs(s) <= t)
              ) {
                this._cel.set(r, o, s);
                var c = new THREE.Line(a, i);
                c.position.copy(this.cellToPixel(this._cel)),
                  (c.rotation.x = 90 * n.DEG_TO_RAD),
                  e.add(c);
              }
        },
        add: function(t) {
          var e = this.cellToHash(t);
          if (!this.cells[e]) return (this.cells[e] = t), this.numCells++, t;
        },
        remove: function(t) {
          var e = this.cellToHash(t);
          this.cells[e] && (delete this.cells[e], this.numCells--);
        },
        dispose: function() {
          (this.cells = null),
            (this.numCells = 0),
            (this.cellShape = null),
            this.cellGeo.dispose(),
            (this.cellGeo = null),
            this.cellShapeGeo.dispose(),
            (this.cellShapeGeo = null),
            (this._list = null),
            (this._vec3 = null),
            (this._conversionVec = null),
            (this._geoCache = null),
            (this._matCache = null);
        },
        load: function(t, e, i) {
          var r = this;
          n.Tools.getJSON({
            url: t,
            callback: function(t) {
              r.fromJSON(t), e.call(i || null, t);
            },
            cache: !1,
            scope: r
          });
        },
        fromJSON: function(t) {
          var e,
            i,
            r = t.cells;
          for (
            this.cells = {},
              this.numCells = 0,
              this.size = t.size,
              this.cellSize = t.cellSize,
              this._cellWidth = 2 * this.cellSize,
              this._cellLength = 0.5 * n.SQRT3 * this._cellWidth,
              this.extrudeSettings = t.extrudeSettings,
              this.autogenerated = t.autogenerated,
              e = 0;
            e < r.length;
            e++
          )
            (i = new n.Cell()), i.copy(r[e]), this.add(i);
        },
        toJSON: function() {
          var t,
            e,
            i = {
              size: this.size,
              cellSize: this.cellSize,
              extrudeSettings: this.extrudeSettings,
              autogenerated: this.autogenerated
            },
            n = [];
          for (e in this.cells)
            (t = this.cells[e]),
              n.push({
                q: t.q,
                r: t.r,
                s: t.s,
                h: t.h,
                walkable: t.walkable,
                userData: t.userData
              });
          return (i.cells = n), i;
        },
        _createVertex: function(t) {
          var e = n.TAU / 6 * t;
          return new THREE.Vector3(
            this.cellSize * Math.cos(e),
            this.cellSize * Math.sin(e),
            0
          );
        },
        _cubeRound: function(t) {
          var e = Math.round(t.q),
            i = Math.round(t.r),
            n = Math.round(t.s),
            r = Math.abs(e - t.q),
            o = Math.abs(i - t.r),
            s = Math.abs(n - t.s);
          return (
            r > o && r > s ? (e = -i - n) : o > s ? (i = -e - n) : (n = -e - i),
            this._cel.set(e, i, n)
          );
        }
      }),
      (n.HexGrid.prototype.constructor = n.HexGrid),
      (n.SqrGrid = function(t) {
        (t = t || {}),
          (this.type = n.SQR),
          (this.size = 5),
          (this.cellSize = void 0 === t.cellSize ? 10 : t.cellSize),
          (this.cells = {}),
          (this.numCells = 0),
          (this.extrudeSettings = null),
          (this.autogenerated = !1);
        var e = [];
        e.push(new THREE.Vector3()),
          e.push(new THREE.Vector3(-this.cellSize, this.cellSize)),
          e.push(new THREE.Vector3(this.cellSize, this.cellSize)),
          e.push(new THREE.Vector3(this.cellSize, -this.cellSize)),
          (this.cellShape = new THREE.Shape()),
          this.cellShape.moveTo(-this.cellSize, -this.cellSize),
          this.cellShape.lineTo(-this.cellSize, this.cellSize),
          this.cellShape.lineTo(this.cellSize, this.cellSize),
          this.cellShape.lineTo(this.cellSize, -this.cellSize),
          this.cellShape.lineTo(-this.cellSize, -this.cellSize),
          (this.cellGeo = new THREE.Geometry()),
          (this.cellGeo.vertices = e),
          (this.cellGeo.verticesNeedUpdate = !0),
          (this.cellShapeGeo = new THREE.ShapeGeometry(this.cellShape)),
          (this._fullCellSize = 2 * this.cellSize),
          (this._hashDelimeter = '.'),
          (this._directions = [
            new n.Cell(1, 0, 0),
            new n.Cell(0, -1, 0),
            new n.Cell(-1, 0, 0),
            new n.Cell(0, 1, 0)
          ]),
          (this._diagonals = [
            new n.Cell(-1, -1, 0),
            new n.Cell(-1, 1, 0),
            new n.Cell(1, 1, 0),
            new n.Cell(1, -1, 0)
          ]),
          (this._list = []),
          (this._vec3 = new THREE.Vector3()),
          (this._cel = new n.Cell()),
          (this._conversionVec = new THREE.Vector3()),
          (this._geoCache = []),
          (this._matCache = []);
      }),
      (n.SqrGrid.prototype = {
        cellToPixel: function(t) {
          return (
            (this._vec3.x = t.q * this._fullCellSize),
            (this._vec3.y = t.h),
            (this._vec3.z = t.r * this._fullCellSize),
            this._vec3
          );
        },
        pixelToCell: function(t) {
          var e = Math.round(t.x / this._fullCellSize),
            i = Math.round(t.z / this._fullCellSize);
          return this._cel.set(e, i, 0);
        },
        getCellAt: function(t) {
          var e = Math.round(t.x / this._fullCellSize),
            i = Math.round(t.z / this._fullCellSize);
          return this._cel.set(e, i), this.cells[this.cellToHash(this._cel)];
        },
        getNeighbors: function(t, e, i) {
          var n,
            r,
            o = this._directions.length;
          for (this._list.length = 0, n = 0; o > n; n++)
            this._cel.copy(t),
              this._cel.add(this._directions[n]),
              (r = this.cells[this.cellToHash(this._cel)]),
              !r || (i && !i(t, r)) || this._list.push(r);
          if (e)
            for (n = 0; o > n; n++)
              this._cel.copy(t),
                this._cel.add(this._diagonals[n]),
                (r = this.cells[this.cellToHash(this._cel)]),
                !r || (i && !i(t, r)) || this._list.push(r);
          return this._list;
        },
        getRandomCell: function() {
          var t,
            e = 0,
            i = n.Tools.randomInt(0, this.numCells);
          for (t in this.cells) {
            if (e === i) return this.cells[t];
            e++;
          }
          return this.cells[t];
        },
        cellToHash: function(t) {
          return t.q + this._hashDelimeter + t.r;
        },
        distance: function(t, e) {
          return (
            Math.max(Math.abs(t.q - e.q), Math.abs(t.r - e.r)) + (e.h - t.h)
          );
        },
        clearPath: function() {
          var t, e;
          for (t in this.cells)
            (e = this.cells[t]),
              (e._calcCost = 0),
              (e._priority = 0),
              (e._parent = null),
              (e._visited = !1);
        },
        traverse: function(t) {
          var e;
          for (e in this.cells) t(this.cells[e]);
        },
        generateTile: function(t, e, i) {
          var r = Math.abs(t.h);
          1 > r && (r = 1);
          var o = this._geoCache[r];
          o ||
            ((this.extrudeSettings.amount = r),
            (o = new THREE.ExtrudeGeometry(
              this.cellShape,
              this.extrudeSettings
            )),
            (this._geoCache[r] = o));
          var s = new n.Tile({
            size: this.cellSize,
            scale: e,
            cell: t,
            geometry: o,
            material: i
          });
          return (t.tile = s), s;
        },
        generateTiles: function(t) {
          t = t || {};
          var e,
            i,
            r,
            o = [],
            s = {
              tileScale: 0.95,
              cellSize: this.cellSize,
              material: null,
              extrudeSettings: {
                amount: 1,
                bevelEnabled: !0,
                bevelSegments: 1,
                steps: 1,
                bevelSize: 0.5,
                bevelThickness: 0.5
              }
            };
          (s = n.Tools.merge(s, t)),
            (this.cellSize = s.cellSize),
            (this._fullCellSize = 2 * this.cellSize),
            (this.autogenerated = !0),
            (this.extrudeSettings = s.extrudeSettings);
          for (e in this.cells)
            (r = this.cells[e]),
              (i = this.generateTile(r, s.tileScale, s.material)),
              i.position.copy(this.cellToPixel(r)),
              (i.position.y = 0),
              o.push(i);
          return o;
        },
        generateTilePoly: function(t) {
          t || (t = new THREE.MeshBasicMaterial({ color: 2405631 }));
          var e = new THREE.Mesh(this.cellShapeGeo, t);
          return (
            this._vec3.set(1, 0, 0), e.rotateOnAxis(this._vec3, n.PI / 2), e
          );
        },
        generate: function(t) {
          (t = t || {}), (this.size = void 0 === t.size ? this.size : t.size);
          var e,
            i,
            r,
            o = Math.ceil(this.size / 2);
          for (e = -o; o > e; e++)
            for (i = -o; o > i; i++) (r = new n.Cell(e, i + 1)), this.add(r);
        },
        generateOverlay: function(t, e, i) {
          var r,
            o,
            s = Math.ceil(t / 2);
          for (r = -s; s > r; r++)
            for (o = -s; s > o; o++) {
              this._cel.set(r, o);
              var a = new THREE.Line(this.cellGeo, i);
              a.position.copy(this.cellToPixel(this._cel)),
                (a.rotation.x = 90 * n.DEG_TO_RAD),
                e.add(a);
            }
        },
        add: function(t) {
          var e = this.cellToHash(t);
          if (!this.cells[e]) return (this.cells[e] = t), this.numCells++, t;
        },
        remove: function(t) {
          var e = this.cellToHash(t);
          this.cells[e] && (delete this.cells[e], this.numCells--);
        },
        dispose: function() {
          (this.cells = null),
            (this.numCells = 0),
            (this.cellShape = null),
            this.cellGeo.dispose(),
            (this.cellGeo = null),
            this.cellShapeGeo.dispose(),
            (this.cellShapeGeo = null),
            (this._list = null),
            (this._vec3 = null),
            (this._conversionVec = null),
            (this._geoCache = null),
            (this._matCache = null);
        },
        load: function(t, e, i) {
          n.Tools.getJSON({
            url: t,
            callback: function(t) {
              this.fromJSON(t), e.call(i || null, t);
            },
            cache: !1,
            scope: this
          });
        },
        fromJSON: function(t) {
          var e,
            i,
            r = t.cells;
          for (
            this.cells = {},
              this.numCells = 0,
              this.size = t.size,
              this.cellSize = t.cellSize,
              this._fullCellSize = 2 * this.cellSize,
              this.extrudeSettings = t.extrudeSettings,
              this.autogenerated = t.autogenerated,
              e = 0;
            e < r.length;
            e++
          )
            (i = new n.Cell()), i.copy(r[e]), this.add(i);
        },
        toJSON: function() {
          var t,
            e,
            i = {
              size: this.size,
              cellSize: this.cellSize,
              extrudeSettings: this.extrudeSettings,
              autogenerated: this.autogenerated
            },
            n = [];
          for (e in this.cells)
            (t = this.cells[e]),
              n.push({
                q: t.q,
                r: t.r,
                s: t.s,
                h: t.h,
                walkable: t.walkable,
                userData: t.userData
              });
          return (i.cells = n), i;
        }
      }),
      (n.SqrGrid.prototype.constructor = n.SqrGrid),
      (n.Tile = function(t) {
        t = t || {};
        var e = { cell: null, geometry: null, material: null };
        if (!(e = n.Tools.merge(e, t)).cell || !e.geometry)
          throw new Error('Missing vg.Tile configuration');
        (this.cell = e.cell),
          this.cell.tile && this.cell.tile !== this && this.cell.tile.dispose(),
          (this.cell.tile = this),
          (this.uniqueID = n.Tools.generateID()),
          (this.geometry = e.geometry),
          (this.material = e.material),
          this.material ||
            (this.material = new THREE.MeshPhongMaterial({
              color: n.Tools.randomizeRGB('30, 30, 30', 13)
            })),
          (this.objectType = n.TILE),
          (this.entity = null),
          (this.userData = {}),
          (this.selected = !1),
          (this.highlight = '0x0084cc'),
          (this.mesh = new THREE.Mesh(this.geometry, this.material)),
          (this.mesh.userData.structure = this),
          (this.position = this.mesh.position),
          (this.rotation = this.mesh.rotation),
          (this.rotation.x = -90 * n.DEG_TO_RAD),
          this.mesh.scale.set(e.scale, e.scale, 1),
          this.material.emissive
            ? (this._emissive = this.material.emissive.getHex())
            : (this._emissive = null);
      }),
      (n.Tile.prototype = {
        select: function() {
          return (
            this.material.emissive &&
              this.material.emissive.setHex(this.highlight),
            (this.selected = !0),
            this
          );
        },
        deselect: function() {
          return (
            null !== this._emissive &&
              this.material.emissive &&
              this.material.emissive.setHex(this._emissive),
            (this.selected = !1),
            this
          );
        },
        toggle: function() {
          return this.selected ? this.deselect() : this.select(), this;
        },
        dispose: function() {
          this.cell && this.cell.tile && (this.cell.tile = null),
            (this.cell = null),
            (this.position = null),
            (this.rotation = null),
            this.mesh.parent && this.mesh.parent.remove(this.mesh),
            (this.mesh.userData.structure = null),
            (this.mesh = null),
            (this.material = null),
            (this.userData = null),
            (this.entity = null),
            (this.geometry = null),
            (this._emissive = null);
        }
      }),
      (n.Tile.prototype.constructor = n.Tile),
      ((i = function() {
        (this.first = null),
          (this.last = null),
          (this.length = 0),
          (this.objToNodeMap = {}),
          (this.uniqueID = Date.now() + '' + Math.floor(1e3 * Math.random())),
          (this.sortArray = []);
      }).generateID = function() {
        return (
          Math.random()
            .toString(36)
            .slice(2) + Date.now()
        );
      }),
      ((i.prototype = {
        getNode: function(t) {
          return this.objToNodeMap[t.uniqueID];
        },
        addNode: function(t) {
          var e = new function() {
            (this.obj = null),
              (this.next = null),
              (this.prev = null),
              (this.free = !0);
          }();
          if (!t.uniqueID)
            try {
              t.uniqueID = i.generateID();
            } catch (t) {
              return (
                console.error(
                  '[LinkedList.addNode] obj passed is immutable: cannot attach necessary identifier'
                ),
                null
              );
            }
          return (
            (e.obj = t), (e.free = !1), (this.objToNodeMap[t.uniqueID] = e), e
          );
        },
        swapObjects: function(t, e) {
          (this.objToNodeMap[t.obj.uniqueID] = null),
            (this.objToNodeMap[e.uniqueID] = t),
            (t.obj = e);
        },
        add: function(t) {
          var e = this.objToNodeMap[t.uniqueID];
          if (e) {
            if (!1 === e.free) return;
            (e.obj = t), (e.free = !1), (e.next = null), (e.prev = null);
          } else e = this.addNode(t);
          if (this.first) {
            if (!this.last)
              throw new Error(
                "[LinkedList.add] No last in the list -- that shouldn't happen here"
              );
            (this.last.next = e),
              (e.prev = this.last),
              (this.last = e),
              (e.next = null);
          } else
            (this.first = e), (this.last = e), (e.next = null), (e.prev = null);
          this.length++, this.showDebug && this.dump('after add');
        },
        has: function(t) {
          return !!this.objToNodeMap[t.uniqueID];
        },
        moveUp: function(t) {
          this.dump('before move up');
          var e = this.getNode(t);
          if (!e) throw "Oops, trying to move an object that isn't in the list";
          if (e.prev) {
            var i = e.prev,
              n = i.prev;
            e == this.last && (this.last = i);
            var r = e.next;
            n && (n.next = e),
              (e.next = i),
              (e.prev = i.prev),
              (i.next = r),
              (i.prev = e),
              this.first == i && (this.first = e);
          }
        },
        moveDown: function(t) {
          var e = this.getNode(t);
          if (!e) throw "Oops, trying to move an object that isn't in the list";
          if (e.next) {
            var i = e.next;
            this.moveUp(i.obj), this.last == i && (this.last = e);
          }
        },
        sort: function(t) {
          var e,
            i,
            n = this.sortArray,
            r = this.first;
          for (n.length = 0; r; ) n.push(r.obj), (r = r.next);
          for (this.clear(), n.sort(t), i = n.length, e = 0; i > e; e++)
            this.add(n[e]);
        },
        remove: function(t) {
          var e = this.getNode(t);
          return !(
            !e ||
            e.free ||
            (e.prev && (e.prev.next = e.next),
            e.next && (e.next.prev = e.prev),
            e.prev || (this.first = e.next),
            e.next || (this.last = e.prev),
            (e.free = !0),
            (e.prev = null),
            (e.next = null),
            this.length--,
            0)
          );
        },
        shift: function() {
          var t = this.first;
          return 0 === this.length
            ? null
            : (t.prev && (t.prev.next = t.next),
              t.next && (t.next.prev = t.prev),
              (this.first = t.next),
              t.next || (this.last = null),
              (t.free = !0),
              (t.prev = null),
              (t.next = null),
              this.length--,
              t.obj);
        },
        pop: function() {
          var t = this.last;
          return 0 === this.length
            ? null
            : (t.prev && (t.prev.next = t.next),
              t.next && (t.next.prev = t.prev),
              (this.last = t.prev),
              t.prev || (this.first = null),
              (t.free = !0),
              (t.prev = null),
              (t.next = null),
              this.length--,
              t.obj);
        },
        concat: function(t) {
          for (var e = t.first; e; ) this.add(e.obj), (e = e.next);
        },
        clear: function() {
          for (var t = this.first; t; ) (t.free = !0), (t = t.next);
          (this.first = null), (this.length = 0);
        },
        dispose: function() {
          for (var t = this.first; t; ) (t.obj = null), (t = t.next);
          (this.first = null), (this.objToNodeMap = null);
        },
        dump: function(t) {
          console.log('====================' + t + '=====================');
          for (var e = this.first; e; )
            console.log(
              '{' +
                e.obj.toString() +
                '} previous=' +
                (e.prev ? e.prev.obj : 'NULL')
            ),
              (e = e.next());
          console.log('==================================='),
            console.log(
              'Last: {' +
                (this.last ? this.last.obj : 'NULL') +
                '} First: {' +
                (this.first ? this.first.obj : 'NULL') +
                '}'
            );
        }
      }).constructor = i),
      (n.LinkedList = i),
      (function() {
        var t = function(t, e, i, n, r) {
          (this._listener = e),
            (this.isOnce = i),
            (this.context = n),
            (this.signal = t),
            (this._priority = r || 0);
        };
        (t.prototype = {
          active: !0,
          params: null,
          execute: function(t) {
            var e, i;
            return (
              this.active &&
                this._listener &&
                ((i = this.params ? this.params.concat(t) : t),
                (e = this._listener.apply(this.context, i)),
                this.isOnce && this.detach()),
              e
            );
          },
          detach: function() {
            return this.isBound()
              ? this.signal.remove(this._listener, this.context)
              : null;
          },
          isBound: function() {
            return !!this.signal && !!this._listener;
          },
          _destroy: function() {
            delete this.signal, delete this._listener, delete this.context;
          },
          toString: function() {
            return (
              '[SignalBinding isOnce:' +
              this.isOnce +
              ', isBound:' +
              this.isBound() +
              ', active:' +
              this.active +
              ']'
            );
          }
        }).constructor = t;
        var e = function() {
          (this._bindings = []), (this._prevParams = null);
          var t = this;
          this.dispatch = function() {
            e.prototype.dispatch.apply(t, arguments);
          };
        };
        (e.prototype = {
          memorize: !1,
          _shouldPropagate: !0,
          active: !0,
          validateListener: function(t, e) {
            if ('function' != typeof t)
              throw new Error(
                'Signal: listener is a required param of {fn}() and should be a Function.'.replace(
                  '{fn}',
                  e
                )
              );
          },
          _registerListener: function(e, i, n, r) {
            var o,
              s = this._indexOfListener(e, n);
            if (-1 !== s) {
              if ((o = this._bindings[s]).isOnce !== i)
                throw new Error(
                  'You cannot add' +
                    (i ? '' : 'Once') +
                    '() then add' +
                    (i ? 'Once' : '') +
                    '() the same listener without removing the relationship first.'
                );
            } else (o = new t(this, e, i, n, r)), this._addBinding(o);
            return (
              this.memorize && this._prevParams && o.execute(this._prevParams),
              o
            );
          },
          _addBinding: function(t) {
            var e = this._bindings.length;
            do {
              e--;
            } while (
              this._bindings[e] &&
              t._priority <= this._bindings[e]._priority
            );
            this._bindings.splice(e + 1, 0, t);
          },
          _indexOfListener: function(t, e) {
            for (var i, n = this._bindings.length; n--; )
              if (
                ((i = this._bindings[n]), i._listener === t && i.context === e)
              )
                return n;
            return -1;
          },
          has: function(t, e) {
            return -1 !== this._indexOfListener(t, e);
          },
          add: function(t, e, i) {
            return (
              this.validateListener(t, 'add'),
              this._registerListener(t, !1, e, i)
            );
          },
          addOnce: function(t, e, i) {
            return (
              this.validateListener(t, 'addOnce'),
              this._registerListener(t, !0, e, i)
            );
          },
          remove: function(t, e) {
            this.validateListener(t, 'remove');
            var i = this._indexOfListener(t, e);
            return (
              -1 !== i &&
                (this._bindings[i]._destroy(), this._bindings.splice(i, 1)),
              t
            );
          },
          removeAll: function(t) {
            void 0 === t && (t = null);
            for (var e = this._bindings.length; e--; )
              t
                ? this._bindings[e].context === t &&
                  (this._bindings[e]._destroy(), this._bindings.splice(e, 1))
                : this._bindings[e]._destroy();
            t || (this._bindings.length = 0);
          },
          getNumListeners: function() {
            return this._bindings.length;
          },
          halt: function() {
            this._shouldPropagate = !1;
          },
          dispatch: function() {
            if (this.active) {
              var t,
                e = Array.prototype.slice.call(arguments),
                i = this._bindings.length;
              if ((this.memorize && (this._prevParams = e), i)) {
                (t = this._bindings.slice()), (this._shouldPropagate = !0);
                do {
                  i--;
                } while (
                  t[i] &&
                  this._shouldPropagate &&
                  !1 !== t[i].execute(e)
                );
              }
            }
          },
          forget: function() {
            this._prevParams = null;
          },
          dispose: function() {
            this.removeAll(), delete this._bindings, delete this._prevParams;
          },
          toString: function() {
            return (
              '[Signal active:' +
              this.active +
              ' numListeners:' +
              this.getNumListeners() +
              ']'
            );
          }
        }),
          (e.prototype.constructor = e),
          (n.Signal = e);
      })(),
      (n.AStarFinder = function(t) {
        t = t || {};
        var e = { allowDiagonal: !1, heuristicFilter: null };
        (e = n.Tools.merge(e, t)),
          (this.allowDiagonal = e.allowDiagonal),
          (this.heuristicFilter = e.heuristicFilter),
          (this.list = new n.LinkedList());
      }),
      (n.AStarFinder.prototype = {
        findPath: function(t, e, i, r) {
          var o, s, a, c, l, u;
          for (
            i = i || this.heuristicFilter,
              r.clearPath(),
              this.list.clear(),
              this.list.add(t);
            this.list.length > 0;

          ) {
            if (
              (this.list.sort(this.compare),
              ((o = this.list.shift())._visited = !0),
              o === e)
            )
              return n.PathUtil.backtrace(e);
            for (
              l = 0, u = (a = r.getNeighbors(o, this.allowDiagonal, i)).length;
              u > l;
              l++
            )
              if (
                ((c = a[l]),
                c.walkable &&
                  ((s = o._calcCost + r.distance(o, c)),
                  !c._visited || s < c._calcCost))
              ) {
                if (
                  ((c._visited = !0),
                  (c._parent = o),
                  (c._calcCost = s),
                  (c._priority = s + r.distance(e, c)),
                  c === e)
                )
                  return n.PathUtil.backtrace(e);
                this.list.add(c);
              }
          }
          return null;
        },
        compare: function(t, e) {
          return t._priority - e._priority;
        }
      }),
      (n.AStarFinder.prototype.constructor = n.AStarFinder),
      (n.PathUtil = {
        backtrace: function(t) {
          for (var e = [t]; t._parent; ) (t = t._parent), e.push(t);
          return e.reverse();
        },
        biBacktrace: function(t, e) {
          var i = this.backtrace(t),
            n = this.backtrace(e);
          return i.concat(n.reverse());
        },
        pathLength: function(t) {
          var e,
            i,
            n,
            r,
            o,
            s = 0;
          for (e = 1; e < t.length; ++e)
            (i = t[e - 1]),
              (n = t[e]),
              (r = i[0] - n[0]),
              (o = i[1] - n[1]),
              (s += Math.sqrt(r * r + o * o));
          return s;
        },
        interpolate: function(t, e, i, n) {
          var r,
            o,
            s,
            a,
            c,
            l,
            u = Math.abs,
            h = [];
          for (
            s = u(i - t),
              a = u(n - e),
              r = i > t ? 1 : -1,
              o = n > e ? 1 : -1,
              c = s - a;
            t !== i || e !== n;

          )
            h.push([t, e]),
              (l = 2 * c),
              l > -a && ((c -= a), (t += r)),
              s > l && ((c += s), (e += o));
          return h;
        },
        expandPath: function(t) {
          var e,
            i,
            n,
            r,
            o,
            s,
            a = [],
            c = t.length;
          if (2 > c) return a;
          for (o = 0; c - 1 > o; ++o)
            for (
              e = t[o],
                i = t[o + 1],
                n = this.interpolate(e[0], e[1], i[0], i[1]),
                r = n.length,
                s = 0;
              r - 1 > s;
              ++s
            )
              a.push(n[s]);
          return a.push(t[c - 1]), a;
        },
        smoothenPath: function(t, e) {
          var i,
            n,
            r,
            o,
            s,
            a,
            c,
            l,
            u,
            h,
            d,
            p,
            f = e.length,
            m = e[0][0],
            g = e[0][1],
            v = e[f - 1][0],
            y = e[f - 1][1];
          for (s = [[(i = m), (n = g)]], c = 2; f > c; ++c) {
            for (
              r = (u = e[c])[0],
                o = u[1],
                h = this.interpolate(i, n, r, o),
                p = !1,
                l = 1;
              l < h.length;
              ++l
            )
              if (((d = h[l]), !t.isWalkableAt(d[0], d[1]))) {
                p = !0;
                break;
              }
            p && ((a = e[c - 1]), s.push(a), (i = a[0]), (n = a[1]));
          }
          return s.push([v, y]), s;
        },
        compressPath: function(t) {
          if (t.length < 3) return t;
          var e,
            i,
            n,
            r,
            o,
            s,
            a = [],
            c = t[0][0],
            l = t[0][1],
            u = t[1][0],
            h = t[1][1],
            d = u - c,
            p = h - l;
          for (
            d /= o = Math.sqrt(d * d + p * p), p /= o, a.push([c, l]), s = 2;
            s < t.length;
            s++
          )
            (e = u),
              (i = h),
              (n = d),
              (r = p),
              (u = t[s][0]),
              (h = t[s][1]),
              (d = u - e),
              (p = h - i),
              (o = Math.sqrt(d * d + p * p)),
              (d /= o),
              (p /= o),
              (d !== n || p !== r) && a.push([e, i]);
          return a.push([u, h]), a;
        }
      }),
      (n.Loader = {
        manager: null,
        imageLoader: null,
        crossOrigin: !1,
        init: function(t) {
          (this.crossOrigin = t || !1),
            (this.manager = new THREE.LoadingManager(
              function() {},
              function() {},
              function() {
                console.warn('Error loading images');
              }
            )),
            (this.imageLoader = new THREE.ImageLoader(this.manager)),
            (this.imageLoader.crossOrigin = t);
        },
        loadTexture: function(t, e, i, n) {
          var r = new THREE.Texture(null, e);
          return (
            this.imageLoader.load(
              t,
              function(t) {
                (r.image = t), (r.needsUpdate = !0), i && i(r);
              },
              null,
              function(t) {
                n && n(t);
              }
            ),
            (r.sourceFile = t),
            r
          );
        }
      }),
      (n.MouseCaster = function(t, e, i) {
        (this.down = !1),
          (this.rightDown = !1),
          (this.pickedObject = null),
          (this.selectedObject = null),
          (this.allHits = null),
          (this.active = !0),
          (this.shift = !1),
          (this.ctrl = !1),
          (this.wheel = 0),
          (this.position = new THREE.Vector3()),
          (this.screenPosition = new THREE.Vector2()),
          (this.signal = new n.Signal()),
          (this.group = t),
          (this._camera = e),
          (this._raycaster = new THREE.Raycaster()),
          (this._preventDefault = !1),
          (i = i || document).addEventListener(
            'mousemove',
            this._onDocumentMouseMove.bind(this),
            !1
          ),
          i.addEventListener(
            'mousedown',
            this._onDocumentMouseDown.bind(this),
            !1
          ),
          i.addEventListener('mouseup', this._onDocumentMouseUp.bind(this), !1),
          i.addEventListener('mousewheel', this._onMouseWheel.bind(this), !1),
          i.addEventListener(
            'DOMMouseScroll',
            this._onMouseWheel.bind(this),
            !1
          );
      }),
      (n.MouseCaster.OVER = 'over'),
      (n.MouseCaster.OUT = 'out'),
      (n.MouseCaster.DOWN = 'down'),
      (n.MouseCaster.UP = 'up'),
      (n.MouseCaster.CLICK = 'click'),
      (n.MouseCaster.WHEEL = 'wheel'),
      (n.MouseCaster.prototype = {
        update: function() {
          if (this.active) {
            this._raycaster.setFromCamera(this.screenPosition, this._camera);
            var t,
              e,
              i = this._raycaster.intersectObject(this.group, !0);
            i.length > 0
              ? ((e = (t = i[0]).object.userData.structure),
                this.pickedObject != e &&
                  (this.pickedObject &&
                    this.signal.dispatch(n.MouseCaster.OUT, this.pickedObject),
                  (this.pickedObject = e),
                  (this.selectedObject = null),
                  this.signal.dispatch(n.MouseCaster.OVER, this.pickedObject)),
                this.position.copy(t.point),
                (this.screenPosition.z = t.distance))
              : (this.pickedObject &&
                  this.signal.dispatch(n.MouseCaster.OUT, this.pickedObject),
                (this.pickedObject = null),
                (this.selectedObject = null)),
              (this.allHits = i);
          }
        },
        preventDefault: function() {
          this._preventDefault = !0;
        },
        _onDocumentMouseDown: function(t) {
          return (
            (t = t || window.event).preventDefault(),
            this._preventDefault
              ? ((this._preventDefault = !1), !1)
              : (this.pickedObject && (this.selectedObject = this.pickedObject),
                (this.shift = t.shiftKey),
                (this.ctrl = t.ctrlKey),
                (this.down = 1 === t.which),
                (this.rightDown = 3 === t.which),
                void this.signal.dispatch(
                  n.MouseCaster.DOWN,
                  this.pickedObject
                ))
          );
        },
        _onDocumentMouseUp: function(t) {
          return (
            t.preventDefault(),
            this._preventDefault
              ? ((this._preventDefault = !1), !1)
              : ((this.shift = t.shiftKey),
                (this.ctrl = t.ctrlKey),
                this.signal.dispatch(n.MouseCaster.UP, this.pickedObject),
                this.selectedObject &&
                  this.pickedObject &&
                  this.selectedObject.uniqueID === this.pickedObject.uniqueID &&
                  this.signal.dispatch(n.MouseCaster.CLICK, this.pickedObject),
                (this.down = 1 !== t.which && this.down),
                void (this.rightDown = 3 !== t.which && this.rightDown))
          );
        },
        _onDocumentMouseMove: function(t) {
          t.preventDefault(),
            (this.screenPosition.x = t.clientX / window.innerWidth * 2 - 1),
            (this.screenPosition.y = -t.clientY / window.innerHeight * 2 + 1);
        },
        _onMouseWheel: function(t) {
          if (this.active) {
            t.preventDefault(), t.stopPropagation();
            var e = 0;
            void 0 !== t.wheelDelta
              ? (e = t.wheelDelta)
              : void 0 !== t.detail && (e = -t.detail),
              e > 0 ? this.wheel++ : this.wheel--,
              this.signal.dispatch(n.MouseCaster.WHEEL, this.wheel);
          }
        }
      }),
      (n.MouseCaster.prototype.constructor = n.MouseCaster),
      (n.Scene = function(t, e) {
        var i = {
            element: document.body,
            alpha: !0,
            antialias: !0,
            clearColor: '#fff',
            sortObjects: !1,
            fog: null,
            light: new THREE.DirectionalLight(16777215),
            lightPosition: null,
            cameraType: 'PerspectiveCamera',
            cameraPosition: null,
            orthoZoom: 4
          },
          r = { minDistance: 100, maxDistance: 1e3, zoomSpeed: 2, noZoom: !1 };
        if (
          ((i = n.Tools.merge(i, t)),
          'boolean' != typeof e && (r = n.Tools.merge(r, e)),
          (this.renderer = new THREE.WebGLRenderer({
            alpha: i.alpha,
            antialias: i.antialias
          })),
          this.renderer.setClearColor(i.clearColor, 0),
          (this.renderer.sortObjects = i.sortObjects),
          (this.width = window.innerWidth),
          (this.height = window.innerHeight),
          (this.orthoZoom = i.orthoZoom),
          (this.container = new THREE.Scene()),
          (this.container.fog = i.fog),
          this.container.add(new THREE.AmbientLight(14540253)),
          i.lightPosition || i.light.position.set(-1, 1, -1).normalize(),
          this.container.add(i.light),
          'OrthographicCamera' === i.cameraType)
        ) {
          var o = window.innerWidth / this.orthoZoom,
            s = window.innerHeight / this.orthoZoom;
          this.camera = new THREE.OrthographicCamera(
            o / -2,
            o / 2,
            s / 2,
            s / -2,
            1,
            5e3
          );
        } else
          this.camera = new THREE.PerspectiveCamera(
            50,
            this.width / this.height,
            1,
            5e3
          );
        (this.contolled = !!e),
          this.contolled &&
            ((this.controls = new THREE.OrbitControls(
              this.camera,
              this.renderer.domElement
            )),
            (this.controls.minDistance = r.minDistance),
            (this.controls.maxDistance = r.maxDistance),
            (this.controls.zoomSpeed = r.zoomSpeed),
            (this.controls.noZoom = r.noZoom)),
          i.cameraPosition && this.camera.position.copy(i.cameraPosition),
          window.addEventListener(
            'resize',
            function() {
              if (
                ((this.width = window.innerWidth),
                (this.height = window.innerHeight),
                'OrthographicCamera' === this.camera.type)
              ) {
                var t = this.width / this.orthoZoom,
                  e = this.height / this.orthoZoom;
                (this.camera.left = t / -2),
                  (this.camera.right = t / 2),
                  (this.camera.top = e / 2),
                  (this.camera.bottom = e / -2);
              } else this.camera.aspect = this.width / this.height;
              this.camera.updateProjectionMatrix(),
                this.renderer.setSize(this.width, this.height);
            }.bind(this),
            !1
          ),
          this.attachTo(i.element);
      }),
      (n.Scene.prototype = {
        attachTo: function(t) {
          (t.style.width = this.width + 'px'),
            (t.style.height = this.height + 'px'),
            this.renderer.setPixelRatio(window.devicePixelRatio),
            this.renderer.setSize(this.width, this.height),
            t.appendChild(this.renderer.domElement);
        },
        add: function(t) {
          this.container.add(t);
        },
        remove: function(t) {
          this.container.remove(t);
        },
        render: function() {
          this.contolled && this.controls.update(),
            this.renderer.render(this.container, this.camera);
        },
        updateOrthoZoom: function() {
          if (this.orthoZoom <= 0) this.orthoZoom = 0;
          else {
            var t = this.width / this.orthoZoom,
              e = this.height / this.orthoZoom;
            (this.camera.left = t / -2),
              (this.camera.right = t / 2),
              (this.camera.top = e / 2),
              (this.camera.bottom = e / -2),
              this.camera.updateProjectionMatrix();
          }
        },
        focusOn: function(t) {
          this.camera.lookAt(t.position);
        }
      }),
      (n.Scene.prototype.constructor = n.Scene),
      (n.SelectionManager = function(t) {
        (this.mouse = t),
          (this.onSelect = new n.Signal()),
          (this.onDeselect = new n.Signal()),
          (this.selected = null),
          (this.toggleSelection = !1),
          this.mouse.signal.add(this.onMouse, this);
      }),
      (n.SelectionManager.prototype = {
        select: function(t, e) {
          t &&
            ((e = e || !0),
            this.selected !== t && this.clearSelection(e),
            t.selected
              ? this.toggleSelection &&
                (e && this.onDeselect.dispatch(t), t.deselect())
              : t.select(),
            (this.selected = t),
            e && this.onSelect.dispatch(t));
        },
        clearSelection: function(t) {
          (t = t || !0),
            this.selected &&
              (t && this.onDeselect.dispatch(this.selected),
              this.selected.deselect()),
            (this.selected = null);
        },
        onMouse: function(t, e) {
          switch (t) {
            case n.MouseCaster.DOWN:
              e || this.clearSelection();
              break;
            case n.MouseCaster.CLICK:
              this.select(e);
          }
        }
      }),
      (n.SelectionManager.prototype.constructor = n.SelectionManager),
      (n.Tools = {
        clamp: function(t, e, i) {
          return Math.max(e, Math.min(i, t));
        },
        sign: function(t) {
          return t && t / Math.abs(t);
        },
        random: function(t, e) {
          return 1 === arguments.length
            ? Math.random() * t - 0.5 * t
            : Math.random() * (e - t) + t;
        },
        randomInt: function(t, e) {
          return 1 === arguments.length
            ? (Math.random() * t - 0.5 * t) | 0
            : (Math.random() * (e - t + 1) + t) | 0;
        },
        normalize: function(t, e, i) {
          return (t - e) / (i - e);
        },
        getShortRotation: function(t) {
          return (
            (t %= this.TAU) > this.PI
              ? (t -= this.TAU)
              : t < -this.PI && (t += this.TAU),
            t
          );
        },
        generateID: function() {
          return (
            Math.random()
              .toString(36)
              .slice(2) + Date.now()
          );
        },
        isPlainObject: function(t) {
          if ('object' != typeof t || t.nodeType || t === t.window) return !1;
          try {
            if (
              t.constructor &&
              !Object.prototype.hasOwnProperty.call(
                t.constructor.prototype,
                'isPrototypeOf'
              )
            )
              return !1;
          } catch (t) {
            return !1;
          }
          return !0;
        },
        merge: function(t, e) {
          var i = this,
            n = Array.isArray(e),
            r = (n && []) || {};
          return n
            ? ((t = t || []),
              (r = r.concat(t)),
              e.forEach(function(e, n) {
                void 0 === r[n]
                  ? (r[n] = e)
                  : i.isPlainObject(e)
                    ? (r[n] = i.merge(t[n], e))
                    : -1 === t.indexOf(e) && r.push(e);
              }),
              r)
            : (t &&
                i.isPlainObject(t) &&
                Object.keys(t).forEach(function(e) {
                  r[e] = t[e];
                }),
              Object.keys(e).forEach(function(n) {
                e[n] && i.isPlainObject(e[n]) && t[n]
                  ? (r[n] = i.merge(t[n], e[n]))
                  : (r[n] = e[n]);
              }),
              r);
        },
        now: function() {
          return window.nwf
            ? window.nwf.system.Performance.elapsedTime
            : window.performance.now();
        },
        empty: function(t) {
          for (; t.lastChild; ) t.removeChild(t.lastChild);
        },
        radixSort: function(t, e, i, n) {
          if (
            ((e = e || 0),
            (i = i || t.length),
            (n = n || 31),
            !(e >= i - 1 || 0 > n))
          ) {
            for (var r = e, o = i, s = 1 << n; o > r; )
              if (t[r] & s) {
                --o;
                var a = t[r];
                (t[r] = t[o]), (t[o] = a);
              } else ++r;
            this.radixSort(t, e, o, n - 1), this.radixSort(t, o, i, n - 1);
          }
        },
        randomizeRGB: function(t, e) {
          var i,
            n,
            r = t.split(','),
            o = 'rgb(';
          for (e = this.randomInt(e), i = 0; 3 > i; i++)
            (n = parseInt(r[i]) + e),
              0 > n ? (n = 0) : n > 255 && (n = 255),
              (o += n + ',');
          return (o = o.substring(0, o.length - 1)) + ')';
        },
        getJSON: function(t) {
          var e = new XMLHttpRequest(),
            i =
              void 0 !== t.cache && t.cache
                ? t.url
                : t.url + '?t=' + Math.floor(1e4 * Math.random()) + Date.now();
          (e.onreadystatechange = function() {
            if (200 !== this.status)
              0 !== this.status &&
                console.warn(
                  '[Tools.getJSON] Error: ' +
                    this.status +
                    ' (' +
                    this.statusText +
                    ') :: ' +
                    t.url
                );
            else {
              var e = null;
              try {
                e = JSON.parse(this.responseText);
              } catch (t) {
                return;
              }
              t.callback.call(t.scope || null, e);
            }
          }),
            e.open('GET', i, !0),
            e.setRequestHeader('Accept', 'application/json'),
            e.setRequestHeader('Content-Type', 'application/json'),
            e.send('');
        }
      });
  },
  function(t, e) {
    t.exports = {
      size: 5,
      cellSize: 10,
      extrudeSettings: {
        amount: 1,
        bevelEnabled: !0,
        bevelSegments: 1,
        steps: 1,
        bevelSize: 0.5,
        bevelThickness: 0.5
      },
      autogenerated: !0,
      cells: [
        { q: -1, r: 0, s: 1, h: 1, walkable: !0, userData: {} },
        { q: 0, r: -1, s: 1, h: 1, walkable: !0, userData: {} },
        { q: 0, r: 0, s: 0, h: 1, walkable: !0, userData: {} },
        { q: 1, r: -1, s: 0, h: 1, walkable: !0, userData: {} },
        { q: -1, r: 1, s: 0, h: 0, walkable: !0, userData: {} },
        { q: 0, r: 1, s: -1, h: 0, walkable: !0, userData: {} },
        { q: 1, r: 0, s: -1, h: 0, walkable: !0, userData: {} }
      ]
    };
  },
  function(t, e) {
    var i,
      n = (t.exports.Primitive = {
        defaultComponents: { ocean: {}, rotation: { x: -90, y: 0, z: 0 } },
        mappings: {
          width: 'ocean.width',
          depth: 'ocean.depth',
          density: 'ocean.density',
          color: 'ocean.color',
          opacity: 'ocean.opacity'
        }
      }),
      r = (t.exports.Component = {
        schema: {
          width: { default: 10, min: 0 },
          depth: { default: 10, min: 0 },
          density: { default: 10 },
          amplitude: { default: 0.1 },
          amplitudeVariance: { default: 0.3 },
          speed: { default: 1 },
          speedVariance: { default: 2 },
          color: { default: '#7AD2F7', type: 'color' },
          opacity: { default: 0.8 }
        },
        play: function() {
          var t = this.el,
            e = this.data,
            i = t.components.material,
            n = new THREE.PlaneGeometry(e.width, e.depth, e.density, e.density);
          n.mergeVertices(), (this.waves = []);
          for (var r, o = 0, s = n.vertices.length; o < s; o++)
            (r = n.vertices[o]),
              this.waves.push({
                z: r.z,
                ang: Math.random() * Math.PI * 2,
                amp: e.amplitude + Math.random() * e.amplitudeVariance,
                speed: (e.speed + Math.random() * e.speedVariance) / 1e3
              });
          i ||
            ((i = {}).material = new THREE.MeshPhongMaterial({
              color: e.color,
              transparent: e.opacity < 1,
              opacity: e.opacity,
              shading: THREE.FlatShading
            })),
            (this.mesh = new THREE.Mesh(n, i.material)),
            t.setObject3D('mesh', this.mesh);
        },
        remove: function() {
          this.el.removeObject3D('mesh');
        },
        tick: function(t, e) {
          if (e) {
            for (
              var i, n, r = this.mesh.geometry.vertices, o = 0;
              (i = r[o]);
              o++
            )
              (n = this.waves[o]),
                (i.z = n.z + Math.sin(n.ang) * n.amp),
                (n.ang += n.speed * e);
            this.mesh.geometry.verticesNeedUpdate = !0;
          }
        }
      });
    t.exports.registerAll = ((i = !1),
    function(t) {
      i ||
        ((t = t || window.AFRAME).registerComponent('ocean', r),
        t.registerPrimitive('a-ocean', n),
        (i = !0));
    });
  },
  function(t, e) {
    var i,
      n = (t.exports.Primitive = {
        defaultComponents: { tube: {} },
        mappings: {
          path: 'tube.path',
          segments: 'tube.segments',
          radius: 'tube.radius',
          radialSegments: 'tube.radialSegments',
          closed: 'tube.closed'
        }
      }),
      r = (t.exports.Component = {
        schema: {
          path: { default: [] },
          segments: { default: 64 },
          radius: { default: 1 },
          radialSegments: { default: 8 },
          closed: { default: !1 }
        },
        init: function() {
          var t = this.el,
            e = this.data,
            i = t.components.material;
          if (e.path.length) {
            var n = new THREE.CatmullRomCurve3(
                e.path.map(function(t) {
                  return (
                    (t = t.split(' ')),
                    new THREE.Vector3(Number(t[0]), Number(t[1]), Number(t[2]))
                  );
                })
              ),
              r = new THREE.TubeGeometry(
                n,
                e.segments,
                e.radius,
                e.radialSegments,
                e.closed
              );
            i || ((i = {}).material = new THREE.MeshPhongMaterial()),
              (this.mesh = new THREE.Mesh(r, i.material)),
              this.el.setObject3D('mesh', this.mesh);
          } else
            console.error('[a-tube] `path` property expected but not found.');
        },
        remove: function() {
          this.mesh && this.el.removeObject3D('mesh');
        }
      });
    t.exports.registerAll = ((i = !1),
    function(t) {
      i ||
        ((t = t || window.AFRAME).registerComponent('tube', r),
        t.registerPrimitive('a-tube', n),
        (i = !0));
    });
  },
  function(t, e, i) {
    if ('undefined' == typeof AFRAME)
      throw new Error(
        'Component attempted to register before AFRAME was available.'
      );
    i(134),
      i(135),
      i(136),
      i(138),
      i(139),
      i(140),
      i(141),
      i(142),
      i(143),
      i(144),
      i(145),
      AFRAME.registerComponent('super-hands', {
        schema: {
          colliderState: { default: '' },
          colliderEvent: { default: 'hit' },
          colliderEventProperty: { default: 'el' },
          colliderEndEvent: { default: 'hitend' },
          colliderEndEventProperty: { default: 'el' },
          grabStartButtons: {
            default: [
              'gripdown',
              'trackpaddown',
              'triggerdown',
              'gripclose',
              'pointup',
              'thumbup',
              'pointingstart',
              'pistolstart',
              'thumbstickdown',
              'mousedown',
              'touchstart'
            ]
          },
          grabEndButtons: {
            default: [
              'gripup',
              'trackpadup',
              'triggerup',
              'gripopen',
              'pointdown',
              'thumbdown',
              'pointingend',
              'pistolend',
              'thumbstickup',
              'mouseup',
              'touchend'
            ]
          },
          stretchStartButtons: {
            default: [
              'gripdown',
              'trackpaddown',
              'triggerdown',
              'gripclose',
              'pointup',
              'thumbup',
              'pointingstart',
              'pistolstart',
              'thumbstickdown',
              'mousedown',
              'touchstart'
            ]
          },
          stretchEndButtons: {
            default: [
              'gripup',
              'trackpadup',
              'triggerup',
              'gripopen',
              'pointdown',
              'thumbdown',
              'pointingend',
              'pistolend',
              'thumbstickup',
              'mouseup',
              'touchend'
            ]
          },
          dragDropStartButtons: {
            default: [
              'gripdown',
              'trackpaddown',
              'triggerdown',
              'gripclose',
              'pointup',
              'thumbup',
              'pointingstart',
              'pistolstart',
              'thumbstickdown',
              'mousedown',
              'touchstart'
            ]
          },
          dragDropEndButtons: {
            default: [
              'gripup',
              'trackpadup',
              'triggerup',
              'gripopen',
              'pointdown',
              'thumbdown',
              'pointingend',
              'pistolend',
              'thumbstickup',
              'mouseup',
              'touchend'
            ]
          }
        },
        multiple: !1,
        init: function() {
          (this.HOVER_EVENT = 'hover-start'),
            (this.UNHOVER_EVENT = 'hover-end'),
            (this.GRAB_EVENT = 'grab-start'),
            (this.UNGRAB_EVENT = 'grab-end'),
            (this.STRETCH_EVENT = 'stretch-start'),
            (this.UNSTRETCH_EVENT = 'stretch-end'),
            (this.DRAG_EVENT = 'drag-start'),
            (this.UNDRAG_EVENT = 'drag-end'),
            (this.DRAGOVER_EVENT = 'dragover-start'),
            (this.UNDRAGOVER_EVENT = 'dragover-end'),
            (this.DRAGDROP_EVENT = 'drag-drop'),
            (this.otherSuperHand = null),
            (this.gehDragged = new Set()),
            (this.gehClicking = new Set()),
            (this.hoverEls = []),
            (this.state = new Map()),
            (this.dragging = !1),
            (this.unHover = this.unHover.bind(this)),
            (this.unWatch = this.unWatch.bind(this)),
            (this.onHit = this.onHit.bind(this)),
            (this.onGrabStartButton = this.onGrabStartButton.bind(this)),
            (this.onGrabEndButton = this.onGrabEndButton.bind(this)),
            (this.onStretchStartButton = this.onStretchStartButton.bind(this)),
            (this.onStretchEndButton = this.onStretchEndButton.bind(this)),
            (this.onDragDropStartButton = this.onDragDropStartButton.bind(
              this
            )),
            (this.onDragDropEndButton = this.onDragDropEndButton.bind(this)),
            this.system.registerMe(this);
        },
        update: function(t) {
          this.data.colliderState.length &&
            console.warn(
              'super-hands colliderState property is deprecated. Use colliderEndEvent/colliderEndEventProperty instead'
            ),
            this.unRegisterListeners(t),
            this.registerListeners();
        },
        remove: function() {
          this.system.unregisterMe(this),
            this.unRegisterListeners(),
            this.hoverEls.forEach(t => {
              t.removeEventListener('stateremoved', this.unWatch);
            }),
            (this.hoverEls.length = 0),
            this.state.get(this.HOVER_EVENT) &&
              this._unHover(this.state.get(this.HOVER_EVENT)),
            this.onGrabEndButton(),
            this.onStretchEndButton(),
            this.onDragDropEndButton();
        },
        pause: function() {},
        play: function() {},
        onGrabStartButton: function(t) {
          let e = this.state.get(this.GRAB_EVENT);
          this.dispatchMouseEventAll('mousedown', this.el),
            (this.gehClicking = new Set(this.hoverEls)),
            e ||
              ((e = this.findTarget(this.GRAB_EVENT, {
                hand: this.el,
                buttonEvent: t
              })) &&
                (this.state.set(this.GRAB_EVENT, e), this._unHover(e)));
        },
        onGrabEndButton: function(t) {
          const e = this.hoverEls.filter(t => this.gehClicking.has(t)),
            i = this.state.get(this.GRAB_EVENT),
            n = { hand: this.el, buttonEvent: t };
          this.dispatchMouseEventAll('mouseup', this.el);
          for (let t = 0; t < e.length; t++)
            this.dispatchMouseEvent(e[t], 'click', this.el);
          this.gehClicking.clear(),
            i &&
              !this.emitCancelable(i, this.UNGRAB_EVENT, n) &&
              (this.promoteHoveredEl(this.state.get(this.GRAB_EVENT)),
              this.state.delete(this.GRAB_EVENT),
              this.hover());
        },
        onStretchStartButton: function(t) {
          let e = this.state.get(this.STRETCH_EVENT);
          e ||
            ((e = this.findTarget(this.STRETCH_EVENT, {
              hand: this.el,
              buttonEvent: t
            })) &&
              (this.state.set(this.STRETCH_EVENT, e), this._unHover(e)));
        },
        onStretchEndButton: function(t) {
          const e = this.state.get(this.STRETCH_EVENT),
            i = { hand: this.el, buttonEvent: t };
          e &&
            !this.emitCancelable(e, this.UNSTRETCH_EVENT, i) &&
            (this.promoteHoveredEl(e),
            this.state.delete(this.STRETCH_EVENT),
            this.hover());
        },
        onDragDropStartButton: function(t) {
          let e = this.state.get(this.DRAG_EVENT);
          (this.dragging = !0),
            this.hoverEls.length &&
              ((this.gehDragged = new Set(this.hoverEls)),
              this.dispatchMouseEventAll('dragstart', this.el)),
            e ||
              ((e =
                this.state.get(this.GRAB_EVENT) &&
                !this.emitCancelable(
                  this.state.get(this.GRAB_EVENT),
                  this.DRAG_EVENT,
                  { hand: this.el, buttonEvent: t }
                )
                  ? this.state.get(this.GRAB_EVENT)
                  : this.findTarget(this.DRAG_EVENT, {
                      hand: this.el,
                      buttonEvent: t
                    })) &&
                (this.state.set(this.DRAG_EVENT, e), this._unHover(e)));
        },
        onDragDropEndButton: function(t) {
          const e = this.state.get(this.DRAG_EVENT);
          if (
            ((this.dragging = !1),
            this.gehDragged.forEach(t => {
              this.dispatchMouseEvent(t, 'dragend', this.el),
                this.dispatchMouseEventAll('drop', t, !0, !0),
                this.dispatchMouseEventAll('dragleave', t, !0, !0);
            }),
            this.gehDragged.clear(),
            e)
          ) {
            const i = { hand: this.el, dropped: e, on: null, buttonEvent: t },
              n = { hand: this.el, buttonEvent: t },
              r = this.findTarget(this.DRAGDROP_EVENT, i, !0);
            r &&
              ((i.on = r),
              this.emitCancelable(e, this.DRAGDROP_EVENT, i),
              this._unHover(r)),
              this.emitCancelable(e, this.UNDRAG_EVENT, n) ||
                (this.promoteHoveredEl(e),
                this.state.delete(this.DRAG_EVENT),
                this.hover());
          }
        },
        onHit: function(t) {
          const e = t.detail[this.data.colliderEventProperty];
          var i = t => {
            let e;
            -1 === (e = this.hoverEls.indexOf(t)) &&
              (this.hoverEls.push(t),
              t.addEventListener('stateremoved', this.unWatch),
              this.dispatchMouseEvent(t, 'mouseover', this.el),
              this.dragging &&
                this.gehDragged.size &&
                this.gehDragged.forEach(t => {
                  this.dispatchMouseEventAll('dragenter', t, !0, !0);
                }),
              this.hover());
          };
          e && (Array.isArray(e) ? e.forEach(i) : i(e));
        },
        hover: function() {
          var t, e;
          this.state.has(this.HOVER_EVENT) &&
            this._unHover(this.state.get(this.HOVER_EVENT), !0),
            this.state.has(this.DRAGOVER_EVENT) &&
              this._unHover(this.state.get(this.DRAGOVER_EVENT), !0),
            this.dragging &&
              this.state.get(this.DRAG_EVENT) &&
              ((t = {
                hand: this.el,
                hovered: e,
                carried: this.state.get(this.DRAG_EVENT)
              }),
              (e = this.findTarget(this.DRAGOVER_EVENT, t, !0)) &&
                (e.addEventListener('stateremoved', this.unHover),
                this.emitCancelable(
                  this.state.get(this.DRAG_EVENT),
                  this.DRAGOVER_EVENT,
                  t
                ),
                this.state.set(this.DRAGOVER_EVENT, e))),
            this.state.has(this.DRAGOVER_EVENT) ||
              ((e = this.findTarget(this.HOVER_EVENT, { hand: this.el }, !0)) &&
                (e.addEventListener('stateremoved', this.unHover),
                this.state.set(this.HOVER_EVENT, e)));
        },
        unHover: function(t) {
          const e = t.detail[this.data.colliderEndEventProperty];
          e
            ? Array.isArray(e)
              ? e.forEach(t => this._unHover(t))
              : this._unHover(e)
            : t.detail.state === this.data.colliderState &&
              this._unHover(t.target);
        },
        _unHover: function(t, e) {
          let i,
            n = !1;
          t.removeEventListener('stateremoved', this.unHover),
            t === this.state.get(this.DRAGOVER_EVENT) &&
              (this.state.delete(this.DRAGOVER_EVENT),
              (n = !0),
              (i = {
                hand: this.el,
                hovered: t,
                carried: this.state.get(this.DRAG_EVENT)
              }),
              this.emitCancelable(t, this.UNDRAGOVER_EVENT, i),
              this.state.has(this.DRAG_EVENT) &&
                this.emitCancelable(
                  this.state.get(this.DRAG_EVENT),
                  this.UNDRAGOVER_EVENT,
                  i
                )),
            t === this.state.get(this.HOVER_EVENT) &&
              (this.state.delete(this.HOVER_EVENT),
              (n = !0),
              this.emitCancelable(t, this.UNHOVER_EVENT, { hand: this.el })),
            n && !e && this.hover();
        },
        unWatch: function(t) {
          const e = t.detail[this.data.colliderEndEventProperty];
          e
            ? Array.isArray(e)
              ? e.forEach(t => this._unWatch(t))
              : this._unWatch(e)
            : t.detail.state === this.data.colliderState &&
              this._unWatch(t.target);
        },
        _unWatch: function(t) {
          var e = this.hoverEls.indexOf(t);
          t.removeEventListener('stateremoved', this.unWatch),
            -1 !== e && this.hoverEls.splice(e, 1),
            this.gehDragged.forEach(e => {
              this.dispatchMouseEvent(t, 'dragleave', e),
                this.dispatchMouseEvent(e, 'dragleave', t);
            }),
            this.dispatchMouseEvent(t, 'mouseout', this.el);
        },
        registerListeners: function() {
          this.el.addEventListener(this.data.colliderEvent, this.onHit),
            this.el.addEventListener(this.data.colliderEndEvent, this.unWatch),
            this.el.addEventListener(this.data.colliderEndEvent, this.unHover),
            this.data.grabStartButtons.forEach(t => {
              this.el.addEventListener(t, this.onGrabStartButton);
            }),
            this.data.grabEndButtons.forEach(t => {
              this.el.addEventListener(t, this.onGrabEndButton);
            }),
            this.data.stretchStartButtons.forEach(t => {
              this.el.addEventListener(t, this.onStretchStartButton);
            }),
            this.data.stretchEndButtons.forEach(t => {
              this.el.addEventListener(t, this.onStretchEndButton);
            }),
            this.data.dragDropStartButtons.forEach(t => {
              this.el.addEventListener(t, this.onDragDropStartButton);
            }),
            this.data.dragDropEndButtons.forEach(t => {
              this.el.addEventListener(t, this.onDragDropEndButton);
            });
        },
        unRegisterListeners: function(t) {
          (t = t || this.data),
            0 !== Object.keys(t).length &&
              (this.el.removeEventListener(t.colliderEvent, this.onHit),
              this.el.removeEventListener(t.colliderEndEvent, this.unHover),
              this.el.removeEventListener(t.colliderEndEvent, this.unWatch),
              t.grabStartButtons.forEach(t => {
                this.el.removeEventListener(t, this.onGrabStartButton);
              }),
              t.grabEndButtons.forEach(t => {
                this.el.removeEventListener(t, this.onGrabEndButton);
              }),
              t.stretchStartButtons.forEach(t => {
                this.el.removeEventListener(t, this.onStretchStartButton);
              }),
              t.stretchEndButtons.forEach(t => {
                this.el.removeEventListener(t, this.onStretchEndButton);
              }),
              t.dragDropStartButtons.forEach(t => {
                this.el.removeEventListener(t, this.onDragDropStartButton);
              }),
              t.dragDropEndButtons.forEach(t => {
                this.el.removeEventListener(t, this.onDragDropEndButton);
              }));
        },
        emitCancelable: function(t, e, i) {
          var n, r;
          return (
            ((n = {
              bubbles: !0,
              cancelable: !0,
              detail: (i = i || {})
            }).detail.target =
              n.detail.target || t),
            (r = new window.CustomEvent(e, n)),
            t.dispatchEvent(r)
          );
        },
        dispatchMouseEvent: function(t, e, i) {
          var n = new window.MouseEvent(e, { relatedTarget: i });
          t.dispatchEvent(n);
        },
        dispatchMouseEventAll: function(t, e, i, n) {
          let r = this.hoverEls;
          if (
            (i &&
              (r = r.filter(
                t =>
                  t !== this.state.get(this.GRAB_EVENT) &&
                  t !== this.state.get(this.DRAG_EVENT) &&
                  t !== this.state.get(this.STRETCH_EVENT) &&
                  !this.gehDragged.has(t)
              )),
            n)
          )
            for (let i = 0; i < r.length; i++)
              this.dispatchMouseEvent(r[i], t, e),
                this.dispatchMouseEvent(e, t, r[i]);
          else
            for (let i = 0; i < r.length; i++)
              this.dispatchMouseEvent(r[i], t, e);
        },
        findTarget: function(t, e, i) {
          var n,
            r = this.hoverEls;
          for (
            i &&
              (r = r.filter(
                t =>
                  t !== this.state.get(this.GRAB_EVENT) &&
                  t !== this.state.get(this.DRAG_EVENT) &&
                  t !== this.state.get(this.STRETCH_EVENT)
              )),
              n = r.length - 1;
            n >= 0;
            n--
          )
            if (!this.emitCancelable(r[n], t, e)) return r[n];
          return null;
        },
        promoteHoveredEl: function(t) {
          var e = this.hoverEls.indexOf(t);
          -1 !== e && (this.hoverEls.splice(e, 1), this.hoverEls.push(t));
        }
      });
  },
  function(t, e) {
    AFRAME.registerSystem('super-hands', {
      init: function() {
        this.superHands = [];
      },
      registerMe: function(t) {
        1 === this.superHands.length &&
          ((this.superHands[0].otherSuperHand = t),
          (t.otherSuperHand = this.superHands[0])),
          this.superHands.push(t);
      },
      unregisterMe: function(t) {
        var e = this.superHands.indexOf(t);
        -1 !== e && this.superHands.splice(e, 1),
          this.superHands.forEach(e => {
            e.otherSuperHand === t && (e.otherSuperHand = null);
          });
      }
    });
  },
  function(t, e) {
    AFRAME.registerComponent('hoverable', {
      init: function() {
        (this.HOVERED_STATE = 'hovered'),
          (this.HOVER_EVENT = 'hover-start'),
          (this.UNHOVER_EVENT = 'hover-end'),
          (this.hoverers = []),
          (this.start = this.start.bind(this)),
          (this.end = this.end.bind(this)),
          this.el.addEventListener(this.HOVER_EVENT, this.start),
          this.el.addEventListener(this.UNHOVER_EVENT, this.end);
      },
      remove: function() {
        this.el.removeEventListener(this.HOVER_EVENT, this.start),
          this.el.removeEventListener(this.UNHOVER_EVENT, this.end);
      },
      start: function(t) {
        this.el.addState(this.HOVERED_STATE),
          -1 === this.hoverers.indexOf(t.detail.hand) &&
            this.hoverers.push(t.detail.hand),
          t.preventDefault && t.preventDefault();
      },
      end: function(t) {
        var e = this.hoverers.indexOf(t.detail.hand);
        -1 !== e && this.hoverers.splice(e, 1),
          this.hoverers.length < 1 && this.el.removeState(this.HOVERED_STATE);
      }
    });
  },
  function(t, e, i) {
    const n = AFRAME.utils.extendDeep,
      r = i(137),
      o = i(15);
    AFRAME.registerComponent(
      'grabbable',
      n({}, r, o, {
        schema: {
          maxGrabbers: { type: 'int', default: NaN },
          invert: { default: !1 },
          suppressY: { default: !1 }
        },
        init: function() {
          (this.GRABBED_STATE = 'grabbed'),
            (this.GRAB_EVENT = 'grab-start'),
            (this.UNGRAB_EVENT = 'grab-end'),
            (this.grabbed = !1),
            (this.grabbers = []),
            (this.constraints = new Map()),
            (this.deltaPositionIsValid = !1),
            (this.grabDistance = void 0),
            (this.grabDirection = { x: 0, y: 0, z: -1 }),
            (this.grabOffset = { x: 0, y: 0, z: 0 }),
            (this.destPosition = { x: 0, y: 0, z: 0 }),
            (this.deltaPosition = new THREE.Vector3()),
            (this.targetPosition = new THREE.Vector3()),
            this.physicsInit(),
            this.el.addEventListener(this.GRAB_EVENT, t => this.start(t)),
            this.el.addEventListener(this.UNGRAB_EVENT, t => this.end(t)),
            this.el.addEventListener('mouseout', t => this.lostGrabber(t));
        },
        update: function() {
          this.physicsUpdate(),
            (this.xFactor = this.data.invert ? -1 : 1),
            (this.zFactor = this.data.invert ? -1 : 1),
            (this.yFactor = (this.data.invert ? -1 : 1) * !this.data.suppressY);
        },
        tick: function() {
          var t;
          this.grabber &&
            (this.targetPosition.copy(this.grabDirection),
            this.targetPosition
              .applyQuaternion(this.grabber.object3D.getWorldQuaternion())
              .setLength(this.grabDistance)
              .add(this.grabber.object3D.getWorldPosition())
              .add(this.grabOffset),
            this.deltaPositionIsValid
              ? (this.deltaPosition.sub(this.targetPosition),
                (t = this.el.getAttribute('position')),
                (this.destPosition.x =
                  t.x - this.deltaPosition.x * this.xFactor),
                (this.destPosition.y =
                  t.y - this.deltaPosition.y * this.yFactor),
                (this.destPosition.z =
                  t.z - this.deltaPosition.z * this.zFactor),
                this.el.setAttribute('position', this.destPosition))
              : (this.deltaPositionIsValid = !0),
            this.deltaPosition.copy(this.targetPosition));
        },
        remove: function() {
          this.el.removeEventListener(this.GRAB_EVENT, this.start),
            this.el.removeEventListener(this.UNGRAB_EVENT, this.end),
            this.physicsRemove();
        },
        start: function(t) {
          if (!this.startButtonOk(t)) return;
          const e =
            !Number.isFinite(this.data.maxGrabbers) ||
            this.grabbers.length < this.data.maxGrabbers;
          if (-1 === this.grabbers.indexOf(t.detail.hand) && e) {
            if (!t.detail.hand.object3D)
              return void console.warn(
                'grabbable entities must have an object3D'
              );
            this.grabbers.push(t.detail.hand),
              this.physicsStart(t) ||
                this.grabber ||
                ((this.grabber = t.detail.hand), this.resetGrabber()),
              t.preventDefault && t.preventDefault(),
              (this.grabbed = !0),
              this.el.addState(this.GRABBED_STATE);
          }
        },
        end: function(t) {
          const e = this.grabbers.indexOf(t.detail.hand);
          this.endButtonOk(t) &&
            (-1 !== e &&
              (this.grabbers.splice(e, 1), (this.grabber = this.grabbers[0])),
            this.physicsEnd(t),
            this.resetGrabber() ||
              ((this.grabbed = !1), this.el.removeState(this.GRABBED_STATE)),
            t.preventDefault && t.preventDefault());
        },
        resetGrabber: function() {
          let t;
          return (
            !!this.grabber &&
            ((t = this.grabber.getAttribute('raycaster')),
            (this.deltaPositionIsValid = !1),
            (this.grabDistance = this.el.object3D
              .getWorldPosition()
              .distanceTo(this.grabber.object3D.getWorldPosition())),
            t &&
              ((this.grabDirection = t.direction),
              (this.grabOffset = t.origin)),
            !0)
          );
        },
        lostGrabber: function(t) {
          let e = this.grabbers.indexOf(t.relatedTarget);
          -1 === e ||
            t.relatedTarget === this.grabber ||
            this.physicsIsConstrained(t.relatedTarget) ||
            this.grabbers.splice(e, 1);
        }
      })
    );
  },
  function(t, e) {
    t.exports = {
      schema: { usePhysics: { default: 'ifavailable' } },
      physicsInit: function() {
        this.constraints = new Map();
      },
      physicsUpdate: function() {
        'never' === this.data.usePhysics &&
          this.constraints.size &&
          this.physicsClear();
      },
      physicsRemove: function() {
        this.physicsClear();
      },
      physicsStart: function(t) {
        if (
          'never' !== this.data.usePhysics &&
          this.el.body &&
          t.detail.hand.body &&
          !this.constraints.has(t.detail.hand)
        ) {
          let e = new window.CANNON.LockConstraint(
            this.el.body,
            t.detail.hand.body
          );
          return (
            this.el.body.world.addConstraint(e),
            this.constraints.set(t.detail.hand, e),
            !0
          );
        }
        return !1;
      },
      physicsEnd: function(t) {
        let e = this.constraints.get(t.detail.hand);
        e &&
          (this.el.body.world.removeConstraint(e),
          this.constraints.delete(t.detail.hand));
      },
      physicsClear: function() {
        if (this.el.body)
          for (let t of this.constraints.values())
            this.el.body.world.removeConstraint(t);
        this.constraints.clear();
      },
      physicsIsConstrained: function(t) {
        return this.constraints.has(t);
      },
      physicsIsGrabbing() {
        return this.constraints.size > 0;
      }
    };
  },
  function(t, e, i) {
    const n = AFRAME.utils.extendDeep,
      r = i(15);
    AFRAME.registerComponent(
      'stretchable',
      n({}, r, {
        schema: {
          usePhysics: { default: 'ifavailable' },
          invert: { default: !1 }
        },
        init: function() {
          (this.STRETCHED_STATE = 'stretched'),
            (this.STRETCH_EVENT = 'stretch-start'),
            (this.UNSTRETCH_EVENT = 'stretch-end'),
            (this.stretched = !1),
            (this.stretchers = []),
            (this.scale = new THREE.Vector3()),
            (this.handPos = new THREE.Vector3()),
            (this.otherHandPos = new THREE.Vector3()),
            (this.start = this.start.bind(this)),
            (this.end = this.end.bind(this)),
            this.el.addEventListener(this.STRETCH_EVENT, this.start),
            this.el.addEventListener(this.UNSTRETCH_EVENT, this.end);
        },
        update: function(t) {},
        tick: function() {
          if (!this.stretched) return;
          this.scale.copy(this.el.getAttribute('scale')),
            this.handPos.copy(this.stretchers[0].getAttribute('position')),
            this.otherHandPos.copy(this.stretchers[1].getAttribute('position'));
          const t = this.handPos.distanceTo(this.otherHandPos);
          let e = 1;
          if (
            (null !== this.previousStretch &&
              0 !== t &&
              (e = Math.pow(
                t / this.previousStretch,
                this.data.invert ? -1 : 1
              )),
            (this.previousStretch = t),
            this.scale.multiplyScalar(e),
            this.el.setAttribute('scale', this.scale),
            this.el.body && 'never' !== this.data.usePhysics)
          ) {
            var i = this.el.body.shapes[0];
            i.halfExtents
              ? (i.halfExtents.scale(e, i.halfExtents),
                i.updateConvexPolyhedronRepresentation())
              : i.radius
                ? ((i.radius *= e), i.updateBoundingSphereRadius())
                : this.shapeWarned ||
                  (console.warn(
                    'Unable to stretch physics body: unsupported shape'
                  ),
                  (this.shapeWarned = !0)),
              this.el.body.updateBoundingRadius();
          }
        },
        remove: function() {
          this.el.removeEventListener(this.STRETCH_EVENT, this.start),
            this.el.removeEventListener(this.UNSTRETCH_EVENT, this.end);
        },
        start: function(t) {
          this.stretched ||
            this.stretchers.includes(t.detail.hand) ||
            !this.startButtonOk(t) ||
            (this.stretchers.push(t.detail.hand),
            2 === this.stretchers.length &&
              ((this.stretched = !0),
              (this.previousStretch = null),
              this.el.addState(this.STRETCHED_STATE)),
            t.preventDefault && t.preventDefault());
        },
        end: function(t) {
          var e = this.stretchers.indexOf(t.detail.hand);
          this.endButtonOk(t) &&
            (-1 !== e &&
              (this.stretchers.splice(e, 1),
              (this.stretched = !1),
              this.el.removeState(this.STRETCHED_STATE)),
            t.preventDefault && t.preventDefault());
        }
      })
    );
  },
  function(t, e, i) {
    const n = AFRAME.utils.extendDeep,
      r = i(15);
    AFRAME.registerComponent(
      'drag-droppable',
      n({}, r, {
        init: function() {
          console.warn(
            'Warning: drag-droppable is deprecated. Use draggable and droppable components instead'
          ),
            (this.HOVERED_STATE = 'dragover'),
            (this.DRAGGED_STATE = 'dragged'),
            (this.HOVER_EVENT = 'dragover-start'),
            (this.UNHOVER_EVENT = 'dragover-end'),
            (this.DRAG_EVENT = 'drag-start'),
            (this.UNDRAG_EVENT = 'drag-end'),
            (this.DRAGDROP_EVENT = 'drag-drop'),
            (this.hoverStart = this.hoverStart.bind(this)),
            (this.dragStart = this.dragStart.bind(this)),
            (this.hoverEnd = this.hoverEnd.bind(this)),
            (this.dragEnd = this.dragEnd.bind(this)),
            (this.dragDrop = this.dragDrop.bind(this)),
            this.el.addEventListener(this.HOVER_EVENT, this.hoverStart),
            this.el.addEventListener(this.DRAG_EVENT, this.dragStart),
            this.el.addEventListener(this.UNHOVER_EVENT, this.hoverEnd),
            this.el.addEventListener(this.UNDRAG_EVENT, this.dragEnd),
            this.el.addEventListener(this.DRAGDROP_EVENT, this.dragDrop);
        },
        remove: function() {
          this.el.removeEventListener(this.HOVER_EVENT, this.hoverStart),
            this.el.removeEventListener(this.DRAG_EVENT, this.dragStart),
            this.el.removeEventListener(this.UNHOVER_EVENT, this.hoverEnd),
            this.el.removeEventListener(this.UNDRAG_EVENT, this.dragEnd),
            this.el.removeEventListener(this.DRAGDROP_EVENT, this.dragDrop);
        },
        hoverStart: function(t) {
          this.el.addState(this.HOVERED_STATE),
            t.preventDefault && t.preventDefault();
        },
        dragStart: function(t) {
          this.startButtonOk(t) &&
            (this.el.addState(this.DRAGGED_STATE),
            t.preventDefault && t.preventDefault());
        },
        hoverEnd: function(t) {
          this.el.removeState(this.HOVERED_STATE);
        },
        dragEnd: function(t) {
          this.endButtonOk(t) &&
            (this.el.removeState(this.DRAGGED_STATE),
            t.preventDefault && t.preventDefault());
        },
        dragDrop: function(t) {
          this.endButtonOk(t) && t.preventDefault && t.preventDefault();
        }
      })
    );
  },
  function(t, e, i) {
    const n = AFRAME.utils.extendDeep,
      r = i(15);
    AFRAME.registerComponent(
      'draggable',
      n({}, r, {
        init: function() {
          (this.DRAGGED_STATE = 'dragged'),
            (this.DRAG_EVENT = 'drag-start'),
            (this.UNDRAG_EVENT = 'drag-end'),
            (this.dragStartBound = this.dragStart.bind(this)),
            (this.dragEndBound = this.dragEnd.bind(this)),
            this.el.addEventListener(this.DRAG_EVENT, this.dragStartBound),
            this.el.addEventListener(this.UNDRAG_EVENT, this.dragEndBound);
        },
        remove: function() {
          this.el.removeEventListener(this.DRAG_EVENT, this.dragStart),
            this.el.removeEventListener(this.UNDRAG_EVENT, this.dragEnd);
        },
        dragStart: function(t) {
          this.startButtonOk(t) &&
            (this.el.addState(this.DRAGGED_STATE),
            t.preventDefault && t.preventDefault());
        },
        dragEnd: function(t) {
          this.endButtonOk(t) &&
            (this.el.removeState(this.DRAGGED_STATE),
            t.preventDefault && t.preventDefault());
        }
      })
    );
  },
  function(t, e) {
    AFRAME.registerComponent('droppable', {
      schema: {
        accepts: { default: '' },
        autoUpdate: { default: !0 },
        acceptEvent: { default: '' },
        rejectEvent: { default: '' }
      },
      multiple: !0,
      init: function() {
        (this.HOVERED_STATE = 'dragover'),
          (this.HOVER_EVENT = 'dragover-start'),
          (this.UNHOVER_EVENT = 'dragover-end'),
          (this.DRAGDROP_EVENT = 'drag-drop'),
          (this.hoverStartBound = this.hoverStart.bind(this)),
          (this.hoverEndBound = this.hoverEnd.bind(this)),
          (this.dragDropBound = this.dragDrop.bind(this)),
          (this.mutateAcceptsBound = this.mutateAccepts.bind(this)),
          (this.acceptableEntities = []),
          (this.observer = new window.MutationObserver(
            this.mutateAcceptsBound
          )),
          (this.observerOpts = { childList: !0, subtree: !0 }),
          this.el.addEventListener(this.HOVER_EVENT, this.hoverStartBound),
          this.el.addEventListener(this.UNHOVER_EVENT, this.hoverEndBound),
          this.el.addEventListener(this.DRAGDROP_EVENT, this.dragDropBound);
      },
      update: function() {
        this.data.accepts.length
          ? (this.acceptableEntities = Array.prototype.slice.call(
              this.el.sceneEl.querySelectorAll(this.data.accepts)
            ))
          : (this.acceptableEntities = null),
          this.data.autoUpdate && null != this.acceptableEntities
            ? this.observer.observe(this.el.sceneEl, this.observerOpts)
            : this.observer.disconnect();
      },
      remove: function() {
        this.el.removeEventListener(this.HOVER_EVENT, this.hoverStartBound),
          this.el.removeEventListener(this.UNHOVER_EVENT, this.hoverEndBound),
          this.el.removeEventListener(this.DRAGDROP_EVENT, this.dragDropBound),
          this.observer.disconnect();
      },
      mutateAccepts: function(t) {
        const e = this.data.accepts;
        var i, n;
        t.forEach(t => {
          t.addedNodes.forEach(t => {
            (n = e),
              ((i = t).matches
                ? i.matches(n)
                : i.msMatchesSelector
                  ? i.msMatchesSelector(n)
                  : i.webkitMatchesSelector
                    ? i.webkitMatchesSelector(n)
                    : void 0) && this.acceptableEntities.push(t);
          });
        });
      },
      entityAcceptable: function(t) {
        const e = this.acceptableEntities;
        if (null == e) return !0;
        for (let i of e) if (i === t) return !0;
        return !1;
      },
      hoverStart: function(t) {
        this.entityAcceptable(t.detail.carried) &&
          (this.el.addState(this.HOVERED_STATE),
          t.preventDefault && t.preventDefault());
      },
      hoverEnd: function(t) {
        this.el.removeState(this.HOVERED_STATE);
      },
      dragDrop: function(t) {
        const e = t.detail.dropped;
        this.entityAcceptable(e)
          ? (this.data.acceptEvent.length &&
              this.el.emit(this.data.acceptEvent, { el: e }),
            t.preventDefault && t.preventDefault())
          : this.data.rejectEvent.length &&
            this.el.emit(this.data.rejectEvent, { el: e });
      }
    });
  },
  function(t, e, i) {
    const n = i(15);
    AFRAME.registerComponent(
      'clickable',
      AFRAME.utils.extendDeep({}, n, {
        schema: { onclick: { type: 'string' } },
        init: function() {
          (this.CLICKED_STATE = 'clicked'),
            (this.CLICK_EVENT = 'grab-start'),
            (this.UNCLICK_EVENT = 'grab-end'),
            (this.clickers = []),
            (this.start = this.start.bind(this)),
            (this.end = this.end.bind(this)),
            this.el.addEventListener(this.CLICK_EVENT, this.start),
            this.el.addEventListener(this.UNCLICK_EVENT, this.end);
        },
        remove: function() {
          this.el.removeEventListener(this.CLICK_EVENT, this.start),
            this.el.removeEventListener(this.UNCLICK_EVENT, this.end);
        },
        start: function(t) {
          this.startButtonOk(t) &&
            (this.el.addState(this.CLICKED_STATE),
            -1 === this.clickers.indexOf(t.detail.hand) &&
              (this.clickers.push(t.detail.hand),
              t.preventDefault && t.preventDefault()));
        },
        end: function(t) {
          const e = this.clickers.indexOf(t.detail.hand);
          this.endButtonOk(t) &&
            (-1 !== e && this.clickers.splice(e, 1),
            this.clickers.length < 1 && this.el.removeState(this.CLICKED_STATE),
            t.preventDefault && t.preventDefault());
        }
      })
    );
  },
  function(t, e) {
    AFRAME.registerComponent('locomotor-auto-config', {
      schema: {
        camera: { default: !0 },
        stretch: { default: !0 },
        move: { default: !0 }
      },
      dependencies: ['grabbable', 'stretchable'],
      init: function() {
        if (
          ((this.ready = !1),
          this.data.camera && !document.querySelector('a-camera, [camera]'))
        ) {
          let t = document.createElement('a-camera');
          this.el.appendChild(t);
        }
        this.fakeCollisions(),
          (this.fakeCollisionsB = this.fakeCollisions.bind(this)),
          this.el.addEventListener('controllerconnected', this.fakeCollisionsB);
      },
      update: function() {
        this.el.getAttribute('stretchable') && !this.data.stretch
          ? ((this.stretchSet = this.el.getAttribute('stretchable')),
            this.el.removeAttribute('stretchable'))
          : !this.el.getAttribute('stretchable') &&
            this.data.stretch &&
            this.el.setAttribute('stretchable', this.stretchSet),
          this.el.getAttribute('grabbable') && !this.data.move
            ? ((this.grabSet = this.el.getAttribute('grabbable')),
              this.el.removeAttribute('grabbable'))
            : !this.el.getAttribute('grabbable') &&
              this.data.move &&
              this.el.setAttribute('grabbable', this.grabSet);
      },
      remove: function() {
        this.el.removeState(this.colliderState),
          this.el.removeEventListener(
            'controllerconnected',
            this.fakeCollisionsB
          );
      },
      announceReady: function() {
        this.ready || ((this.ready = !0), this.el.emit('locomotor-ready', {}));
      },
      fakeCollisions: function() {
        this.el.getChildEntities().forEach(t => {
          let e = t.getAttribute('super-hands');
          if (e) {
            let i = {};
            (i[e.colliderEventProperty] = this.el),
              t.emit(e.colliderEvent, i),
              (this.colliderState = e.colliderState),
              this.el.addState(this.colliderState);
          }
          this.announceReady();
        });
      }
    });
  },
  function(t, e) {
    const i = 'progressivecontrolsgazedefault',
      n = 'progressivecontrolspointdefault',
      r = 'progressivecontrolstouchdefault';
    function o(t, e, i) {
      const n = AFRAME.utils.styleParser.stringify,
        r = AFRAME.utils.extend,
        o = t.getAttribute(e);
      o && t.setAttribute(e, n(r(o, i)));
    }
    AFRAME.registerComponent('progressive-controls', {
      schema: {
        maxLevel: { default: 'touch', oneOf: ['gaze', 'point', 'touch'] },
        gazeMixin: { default: '' },
        pointMixin: { default: '' },
        touchMixin: { default: '' },
        override: { default: !1 },
        objects: { default: '' },
        controllerModel: { default: !0 }
      },
      init: function() {
        const t = AFRAME.components.link.schema.titleColor
          ? 'clearedEls'
          : 'el';
        (this.levels = ['gaze', 'point', 'touch']),
          (this.currentLevel = new Map()),
          (this.controllerName = new Map());
        const e =
            this.el.sceneEl.querySelector('a-assets') ||
            this.el.sceneEl.appendChild(document.createElement('a-assets')),
          o = (this.gazeDefault = document.createElement('a-mixin')),
          s = AFRAME.utils.styleParser.stringify({
            colliderEvent: 'raycaster-intersection',
            colliderEventProperty: 'els',
            colliderEndEvent: 'raycaster-intersection-cleared',
            colliderEndEventProperty: t,
            colliderState: ''
          });
        o.setAttribute('id', i),
          o.setAttribute(
            'geometry',
            'primitive: ring;radiusOuter: 0.008; radiusInner: 0.005; segmentsTheta: 32'
          ),
          o.setAttribute('material', 'color: #000; shader: flat'),
          o.setAttribute('position', '0 0 -0.5'),
          o.setAttribute('raycaster', ''),
          o.setAttribute('super-hands', s);
        const a = (this.pointDefault = document.createElement('a-mixin'));
        a.setAttribute('id', n),
          a.setAttribute('raycaster', 'showLine: true'),
          a.setAttribute('super-hands', s);
        const c = (this.touchDefault = document.createElement('a-mixin'));
        if (
          (c.setAttribute('id', r),
          c.setAttribute('super-hands', ''),
          c.setAttribute('sphere-collider', ''),
          this.el.sceneEl.getAttribute('physics'))
        ) {
          a.setAttribute('static-body', 'shape: sphere; sphereRadius: 0.02'),
            o.setAttribute('static-body', 'shape: sphere; sphereRadius: 0.02'),
            c.setAttribute('static-body', 'shape: sphere; sphereRadius: 0.02');
        }
        e.appendChild(o),
          e.appendChild(a),
          e.appendChild(c),
          (this.camera =
            this.el.querySelector('a-camera,[camera]') ||
            this.el.appendChild(document.createElement('a-camera'))),
          (this.caster =
            this.camera.querySelector('.gazecaster') ||
            this.camera.appendChild(document.createElement('a-entity'))),
          ['left', 'right'].forEach(t => {
            this[t] =
              this.el.querySelector('.' + t + '-controller') ||
              this.el.appendChild(document.createElement('a-entity'));
            const e = { hand: t, model: this.data.controllerModel };
            [
              'daydream-controls',
              'gearvr-controls',
              'oculus-touch-controls',
              'vive-controls',
              'windows-motion-controls'
            ].forEach(i => this[t].setAttribute(i, e));
          }),
          this.el.addEventListener('controllerconnected', t =>
            this.detectLevel(t)
          ),
          (this.eventRepeaterB = this.eventRepeater.bind(this)),
          this.addEventListeners(),
          this.currentLevel.set('right', 0);
      },
      update: function(t) {
        const e = { objects: this.data.objects };
        o(this.gazeDefault, 'raycaster', e),
          o(this.pointDefault, 'raycaster', e),
          o(this.touchDefault, 'sphere-collider', e);
        for (let [t, e] of this.currentLevel)
          window.setTimeout(() => this.setLevel(e, t, !0));
      },
      remove: function() {
        if (!this.eventsRegistered) return;
        const t = this.el.sceneEl.canvas;
        t.removeEventListener('mousedown', this.eventRepeaterB),
          t.removeEventListener('mouseup', this.eventRepeaterB),
          t.removeEventListener('touchstart', this.eventRepeaterB),
          t.removeEventListener('touchend', this.eventRepeaterB);
      },
      setLevel: function(t, e, o) {
        e = e || 'right';
        const s = this.levels.indexOf(this.data.maxLevel),
          a = this[e],
          c = this.data.override;
        if ((t = t > s ? s : t) !== this.currentLevel.get(e) || o) {
          switch ((0 !== t &&
            this.caster &&
            (this.caster.setAttribute('mixin', ''),
            this.camera.removeChild(this.caster),
            (this.caster = null)),
          t)) {
            case this.levels.indexOf('gaze'):
              const o = this.data.gazeMixin;
              this.caster.setAttribute(
                'mixin',
                (c && o.length ? '' : i + ' ') + o
              );
              break;
            case this.levels.indexOf('point'):
              const s = this.controllerName.get(e),
                l = this.controllerConfig[s],
                u = this.data.pointMixin;
              l && l.raycaster && a.setAttribute('raycaster', l.raycaster),
                a.setAttribute('mixin', (c && u.length ? '' : n + ' ') + u);
              break;
            case this.levels.indexOf('touch'):
              const h = this.data.touchMixin;
              a.setAttribute('mixin', (c && h.length ? '' : r + ' ') + h);
          }
          this.currentLevel.set(e, t),
            this.el.emit('controller-progressed', {
              level: this.levels[t],
              hand: e
            });
        }
      },
      detectLevel: function(t) {
        const e = t.detail.component.data.hand || 'right';
        this.controllerName.set(e, t.detail.name),
          -1 !==
          [
            'vive-controls',
            'oculus-touch-controls',
            'windows-motion-controls'
          ].indexOf(t.detail.name)
            ? this.setLevel(this.levels.indexOf('touch'), e)
            : -1 !==
                ['gearvr-controls', 'daydream-controls'].indexOf(
                  t.detail.name
                ) && this.setLevel(this.levels.indexOf('point'), e);
      },
      eventRepeater: function(t) {
        this.caster &&
          ((t.type.startsWith('touch') &&
            (t.preventDefault(), 'touchmove' === t.type)) ||
            this.caster.emit(t.type, t.detail));
      },
      addEventListeners: function() {
        this.el.sceneEl.canvas
          ? (this.el.sceneEl.canvas.addEventListener(
              'mousedown',
              this.eventRepeaterB
            ),
            this.el.sceneEl.canvas.addEventListener(
              'mouseup',
              this.eventRepeaterB
            ),
            this.el.sceneEl.canvas.addEventListener(
              'touchstart',
              this.eventRepeaterB
            ),
            this.el.sceneEl.canvas.addEventListener(
              'touchmove',
              this.eventRepeaterB
            ),
            this.el.sceneEl.canvas.addEventListener(
              'touchend',
              this.eventRepeaterB
            ),
            (this.eventsRegistered = !0))
          : this.el.sceneEl.addEventListener(
              'loaded',
              this.addEventListeners.bind(this)
            );
      },
      controllerConfig: {
        'gearvr-controls': { raycaster: { origin: { x: 0, y: 5e-4, z: 0 } } },
        'oculus-touch-controls': {
          raycaster: {
            origin: { x: 0.001, y: 0, z: 0.065 },
            direction: { x: 0, y: -0.8, z: -1 }
          }
        }
      }
    });
  },
  function(t, e) {
    var i = AFRAME.utils.extendDeep,
      n = AFRAME.primitives.getMeshMixin();
    AFRAME.registerPrimitive(
      'a-locomotor',
      i({}, n, {
        defaultComponents: {
          grabbable: { usePhysics: 'never', invert: !0, suppressY: !0 },
          stretchable: { invert: !0 },
          'locomotor-auto-config': {}
        },
        mappings: {
          'fetch-camera': 'locomotor-auto-config.camera',
          'allow-movement': 'locomotor-auto-config.move',
          'horizontal-only': 'grabbable.suppressY',
          'allow-scaling': 'locomotor-auto-config.stretch'
        }
      })
    );
  },
  function(t, e, i) {
    var n = i(147),
      r = i(148),
      o = Math.PI / 2;
    t.exports = {
      GamepadButton: n,
      schema: {
        controller: { default: 0, oneOf: [0, 1, 2, 3] },
        enabled: { default: !0 },
        movementEnabled: { default: !0 },
        lookEnabled: { default: !0 },
        flyEnabled: { default: !1 },
        invertAxisY: { default: !1 },
        easing: { default: 20 },
        acceleration: { default: 65 },
        sensitivity: { default: 0.04 },
        pitchAxis: { default: 'x', oneOf: ['x', 'y', 'z'] },
        yawAxis: { default: 'y', oneOf: ['x', 'y', 'z'] },
        rollAxis: { default: 'z', oneOf: ['x', 'y', 'z'] },
        debug: { default: !1 }
      },
      init: function() {
        (this.velocity = new THREE.Vector3(0, 0, 0)),
          (this.direction = new THREE.Vector3(0, 0, 0)),
          (this.pitch = new THREE.Object3D()),
          (this.yaw = new THREE.Object3D()),
          (this.yaw.position.y = 10),
          this.yaw.add(this.pitch),
          (this.buttons = {}),
          this.getGamepad() ||
            console.warn(
              'Gamepad #%d not found. Connect controller and press any button to continue.',
              this.data.controller
            );
      },
      tick: function(t, e) {
        this.updateRotation(e),
          this.updatePosition(e),
          this.updateButtonState();
      },
      updatePosition: function(t) {
        var e = this.data,
          i = e.acceleration,
          n = e.easing,
          r = this.velocity,
          o = e.rollAxis,
          s = e.pitchAxis,
          a = this.el,
          c = this.getGamepad();
        if (t > 200) return (r[o] = 0), void (r[s] = 0);
        (r[o] -= r[o] * n * t / 1e3), (r[s] -= r[s] * n * t / 1e3);
        var l = a.getAttribute('position');
        if (e.enabled && e.movementEnabled && c) {
          var u = this.getDpad(),
            h = u.x || this.getJoystick(0).x,
            d = u.y || this.getJoystick(0).y;
          Math.abs(h) > 0.2 && (r[s] += h * i * t / 1e3),
            Math.abs(d) > 0.2 && (r[o] += d * i * t / 1e3);
        }
        var p = this.getMovementVector(t);
        a.object3D.translateX(p.x),
          a.object3D.translateY(p.y),
          a.object3D.translateZ(p.z),
          a.setAttribute('position', {
            x: l.x + p.x,
            y: l.y + p.y,
            z: l.z + p.z
          });
      },
      getMovementVector: function(t) {
        if (this._getMovementVector) return this._getMovementVector(t);
        var e = new THREE.Euler(0, 0, 0, 'YXZ'),
          i = new THREE.Vector3();
        return (
          (this._getMovementVector = function(t) {
            return (
              i.copy(this.el.getAttribute('rotation')),
              this.direction.copy(this.velocity),
              this.direction.multiplyScalar(t / 1e3),
              i
                ? (this.data.flyEnabled || (i.x = 0),
                  e.set(THREE.Math.degToRad(i.x), THREE.Math.degToRad(i.y), 0),
                  this.direction.applyEuler(e),
                  this.direction)
                : this.direction
            );
          }),
          this._getMovementVector(t)
        );
      },
      updateRotation: function() {
        if (this._updateRotation) return this._updateRotation();
        var t,
          e = new THREE.Vector3(),
          i = new THREE.Vector3(),
          n = new THREE.Vector3(),
          r = 0,
          s = 0;
        return (
          (this._updateRotation = function() {
            if (this.data.lookEnabled && this.getGamepad()) {
              if (
                ((t = Date.now()),
                e.copy(this.el.getAttribute('rotation') || e),
                e.distanceToSquared(i) > 1e-4 && e.distanceToSquared(n) > 1e-4)
              )
                return i.copy(e), void (s = t);
              if ((i.copy(e), !(t - s < 500))) {
                var a = this.getJoystick(1);
                Math.abs(a.x) <= 0.2 && (a.x = 0),
                  Math.abs(a.y) <= 0.2 && (a.y = 0),
                  this.data.invertAxisY && (a.y = -a.y),
                  (s > r && !a.lengthSq()) ||
                    (a.multiplyScalar(this.data.sensitivity),
                    (this.yaw.rotation.y -= a.x),
                    (this.pitch.rotation.x -= a.y),
                    (this.pitch.rotation.x = Math.max(
                      -o,
                      Math.min(o, this.pitch.rotation.x)
                    )),
                    this.el.setAttribute('rotation', {
                      x: THREE.Math.radToDeg(this.pitch.rotation.x),
                      y: THREE.Math.radToDeg(this.yaw.rotation.y),
                      z: 0
                    }),
                    n.copy(this.el.getAttribute('rotation')),
                    (r = t));
              }
            }
          }),
          this._updateRotation()
        );
      },
      updateButtonState: function() {
        var t = this.getGamepad();
        if (this.data.enabled && t)
          for (var e = 0; e < t.buttons.length; e++)
            t.buttons[e].pressed && !this.buttons[e]
              ? this.emit(new r('gamepadbuttondown', e, t.buttons[e]))
              : !t.buttons[e].pressed &&
                this.buttons[e] &&
                this.emit(new r('gamepadbuttonup', e, t.buttons[e])),
              (this.buttons[e] = t.buttons[e].pressed);
        else Object.keys(this.buttons) && (this.buttons = {});
      },
      emit: function(t) {
        this.el.emit(t.type, t),
          this.el.emit(t.type + ':' + t.index, new r(t.type, t.index, t));
      },
      getGamepad: function() {
        var t =
            navigator.getGamepads &&
            navigator.getGamepads()[this.data.controller],
          e = this.el.sceneEl.components['proxy-controls'];
        return (
          (e && e.isConnected() && e.getGamepad(this.data.controller)) || t
        );
      },
      getButton: function(t) {
        return this.getGamepad().buttons[t];
      },
      getAxis: function(t) {
        return this.getGamepad().axes[t];
      },
      getJoystick: function(t) {
        var e = this.getGamepad();
        switch (t) {
          case 0:
            return new THREE.Vector2(e.axes[0], e.axes[1]);
          case 1:
            return new THREE.Vector2(e.axes[2], e.axes[3]);
          default:
            throw new Error('Unexpected joystick index "%d".', t);
        }
      },
      getDpad: function() {
        var t = this.getGamepad();
        return t.buttons[n.DPAD_RIGHT]
          ? new THREE.Vector2(
              (t.buttons[n.DPAD_RIGHT].pressed ? 1 : 0) +
                (t.buttons[n.DPAD_LEFT].pressed ? -1 : 0),
              (t.buttons[n.DPAD_UP].pressed ? -1 : 0) +
                (t.buttons[n.DPAD_DOWN].pressed ? 1 : 0)
            )
          : new THREE.Vector2();
      },
      isConnected: function() {
        var t = this.getGamepad();
        return !(!t || !t.connected);
      },
      getID: function() {
        return this.getGamepad().id;
      }
    };
  },
  function(t, e) {
    t.exports = Object.assign(function() {}, {
      FACE_1: 0,
      FACE_2: 1,
      FACE_3: 2,
      FACE_4: 3,
      L_SHOULDER_1: 4,
      R_SHOULDER_1: 5,
      L_SHOULDER_2: 6,
      R_SHOULDER_2: 7,
      SELECT: 8,
      START: 9,
      DPAD_UP: 12,
      DPAD_DOWN: 13,
      DPAD_LEFT: 14,
      DPAD_RIGHT: 15,
      VENDOR: 16
    });
  },
  function(t, e) {
    t.exports = function(t, e, i) {
      (this.type = t),
        (this.index = e),
        (this.pressed = i.pressed),
        (this.value = i.value);
    };
  },
  function(t, e) {
    AFRAME.registerShader('skyGradient', {
      schema: {
        colorTop: { type: 'color', default: 'black', is: 'uniform' },
        colorBottom: { type: 'color', default: 'red', is: 'uniform' }
      },
      vertexShader:
        '\n   varying vec3 vWorldPosition;\n\n   void main() {\n\n     vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n     vWorldPosition = worldPosition.xyz;\n\n     gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n   }\n\n  ',
      fragmentShader:
        '\n   uniform vec3 colorTop;\n   uniform vec3 colorBottom;\n   uniform vec3 sunPosition;\n\n   varying vec3 vWorldPosition;\n\n   void main()\n\n   {\n     vec3 pointOnSphere = normalize(vWorldPosition.xyz);\n     float f = 1.0;\n     f = sin((pointOnSphere.y+0.0) * 1.5);\n     gl_FragColor = vec4(mix(colorBottom,colorTop, f ), 1.0);\n   }'
    });
  },
  function(module, exports, __webpack_require__) {
    var url = __webpack_require__(151),
      xinited = !1,
      RIGHT_HAND_TOOLS = ['none', 'map', 'texture_surface', 'texture_planet'],
      LEFT_HAND_TOOLS = ['none', 'planet'],
      SELECTED_LEFT_HAND_TOOL = 0,
      SELECTED_RIGHT_HAND_TOOL = 0,
      PLANET_TYPE = void 0,
      xinit = function() {
        if (!xinited) {
          c_srand(parseInt(256 * Math.random())), (xinited = !0);
          var t = function() {
            return parseInt(1e7 * Math.random()) - 5e6;
          };
          (TGT_INFO = extract_target_info({ x: t(), y: t(), z: t() })),
            (CURRENTSTAR = prepare_star(TGT_INFO)),
            console.log('Star class: ', CURRENTSTAR.class),
            (nearstar_r = CURRENTSTAR.r),
            (nearstar_g = CURRENTSTAR.g),
            (nearstar_b = CURRENTSTAR.b),
            console.log('Seed is: ' + Seed);
          var e = function(t) {
              switch ((console.log(
                'Generating planet of type ' + planet_typesStr[t]
              ),
              (PLANET_TYPE = t),
              generatePalette(t),
              t)) {
                case 0:
                  create_volcanic_world();
                  break;
                case 1:
                  create_craterized_world();
                  break;
                case 2:
                  create_thickatmosphere_world();
                  break;
                case 3:
                  console.log(
                    'Felysian world not supported yet; creating Icy world instead'
                  ),
                    create_icy_world();
                  break;
                case 4:
                  create_creased_world();
                  break;
                case 5:
                  create_thinatmosphere_world();
                  break;
                case 6:
                  break;
                case 7:
                  create_icy_world();
                  break;
                case 8:
                  create_quartz_world();
              }
              switch ((prepare_space(), t)) {
                case 0:
                  create_volcanic_space();
                  break;
                case 1:
                  create_craterized_space();
                  break;
                case 2:
                  create_thickatmosphere_space();
                  break;
                case 3:
                  create_felysian_space();
                  break;
                case 4:
                  create_creased_space();
                  break;
                case 5:
                  create_thinatmosphere_space();
                  break;
                case 6:
                  create_largeinconsistent_space();
                  break;
                case 7:
                  create_icy_space();
                  break;
                case 8:
                  create_quartz_space();
              }
              finish_space();
            },
            i = null,
            n = url.parse(document.location.toString(), !0);
          n.query.planetType && (i = parseInt(n.query.planetType)),
            e(
              null !== i
                ? i
                : _.sample(
                    _.without(
                      _.map(planet_typesWithSurface, function(t, e) {
                        if (t) return e;
                      }),
                      void 0
                    )
                  )
            ),
            convTerrain();
        }
      };
    AFRAME.registerGeometry('planetsurface', {
      init: function() {
        xinit(), (this.geometry = displayTerrain());
      }
    });
    var toHex = function(t) {
        var e = t.toString(16);
        return 1 === e.length && (e = '0' + e), e;
      },
      getSkyHexColor = function() {
        var t = planet_typesAtmosphericDensity[PLANET_TYPE],
          e = Math.min(255, 4 * nearstar_r),
          i = Math.min(255, 4 * nearstar_g),
          n = Math.min(255, 4 * nearstar_b);
        return (
          0 === t
            ? ((e = 0), (i = 0), (n = 0))
            : ((e *= t / 100), (i *= t / 100), (n *= t / 100)),
          (e = parseInt(e)),
          (i = parseInt(i)),
          (n = parseInt(n)),
          '#' + (e = toHex(e)) + (i = toHex(i)) + (n = toHex(n))
        );
      };
    AFRAME.registerComponent('planet-sky', {
      init: function() {
        xinit();
        toHex(Math.min(255, 4 * nearstar_r)),
          toHex(Math.min(255, 4 * nearstar_g)),
          toHex(Math.min(255, 4 * nearstar_b));
        var t = getSkyHexColor();
        this.el.setAttribute('material', 'colorTop', t),
          this.el.setAttribute('material', 'colorBottom', t);
      }
    }),
      AFRAME.registerComponent('create-stars', {
        init: function() {
          for (
            var t = () => {
                var t = document.createElement('a-sphere'),
                  e = Math.random() * Math.PI * 0.5,
                  i = Math.random() * Math.PI * 4,
                  n = {
                    x: Math.sin(i) * Math.cos(e),
                    y: Math.sin(e),
                    z: Math.cos(i) * Math.cos(e)
                  };
                (n.x *= 1e3),
                  (n.y *= 1e3),
                  (n.z *= 1e3),
                  t.setAttribute('radius', '2'),
                  t.setAttribute('segments-height', '1'),
                  t.setAttribute('segments-width', '1'),
                  t.setAttribute('material', 'fog', !1),
                  t.setAttribute(
                    'position',
                    AFRAME.utils.coordinates.stringify(n)
                  ),
                  this.el.appendChild(t);
              },
              e = 0;
            e < 1e3;
            e++
          )
            t();
        }
      }),
      AFRAME.registerComponent('planet-fog', {
        init: function() {
          xinit();
          var t = getSkyHexColor(),
            e = planet_typesAtmosphericDensity[PLANET_TYPE];
          e > 0 &&
            (this.el.setAttribute('fog', 'type', 'linear'),
            this.el.setAttribute('fog', 'near', '1'),
            this.el.setAttribute('fog', 'far', 300 - 2 * e),
            this.el.setAttribute('fog', 'color', t));
        }
      }),
      AFRAME.registerComponent('remove-hand-controls', {
        init: function() {},
        tick: function(t) {
          this.el.getObject3D('mesh') && this.el.removeObject3D('mesh');
        }
      }),
      AFRAME.registerComponent('texture-material', {
        schema: {
          src: { type: 'string', default: 'txtr' },
          width: { type: 'number', default: 256 },
          height: { type: 'number', default: 256 },
          type: { type: 'string', default: 'surface' }
        },
        init: function() {
          var texture;
          xinit(),
            'surface' === this.data.type
              ? (texture = generateNIVDataTexture(
                  this.data.width,
                  this.data.height,
                  eval(this.data.src)
                ))
              : 'space' === this.data.type &&
                (texture = generateNIVSpaceDataTexture(
                  this.data.width,
                  this.data.height,
                  eval(this.data.src)
                ));
          var geommat = new THREE.MeshLambertMaterial({
            map: texture,
            opacity: 1
          });
          this.material = this.el.getOrCreateObject3D(
            'mesh'
          ).material = geommat;
        }
      }),
      AFRAME.registerComponent('planet-space-material', {
        init: function() {
          xinit(),
            (THREE_texturespace = generateNIVSpaceDataTexture(
              360,
              120,
              p_background
            ));
          var t = new THREE.MeshBasicMaterial({ map: THREE_texturespace });
          this.material = this.el.getOrCreateObject3D('mesh').material = t;
        }
      }),
      AFRAME.registerComponent('follow-camera', {
        init: function() {},
        tick: function(t) {
          var e = this.el.sceneEl.camera.el;
          if (e) {
            var i = e.getAttribute('position'),
              n = { x: i.x, y: i.y, z: i.z };
            (n.y += e.parentElement.getAttribute('position').y),
              this.el.setAttribute('position', n);
          }
        }
      });
    var CAMERAHEIGHT = 1.65;
    AFRAME.registerComponent('follow-room', {
      init: function() {
        navigator.getVRDisplays().then(t => {
          this.display = t[0];
        }),
          (this.vfd = new VRFrameData());
      },
      tick: function() {
        if (this.display) {
          this.display.getFrameData(this.vfd);
          var t = this.el.sceneEl.camera.el;
          if (t) {
            var e = t.getAttribute('position'),
              i = this.vfd.pose.position;
            null === i && (i = [0, 0, 0]);
            var n = { x: e.x - i[0], y: e.y - i[1], z: e.z - i[2] };
            (n.y += t.parentElement.getAttribute('position').y),
              (n.y -= CAMERAHEIGHT),
              this.el.setAttribute('position', n);
          }
        }
      }
    }),
      AFRAME.registerComponent('hand-tool', {
        schema: {
          hand: { type: 'string', default: 'left' },
          name: { type: 'string', default: 'none' }
        },
        tick: function() {
          var t = !1;
          'left' === this.data.hand &&
            LEFT_HAND_TOOLS[SELECTED_LEFT_HAND_TOOL] === this.data.name &&
            (t = !0),
            'right' === this.data.hand &&
              RIGHT_HAND_TOOLS[SELECTED_RIGHT_HAND_TOOL] === this.data.name &&
              (t = !0),
            (this.el.object3D.visible = t);
        }
      }),
      AFRAME.registerComponent('controller-actions', {
        init: function() {
          this.el.addEventListener('gamepadbuttondown', function(t) {
            0 === t.detail.index && window.location.reload();
          }),
            this.el.addEventListener('xbuttondown', function(t) {
              window.location.reload();
            }),
            this.el.addEventListener('ybuttondown', function(t) {
              (SELECTED_LEFT_HAND_TOOL += 1) > LEFT_HAND_TOOLS.length - 1 &&
                (SELECTED_LEFT_HAND_TOOL = 0);
            }),
            this.el.addEventListener('bbuttondown', function(t) {
              (SELECTED_RIGHT_HAND_TOOL += 1) > RIGHT_HAND_TOOLS.length - 1 &&
                (SELECTED_RIGHT_HAND_TOOL = 0);
            });
        }
      }),
      AFRAME.registerComponent('debug-show-always', {
        init: function() {
          var t = new THREE.MeshBasicMaterial({ depthTest: !1 });
          this.material = this.el.getOrCreateObject3D('mesh').material = t;
        }
      }),
      AFRAME.registerComponent('collider-check', {
        schema: {},
        init: function() {
          (this.raycaster = new THREE.Raycaster()),
            (this.raycaster.near = 0),
            (this.raycaster.far = 1e3),
            (this.planetElement = document.getElementById('planet_geometry')),
            (this.vector_dir = new THREE.Vector3(0, -1, 0)),
            (this.TEMP_VEC = new THREE.Vector3(0, 0, 0));
        },
        tick: function(t, e) {
          var i = this.el.object3D.position;
          this.TEMP_VEC.set(i.x, i.y + 4, i.z),
            this.raycaster.set(this.TEMP_VEC, this.vector_dir);
          var n = this.raycaster.intersectObject(
            this.planetElement.object3D.children[0],
            !1
          );
          if (n.length > 0) {
            var r = n.pop();
            r &&
              r.distance > 0 &&
              this.el.parentElement.setAttribute('position', {
                x: 0,
                y: r.point.y,
                z: 0
              });
          }
        }
      });
  },
  function(t, e, i) {
    'use strict';
    var n = i(152),
      r = i(153);
    function o() {
      (this.protocol = null),
        (this.slashes = null),
        (this.auth = null),
        (this.host = null),
        (this.port = null),
        (this.hostname = null),
        (this.hash = null),
        (this.search = null),
        (this.query = null),
        (this.pathname = null),
        (this.path = null),
        (this.href = null);
    }
    (e.parse = w),
      (e.resolve = function(t, e) {
        return w(t, !1, !0).resolve(e);
      }),
      (e.resolveObject = function(t, e) {
        return t ? w(t, !1, !0).resolveObject(e) : e;
      }),
      (e.format = function(t) {
        r.isString(t) && (t = w(t));
        return t instanceof o ? t.format() : o.prototype.format.call(t);
      }),
      (e.Url = o);
    var s = /^([a-z0-9.+-]+:)/i,
      a = /:[0-9]*$/,
      c = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
      l = ['{', '}', '|', '\\', '^', '`'].concat([
        '<',
        '>',
        '"',
        '`',
        ' ',
        '\r',
        '\n',
        '\t'
      ]),
      u = ["'"].concat(l),
      h = ['%', '/', '?', ';', '#'].concat(u),
      d = ['/', '?', '#'],
      p = /^[+a-z0-9A-Z_-]{0,63}$/,
      f = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
      m = { javascript: !0, 'javascript:': !0 },
      g = { javascript: !0, 'javascript:': !0 },
      v = {
        http: !0,
        https: !0,
        ftp: !0,
        gopher: !0,
        file: !0,
        'http:': !0,
        'https:': !0,
        'ftp:': !0,
        'gopher:': !0,
        'file:': !0
      },
      y = i(154);
    function w(t, e, i) {
      if (t && r.isObject(t) && t instanceof o) return t;
      var n = new o();
      return n.parse(t, e, i), n;
    }
    (o.prototype.parse = function(t, e, i) {
      if (!r.isString(t))
        throw new TypeError(
          "Parameter 'url' must be a string, not " + typeof t
        );
      var o = t.indexOf('?'),
        a = -1 !== o && o < t.indexOf('#') ? '?' : '#',
        l = t.split(a);
      l[0] = l[0].replace(/\\/g, '/');
      var w = (t = l.join(a));
      if (((w = w.trim()), !i && 1 === t.split('#').length)) {
        var M = c.exec(w);
        if (M)
          return (
            (this.path = w),
            (this.href = w),
            (this.pathname = M[1]),
            M[2]
              ? ((this.search = M[2]),
                (this.query = e
                  ? y.parse(this.search.substr(1))
                  : this.search.substr(1)))
              : e && ((this.search = ''), (this.query = {})),
            this
          );
      }
      var E = s.exec(w);
      if (E) {
        var b = (E = E[0]).toLowerCase();
        (this.protocol = b), (w = w.substr(E.length));
      }
      if (i || E || w.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        var x = '//' === w.substr(0, 2);
        !x || (E && g[E]) || ((w = w.substr(2)), (this.slashes = !0));
      }
      if (!g[E] && (x || (E && !v[E]))) {
        for (var A, T, L = -1, N = 0; N < d.length; N++) {
          -1 !== (D = w.indexOf(d[N])) && (-1 === L || D < L) && (L = D);
        }
        -1 !== (T = -1 === L ? w.lastIndexOf('@') : w.lastIndexOf('@', L)) &&
          ((A = w.slice(0, T)),
          (w = w.slice(T + 1)),
          (this.auth = decodeURIComponent(A))),
          (L = -1);
        for (N = 0; N < h.length; N++) {
          var D;
          -1 !== (D = w.indexOf(h[N])) && (-1 === L || D < L) && (L = D);
        }
        -1 === L && (L = w.length),
          (this.host = w.slice(0, L)),
          (w = w.slice(L)),
          this.parseHost(),
          (this.hostname = this.hostname || '');
        var S =
          '[' === this.hostname[0] &&
          ']' === this.hostname[this.hostname.length - 1];
        if (!S)
          for (
            var C = this.hostname.split(/\./), _ = ((N = 0), C.length);
            N < _;
            N++
          ) {
            var I = C[N];
            if (I && !I.match(p)) {
              for (var j = '', O = 0, R = I.length; O < R; O++)
                I.charCodeAt(O) > 127 ? (j += 'x') : (j += I[O]);
              if (!j.match(p)) {
                var z = C.slice(0, N),
                  k = C.slice(N + 1),
                  B = I.match(f);
                B && (z.push(B[1]), k.unshift(B[2])),
                  k.length && (w = '/' + k.join('.') + w),
                  (this.hostname = z.join('.'));
                break;
              }
            }
          }
        this.hostname.length > 255
          ? (this.hostname = '')
          : (this.hostname = this.hostname.toLowerCase()),
          S || (this.hostname = n.toASCII(this.hostname));
        var P = this.port ? ':' + this.port : '',
          U = this.hostname || '';
        (this.host = U + P),
          (this.href += this.host),
          S &&
            ((this.hostname = this.hostname.substr(
              1,
              this.hostname.length - 2
            )),
            '/' !== w[0] && (w = '/' + w));
      }
      if (!m[b])
        for (N = 0, _ = u.length; N < _; N++) {
          var F = u[N];
          if (-1 !== w.indexOf(F)) {
            var H = encodeURIComponent(F);
            H === F && (H = escape(F)), (w = w.split(F).join(H));
          }
        }
      var V = w.indexOf('#');
      -1 !== V && ((this.hash = w.substr(V)), (w = w.slice(0, V)));
      var G = w.indexOf('?');
      if (
        (-1 !== G
          ? ((this.search = w.substr(G)),
            (this.query = w.substr(G + 1)),
            e && (this.query = y.parse(this.query)),
            (w = w.slice(0, G)))
          : e && ((this.search = ''), (this.query = {})),
        w && (this.pathname = w),
        v[b] && this.hostname && !this.pathname && (this.pathname = '/'),
        this.pathname || this.search)
      ) {
        P = this.pathname || '';
        var Y = this.search || '';
        this.path = P + Y;
      }
      return (this.href = this.format()), this;
    }),
      (o.prototype.format = function() {
        var t = this.auth || '';
        t &&
          ((t = (t = encodeURIComponent(t)).replace(/%3A/i, ':')), (t += '@'));
        var e = this.protocol || '',
          i = this.pathname || '',
          n = this.hash || '',
          o = !1,
          s = '';
        this.host
          ? (o = t + this.host)
          : this.hostname &&
            ((o =
              t +
              (-1 === this.hostname.indexOf(':')
                ? this.hostname
                : '[' + this.hostname + ']')),
            this.port && (o += ':' + this.port)),
          this.query &&
            r.isObject(this.query) &&
            Object.keys(this.query).length &&
            (s = y.stringify(this.query));
        var a = this.search || (s && '?' + s) || '';
        return (
          e && ':' !== e.substr(-1) && (e += ':'),
          this.slashes || ((!e || v[e]) && !1 !== o)
            ? ((o = '//' + (o || '')),
              i && '/' !== i.charAt(0) && (i = '/' + i))
            : o || (o = ''),
          n && '#' !== n.charAt(0) && (n = '#' + n),
          a && '?' !== a.charAt(0) && (a = '?' + a),
          e +
            o +
            (i = i.replace(/[?#]/g, function(t) {
              return encodeURIComponent(t);
            })) +
            (a = a.replace('#', '%23')) +
            n
        );
      }),
      (o.prototype.resolve = function(t) {
        return this.resolveObject(w(t, !1, !0)).format();
      }),
      (o.prototype.resolveObject = function(t) {
        if (r.isString(t)) {
          var e = new o();
          e.parse(t, !1, !0), (t = e);
        }
        for (var i = new o(), n = Object.keys(this), s = 0; s < n.length; s++) {
          var a = n[s];
          i[a] = this[a];
        }
        if (((i.hash = t.hash), '' === t.href)) return (i.href = i.format()), i;
        if (t.slashes && !t.protocol) {
          for (var c = Object.keys(t), l = 0; l < c.length; l++) {
            var u = c[l];
            'protocol' !== u && (i[u] = t[u]);
          }
          return (
            v[i.protocol] &&
              i.hostname &&
              !i.pathname &&
              (i.path = i.pathname = '/'),
            (i.href = i.format()),
            i
          );
        }
        if (t.protocol && t.protocol !== i.protocol) {
          if (!v[t.protocol]) {
            for (var h = Object.keys(t), d = 0; d < h.length; d++) {
              var p = h[d];
              i[p] = t[p];
            }
            return (i.href = i.format()), i;
          }
          if (((i.protocol = t.protocol), t.host || g[t.protocol]))
            i.pathname = t.pathname;
          else {
            for (
              var f = (t.pathname || '').split('/');
              f.length && !(t.host = f.shift());

            );
            t.host || (t.host = ''),
              t.hostname || (t.hostname = ''),
              '' !== f[0] && f.unshift(''),
              f.length < 2 && f.unshift(''),
              (i.pathname = f.join('/'));
          }
          if (
            ((i.search = t.search),
            (i.query = t.query),
            (i.host = t.host || ''),
            (i.auth = t.auth),
            (i.hostname = t.hostname || t.host),
            (i.port = t.port),
            i.pathname || i.search)
          ) {
            var m = i.pathname || '',
              y = i.search || '';
            i.path = m + y;
          }
          return (i.slashes = i.slashes || t.slashes), (i.href = i.format()), i;
        }
        var w = i.pathname && '/' === i.pathname.charAt(0),
          M = t.host || (t.pathname && '/' === t.pathname.charAt(0)),
          E = M || w || (i.host && t.pathname),
          b = E,
          x = (i.pathname && i.pathname.split('/')) || [],
          A = ((f = (t.pathname && t.pathname.split('/')) || []),
          i.protocol && !v[i.protocol]);
        if (
          (A &&
            ((i.hostname = ''),
            (i.port = null),
            i.host && ('' === x[0] ? (x[0] = i.host) : x.unshift(i.host)),
            (i.host = ''),
            t.protocol &&
              ((t.hostname = null),
              (t.port = null),
              t.host && ('' === f[0] ? (f[0] = t.host) : f.unshift(t.host)),
              (t.host = null)),
            (E = E && ('' === f[0] || '' === x[0]))),
          M)
        )
          (i.host = t.host || '' === t.host ? t.host : i.host),
            (i.hostname =
              t.hostname || '' === t.hostname ? t.hostname : i.hostname),
            (i.search = t.search),
            (i.query = t.query),
            (x = f);
        else if (f.length)
          x || (x = []),
            x.pop(),
            (x = x.concat(f)),
            (i.search = t.search),
            (i.query = t.query);
        else if (!r.isNullOrUndefined(t.search)) {
          if (A)
            (i.hostname = i.host = x.shift()),
              (S =
                !!(i.host && i.host.indexOf('@') > 0) && i.host.split('@')) &&
                ((i.auth = S.shift()), (i.host = i.hostname = S.shift()));
          return (
            (i.search = t.search),
            (i.query = t.query),
            (r.isNull(i.pathname) && r.isNull(i.search)) ||
              (i.path =
                (i.pathname ? i.pathname : '') + (i.search ? i.search : '')),
            (i.href = i.format()),
            i
          );
        }
        if (!x.length)
          return (
            (i.pathname = null),
            i.search ? (i.path = '/' + i.search) : (i.path = null),
            (i.href = i.format()),
            i
          );
        for (
          var T = x.slice(-1)[0],
            L =
              ((i.host || t.host || x.length > 1) &&
                ('.' === T || '..' === T)) ||
              '' === T,
            N = 0,
            D = x.length;
          D >= 0;
          D--
        )
          '.' === (T = x[D])
            ? x.splice(D, 1)
            : '..' === T ? (x.splice(D, 1), N++) : N && (x.splice(D, 1), N--);
        if (!E && !b) for (; N--; N) x.unshift('..');
        !E || '' === x[0] || (x[0] && '/' === x[0].charAt(0)) || x.unshift(''),
          L && '/' !== x.join('/').substr(-1) && x.push('');
        var S,
          C = '' === x[0] || (x[0] && '/' === x[0].charAt(0));
        A &&
          ((i.hostname = i.host = C ? '' : x.length ? x.shift() : ''),
          (S = !!(i.host && i.host.indexOf('@') > 0) && i.host.split('@')) &&
            ((i.auth = S.shift()), (i.host = i.hostname = S.shift())));
        return (
          (E = E || (i.host && x.length)) && !C && x.unshift(''),
          x.length
            ? (i.pathname = x.join('/'))
            : ((i.pathname = null), (i.path = null)),
          (r.isNull(i.pathname) && r.isNull(i.search)) ||
            (i.path =
              (i.pathname ? i.pathname : '') + (i.search ? i.search : '')),
          (i.auth = t.auth || i.auth),
          (i.slashes = i.slashes || t.slashes),
          (i.href = i.format()),
          i
        );
      }),
      (o.prototype.parseHost = function() {
        var t = this.host,
          e = a.exec(t);
        e &&
          (':' !== (e = e[0]) && (this.port = e.substr(1)),
          (t = t.substr(0, t.length - e.length))),
          t && (this.hostname = t);
      });
  },
  function(t, e, i) {
    (function(t, n) {
      var r;
      !(function(o) {
        'object' == typeof e && e && e.nodeType,
          'object' == typeof t && t && t.nodeType;
        var s = 'object' == typeof n && n;
        s.global !== s && s.window !== s && s.self;
        var a,
          c = 2147483647,
          l = 36,
          u = 1,
          h = 26,
          d = 38,
          p = 700,
          f = 72,
          m = 128,
          g = '-',
          v = /^xn--/,
          y = /[^\x20-\x7E]/,
          w = /[\x2E\u3002\uFF0E\uFF61]/g,
          M = {
            overflow: 'Overflow: input needs wider integers to process',
            'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
            'invalid-input': 'Invalid input'
          },
          E = l - u,
          b = Math.floor,
          x = String.fromCharCode;
        function A(t) {
          throw new RangeError(M[t]);
        }
        function T(t, e) {
          for (var i = t.length, n = []; i--; ) n[i] = e(t[i]);
          return n;
        }
        function L(t, e) {
          var i = t.split('@'),
            n = '';
          return (
            i.length > 1 && ((n = i[0] + '@'), (t = i[1])),
            n + T((t = t.replace(w, '.')).split('.'), e).join('.')
          );
        }
        function N(t) {
          for (var e, i, n = [], r = 0, o = t.length; r < o; )
            (e = t.charCodeAt(r++)) >= 55296 && e <= 56319 && r < o
              ? 56320 == (64512 & (i = t.charCodeAt(r++)))
                ? n.push(((1023 & e) << 10) + (1023 & i) + 65536)
                : (n.push(e), r--)
              : n.push(e);
          return n;
        }
        function D(t) {
          return T(t, function(t) {
            var e = '';
            return (
              t > 65535 &&
                ((e += x((((t -= 65536) >>> 10) & 1023) | 55296)),
                (t = 56320 | (1023 & t))),
              (e += x(t))
            );
          }).join('');
        }
        function S(t, e) {
          return t + 22 + 75 * (t < 26) - ((0 != e) << 5);
        }
        function C(t, e, i) {
          var n = 0;
          for (
            t = i ? b(t / p) : t >> 1, t += b(t / e);
            t > (E * h) >> 1;
            n += l
          )
            t = b(t / E);
          return b(n + (E + 1) * t / (t + d));
        }
        function _(t) {
          var e,
            i,
            n,
            r,
            o,
            s,
            a,
            d,
            p,
            v,
            y,
            w = [],
            M = t.length,
            E = 0,
            x = m,
            T = f;
          for ((i = t.lastIndexOf(g)) < 0 && (i = 0), n = 0; n < i; ++n)
            t.charCodeAt(n) >= 128 && A('not-basic'), w.push(t.charCodeAt(n));
          for (r = i > 0 ? i + 1 : 0; r < M; ) {
            for (
              o = E, s = 1, a = l;
              r >= M && A('invalid-input'),
                ((d =
                  (y = t.charCodeAt(r++)) - 48 < 10
                    ? y - 22
                    : y - 65 < 26 ? y - 65 : y - 97 < 26 ? y - 97 : l) >= l ||
                  d > b((c - E) / s)) &&
                  A('overflow'),
                (E += d * s),
                !(d < (p = a <= T ? u : a >= T + h ? h : a - T));
              a += l
            )
              s > b(c / (v = l - p)) && A('overflow'), (s *= v);
            (T = C(E - o, (e = w.length + 1), 0 == o)),
              b(E / e) > c - x && A('overflow'),
              (x += b(E / e)),
              (E %= e),
              w.splice(E++, 0, x);
          }
          return D(w);
        }
        function I(t) {
          var e,
            i,
            n,
            r,
            o,
            s,
            a,
            d,
            p,
            v,
            y,
            w,
            M,
            E,
            T,
            L = [];
          for (w = (t = N(t)).length, e = m, i = 0, o = f, s = 0; s < w; ++s)
            (y = t[s]) < 128 && L.push(x(y));
          for (n = r = L.length, r && L.push(g); n < w; ) {
            for (a = c, s = 0; s < w; ++s) (y = t[s]) >= e && y < a && (a = y);
            for (
              a - e > b((c - i) / (M = n + 1)) && A('overflow'),
                i += (a - e) * M,
                e = a,
                s = 0;
              s < w;
              ++s
            )
              if (((y = t[s]) < e && ++i > c && A('overflow'), y == e)) {
                for (
                  d = i, p = l;
                  !(d < (v = p <= o ? u : p >= o + h ? h : p - o));
                  p += l
                )
                  (T = d - v),
                    (E = l - v),
                    L.push(x(S(v + T % E, 0))),
                    (d = b(T / E));
                L.push(x(S(d, 0))), (o = C(i, M, n == r)), (i = 0), ++n;
              }
            ++i, ++e;
          }
          return L.join('');
        }
        (a = {
          version: '1.4.1',
          ucs2: { decode: N, encode: D },
          decode: _,
          encode: I,
          toASCII: function(t) {
            return L(t, function(t) {
              return y.test(t) ? 'xn--' + I(t) : t;
            });
          },
          toUnicode: function(t) {
            return L(t, function(t) {
              return v.test(t) ? _(t.slice(4).toLowerCase()) : t;
            });
          }
        }),
          void 0 ===
            (r = function() {
              return a;
            }.call(e, i, e, t)) || (t.exports = r);
      })();
    }.call(e, i(40)(t), i(16)));
  },
  function(t, e, i) {
    'use strict';
    t.exports = {
      isString: function(t) {
        return 'string' == typeof t;
      },
      isObject: function(t) {
        return 'object' == typeof t && null !== t;
      },
      isNull: function(t) {
        return null === t;
      },
      isNullOrUndefined: function(t) {
        return null == t;
      }
    };
  },
  function(t, e, i) {
    'use strict';
    (e.decode = e.parse = i(155)), (e.encode = e.stringify = i(156));
  },
  function(t, e, i) {
    'use strict';
    t.exports = function(t, e, i, r) {
      (e = e || '&'), (i = i || '=');
      var o = {};
      if ('string' != typeof t || 0 === t.length) return o;
      var s = /\+/g;
      t = t.split(e);
      var a = 1e3;
      r && 'number' == typeof r.maxKeys && (a = r.maxKeys);
      var c,
        l,
        u = t.length;
      a > 0 && u > a && (u = a);
      for (var h = 0; h < u; ++h) {
        var d,
          p,
          f,
          m,
          g = t[h].replace(s, '%20'),
          v = g.indexOf(i);
        v >= 0
          ? ((d = g.substr(0, v)), (p = g.substr(v + 1)))
          : ((d = g), (p = '')),
          (f = decodeURIComponent(d)),
          (m = decodeURIComponent(p)),
          (c = o),
          (l = f),
          Object.prototype.hasOwnProperty.call(c, l)
            ? n(o[f]) ? o[f].push(m) : (o[f] = [o[f], m])
            : (o[f] = m);
      }
      return o;
    };
    var n =
      Array.isArray ||
      function(t) {
        return '[object Array]' === Object.prototype.toString.call(t);
      };
  },
  function(t, e, i) {
    'use strict';
    var n = function(t) {
      switch (typeof t) {
        case 'string':
          return t;
        case 'boolean':
          return t ? 'true' : 'false';
        case 'number':
          return isFinite(t) ? t : '';
        default:
          return '';
      }
    };
    t.exports = function(t, e, i, a) {
      return (
        (e = e || '&'),
        (i = i || '='),
        null === t && (t = void 0),
        'object' == typeof t
          ? o(s(t), function(s) {
              var a = encodeURIComponent(n(s)) + i;
              return r(t[s])
                ? o(t[s], function(t) {
                    return a + encodeURIComponent(n(t));
                  }).join(e)
                : a + encodeURIComponent(n(t[s]));
            }).join(e)
          : a ? encodeURIComponent(n(a)) + i + encodeURIComponent(n(t)) : ''
      );
    };
    var r =
      Array.isArray ||
      function(t) {
        return '[object Array]' === Object.prototype.toString.call(t);
      };
    function o(t, e) {
      if (t.map) return t.map(e);
      for (var i = [], n = 0; n < t.length; n++) i.push(e(t[n], n));
      return i;
    }
    var s =
      Object.keys ||
      function(t) {
        var e = [];
        for (var i in t)
          Object.prototype.hasOwnProperty.call(t, i) && e.push(i);
        return e;
      };
  },
  function(t, e, i) {
    (function(t, n) {
      var r;
      (function() {
        var o,
          s = 200,
          a = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
          c = 'Expected a function',
          l = '__lodash_hash_undefined__',
          u = 500,
          h = '__lodash_placeholder__',
          d = 1,
          p = 2,
          f = 4,
          m = 1,
          g = 2,
          v = 1,
          y = 2,
          w = 4,
          M = 8,
          E = 16,
          b = 32,
          x = 64,
          A = 128,
          T = 256,
          L = 512,
          N = 30,
          D = '...',
          S = 800,
          C = 16,
          _ = 1,
          I = 2,
          j = 1 / 0,
          O = 9007199254740991,
          R = 1.7976931348623157e308,
          z = NaN,
          k = 4294967295,
          B = k - 1,
          P = k >>> 1,
          U = [
            ['ary', A],
            ['bind', v],
            ['bindKey', y],
            ['curry', M],
            ['curryRight', E],
            ['flip', L],
            ['partial', b],
            ['partialRight', x],
            ['rearg', T]
          ],
          F = '[object Arguments]',
          H = '[object Array]',
          V = '[object AsyncFunction]',
          G = '[object Boolean]',
          Y = '[object Date]',
          Q = '[object DOMException]',
          W = '[object Error]',
          q = '[object Function]',
          X = '[object GeneratorFunction]',
          K = '[object Map]',
          Z = '[object Number]',
          J = '[object Null]',
          $ = '[object Object]',
          tt = '[object Proxy]',
          et = '[object RegExp]',
          it = '[object Set]',
          nt = '[object String]',
          rt = '[object Symbol]',
          ot = '[object Undefined]',
          st = '[object WeakMap]',
          at = '[object WeakSet]',
          ct = '[object ArrayBuffer]',
          lt = '[object DataView]',
          ut = '[object Float32Array]',
          ht = '[object Float64Array]',
          dt = '[object Int8Array]',
          pt = '[object Int16Array]',
          ft = '[object Int32Array]',
          mt = '[object Uint8Array]',
          gt = '[object Uint8ClampedArray]',
          vt = '[object Uint16Array]',
          yt = '[object Uint32Array]',
          wt = /\b__p \+= '';/g,
          Mt = /\b(__p \+=) '' \+/g,
          Et = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
          bt = /&(?:amp|lt|gt|quot|#39);/g,
          xt = /[&<>"']/g,
          At = RegExp(bt.source),
          Tt = RegExp(xt.source),
          Lt = /<%-([\s\S]+?)%>/g,
          Nt = /<%([\s\S]+?)%>/g,
          Dt = /<%=([\s\S]+?)%>/g,
          St = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
          Ct = /^\w*$/,
          _t = /^\./,
          It = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
          jt = /[\\^$.*+?()[\]{}|]/g,
          Ot = RegExp(jt.source),
          Rt = /^\s+|\s+$/g,
          zt = /^\s+/,
          kt = /\s+$/,
          Bt = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
          Pt = /\{\n\/\* \[wrapped with (.+)\] \*/,
          Ut = /,? & /,
          Ft = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
          Ht = /\\(\\)?/g,
          Vt = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
          Gt = /\w*$/,
          Yt = /^[-+]0x[0-9a-f]+$/i,
          Qt = /^0b[01]+$/i,
          Wt = /^\[object .+?Constructor\]$/,
          qt = /^0o[0-7]+$/i,
          Xt = /^(?:0|[1-9]\d*)$/,
          Kt = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
          Zt = /($^)/,
          Jt = /['\n\r\u2028\u2029\\]/g,
          $t = '\\ud800-\\udfff',
          te = '\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff',
          ee = 'a-z\\xdf-\\xf6\\xf8-\\xff',
          ie = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
          ne =
            '\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
          re = '[' + $t + ']',
          oe = '[' + ne + ']',
          se = '[' + te + ']',
          ae = '\\d+',
          ce = '[\\u2700-\\u27bf]',
          le = '[' + ee + ']',
          ue = '[^' + $t + ne + ae + '\\u2700-\\u27bf' + ee + ie + ']',
          he = '\\ud83c[\\udffb-\\udfff]',
          de = '[^' + $t + ']',
          pe = '(?:\\ud83c[\\udde6-\\uddff]){2}',
          fe = '[\\ud800-\\udbff][\\udc00-\\udfff]',
          me = '[' + ie + ']',
          ge = '(?:' + le + '|' + ue + ')',
          ve = '(?:' + me + '|' + ue + ')',
          ye = "(?:['’](?:d|ll|m|re|s|t|ve))?",
          we = "(?:['’](?:D|LL|M|RE|S|T|VE))?",
          Me = '(?:' + se + '|' + he + ')' + '?',
          Ee =
            '[\\ufe0e\\ufe0f]?' +
            Me +
            ('(?:\\u200d(?:' +
              [de, pe, fe].join('|') +
              ')[\\ufe0e\\ufe0f]?' +
              Me +
              ')*'),
          be = '(?:' + [ce, pe, fe].join('|') + ')' + Ee,
          xe = '(?:' + [de + se + '?', se, pe, fe, re].join('|') + ')',
          Ae = RegExp("['’]", 'g'),
          Te = RegExp(se, 'g'),
          Le = RegExp(he + '(?=' + he + ')|' + xe + Ee, 'g'),
          Ne = RegExp(
            [
              me + '?' + le + '+' + ye + '(?=' + [oe, me, '$'].join('|') + ')',
              ve + '+' + we + '(?=' + [oe, me + ge, '$'].join('|') + ')',
              me + '?' + ge + '+' + ye,
              me + '+' + we,
              '\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
              '\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
              ae,
              be
            ].join('|'),
            'g'
          ),
          De = RegExp('[\\u200d' + $t + te + '\\ufe0e\\ufe0f]'),
          Se = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
          Ce = [
            'Array',
            'Buffer',
            'DataView',
            'Date',
            'Error',
            'Float32Array',
            'Float64Array',
            'Function',
            'Int8Array',
            'Int16Array',
            'Int32Array',
            'Map',
            'Math',
            'Object',
            'Promise',
            'RegExp',
            'Set',
            'String',
            'Symbol',
            'TypeError',
            'Uint8Array',
            'Uint8ClampedArray',
            'Uint16Array',
            'Uint32Array',
            'WeakMap',
            '_',
            'clearTimeout',
            'isFinite',
            'parseInt',
            'setTimeout'
          ],
          _e = -1,
          Ie = {};
        (Ie[ut] = Ie[ht] = Ie[dt] = Ie[pt] = Ie[ft] = Ie[mt] = Ie[gt] = Ie[
          vt
        ] = Ie[yt] = !0),
          (Ie[F] = Ie[H] = Ie[ct] = Ie[G] = Ie[lt] = Ie[Y] = Ie[W] = Ie[q] = Ie[
            K
          ] = Ie[Z] = Ie[$] = Ie[et] = Ie[it] = Ie[nt] = Ie[st] = !1);
        var je = {};
        (je[F] = je[H] = je[ct] = je[lt] = je[G] = je[Y] = je[ut] = je[ht] = je[
          dt
        ] = je[pt] = je[ft] = je[K] = je[Z] = je[$] = je[et] = je[it] = je[
          nt
        ] = je[rt] = je[mt] = je[gt] = je[vt] = je[yt] = !0),
          (je[W] = je[q] = je[st] = !1);
        var Oe = {
            '\\': '\\',
            "'": "'",
            '\n': 'n',
            '\r': 'r',
            '\u2028': 'u2028',
            '\u2029': 'u2029'
          },
          Re = parseFloat,
          ze = parseInt,
          ke = 'object' == typeof t && t && t.Object === Object && t,
          Be =
            'object' == typeof self && self && self.Object === Object && self,
          Pe = ke || Be || Function('return this')(),
          Ue = 'object' == typeof e && e && !e.nodeType && e,
          Fe = Ue && 'object' == typeof n && n && !n.nodeType && n,
          He = Fe && Fe.exports === Ue,
          Ve = He && ke.process,
          Ge = (function() {
            try {
              return Ve && Ve.binding && Ve.binding('util');
            } catch (t) {}
          })(),
          Ye = Ge && Ge.isArrayBuffer,
          Qe = Ge && Ge.isDate,
          We = Ge && Ge.isMap,
          qe = Ge && Ge.isRegExp,
          Xe = Ge && Ge.isSet,
          Ke = Ge && Ge.isTypedArray;
        function Ze(t, e) {
          return t.set(e[0], e[1]), t;
        }
        function Je(t, e) {
          return t.add(e), t;
        }
        function $e(t, e, i) {
          switch (i.length) {
            case 0:
              return t.call(e);
            case 1:
              return t.call(e, i[0]);
            case 2:
              return t.call(e, i[0], i[1]);
            case 3:
              return t.call(e, i[0], i[1], i[2]);
          }
          return t.apply(e, i);
        }
        function ti(t, e, i, n) {
          for (var r = -1, o = null == t ? 0 : t.length; ++r < o; ) {
            var s = t[r];
            e(n, s, i(s), t);
          }
          return n;
        }
        function ei(t, e) {
          for (
            var i = -1, n = null == t ? 0 : t.length;
            ++i < n && !1 !== e(t[i], i, t);

          );
          return t;
        }
        function ii(t, e) {
          for (var i = null == t ? 0 : t.length; i-- && !1 !== e(t[i], i, t); );
          return t;
        }
        function ni(t, e) {
          for (var i = -1, n = null == t ? 0 : t.length; ++i < n; )
            if (!e(t[i], i, t)) return !1;
          return !0;
        }
        function ri(t, e) {
          for (
            var i = -1, n = null == t ? 0 : t.length, r = 0, o = [];
            ++i < n;

          ) {
            var s = t[i];
            e(s, i, t) && (o[r++] = s);
          }
          return o;
        }
        function oi(t, e) {
          return !!(null == t ? 0 : t.length) && mi(t, e, 0) > -1;
        }
        function si(t, e, i) {
          for (var n = -1, r = null == t ? 0 : t.length; ++n < r; )
            if (i(e, t[n])) return !0;
          return !1;
        }
        function ai(t, e) {
          for (
            var i = -1, n = null == t ? 0 : t.length, r = Array(n);
            ++i < n;

          )
            r[i] = e(t[i], i, t);
          return r;
        }
        function ci(t, e) {
          for (var i = -1, n = e.length, r = t.length; ++i < n; )
            t[r + i] = e[i];
          return t;
        }
        function li(t, e, i, n) {
          var r = -1,
            o = null == t ? 0 : t.length;
          for (n && o && (i = t[++r]); ++r < o; ) i = e(i, t[r], r, t);
          return i;
        }
        function ui(t, e, i, n) {
          var r = null == t ? 0 : t.length;
          for (n && r && (i = t[--r]); r--; ) i = e(i, t[r], r, t);
          return i;
        }
        function hi(t, e) {
          for (var i = -1, n = null == t ? 0 : t.length; ++i < n; )
            if (e(t[i], i, t)) return !0;
          return !1;
        }
        var di = wi('length');
        function pi(t, e, i) {
          var n;
          return (
            i(t, function(t, i, r) {
              if (e(t, i, r)) return (n = i), !1;
            }),
            n
          );
        }
        function fi(t, e, i, n) {
          for (var r = t.length, o = i + (n ? 1 : -1); n ? o-- : ++o < r; )
            if (e(t[o], o, t)) return o;
          return -1;
        }
        function mi(t, e, i) {
          return e == e
            ? (function(t, e, i) {
                var n = i - 1,
                  r = t.length;
                for (; ++n < r; ) if (t[n] === e) return n;
                return -1;
              })(t, e, i)
            : fi(t, vi, i);
        }
        function gi(t, e, i, n) {
          for (var r = i - 1, o = t.length; ++r < o; ) if (n(t[r], e)) return r;
          return -1;
        }
        function vi(t) {
          return t != t;
        }
        function yi(t, e) {
          var i = null == t ? 0 : t.length;
          return i ? bi(t, e) / i : z;
        }
        function wi(t) {
          return function(e) {
            return null == e ? o : e[t];
          };
        }
        function Mi(t) {
          return function(e) {
            return null == t ? o : t[e];
          };
        }
        function Ei(t, e, i, n, r) {
          return (
            r(t, function(t, r, o) {
              i = n ? ((n = !1), t) : e(i, t, r, o);
            }),
            i
          );
        }
        function bi(t, e) {
          for (var i, n = -1, r = t.length; ++n < r; ) {
            var s = e(t[n]);
            s !== o && (i = i === o ? s : i + s);
          }
          return i;
        }
        function xi(t, e) {
          for (var i = -1, n = Array(t); ++i < t; ) n[i] = e(i);
          return n;
        }
        function Ai(t) {
          return function(e) {
            return t(e);
          };
        }
        function Ti(t, e) {
          return ai(e, function(e) {
            return t[e];
          });
        }
        function Li(t, e) {
          return t.has(e);
        }
        function Ni(t, e) {
          for (var i = -1, n = t.length; ++i < n && mi(e, t[i], 0) > -1; );
          return i;
        }
        function Di(t, e) {
          for (var i = t.length; i-- && mi(e, t[i], 0) > -1; );
          return i;
        }
        var Si = Mi({
            À: 'A',
            Á: 'A',
            Â: 'A',
            Ã: 'A',
            Ä: 'A',
            Å: 'A',
            à: 'a',
            á: 'a',
            â: 'a',
            ã: 'a',
            ä: 'a',
            å: 'a',
            Ç: 'C',
            ç: 'c',
            Ð: 'D',
            ð: 'd',
            È: 'E',
            É: 'E',
            Ê: 'E',
            Ë: 'E',
            è: 'e',
            é: 'e',
            ê: 'e',
            ë: 'e',
            Ì: 'I',
            Í: 'I',
            Î: 'I',
            Ï: 'I',
            ì: 'i',
            í: 'i',
            î: 'i',
            ï: 'i',
            Ñ: 'N',
            ñ: 'n',
            Ò: 'O',
            Ó: 'O',
            Ô: 'O',
            Õ: 'O',
            Ö: 'O',
            Ø: 'O',
            ò: 'o',
            ó: 'o',
            ô: 'o',
            õ: 'o',
            ö: 'o',
            ø: 'o',
            Ù: 'U',
            Ú: 'U',
            Û: 'U',
            Ü: 'U',
            ù: 'u',
            ú: 'u',
            û: 'u',
            ü: 'u',
            Ý: 'Y',
            ý: 'y',
            ÿ: 'y',
            Æ: 'Ae',
            æ: 'ae',
            Þ: 'Th',
            þ: 'th',
            ß: 'ss',
            Ā: 'A',
            Ă: 'A',
            Ą: 'A',
            ā: 'a',
            ă: 'a',
            ą: 'a',
            Ć: 'C',
            Ĉ: 'C',
            Ċ: 'C',
            Č: 'C',
            ć: 'c',
            ĉ: 'c',
            ċ: 'c',
            č: 'c',
            Ď: 'D',
            Đ: 'D',
            ď: 'd',
            đ: 'd',
            Ē: 'E',
            Ĕ: 'E',
            Ė: 'E',
            Ę: 'E',
            Ě: 'E',
            ē: 'e',
            ĕ: 'e',
            ė: 'e',
            ę: 'e',
            ě: 'e',
            Ĝ: 'G',
            Ğ: 'G',
            Ġ: 'G',
            Ģ: 'G',
            ĝ: 'g',
            ğ: 'g',
            ġ: 'g',
            ģ: 'g',
            Ĥ: 'H',
            Ħ: 'H',
            ĥ: 'h',
            ħ: 'h',
            Ĩ: 'I',
            Ī: 'I',
            Ĭ: 'I',
            Į: 'I',
            İ: 'I',
            ĩ: 'i',
            ī: 'i',
            ĭ: 'i',
            į: 'i',
            ı: 'i',
            Ĵ: 'J',
            ĵ: 'j',
            Ķ: 'K',
            ķ: 'k',
            ĸ: 'k',
            Ĺ: 'L',
            Ļ: 'L',
            Ľ: 'L',
            Ŀ: 'L',
            Ł: 'L',
            ĺ: 'l',
            ļ: 'l',
            ľ: 'l',
            ŀ: 'l',
            ł: 'l',
            Ń: 'N',
            Ņ: 'N',
            Ň: 'N',
            Ŋ: 'N',
            ń: 'n',
            ņ: 'n',
            ň: 'n',
            ŋ: 'n',
            Ō: 'O',
            Ŏ: 'O',
            Ő: 'O',
            ō: 'o',
            ŏ: 'o',
            ő: 'o',
            Ŕ: 'R',
            Ŗ: 'R',
            Ř: 'R',
            ŕ: 'r',
            ŗ: 'r',
            ř: 'r',
            Ś: 'S',
            Ŝ: 'S',
            Ş: 'S',
            Š: 'S',
            ś: 's',
            ŝ: 's',
            ş: 's',
            š: 's',
            Ţ: 'T',
            Ť: 'T',
            Ŧ: 'T',
            ţ: 't',
            ť: 't',
            ŧ: 't',
            Ũ: 'U',
            Ū: 'U',
            Ŭ: 'U',
            Ů: 'U',
            Ű: 'U',
            Ų: 'U',
            ũ: 'u',
            ū: 'u',
            ŭ: 'u',
            ů: 'u',
            ű: 'u',
            ų: 'u',
            Ŵ: 'W',
            ŵ: 'w',
            Ŷ: 'Y',
            ŷ: 'y',
            Ÿ: 'Y',
            Ź: 'Z',
            Ż: 'Z',
            Ž: 'Z',
            ź: 'z',
            ż: 'z',
            ž: 'z',
            Ĳ: 'IJ',
            ĳ: 'ij',
            Œ: 'Oe',
            œ: 'oe',
            ŉ: "'n",
            ſ: 's'
          }),
          Ci = Mi({
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#39;'
          });
        function _i(t) {
          return '\\' + Oe[t];
        }
        function Ii(t) {
          return De.test(t);
        }
        function ji(t) {
          var e = -1,
            i = Array(t.size);
          return (
            t.forEach(function(t, n) {
              i[++e] = [n, t];
            }),
            i
          );
        }
        function Oi(t, e) {
          return function(i) {
            return t(e(i));
          };
        }
        function Ri(t, e) {
          for (var i = -1, n = t.length, r = 0, o = []; ++i < n; ) {
            var s = t[i];
            (s !== e && s !== h) || ((t[i] = h), (o[r++] = i));
          }
          return o;
        }
        function zi(t) {
          var e = -1,
            i = Array(t.size);
          return (
            t.forEach(function(t) {
              i[++e] = t;
            }),
            i
          );
        }
        function ki(t) {
          return Ii(t)
            ? (function(t) {
                var e = (Le.lastIndex = 0);
                for (; Le.test(t); ) ++e;
                return e;
              })(t)
            : di(t);
        }
        function Bi(t) {
          return Ii(t) ? t.match(Le) || [] : t.split('');
        }
        var Pi = Mi({
          '&amp;': '&',
          '&lt;': '<',
          '&gt;': '>',
          '&quot;': '"',
          '&#39;': "'"
        });
        var Ui = (function t(e) {
          var i,
            n = (e =
              null == e ? Pe : Ui.defaults(Pe.Object(), e, Ui.pick(Pe, Ce)))
              .Array,
            r = e.Date,
            $t = e.Error,
            te = e.Function,
            ee = e.Math,
            ie = e.Object,
            ne = e.RegExp,
            re = e.String,
            oe = e.TypeError,
            se = n.prototype,
            ae = te.prototype,
            ce = ie.prototype,
            le = e['__core-js_shared__'],
            ue = ae.toString,
            he = ce.hasOwnProperty,
            de = 0,
            pe = (i = /[^.]+$/.exec((le && le.keys && le.keys.IE_PROTO) || ''))
              ? 'Symbol(src)_1.' + i
              : '',
            fe = ce.toString,
            me = ue.call(ie),
            ge = Pe._,
            ve = ne(
              '^' +
                ue
                  .call(he)
                  .replace(jt, '\\$&')
                  .replace(
                    /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                    '$1.*?'
                  ) +
                '$'
            ),
            ye = He ? e.Buffer : o,
            we = e.Symbol,
            Me = e.Uint8Array,
            Ee = ye ? ye.allocUnsafe : o,
            be = Oi(ie.getPrototypeOf, ie),
            xe = ie.create,
            Le = ce.propertyIsEnumerable,
            De = se.splice,
            Oe = we ? we.isConcatSpreadable : o,
            ke = we ? we.iterator : o,
            Be = we ? we.toStringTag : o,
            Ue = (function() {
              try {
                var t = Fo(ie, 'defineProperty');
                return t({}, '', {}), t;
              } catch (t) {}
            })(),
            Fe = e.clearTimeout !== Pe.clearTimeout && e.clearTimeout,
            Ve = r && r.now !== Pe.Date.now && r.now,
            Ge = e.setTimeout !== Pe.setTimeout && e.setTimeout,
            di = ee.ceil,
            Mi = ee.floor,
            Fi = ie.getOwnPropertySymbols,
            Hi = ye ? ye.isBuffer : o,
            Vi = e.isFinite,
            Gi = se.join,
            Yi = Oi(ie.keys, ie),
            Qi = ee.max,
            Wi = ee.min,
            qi = r.now,
            Xi = e.parseInt,
            Ki = ee.random,
            Zi = se.reverse,
            Ji = Fo(e, 'DataView'),
            $i = Fo(e, 'Map'),
            tn = Fo(e, 'Promise'),
            en = Fo(e, 'Set'),
            nn = Fo(e, 'WeakMap'),
            rn = Fo(ie, 'create'),
            on = nn && new nn(),
            sn = {},
            an = fs(Ji),
            cn = fs($i),
            ln = fs(tn),
            un = fs(en),
            hn = fs(nn),
            dn = we ? we.prototype : o,
            pn = dn ? dn.valueOf : o,
            fn = dn ? dn.toString : o;
          function mn(t) {
            if (_a(t) && !Ma(t) && !(t instanceof wn)) {
              if (t instanceof yn) return t;
              if (he.call(t, '__wrapped__')) return ms(t);
            }
            return new yn(t);
          }
          var gn = (function() {
            function t() {}
            return function(e) {
              if (!Ca(e)) return {};
              if (xe) return xe(e);
              t.prototype = e;
              var i = new t();
              return (t.prototype = o), i;
            };
          })();
          function vn() {}
          function yn(t, e) {
            (this.__wrapped__ = t),
              (this.__actions__ = []),
              (this.__chain__ = !!e),
              (this.__index__ = 0),
              (this.__values__ = o);
          }
          function wn(t) {
            (this.__wrapped__ = t),
              (this.__actions__ = []),
              (this.__dir__ = 1),
              (this.__filtered__ = !1),
              (this.__iteratees__ = []),
              (this.__takeCount__ = k),
              (this.__views__ = []);
          }
          function Mn(t) {
            var e = -1,
              i = null == t ? 0 : t.length;
            for (this.clear(); ++e < i; ) {
              var n = t[e];
              this.set(n[0], n[1]);
            }
          }
          function En(t) {
            var e = -1,
              i = null == t ? 0 : t.length;
            for (this.clear(); ++e < i; ) {
              var n = t[e];
              this.set(n[0], n[1]);
            }
          }
          function bn(t) {
            var e = -1,
              i = null == t ? 0 : t.length;
            for (this.clear(); ++e < i; ) {
              var n = t[e];
              this.set(n[0], n[1]);
            }
          }
          function xn(t) {
            var e = -1,
              i = null == t ? 0 : t.length;
            for (this.__data__ = new bn(); ++e < i; ) this.add(t[e]);
          }
          function An(t) {
            var e = (this.__data__ = new En(t));
            this.size = e.size;
          }
          function Tn(t, e) {
            var i = Ma(t),
              n = !i && wa(t),
              r = !i && !n && Aa(t),
              o = !i && !n && !r && Pa(t),
              s = i || n || r || o,
              a = s ? xi(t.length, re) : [],
              c = a.length;
            for (var l in t)
              (!e && !he.call(t, l)) ||
                (s &&
                  ('length' == l ||
                    (r && ('offset' == l || 'parent' == l)) ||
                    (o &&
                      ('buffer' == l ||
                        'byteLength' == l ||
                        'byteOffset' == l)) ||
                    qo(l, c))) ||
                a.push(l);
            return a;
          }
          function Ln(t) {
            var e = t.length;
            return e ? t[xr(0, e - 1)] : o;
          }
          function Nn(t, e) {
            return ls(ro(t), zn(e, 0, t.length));
          }
          function Dn(t) {
            return ls(ro(t));
          }
          function Sn(t, e, i) {
            ((i === o || ga(t[e], i)) && (i !== o || e in t)) || On(t, e, i);
          }
          function Cn(t, e, i) {
            var n = t[e];
            (he.call(t, e) && ga(n, i) && (i !== o || e in t)) || On(t, e, i);
          }
          function _n(t, e) {
            for (var i = t.length; i--; ) if (ga(t[i][0], e)) return i;
            return -1;
          }
          function In(t, e, i, n) {
            return (
              Fn(t, function(t, r, o) {
                e(n, t, i(t), o);
              }),
              n
            );
          }
          function jn(t, e) {
            return t && oo(e, ac(e), t);
          }
          function On(t, e, i) {
            '__proto__' == e && Ue
              ? Ue(t, e, {
                  configurable: !0,
                  enumerable: !0,
                  value: i,
                  writable: !0
                })
              : (t[e] = i);
          }
          function Rn(t, e) {
            for (var i = -1, r = e.length, s = n(r), a = null == t; ++i < r; )
              s[i] = a ? o : ic(t, e[i]);
            return s;
          }
          function zn(t, e, i) {
            return (
              t == t &&
                (i !== o && (t = t <= i ? t : i),
                e !== o && (t = t >= e ? t : e)),
              t
            );
          }
          function kn(t, e, i, n, r, s) {
            var a,
              c = e & d,
              l = e & p,
              u = e & f;
            if ((i && (a = r ? i(t, n, r, s) : i(t)), a !== o)) return a;
            if (!Ca(t)) return t;
            var h,
              m,
              g,
              v,
              y,
              w,
              M,
              E,
              b,
              x = Ma(t);
            if (x) {
              if (
                ((M = t),
                (E = M.length),
                (b = M.constructor(E)),
                E &&
                  'string' == typeof M[0] &&
                  he.call(M, 'index') &&
                  ((b.index = M.index), (b.input = M.input)),
                (a = b),
                !c)
              )
                return ro(t, a);
            } else {
              var A = Go(t),
                T = A == q || A == X;
              if (Aa(t)) return Jr(t, c);
              if (A == $ || A == F || (T && !r)) {
                if (((a = l || T ? {} : Qo(t)), !c))
                  return l
                    ? ((g = t),
                      (w = t),
                      (v = (y = a) && oo(w, cc(w), y)),
                      oo(g, Vo(g), v))
                    : ((h = t), (m = jn(a, t)), oo(h, Ho(h), m));
              } else {
                if (!je[A]) return r ? t : {};
                a = (function(t, e, i, n) {
                  var r,
                    o,
                    s,
                    a,
                    c,
                    l,
                    u,
                    h = t.constructor;
                  switch (e) {
                    case ct:
                      return $r(t);
                    case G:
                    case Y:
                      return new h(+t);
                    case lt:
                      return (
                        (l = t),
                        (u = n ? $r(l.buffer) : l.buffer),
                        new l.constructor(u, l.byteOffset, l.byteLength)
                      );
                    case ut:
                    case ht:
                    case dt:
                    case pt:
                    case ft:
                    case mt:
                    case gt:
                    case vt:
                    case yt:
                      return to(t, n);
                    case K:
                      return (
                        (c = t),
                        li(n ? i(ji(c), d) : ji(c), Ze, new c.constructor())
                      );
                    case Z:
                    case nt:
                      return new h(t);
                    case et:
                      return (
                        ((a = new (s = t).constructor(
                          s.source,
                          Gt.exec(s)
                        )).lastIndex =
                          s.lastIndex),
                        a
                      );
                    case it:
                      return (
                        (o = t),
                        li(n ? i(zi(o), d) : zi(o), Je, new o.constructor())
                      );
                    case rt:
                      return (r = t), pn ? ie(pn.call(r)) : {};
                  }
                })(t, A, kn, c);
              }
            }
            s || (s = new An());
            var L = s.get(t);
            if (L) return L;
            s.set(t, a);
            var N = x ? o : (u ? (l ? Oo : jo) : l ? cc : ac)(t);
            return (
              ei(N || t, function(n, r) {
                N && (n = t[(r = n)]), Cn(a, r, kn(n, e, i, r, t, s));
              }),
              a
            );
          }
          function Bn(t, e, i) {
            var n = i.length;
            if (null == t) return !n;
            for (t = ie(t); n--; ) {
              var r = i[n],
                s = e[r],
                a = t[r];
              if ((a === o && !(r in t)) || !s(a)) return !1;
            }
            return !0;
          }
          function Pn(t, e, i) {
            if ('function' != typeof t) throw new oe(c);
            return os(function() {
              t.apply(o, i);
            }, e);
          }
          function Un(t, e, i, n) {
            var r = -1,
              o = oi,
              a = !0,
              c = t.length,
              l = [],
              u = e.length;
            if (!c) return l;
            i && (e = ai(e, Ai(i))),
              n
                ? ((o = si), (a = !1))
                : e.length >= s && ((o = Li), (a = !1), (e = new xn(e)));
            t: for (; ++r < c; ) {
              var h = t[r],
                d = null == i ? h : i(h);
              if (((h = n || 0 !== h ? h : 0), a && d == d)) {
                for (var p = u; p--; ) if (e[p] === d) continue t;
                l.push(h);
              } else o(e, d, n) || l.push(h);
            }
            return l;
          }
          (mn.templateSettings = {
            escape: Lt,
            evaluate: Nt,
            interpolate: Dt,
            variable: '',
            imports: { _: mn }
          }),
            (mn.prototype = vn.prototype),
            (mn.prototype.constructor = mn),
            (yn.prototype = gn(vn.prototype)),
            (yn.prototype.constructor = yn),
            (wn.prototype = gn(vn.prototype)),
            (wn.prototype.constructor = wn),
            (Mn.prototype.clear = function() {
              (this.__data__ = rn ? rn(null) : {}), (this.size = 0);
            }),
            (Mn.prototype.delete = function(t) {
              var e = this.has(t) && delete this.__data__[t];
              return (this.size -= e ? 1 : 0), e;
            }),
            (Mn.prototype.get = function(t) {
              var e = this.__data__;
              if (rn) {
                var i = e[t];
                return i === l ? o : i;
              }
              return he.call(e, t) ? e[t] : o;
            }),
            (Mn.prototype.has = function(t) {
              var e = this.__data__;
              return rn ? e[t] !== o : he.call(e, t);
            }),
            (Mn.prototype.set = function(t, e) {
              var i = this.__data__;
              return (
                (this.size += this.has(t) ? 0 : 1),
                (i[t] = rn && e === o ? l : e),
                this
              );
            }),
            (En.prototype.clear = function() {
              (this.__data__ = []), (this.size = 0);
            }),
            (En.prototype.delete = function(t) {
              var e = this.__data__,
                i = _n(e, t);
              return !(
                i < 0 ||
                (i == e.length - 1 ? e.pop() : De.call(e, i, 1), --this.size, 0)
              );
            }),
            (En.prototype.get = function(t) {
              var e = this.__data__,
                i = _n(e, t);
              return i < 0 ? o : e[i][1];
            }),
            (En.prototype.has = function(t) {
              return _n(this.__data__, t) > -1;
            }),
            (En.prototype.set = function(t, e) {
              var i = this.__data__,
                n = _n(i, t);
              return (
                n < 0 ? (++this.size, i.push([t, e])) : (i[n][1] = e), this
              );
            }),
            (bn.prototype.clear = function() {
              (this.size = 0),
                (this.__data__ = {
                  hash: new Mn(),
                  map: new ($i || En)(),
                  string: new Mn()
                });
            }),
            (bn.prototype.delete = function(t) {
              var e = Po(this, t).delete(t);
              return (this.size -= e ? 1 : 0), e;
            }),
            (bn.prototype.get = function(t) {
              return Po(this, t).get(t);
            }),
            (bn.prototype.has = function(t) {
              return Po(this, t).has(t);
            }),
            (bn.prototype.set = function(t, e) {
              var i = Po(this, t),
                n = i.size;
              return i.set(t, e), (this.size += i.size == n ? 0 : 1), this;
            }),
            (xn.prototype.add = xn.prototype.push = function(t) {
              return this.__data__.set(t, l), this;
            }),
            (xn.prototype.has = function(t) {
              return this.__data__.has(t);
            }),
            (An.prototype.clear = function() {
              (this.__data__ = new En()), (this.size = 0);
            }),
            (An.prototype.delete = function(t) {
              var e = this.__data__,
                i = e.delete(t);
              return (this.size = e.size), i;
            }),
            (An.prototype.get = function(t) {
              return this.__data__.get(t);
            }),
            (An.prototype.has = function(t) {
              return this.__data__.has(t);
            }),
            (An.prototype.set = function(t, e) {
              var i = this.__data__;
              if (i instanceof En) {
                var n = i.__data__;
                if (!$i || n.length < s - 1)
                  return n.push([t, e]), (this.size = ++i.size), this;
                i = this.__data__ = new bn(n);
              }
              return i.set(t, e), (this.size = i.size), this;
            });
          var Fn = co(Xn),
            Hn = co(Kn, !0);
          function Vn(t, e) {
            var i = !0;
            return (
              Fn(t, function(t, n, r) {
                return (i = !!e(t, n, r));
              }),
              i
            );
          }
          function Gn(t, e, i) {
            for (var n = -1, r = t.length; ++n < r; ) {
              var s = t[n],
                a = e(s);
              if (null != a && (c === o ? a == a && !Ba(a) : i(a, c)))
                var c = a,
                  l = s;
            }
            return l;
          }
          function Yn(t, e) {
            var i = [];
            return (
              Fn(t, function(t, n, r) {
                e(t, n, r) && i.push(t);
              }),
              i
            );
          }
          function Qn(t, e, i, n, r) {
            var o = -1,
              s = t.length;
            for (i || (i = Wo), r || (r = []); ++o < s; ) {
              var a = t[o];
              e > 0 && i(a)
                ? e > 1 ? Qn(a, e - 1, i, n, r) : ci(r, a)
                : n || (r[r.length] = a);
            }
            return r;
          }
          var Wn = lo(),
            qn = lo(!0);
          function Xn(t, e) {
            return t && Wn(t, e, ac);
          }
          function Kn(t, e) {
            return t && qn(t, e, ac);
          }
          function Zn(t, e) {
            return ri(e, function(e) {
              return Na(t[e]);
            });
          }
          function Jn(t, e) {
            for (var i = 0, n = (e = qr(e, t)).length; null != t && i < n; )
              t = t[ps(e[i++])];
            return i && i == n ? t : o;
          }
          function $n(t, e, i) {
            var n = e(t);
            return Ma(t) ? n : ci(n, i(t));
          }
          function tr(t) {
            return null == t
              ? t === o ? ot : J
              : Be && Be in ie(t)
                ? (function(t) {
                    var e = he.call(t, Be),
                      i = t[Be];
                    try {
                      t[Be] = o;
                      var n = !0;
                    } catch (t) {}
                    var r = fe.call(t);
                    return n && (e ? (t[Be] = i) : delete t[Be]), r;
                  })(t)
                : ((e = t), fe.call(e));
            var e;
          }
          function er(t, e) {
            return t > e;
          }
          function ir(t, e) {
            return null != t && he.call(t, e);
          }
          function nr(t, e) {
            return null != t && e in ie(t);
          }
          function rr(t, e, i) {
            for (
              var r = i ? si : oi,
                s = t[0].length,
                a = t.length,
                c = a,
                l = n(a),
                u = 1 / 0,
                h = [];
              c--;

            ) {
              var d = t[c];
              c && e && (d = ai(d, Ai(e))),
                (u = Wi(d.length, u)),
                (l[c] =
                  !i && (e || (s >= 120 && d.length >= 120))
                    ? new xn(c && d)
                    : o);
            }
            d = t[0];
            var p = -1,
              f = l[0];
            t: for (; ++p < s && h.length < u; ) {
              var m = d[p],
                g = e ? e(m) : m;
              if (((m = i || 0 !== m ? m : 0), !(f ? Li(f, g) : r(h, g, i)))) {
                for (c = a; --c; ) {
                  var v = l[c];
                  if (!(v ? Li(v, g) : r(t[c], g, i))) continue t;
                }
                f && f.push(g), h.push(m);
              }
            }
            return h;
          }
          function or(t, e, i) {
            var n = null == (t = ns(t, (e = qr(e, t)))) ? t : t[ps(Ls(e))];
            return null == n ? o : $e(n, t, i);
          }
          function sr(t) {
            return _a(t) && tr(t) == F;
          }
          function ar(t, e, i, n, r) {
            return (
              t === e ||
              (null == t || null == e || (!_a(t) && !_a(e))
                ? t != t && e != e
                : (function(t, e, i, n, r, s) {
                    var a = Ma(t),
                      c = Ma(e),
                      l = a ? H : Go(t),
                      u = c ? H : Go(e),
                      h = (l = l == F ? $ : l) == $,
                      d = (u = u == F ? $ : u) == $,
                      p = l == u;
                    if (p && Aa(t)) {
                      if (!Aa(e)) return !1;
                      (a = !0), (h = !1);
                    }
                    if (p && !h)
                      return (
                        s || (s = new An()),
                        a || Pa(t)
                          ? _o(t, e, i, n, r, s)
                          : (function(t, e, i, n, r, o, s) {
                              switch (i) {
                                case lt:
                                  if (
                                    t.byteLength != e.byteLength ||
                                    t.byteOffset != e.byteOffset
                                  )
                                    return !1;
                                  (t = t.buffer), (e = e.buffer);
                                case ct:
                                  return !(
                                    t.byteLength != e.byteLength ||
                                    !o(new Me(t), new Me(e))
                                  );
                                case G:
                                case Y:
                                case Z:
                                  return ga(+t, +e);
                                case W:
                                  return (
                                    t.name == e.name && t.message == e.message
                                  );
                                case et:
                                case nt:
                                  return t == e + '';
                                case K:
                                  var a = ji;
                                case it:
                                  var c = n & m;
                                  if ((a || (a = zi), t.size != e.size && !c))
                                    return !1;
                                  var l = s.get(t);
                                  if (l) return l == e;
                                  (n |= g), s.set(t, e);
                                  var u = _o(a(t), a(e), n, r, o, s);
                                  return s.delete(t), u;
                                case rt:
                                  if (pn) return pn.call(t) == pn.call(e);
                              }
                              return !1;
                            })(t, e, l, i, n, r, s)
                      );
                    if (!(i & m)) {
                      var f = h && he.call(t, '__wrapped__'),
                        v = d && he.call(e, '__wrapped__');
                      if (f || v) {
                        var y = f ? t.value() : t,
                          w = v ? e.value() : e;
                        return s || (s = new An()), r(y, w, i, n, s);
                      }
                    }
                    return (
                      !!p &&
                      (s || (s = new An()),
                      (function(t, e, i, n, r, s) {
                        var a = i & m,
                          c = jo(t),
                          l = c.length,
                          u = jo(e).length;
                        if (l != u && !a) return !1;
                        for (var h = l; h--; ) {
                          var d = c[h];
                          if (!(a ? d in e : he.call(e, d))) return !1;
                        }
                        var p = s.get(t);
                        if (p && s.get(e)) return p == e;
                        var f = !0;
                        s.set(t, e), s.set(e, t);
                        for (var g = a; ++h < l; ) {
                          d = c[h];
                          var v = t[d],
                            y = e[d];
                          if (n)
                            var w = a
                              ? n(y, v, d, e, t, s)
                              : n(v, y, d, t, e, s);
                          if (!(w === o ? v === y || r(v, y, i, n, s) : w)) {
                            f = !1;
                            break;
                          }
                          g || (g = 'constructor' == d);
                        }
                        if (f && !g) {
                          var M = t.constructor,
                            E = e.constructor;
                          M != E &&
                            'constructor' in t &&
                            'constructor' in e &&
                            !(
                              'function' == typeof M &&
                              M instanceof M &&
                              'function' == typeof E &&
                              E instanceof E
                            ) &&
                            (f = !1);
                        }
                        return s.delete(t), s.delete(e), f;
                      })(t, e, i, n, r, s))
                    );
                  })(t, e, i, n, ar, r))
            );
          }
          function cr(t, e, i, n) {
            var r = i.length,
              s = r,
              a = !n;
            if (null == t) return !s;
            for (t = ie(t); r--; ) {
              var c = i[r];
              if (a && c[2] ? c[1] !== t[c[0]] : !(c[0] in t)) return !1;
            }
            for (; ++r < s; ) {
              var l = (c = i[r])[0],
                u = t[l],
                h = c[1];
              if (a && c[2]) {
                if (u === o && !(l in t)) return !1;
              } else {
                var d = new An();
                if (n) var p = n(u, h, l, t, e, d);
                if (!(p === o ? ar(h, u, m | g, n, d) : p)) return !1;
              }
            }
            return !0;
          }
          function lr(t) {
            return (
              !(!Ca(t) || (pe && pe in t)) && (Na(t) ? ve : Wt).test(fs(t))
            );
          }
          function ur(t) {
            return 'function' == typeof t
              ? t
              : null == t
                ? jc
                : 'object' == typeof t
                  ? Ma(t) ? gr(t[0], t[1]) : mr(t)
                  : Hc(t);
          }
          function hr(t) {
            if (!$o(t)) return Yi(t);
            var e = [];
            for (var i in ie(t))
              he.call(t, i) && 'constructor' != i && e.push(i);
            return e;
          }
          function dr(t) {
            if (!Ca(t))
              return (function(t) {
                var e = [];
                if (null != t) for (var i in ie(t)) e.push(i);
                return e;
              })(t);
            var e = $o(t),
              i = [];
            for (var n in t)
              ('constructor' != n || (!e && he.call(t, n))) && i.push(n);
            return i;
          }
          function pr(t, e) {
            return t < e;
          }
          function fr(t, e) {
            var i = -1,
              r = ba(t) ? n(t.length) : [];
            return (
              Fn(t, function(t, n, o) {
                r[++i] = e(t, n, o);
              }),
              r
            );
          }
          function mr(t) {
            var e = Uo(t);
            return 1 == e.length && e[0][2]
              ? es(e[0][0], e[0][1])
              : function(i) {
                  return i === t || cr(i, t, e);
                };
          }
          function gr(t, e) {
            return Ko(t) && ts(e)
              ? es(ps(t), e)
              : function(i) {
                  var n = ic(i, t);
                  return n === o && n === e ? nc(i, t) : ar(e, n, m | g);
                };
          }
          function vr(t, e, i, n, r) {
            t !== e &&
              Wn(
                e,
                function(s, a) {
                  if (Ca(s))
                    r || (r = new An()),
                      (function(t, e, i, n, r, s, a) {
                        var c = t[i],
                          l = e[i],
                          u = a.get(l);
                        if (u) Sn(t, i, u);
                        else {
                          var h = s ? s(c, l, i + '', t, e, a) : o,
                            d = h === o;
                          if (d) {
                            var p = Ma(l),
                              f = !p && Aa(l),
                              m = !p && !f && Pa(l);
                            (h = l),
                              p || f || m
                                ? Ma(c)
                                  ? (h = c)
                                  : xa(c)
                                    ? (h = ro(c))
                                    : f
                                      ? ((d = !1), (h = Jr(l, !0)))
                                      : m
                                        ? ((d = !1), (h = to(l, !0)))
                                        : (h = [])
                                : Oa(l) || wa(l)
                                  ? ((h = c),
                                    wa(c)
                                      ? (h = Wa(c))
                                      : (!Ca(c) || (n && Na(c))) && (h = Qo(l)))
                                  : (d = !1);
                          }
                          d && (a.set(l, h), r(h, l, n, s, a), a.delete(l)),
                            Sn(t, i, h);
                        }
                      })(t, e, a, i, vr, n, r);
                  else {
                    var c = n ? n(t[a], s, a + '', t, e, r) : o;
                    c === o && (c = s), Sn(t, a, c);
                  }
                },
                cc
              );
          }
          function yr(t, e) {
            var i = t.length;
            if (i) return qo((e += e < 0 ? i : 0), i) ? t[e] : o;
          }
          function wr(t, e, i) {
            var n = -1;
            return (
              (e = ai(e.length ? e : [jc], Ai(Bo()))),
              (function(t, e) {
                var i = t.length;
                for (t.sort(e); i--; ) t[i] = t[i].value;
                return t;
              })(
                fr(t, function(t, i, r) {
                  return {
                    criteria: ai(e, function(e) {
                      return e(t);
                    }),
                    index: ++n,
                    value: t
                  };
                }),
                function(t, e) {
                  return (function(t, e, i) {
                    for (
                      var n = -1,
                        r = t.criteria,
                        o = e.criteria,
                        s = r.length,
                        a = i.length;
                      ++n < s;

                    ) {
                      var c = eo(r[n], o[n]);
                      if (c) {
                        if (n >= a) return c;
                        var l = i[n];
                        return c * ('desc' == l ? -1 : 1);
                      }
                    }
                    return t.index - e.index;
                  })(t, e, i);
                }
              )
            );
          }
          function Mr(t, e, i) {
            for (var n = -1, r = e.length, o = {}; ++n < r; ) {
              var s = e[n],
                a = Jn(t, s);
              i(a, s) && Dr(o, qr(s, t), a);
            }
            return o;
          }
          function Er(t, e, i, n) {
            var r = n ? gi : mi,
              o = -1,
              s = e.length,
              a = t;
            for (t === e && (e = ro(e)), i && (a = ai(t, Ai(i))); ++o < s; )
              for (
                var c = 0, l = e[o], u = i ? i(l) : l;
                (c = r(a, u, c, n)) > -1;

              )
                a !== t && De.call(a, c, 1), De.call(t, c, 1);
            return t;
          }
          function br(t, e) {
            for (var i = t ? e.length : 0, n = i - 1; i--; ) {
              var r = e[i];
              if (i == n || r !== o) {
                var o = r;
                qo(r) ? De.call(t, r, 1) : Ur(t, r);
              }
            }
            return t;
          }
          function xr(t, e) {
            return t + Mi(Ki() * (e - t + 1));
          }
          function Ar(t, e) {
            var i = '';
            if (!t || e < 1 || e > O) return i;
            do {
              e % 2 && (i += t), (e = Mi(e / 2)) && (t += t);
            } while (e);
            return i;
          }
          function Tr(t, e) {
            return ss(is(t, e, jc), t + '');
          }
          function Lr(t) {
            return Ln(gc(t));
          }
          function Nr(t, e) {
            var i = gc(t);
            return ls(i, zn(e, 0, i.length));
          }
          function Dr(t, e, i, n) {
            if (!Ca(t)) return t;
            for (
              var r = -1, s = (e = qr(e, t)).length, a = s - 1, c = t;
              null != c && ++r < s;

            ) {
              var l = ps(e[r]),
                u = i;
              if (r != a) {
                var h = c[l];
                (u = n ? n(h, l, c) : o) === o &&
                  (u = Ca(h) ? h : qo(e[r + 1]) ? [] : {});
              }
              Cn(c, l, u), (c = c[l]);
            }
            return t;
          }
          var Sr = on
              ? function(t, e) {
                  return on.set(t, e), t;
                }
              : jc,
            Cr = Ue
              ? function(t, e) {
                  return Ue(t, 'toString', {
                    configurable: !0,
                    enumerable: !1,
                    value: Cc(e),
                    writable: !0
                  });
                }
              : jc;
          function _r(t) {
            return ls(gc(t));
          }
          function Ir(t, e, i) {
            var r = -1,
              o = t.length;
            e < 0 && (e = -e > o ? 0 : o + e),
              (i = i > o ? o : i) < 0 && (i += o),
              (o = e > i ? 0 : (i - e) >>> 0),
              (e >>>= 0);
            for (var s = n(o); ++r < o; ) s[r] = t[r + e];
            return s;
          }
          function jr(t, e) {
            var i;
            return (
              Fn(t, function(t, n, r) {
                return !(i = e(t, n, r));
              }),
              !!i
            );
          }
          function Or(t, e, i) {
            var n = 0,
              r = null == t ? n : t.length;
            if ('number' == typeof e && e == e && r <= P) {
              for (; n < r; ) {
                var o = (n + r) >>> 1,
                  s = t[o];
                null !== s && !Ba(s) && (i ? s <= e : s < e)
                  ? (n = o + 1)
                  : (r = o);
              }
              return r;
            }
            return Rr(t, e, jc, i);
          }
          function Rr(t, e, i, n) {
            e = i(e);
            for (
              var r = 0,
                s = null == t ? 0 : t.length,
                a = e != e,
                c = null === e,
                l = Ba(e),
                u = e === o;
              r < s;

            ) {
              var h = Mi((r + s) / 2),
                d = i(t[h]),
                p = d !== o,
                f = null === d,
                m = d == d,
                g = Ba(d);
              if (a) var v = n || m;
              else
                v = u
                  ? m && (n || p)
                  : c
                    ? m && p && (n || !f)
                    : l
                      ? m && p && !f && (n || !g)
                      : !f && !g && (n ? d <= e : d < e);
              v ? (r = h + 1) : (s = h);
            }
            return Wi(s, B);
          }
          function zr(t, e) {
            for (var i = -1, n = t.length, r = 0, o = []; ++i < n; ) {
              var s = t[i],
                a = e ? e(s) : s;
              if (!i || !ga(a, c)) {
                var c = a;
                o[r++] = 0 === s ? 0 : s;
              }
            }
            return o;
          }
          function kr(t) {
            return 'number' == typeof t ? t : Ba(t) ? z : +t;
          }
          function Br(t) {
            if ('string' == typeof t) return t;
            if (Ma(t)) return ai(t, Br) + '';
            if (Ba(t)) return fn ? fn.call(t) : '';
            var e = t + '';
            return '0' == e && 1 / t == -j ? '-0' : e;
          }
          function Pr(t, e, i) {
            var n = -1,
              r = oi,
              o = t.length,
              a = !0,
              c = [],
              l = c;
            if (i) (a = !1), (r = si);
            else if (o >= s) {
              var u = e ? null : To(t);
              if (u) return zi(u);
              (a = !1), (r = Li), (l = new xn());
            } else l = e ? [] : c;
            t: for (; ++n < o; ) {
              var h = t[n],
                d = e ? e(h) : h;
              if (((h = i || 0 !== h ? h : 0), a && d == d)) {
                for (var p = l.length; p--; ) if (l[p] === d) continue t;
                e && l.push(d), c.push(h);
              } else r(l, d, i) || (l !== c && l.push(d), c.push(h));
            }
            return c;
          }
          function Ur(t, e) {
            return null == (t = ns(t, (e = qr(e, t)))) || delete t[ps(Ls(e))];
          }
          function Fr(t, e, i, n) {
            return Dr(t, e, i(Jn(t, e)), n);
          }
          function Hr(t, e, i, n) {
            for (
              var r = t.length, o = n ? r : -1;
              (n ? o-- : ++o < r) && e(t[o], o, t);

            );
            return i
              ? Ir(t, n ? 0 : o, n ? o + 1 : r)
              : Ir(t, n ? o + 1 : 0, n ? r : o);
          }
          function Vr(t, e) {
            var i = t;
            return (
              i instanceof wn && (i = i.value()),
              li(
                e,
                function(t, e) {
                  return e.func.apply(e.thisArg, ci([t], e.args));
                },
                i
              )
            );
          }
          function Gr(t, e, i) {
            var r = t.length;
            if (r < 2) return r ? Pr(t[0]) : [];
            for (var o = -1, s = n(r); ++o < r; )
              for (var a = t[o], c = -1; ++c < r; )
                c != o && (s[o] = Un(s[o] || a, t[c], e, i));
            return Pr(Qn(s, 1), e, i);
          }
          function Yr(t, e, i) {
            for (var n = -1, r = t.length, s = e.length, a = {}; ++n < r; ) {
              var c = n < s ? e[n] : o;
              i(a, t[n], c);
            }
            return a;
          }
          function Qr(t) {
            return xa(t) ? t : [];
          }
          function Wr(t) {
            return 'function' == typeof t ? t : jc;
          }
          function qr(t, e) {
            return Ma(t) ? t : Ko(t, e) ? [t] : ds(qa(t));
          }
          var Xr = Tr;
          function Kr(t, e, i) {
            var n = t.length;
            return (i = i === o ? n : i), !e && i >= n ? t : Ir(t, e, i);
          }
          var Zr =
            Fe ||
            function(t) {
              return Pe.clearTimeout(t);
            };
          function Jr(t, e) {
            if (e) return t.slice();
            var i = t.length,
              n = Ee ? Ee(i) : new t.constructor(i);
            return t.copy(n), n;
          }
          function $r(t) {
            var e = new t.constructor(t.byteLength);
            return new Me(e).set(new Me(t)), e;
          }
          function to(t, e) {
            var i = e ? $r(t.buffer) : t.buffer;
            return new t.constructor(i, t.byteOffset, t.length);
          }
          function eo(t, e) {
            if (t !== e) {
              var i = t !== o,
                n = null === t,
                r = t == t,
                s = Ba(t),
                a = e !== o,
                c = null === e,
                l = e == e,
                u = Ba(e);
              if (
                (!c && !u && !s && t > e) ||
                (s && a && l && !c && !u) ||
                (n && a && l) ||
                (!i && l) ||
                !r
              )
                return 1;
              if (
                (!n && !s && !u && t < e) ||
                (u && i && r && !n && !s) ||
                (c && i && r) ||
                (!a && r) ||
                !l
              )
                return -1;
            }
            return 0;
          }
          function io(t, e, i, r) {
            for (
              var o = -1,
                s = t.length,
                a = i.length,
                c = -1,
                l = e.length,
                u = Qi(s - a, 0),
                h = n(l + u),
                d = !r;
              ++c < l;

            )
              h[c] = e[c];
            for (; ++o < a; ) (d || o < s) && (h[i[o]] = t[o]);
            for (; u--; ) h[c++] = t[o++];
            return h;
          }
          function no(t, e, i, r) {
            for (
              var o = -1,
                s = t.length,
                a = -1,
                c = i.length,
                l = -1,
                u = e.length,
                h = Qi(s - c, 0),
                d = n(h + u),
                p = !r;
              ++o < h;

            )
              d[o] = t[o];
            for (var f = o; ++l < u; ) d[f + l] = e[l];
            for (; ++a < c; ) (p || o < s) && (d[f + i[a]] = t[o++]);
            return d;
          }
          function ro(t, e) {
            var i = -1,
              r = t.length;
            for (e || (e = n(r)); ++i < r; ) e[i] = t[i];
            return e;
          }
          function oo(t, e, i, n) {
            var r = !i;
            i || (i = {});
            for (var s = -1, a = e.length; ++s < a; ) {
              var c = e[s],
                l = n ? n(i[c], t[c], c, i, t) : o;
              l === o && (l = t[c]), r ? On(i, c, l) : Cn(i, c, l);
            }
            return i;
          }
          function so(t, e) {
            return function(i, n) {
              var r = Ma(i) ? ti : In,
                o = e ? e() : {};
              return r(i, t, Bo(n, 2), o);
            };
          }
          function ao(t) {
            return Tr(function(e, i) {
              var n = -1,
                r = i.length,
                s = r > 1 ? i[r - 1] : o,
                a = r > 2 ? i[2] : o;
              for (
                s = t.length > 3 && 'function' == typeof s ? (r--, s) : o,
                  a && Xo(i[0], i[1], a) && ((s = r < 3 ? o : s), (r = 1)),
                  e = ie(e);
                ++n < r;

              ) {
                var c = i[n];
                c && t(e, c, n, s);
              }
              return e;
            });
          }
          function co(t, e) {
            return function(i, n) {
              if (null == i) return i;
              if (!ba(i)) return t(i, n);
              for (
                var r = i.length, o = e ? r : -1, s = ie(i);
                (e ? o-- : ++o < r) && !1 !== n(s[o], o, s);

              );
              return i;
            };
          }
          function lo(t) {
            return function(e, i, n) {
              for (var r = -1, o = ie(e), s = n(e), a = s.length; a--; ) {
                var c = s[t ? a : ++r];
                if (!1 === i(o[c], c, o)) break;
              }
              return e;
            };
          }
          function uo(t) {
            return function(e) {
              var i = Ii((e = qa(e))) ? Bi(e) : o,
                n = i ? i[0] : e.charAt(0),
                r = i ? Kr(i, 1).join('') : e.slice(1);
              return n[t]() + r;
            };
          }
          function ho(t) {
            return function(e) {
              return li(Nc(wc(e).replace(Ae, '')), t, '');
            };
          }
          function po(t) {
            return function() {
              var e = arguments;
              switch (e.length) {
                case 0:
                  return new t();
                case 1:
                  return new t(e[0]);
                case 2:
                  return new t(e[0], e[1]);
                case 3:
                  return new t(e[0], e[1], e[2]);
                case 4:
                  return new t(e[0], e[1], e[2], e[3]);
                case 5:
                  return new t(e[0], e[1], e[2], e[3], e[4]);
                case 6:
                  return new t(e[0], e[1], e[2], e[3], e[4], e[5]);
                case 7:
                  return new t(e[0], e[1], e[2], e[3], e[4], e[5], e[6]);
              }
              var i = gn(t.prototype),
                n = t.apply(i, e);
              return Ca(n) ? n : i;
            };
          }
          function fo(t) {
            return function(e, i, n) {
              var r = ie(e);
              if (!ba(e)) {
                var s = Bo(i, 3);
                (e = ac(e)),
                  (i = function(t) {
                    return s(r[t], t, r);
                  });
              }
              var a = t(e, i, n);
              return a > -1 ? r[s ? e[a] : a] : o;
            };
          }
          function mo(t) {
            return Io(function(e) {
              var i = e.length,
                n = i,
                r = yn.prototype.thru;
              for (t && e.reverse(); n--; ) {
                var s = e[n];
                if ('function' != typeof s) throw new oe(c);
                if (r && !a && 'wrapper' == zo(s)) var a = new yn([], !0);
              }
              for (n = a ? n : i; ++n < i; ) {
                var l = zo((s = e[n])),
                  u = 'wrapper' == l ? Ro(s) : o;
                a =
                  u &&
                  Zo(u[0]) &&
                  u[1] == (A | M | b | T) &&
                  !u[4].length &&
                  1 == u[9]
                    ? a[zo(u[0])].apply(a, u[3])
                    : 1 == s.length && Zo(s) ? a[l]() : a.thru(s);
              }
              return function() {
                var t = arguments,
                  n = t[0];
                if (a && 1 == t.length && Ma(n)) return a.plant(n).value();
                for (var r = 0, o = i ? e[r].apply(this, t) : n; ++r < i; )
                  o = e[r].call(this, o);
                return o;
              };
            });
          }
          function go(t, e, i, r, s, a, c, l, u, h) {
            var d = e & A,
              p = e & v,
              f = e & y,
              m = e & (M | E),
              g = e & L,
              w = f ? o : po(t);
            return function v() {
              for (var y = arguments.length, M = n(y), E = y; E--; )
                M[E] = arguments[E];
              if (m)
                var b = ko(v),
                  x = (function(t, e) {
                    for (var i = t.length, n = 0; i--; ) t[i] === e && ++n;
                    return n;
                  })(M, b);
              if (
                (r && (M = io(M, r, s, m)),
                a && (M = no(M, a, c, m)),
                (y -= x),
                m && y < h)
              ) {
                var A = Ri(M, b);
                return xo(t, e, go, v.placeholder, i, M, A, l, u, h - y);
              }
              var T = p ? i : this,
                L = f ? T[t] : t;
              return (
                (y = M.length),
                l
                  ? (M = (function(t, e) {
                      for (
                        var i = t.length, n = Wi(e.length, i), r = ro(t);
                        n--;

                      ) {
                        var s = e[n];
                        t[n] = qo(s, i) ? r[s] : o;
                      }
                      return t;
                    })(M, l))
                  : g && y > 1 && M.reverse(),
                d && u < y && (M.length = u),
                this && this !== Pe && this instanceof v && (L = w || po(L)),
                L.apply(T, M)
              );
            };
          }
          function vo(t, e) {
            return function(i, n) {
              return (
                (r = i),
                (o = t),
                (s = e(n)),
                (a = {}),
                Xn(r, function(t, e, i) {
                  o(a, s(t), e, i);
                }),
                a
              );
              var r, o, s, a;
            };
          }
          function yo(t, e) {
            return function(i, n) {
              var r;
              if (i === o && n === o) return e;
              if ((i !== o && (r = i), n !== o)) {
                if (r === o) return n;
                'string' == typeof i || 'string' == typeof n
                  ? ((i = Br(i)), (n = Br(n)))
                  : ((i = kr(i)), (n = kr(n))),
                  (r = t(i, n));
              }
              return r;
            };
          }
          function wo(t) {
            return Io(function(e) {
              return (
                (e = ai(e, Ai(Bo()))),
                Tr(function(i) {
                  var n = this;
                  return t(e, function(t) {
                    return $e(t, n, i);
                  });
                })
              );
            });
          }
          function Mo(t, e) {
            var i = (e = e === o ? ' ' : Br(e)).length;
            if (i < 2) return i ? Ar(e, t) : e;
            var n = Ar(e, di(t / ki(e)));
            return Ii(e) ? Kr(Bi(n), 0, t).join('') : n.slice(0, t);
          }
          function Eo(t) {
            return function(e, i, r) {
              return (
                r && 'number' != typeof r && Xo(e, i, r) && (i = r = o),
                (e = Va(e)),
                i === o ? ((i = e), (e = 0)) : (i = Va(i)),
                (function(t, e, i, r) {
                  for (
                    var o = -1, s = Qi(di((e - t) / (i || 1)), 0), a = n(s);
                    s--;

                  )
                    (a[r ? s : ++o] = t), (t += i);
                  return a;
                })(e, i, (r = r === o ? (e < i ? 1 : -1) : Va(r)), t)
              );
            };
          }
          function bo(t) {
            return function(e, i) {
              return (
                ('string' == typeof e && 'string' == typeof i) ||
                  ((e = Qa(e)), (i = Qa(i))),
                t(e, i)
              );
            };
          }
          function xo(t, e, i, n, r, s, a, c, l, u) {
            var h = e & M;
            (e |= h ? b : x), (e &= ~(h ? x : b)) & w || (e &= ~(v | y));
            var d = [
                t,
                e,
                r,
                h ? s : o,
                h ? a : o,
                h ? o : s,
                h ? o : a,
                c,
                l,
                u
              ],
              p = i.apply(o, d);
            return Zo(t) && rs(p, d), (p.placeholder = n), as(p, t, e);
          }
          function Ao(t) {
            var e = ee[t];
            return function(t, i) {
              if (((t = Qa(t)), (i = null == i ? 0 : Wi(Ga(i), 292)))) {
                var n = (qa(t) + 'e').split('e');
                return +(
                  (n = (qa(e(n[0] + 'e' + (+n[1] + i))) + 'e').split('e'))[0] +
                  'e' +
                  (+n[1] - i)
                );
              }
              return e(t);
            };
          }
          var To =
            en && 1 / zi(new en([, -0]))[1] == j
              ? function(t) {
                  return new en(t);
                }
              : Bc;
          function Lo(t) {
            return function(e) {
              var i,
                n,
                r,
                o,
                s = Go(e);
              return s == K
                ? ji(e)
                : s == it
                  ? ((i = e),
                    (n = -1),
                    (r = Array(i.size)),
                    i.forEach(function(t) {
                      r[++n] = [t, t];
                    }),
                    r)
                  : ((o = e),
                    ai(t(e), function(t) {
                      return [t, o[t]];
                    }));
            };
          }
          function No(t, e, i, r, s, a, l, u) {
            var d = e & y;
            if (!d && 'function' != typeof t) throw new oe(c);
            var p = r ? r.length : 0;
            if (
              (p || ((e &= ~(b | x)), (r = s = o)),
              (l = l === o ? l : Qi(Ga(l), 0)),
              (u = u === o ? u : Ga(u)),
              (p -= s ? s.length : 0),
              e & x)
            ) {
              var f = r,
                m = s;
              r = s = o;
            }
            var g,
              L,
              N,
              D,
              S,
              C,
              _,
              I,
              j,
              O,
              R,
              z,
              k,
              B = d ? o : Ro(t),
              P = [t, e, i, r, s, f, m, a, l, u];
            if (
              (B &&
                (function(t, e) {
                  var i = t[1],
                    n = e[1],
                    r = i | n,
                    o = r < (v | y | A),
                    s =
                      (n == A && i == M) ||
                      (n == A && i == T && t[7].length <= e[8]) ||
                      (n == (A | T) && e[7].length <= e[8] && i == M);
                  if (!o && !s) return t;
                  n & v && ((t[2] = e[2]), (r |= i & v ? 0 : w));
                  var a = e[3];
                  if (a) {
                    var c = t[3];
                    (t[3] = c ? io(c, a, e[4]) : a),
                      (t[4] = c ? Ri(t[3], h) : e[4]);
                  }
                  (a = e[5]) &&
                    ((c = t[5]),
                    (t[5] = c ? no(c, a, e[6]) : a),
                    (t[6] = c ? Ri(t[5], h) : e[6])),
                    (a = e[7]) && (t[7] = a),
                    n & A && (t[8] = null == t[8] ? e[8] : Wi(t[8], e[8])),
                    null == t[9] && (t[9] = e[9]),
                    (t[0] = e[0]),
                    (t[1] = r);
                })(P, B),
              (t = P[0]),
              (e = P[1]),
              (i = P[2]),
              (r = P[3]),
              (s = P[4]),
              !(u = P[9] = P[9] === o ? (d ? 0 : t.length) : Qi(P[9] - p, 0)) &&
                e & (M | E) &&
                (e &= ~(M | E)),
              e && e != v)
            )
              e == M || e == E
                ? ((_ = e),
                  (I = u),
                  (j = po((C = t))),
                  (U = function t() {
                    for (
                      var e = arguments.length, i = n(e), r = e, s = ko(t);
                      r--;

                    )
                      i[r] = arguments[r];
                    var a =
                      e < 3 && i[0] !== s && i[e - 1] !== s ? [] : Ri(i, s);
                    return (e -= a.length) < I
                      ? xo(C, _, go, t.placeholder, o, i, a, o, o, I - e)
                      : $e(
                          this && this !== Pe && this instanceof t ? j : C,
                          this,
                          i
                        );
                  }))
                : (e != b && e != (v | b)) || s.length
                  ? (U = go.apply(o, P))
                  : ((L = i),
                    (N = r),
                    (D = e & v),
                    (S = po((g = t))),
                    (U = function t() {
                      for (
                        var e = -1,
                          i = arguments.length,
                          r = -1,
                          o = N.length,
                          s = n(o + i),
                          a = this && this !== Pe && this instanceof t ? S : g;
                        ++r < o;

                      )
                        s[r] = N[r];
                      for (; i--; ) s[r++] = arguments[++e];
                      return $e(a, D ? L : this, s);
                    }));
            else
              var U = ((R = i),
              (z = e & v),
              (k = po((O = t))),
              function t() {
                return (this && this !== Pe && this instanceof t ? k : O).apply(
                  z ? R : this,
                  arguments
                );
              });
            return as((B ? Sr : rs)(U, P), t, e);
          }
          function Do(t, e, i, n) {
            return t === o || (ga(t, ce[i]) && !he.call(n, i)) ? e : t;
          }
          function So(t, e, i, n, r, s) {
            return (
              Ca(t) && Ca(e) && (s.set(e, t), vr(t, e, o, So, s), s.delete(e)),
              t
            );
          }
          function Co(t) {
            return Oa(t) ? o : t;
          }
          function _o(t, e, i, n, r, s) {
            var a = i & m,
              c = t.length,
              l = e.length;
            if (c != l && !(a && l > c)) return !1;
            var u = s.get(t);
            if (u && s.get(e)) return u == e;
            var h = -1,
              d = !0,
              p = i & g ? new xn() : o;
            for (s.set(t, e), s.set(e, t); ++h < c; ) {
              var f = t[h],
                v = e[h];
              if (n) var y = a ? n(v, f, h, e, t, s) : n(f, v, h, t, e, s);
              if (y !== o) {
                if (y) continue;
                d = !1;
                break;
              }
              if (p) {
                if (
                  !hi(e, function(t, e) {
                    if (!Li(p, e) && (f === t || r(f, t, i, n, s)))
                      return p.push(e);
                  })
                ) {
                  d = !1;
                  break;
                }
              } else if (f !== v && !r(f, v, i, n, s)) {
                d = !1;
                break;
              }
            }
            return s.delete(t), s.delete(e), d;
          }
          function Io(t) {
            return ss(is(t, o, Es), t + '');
          }
          function jo(t) {
            return $n(t, ac, Ho);
          }
          function Oo(t) {
            return $n(t, cc, Vo);
          }
          var Ro = on
            ? function(t) {
                return on.get(t);
              }
            : Bc;
          function zo(t) {
            for (
              var e = t.name + '', i = sn[e], n = he.call(sn, e) ? i.length : 0;
              n--;

            ) {
              var r = i[n],
                o = r.func;
              if (null == o || o == t) return r.name;
            }
            return e;
          }
          function ko(t) {
            return (he.call(mn, 'placeholder') ? mn : t).placeholder;
          }
          function Bo() {
            var t = mn.iteratee || Oc;
            return (
              (t = t === Oc ? ur : t),
              arguments.length ? t(arguments[0], arguments[1]) : t
            );
          }
          function Po(t, e) {
            var i,
              n,
              r = t.__data__;
            return ('string' == (n = typeof (i = e)) ||
            'number' == n ||
            'symbol' == n ||
            'boolean' == n
            ? '__proto__' !== i
            : null === i)
              ? r['string' == typeof e ? 'string' : 'hash']
              : r.map;
          }
          function Uo(t) {
            for (var e = ac(t), i = e.length; i--; ) {
              var n = e[i],
                r = t[n];
              e[i] = [n, r, ts(r)];
            }
            return e;
          }
          function Fo(t, e) {
            var i,
              n = null == (i = t) ? o : i[e];
            return lr(n) ? n : o;
          }
          var Ho = Fi
              ? function(t) {
                  return null == t
                    ? []
                    : ((t = ie(t)),
                      ri(Fi(t), function(e) {
                        return Le.call(t, e);
                      }));
                }
              : Yc,
            Vo = Fi
              ? function(t) {
                  for (var e = []; t; ) ci(e, Ho(t)), (t = be(t));
                  return e;
                }
              : Yc,
            Go = tr;
          function Yo(t, e, i) {
            for (var n = -1, r = (e = qr(e, t)).length, o = !1; ++n < r; ) {
              var s = ps(e[n]);
              if (!(o = null != t && i(t, s))) break;
              t = t[s];
            }
            return o || ++n != r
              ? o
              : !!(r = null == t ? 0 : t.length) &&
                  Sa(r) &&
                  qo(s, r) &&
                  (Ma(t) || wa(t));
          }
          function Qo(t) {
            return 'function' != typeof t.constructor || $o(t) ? {} : gn(be(t));
          }
          function Wo(t) {
            return Ma(t) || wa(t) || !!(Oe && t && t[Oe]);
          }
          function qo(t, e) {
            return (
              !!(e = null == e ? O : e) &&
              ('number' == typeof t || Xt.test(t)) &&
              t > -1 &&
              t % 1 == 0 &&
              t < e
            );
          }
          function Xo(t, e, i) {
            if (!Ca(i)) return !1;
            var n = typeof e;
            return (
              !!('number' == n
                ? ba(i) && qo(e, i.length)
                : 'string' == n && e in i) && ga(i[e], t)
            );
          }
          function Ko(t, e) {
            if (Ma(t)) return !1;
            var i = typeof t;
            return (
              !(
                'number' != i &&
                'symbol' != i &&
                'boolean' != i &&
                null != t &&
                !Ba(t)
              ) ||
              Ct.test(t) ||
              !St.test(t) ||
              (null != e && t in ie(e))
            );
          }
          function Zo(t) {
            var e = zo(t),
              i = mn[e];
            if ('function' != typeof i || !(e in wn.prototype)) return !1;
            if (t === i) return !0;
            var n = Ro(i);
            return !!n && t === n[0];
          }
          ((Ji && Go(new Ji(new ArrayBuffer(1))) != lt) ||
            ($i && Go(new $i()) != K) ||
            (tn && '[object Promise]' != Go(tn.resolve())) ||
            (en && Go(new en()) != it) ||
            (nn && Go(new nn()) != st)) &&
            (Go = function(t) {
              var e = tr(t),
                i = e == $ ? t.constructor : o,
                n = i ? fs(i) : '';
              if (n)
                switch (n) {
                  case an:
                    return lt;
                  case cn:
                    return K;
                  case ln:
                    return '[object Promise]';
                  case un:
                    return it;
                  case hn:
                    return st;
                }
              return e;
            });
          var Jo = le ? Na : Qc;
          function $o(t) {
            var e = t && t.constructor;
            return t === (('function' == typeof e && e.prototype) || ce);
          }
          function ts(t) {
            return t == t && !Ca(t);
          }
          function es(t, e) {
            return function(i) {
              return null != i && i[t] === e && (e !== o || t in ie(i));
            };
          }
          function is(t, e, i) {
            return (
              (e = Qi(e === o ? t.length - 1 : e, 0)),
              function() {
                for (
                  var r = arguments, o = -1, s = Qi(r.length - e, 0), a = n(s);
                  ++o < s;

                )
                  a[o] = r[e + o];
                o = -1;
                for (var c = n(e + 1); ++o < e; ) c[o] = r[o];
                return (c[e] = i(a)), $e(t, this, c);
              }
            );
          }
          function ns(t, e) {
            return e.length < 2 ? t : Jn(t, Ir(e, 0, -1));
          }
          var rs = cs(Sr),
            os =
              Ge ||
              function(t, e) {
                return Pe.setTimeout(t, e);
              },
            ss = cs(Cr);
          function as(t, e, i) {
            var n,
              r,
              o,
              s = e + '';
            return ss(
              t,
              (function(t, e) {
                var i = e.length;
                if (!i) return t;
                var n = i - 1;
                return (
                  (e[n] = (i > 1 ? '& ' : '') + e[n]),
                  (e = e.join(i > 2 ? ', ' : ' ')),
                  t.replace(Bt, '{\n/* [wrapped with ' + e + '] */\n')
                );
              })(
                s,
                ((o = s.match(Pt)),
                (n = o ? o[1].split(Ut) : []),
                (r = i),
                ei(U, function(t) {
                  var e = '_.' + t[0];
                  r & t[1] && !oi(n, e) && n.push(e);
                }),
                n.sort())
              )
            );
          }
          function cs(t) {
            var e = 0,
              i = 0;
            return function() {
              var n = qi(),
                r = C - (n - i);
              if (((i = n), r > 0)) {
                if (++e >= S) return arguments[0];
              } else e = 0;
              return t.apply(o, arguments);
            };
          }
          function ls(t, e) {
            var i = -1,
              n = t.length,
              r = n - 1;
            for (e = e === o ? n : e; ++i < e; ) {
              var s = xr(i, r),
                a = t[s];
              (t[s] = t[i]), (t[i] = a);
            }
            return (t.length = e), t;
          }
          var us,
            hs,
            ds = ((us = ua(
              function(t) {
                var e = [];
                return (
                  _t.test(t) && e.push(''),
                  t.replace(It, function(t, i, n, r) {
                    e.push(n ? r.replace(Ht, '$1') : i || t);
                  }),
                  e
                );
              },
              function(t) {
                return hs.size === u && hs.clear(), t;
              }
            )),
            (hs = us.cache),
            us);
          function ps(t) {
            if ('string' == typeof t || Ba(t)) return t;
            var e = t + '';
            return '0' == e && 1 / t == -j ? '-0' : e;
          }
          function fs(t) {
            if (null != t) {
              try {
                return ue.call(t);
              } catch (t) {}
              try {
                return t + '';
              } catch (t) {}
            }
            return '';
          }
          function ms(t) {
            if (t instanceof wn) return t.clone();
            var e = new yn(t.__wrapped__, t.__chain__);
            return (
              (e.__actions__ = ro(t.__actions__)),
              (e.__index__ = t.__index__),
              (e.__values__ = t.__values__),
              e
            );
          }
          var gs = Tr(function(t, e) {
              return xa(t) ? Un(t, Qn(e, 1, xa, !0)) : [];
            }),
            vs = Tr(function(t, e) {
              var i = Ls(e);
              return (
                xa(i) && (i = o), xa(t) ? Un(t, Qn(e, 1, xa, !0), Bo(i, 2)) : []
              );
            }),
            ys = Tr(function(t, e) {
              var i = Ls(e);
              return (
                xa(i) && (i = o), xa(t) ? Un(t, Qn(e, 1, xa, !0), o, i) : []
              );
            });
          function ws(t, e, i) {
            var n = null == t ? 0 : t.length;
            if (!n) return -1;
            var r = null == i ? 0 : Ga(i);
            return r < 0 && (r = Qi(n + r, 0)), fi(t, Bo(e, 3), r);
          }
          function Ms(t, e, i) {
            var n = null == t ? 0 : t.length;
            if (!n) return -1;
            var r = n - 1;
            return (
              i !== o &&
                ((r = Ga(i)), (r = i < 0 ? Qi(n + r, 0) : Wi(r, n - 1))),
              fi(t, Bo(e, 3), r, !0)
            );
          }
          function Es(t) {
            return null != t && t.length ? Qn(t, 1) : [];
          }
          function bs(t) {
            return t && t.length ? t[0] : o;
          }
          var xs = Tr(function(t) {
              var e = ai(t, Qr);
              return e.length && e[0] === t[0] ? rr(e) : [];
            }),
            As = Tr(function(t) {
              var e = Ls(t),
                i = ai(t, Qr);
              return (
                e === Ls(i) ? (e = o) : i.pop(),
                i.length && i[0] === t[0] ? rr(i, Bo(e, 2)) : []
              );
            }),
            Ts = Tr(function(t) {
              var e = Ls(t),
                i = ai(t, Qr);
              return (
                (e = 'function' == typeof e ? e : o) && i.pop(),
                i.length && i[0] === t[0] ? rr(i, o, e) : []
              );
            });
          function Ls(t) {
            var e = null == t ? 0 : t.length;
            return e ? t[e - 1] : o;
          }
          var Ns = Tr(Ds);
          function Ds(t, e) {
            return t && t.length && e && e.length ? Er(t, e) : t;
          }
          var Ss = Io(function(t, e) {
            var i = null == t ? 0 : t.length,
              n = Rn(t, e);
            return (
              br(
                t,
                ai(e, function(t) {
                  return qo(t, i) ? +t : t;
                }).sort(eo)
              ),
              n
            );
          });
          function Cs(t) {
            return null == t ? t : Zi.call(t);
          }
          var _s = Tr(function(t) {
              return Pr(Qn(t, 1, xa, !0));
            }),
            Is = Tr(function(t) {
              var e = Ls(t);
              return xa(e) && (e = o), Pr(Qn(t, 1, xa, !0), Bo(e, 2));
            }),
            js = Tr(function(t) {
              var e = Ls(t);
              return (
                (e = 'function' == typeof e ? e : o), Pr(Qn(t, 1, xa, !0), o, e)
              );
            });
          function Os(t) {
            if (!t || !t.length) return [];
            var e = 0;
            return (
              (t = ri(t, function(t) {
                if (xa(t)) return (e = Qi(t.length, e)), !0;
              })),
              xi(e, function(e) {
                return ai(t, wi(e));
              })
            );
          }
          function Rs(t, e) {
            if (!t || !t.length) return [];
            var i = Os(t);
            return null == e
              ? i
              : ai(i, function(t) {
                  return $e(e, o, t);
                });
          }
          var zs = Tr(function(t, e) {
              return xa(t) ? Un(t, e) : [];
            }),
            ks = Tr(function(t) {
              return Gr(ri(t, xa));
            }),
            Bs = Tr(function(t) {
              var e = Ls(t);
              return xa(e) && (e = o), Gr(ri(t, xa), Bo(e, 2));
            }),
            Ps = Tr(function(t) {
              var e = Ls(t);
              return (e = 'function' == typeof e ? e : o), Gr(ri(t, xa), o, e);
            }),
            Us = Tr(Os);
          var Fs = Tr(function(t) {
            var e = t.length,
              i = e > 1 ? t[e - 1] : o;
            return Rs(t, (i = 'function' == typeof i ? (t.pop(), i) : o));
          });
          function Hs(t) {
            var e = mn(t);
            return (e.__chain__ = !0), e;
          }
          function Vs(t, e) {
            return e(t);
          }
          var Gs = Io(function(t) {
            var e = t.length,
              i = e ? t[0] : 0,
              n = this.__wrapped__,
              r = function(e) {
                return Rn(e, t);
              };
            return !(e > 1 || this.__actions__.length) &&
              n instanceof wn &&
              qo(i)
              ? ((n = n.slice(i, +i + (e ? 1 : 0))).__actions__.push({
                  func: Vs,
                  args: [r],
                  thisArg: o
                }),
                new yn(n, this.__chain__).thru(function(t) {
                  return e && !t.length && t.push(o), t;
                }))
              : this.thru(r);
          });
          var Ys = so(function(t, e, i) {
            he.call(t, i) ? ++t[i] : On(t, i, 1);
          });
          var Qs = fo(ws),
            Ws = fo(Ms);
          function qs(t, e) {
            return (Ma(t) ? ei : Fn)(t, Bo(e, 3));
          }
          function Xs(t, e) {
            return (Ma(t) ? ii : Hn)(t, Bo(e, 3));
          }
          var Ks = so(function(t, e, i) {
            he.call(t, i) ? t[i].push(e) : On(t, i, [e]);
          });
          var Zs = Tr(function(t, e, i) {
              var r = -1,
                o = 'function' == typeof e,
                s = ba(t) ? n(t.length) : [];
              return (
                Fn(t, function(t) {
                  s[++r] = o ? $e(e, t, i) : or(t, e, i);
                }),
                s
              );
            }),
            Js = so(function(t, e, i) {
              On(t, i, e);
            });
          function $s(t, e) {
            return (Ma(t) ? ai : fr)(t, Bo(e, 3));
          }
          var ta = so(
            function(t, e, i) {
              t[i ? 0 : 1].push(e);
            },
            function() {
              return [[], []];
            }
          );
          var ea = Tr(function(t, e) {
              if (null == t) return [];
              var i = e.length;
              return (
                i > 1 && Xo(t, e[0], e[1])
                  ? (e = [])
                  : i > 2 && Xo(e[0], e[1], e[2]) && (e = [e[0]]),
                wr(t, Qn(e, 1), [])
              );
            }),
            ia =
              Ve ||
              function() {
                return Pe.Date.now();
              };
          function na(t, e, i) {
            return (
              (e = i ? o : e),
              (e = t && null == e ? t.length : e),
              No(t, A, o, o, o, o, e)
            );
          }
          function ra(t, e) {
            var i;
            if ('function' != typeof e) throw new oe(c);
            return (
              (t = Ga(t)),
              function() {
                return (
                  --t > 0 && (i = e.apply(this, arguments)),
                  t <= 1 && (e = o),
                  i
                );
              }
            );
          }
          var oa = Tr(function(t, e, i) {
              var n = v;
              if (i.length) {
                var r = Ri(i, ko(oa));
                n |= b;
              }
              return No(t, n, e, i, r);
            }),
            sa = Tr(function(t, e, i) {
              var n = v | y;
              if (i.length) {
                var r = Ri(i, ko(sa));
                n |= b;
              }
              return No(e, n, t, i, r);
            });
          function aa(t, e, i) {
            var n,
              r,
              s,
              a,
              l,
              u,
              h = 0,
              d = !1,
              p = !1,
              f = !0;
            if ('function' != typeof t) throw new oe(c);
            function m(e) {
              var i = n,
                s = r;
              return (n = r = o), (h = e), (a = t.apply(s, i));
            }
            function g(t) {
              var i = t - u;
              return u === o || i >= e || i < 0 || (p && t - h >= s);
            }
            function v() {
              var t,
                i,
                n = ia();
              if (g(n)) return y(n);
              l = os(v, ((i = e - ((t = n) - u)), p ? Wi(i, s - (t - h)) : i));
            }
            function y(t) {
              return (l = o), f && n ? m(t) : ((n = r = o), a);
            }
            function w() {
              var t,
                i = ia(),
                s = g(i);
              if (((n = arguments), (r = this), (u = i), s)) {
                if (l === o) return (h = t = u), (l = os(v, e)), d ? m(t) : a;
                if (p) return (l = os(v, e)), m(u);
              }
              return l === o && (l = os(v, e)), a;
            }
            return (
              (e = Qa(e) || 0),
              Ca(i) &&
                ((d = !!i.leading),
                (s = (p = 'maxWait' in i) ? Qi(Qa(i.maxWait) || 0, e) : s),
                (f = 'trailing' in i ? !!i.trailing : f)),
              (w.cancel = function() {
                l !== o && Zr(l), (h = 0), (n = u = r = l = o);
              }),
              (w.flush = function() {
                return l === o ? a : y(ia());
              }),
              w
            );
          }
          var ca = Tr(function(t, e) {
              return Pn(t, 1, e);
            }),
            la = Tr(function(t, e, i) {
              return Pn(t, Qa(e) || 0, i);
            });
          function ua(t, e) {
            if ('function' != typeof t || (null != e && 'function' != typeof e))
              throw new oe(c);
            var i = function() {
              var n = arguments,
                r = e ? e.apply(this, n) : n[0],
                o = i.cache;
              if (o.has(r)) return o.get(r);
              var s = t.apply(this, n);
              return (i.cache = o.set(r, s) || o), s;
            };
            return (i.cache = new (ua.Cache || bn)()), i;
          }
          function ha(t) {
            if ('function' != typeof t) throw new oe(c);
            return function() {
              var e = arguments;
              switch (e.length) {
                case 0:
                  return !t.call(this);
                case 1:
                  return !t.call(this, e[0]);
                case 2:
                  return !t.call(this, e[0], e[1]);
                case 3:
                  return !t.call(this, e[0], e[1], e[2]);
              }
              return !t.apply(this, e);
            };
          }
          ua.Cache = bn;
          var da = Xr(function(t, e) {
              var i = (e =
                1 == e.length && Ma(e[0])
                  ? ai(e[0], Ai(Bo()))
                  : ai(Qn(e, 1), Ai(Bo()))).length;
              return Tr(function(n) {
                for (var r = -1, o = Wi(n.length, i); ++r < o; )
                  n[r] = e[r].call(this, n[r]);
                return $e(t, this, n);
              });
            }),
            pa = Tr(function(t, e) {
              var i = Ri(e, ko(pa));
              return No(t, b, o, e, i);
            }),
            fa = Tr(function(t, e) {
              var i = Ri(e, ko(fa));
              return No(t, x, o, e, i);
            }),
            ma = Io(function(t, e) {
              return No(t, T, o, o, o, e);
            });
          function ga(t, e) {
            return t === e || (t != t && e != e);
          }
          var va = bo(er),
            ya = bo(function(t, e) {
              return t >= e;
            }),
            wa = sr(
              (function() {
                return arguments;
              })()
            )
              ? sr
              : function(t) {
                  return _a(t) && he.call(t, 'callee') && !Le.call(t, 'callee');
                },
            Ma = n.isArray,
            Ea = Ye
              ? Ai(Ye)
              : function(t) {
                  return _a(t) && tr(t) == ct;
                };
          function ba(t) {
            return null != t && Sa(t.length) && !Na(t);
          }
          function xa(t) {
            return _a(t) && ba(t);
          }
          var Aa = Hi || Qc,
            Ta = Qe
              ? Ai(Qe)
              : function(t) {
                  return _a(t) && tr(t) == Y;
                };
          function La(t) {
            if (!_a(t)) return !1;
            var e = tr(t);
            return (
              e == W ||
              e == Q ||
              ('string' == typeof t.message &&
                'string' == typeof t.name &&
                !Oa(t))
            );
          }
          function Na(t) {
            if (!Ca(t)) return !1;
            var e = tr(t);
            return e == q || e == X || e == V || e == tt;
          }
          function Da(t) {
            return 'number' == typeof t && t == Ga(t);
          }
          function Sa(t) {
            return 'number' == typeof t && t > -1 && t % 1 == 0 && t <= O;
          }
          function Ca(t) {
            var e = typeof t;
            return null != t && ('object' == e || 'function' == e);
          }
          function _a(t) {
            return null != t && 'object' == typeof t;
          }
          var Ia = We
            ? Ai(We)
            : function(t) {
                return _a(t) && Go(t) == K;
              };
          function ja(t) {
            return 'number' == typeof t || (_a(t) && tr(t) == Z);
          }
          function Oa(t) {
            if (!_a(t) || tr(t) != $) return !1;
            var e = be(t);
            if (null === e) return !0;
            var i = he.call(e, 'constructor') && e.constructor;
            return 'function' == typeof i && i instanceof i && ue.call(i) == me;
          }
          var Ra = qe
            ? Ai(qe)
            : function(t) {
                return _a(t) && tr(t) == et;
              };
          var za = Xe
            ? Ai(Xe)
            : function(t) {
                return _a(t) && Go(t) == it;
              };
          function ka(t) {
            return 'string' == typeof t || (!Ma(t) && _a(t) && tr(t) == nt);
          }
          function Ba(t) {
            return 'symbol' == typeof t || (_a(t) && tr(t) == rt);
          }
          var Pa = Ke
            ? Ai(Ke)
            : function(t) {
                return _a(t) && Sa(t.length) && !!Ie[tr(t)];
              };
          var Ua = bo(pr),
            Fa = bo(function(t, e) {
              return t <= e;
            });
          function Ha(t) {
            if (!t) return [];
            if (ba(t)) return ka(t) ? Bi(t) : ro(t);
            if (ke && t[ke])
              return (function(t) {
                for (var e, i = []; !(e = t.next()).done; ) i.push(e.value);
                return i;
              })(t[ke]());
            var e = Go(t);
            return (e == K ? ji : e == it ? zi : gc)(t);
          }
          function Va(t) {
            return t
              ? (t = Qa(t)) === j || t === -j
                ? (t < 0 ? -1 : 1) * R
                : t == t ? t : 0
              : 0 === t ? t : 0;
          }
          function Ga(t) {
            var e = Va(t),
              i = e % 1;
            return e == e ? (i ? e - i : e) : 0;
          }
          function Ya(t) {
            return t ? zn(Ga(t), 0, k) : 0;
          }
          function Qa(t) {
            if ('number' == typeof t) return t;
            if (Ba(t)) return z;
            if (Ca(t)) {
              var e = 'function' == typeof t.valueOf ? t.valueOf() : t;
              t = Ca(e) ? e + '' : e;
            }
            if ('string' != typeof t) return 0 === t ? t : +t;
            t = t.replace(Rt, '');
            var i = Qt.test(t);
            return i || qt.test(t)
              ? ze(t.slice(2), i ? 2 : 8)
              : Yt.test(t) ? z : +t;
          }
          function Wa(t) {
            return oo(t, cc(t));
          }
          function qa(t) {
            return null == t ? '' : Br(t);
          }
          var Xa = ao(function(t, e) {
              if ($o(e) || ba(e)) oo(e, ac(e), t);
              else for (var i in e) he.call(e, i) && Cn(t, i, e[i]);
            }),
            Ka = ao(function(t, e) {
              oo(e, cc(e), t);
            }),
            Za = ao(function(t, e, i, n) {
              oo(e, cc(e), t, n);
            }),
            Ja = ao(function(t, e, i, n) {
              oo(e, ac(e), t, n);
            }),
            $a = Io(Rn);
          var tc = Tr(function(t) {
              return t.push(o, Do), $e(Za, o, t);
            }),
            ec = Tr(function(t) {
              return t.push(o, So), $e(uc, o, t);
            });
          function ic(t, e, i) {
            var n = null == t ? o : Jn(t, e);
            return n === o ? i : n;
          }
          function nc(t, e) {
            return null != t && Yo(t, e, nr);
          }
          var rc = vo(function(t, e, i) {
              t[e] = i;
            }, Cc(jc)),
            oc = vo(function(t, e, i) {
              he.call(t, e) ? t[e].push(i) : (t[e] = [i]);
            }, Bo),
            sc = Tr(or);
          function ac(t) {
            return ba(t) ? Tn(t) : hr(t);
          }
          function cc(t) {
            return ba(t) ? Tn(t, !0) : dr(t);
          }
          var lc = ao(function(t, e, i) {
              vr(t, e, i);
            }),
            uc = ao(function(t, e, i, n) {
              vr(t, e, i, n);
            }),
            hc = Io(function(t, e) {
              var i = {};
              if (null == t) return i;
              var n = !1;
              (e = ai(e, function(e) {
                return (e = qr(e, t)), n || (n = e.length > 1), e;
              })),
                oo(t, Oo(t), i),
                n && (i = kn(i, d | p | f, Co));
              for (var r = e.length; r--; ) Ur(i, e[r]);
              return i;
            });
          var dc = Io(function(t, e) {
            return null == t
              ? {}
              : Mr((i = t), e, function(t, e) {
                  return nc(i, e);
                });
            var i;
          });
          function pc(t, e) {
            if (null == t) return {};
            var i = ai(Oo(t), function(t) {
              return [t];
            });
            return (
              (e = Bo(e)),
              Mr(t, i, function(t, i) {
                return e(t, i[0]);
              })
            );
          }
          var fc = Lo(ac),
            mc = Lo(cc);
          function gc(t) {
            return null == t ? [] : Ti(t, ac(t));
          }
          var vc = ho(function(t, e, i) {
            return (e = e.toLowerCase()), t + (i ? yc(e) : e);
          });
          function yc(t) {
            return Lc(qa(t).toLowerCase());
          }
          function wc(t) {
            return (t = qa(t)) && t.replace(Kt, Si).replace(Te, '');
          }
          var Mc = ho(function(t, e, i) {
              return t + (i ? '-' : '') + e.toLowerCase();
            }),
            Ec = ho(function(t, e, i) {
              return t + (i ? ' ' : '') + e.toLowerCase();
            }),
            bc = uo('toLowerCase');
          var xc = ho(function(t, e, i) {
            return t + (i ? '_' : '') + e.toLowerCase();
          });
          var Ac = ho(function(t, e, i) {
            return t + (i ? ' ' : '') + Lc(e);
          });
          var Tc = ho(function(t, e, i) {
              return t + (i ? ' ' : '') + e.toUpperCase();
            }),
            Lc = uo('toUpperCase');
          function Nc(t, e, i) {
            return (
              (t = qa(t)),
              (e = i ? o : e) === o
                ? ((n = t), Se.test(n) ? t.match(Ne) || [] : t.match(Ft) || [])
                : t.match(e) || []
            );
            var n;
          }
          var Dc = Tr(function(t, e) {
              try {
                return $e(t, o, e);
              } catch (t) {
                return La(t) ? t : new $t(t);
              }
            }),
            Sc = Io(function(t, e) {
              return (
                ei(e, function(e) {
                  (e = ps(e)), On(t, e, oa(t[e], t));
                }),
                t
              );
            });
          function Cc(t) {
            return function() {
              return t;
            };
          }
          var _c = mo(),
            Ic = mo(!0);
          function jc(t) {
            return t;
          }
          function Oc(t) {
            return ur('function' == typeof t ? t : kn(t, d));
          }
          var Rc = Tr(function(t, e) {
              return function(i) {
                return or(i, t, e);
              };
            }),
            zc = Tr(function(t, e) {
              return function(i) {
                return or(t, i, e);
              };
            });
          function kc(t, e, i) {
            var n = ac(e),
              r = Zn(e, n);
            null != i ||
              (Ca(e) && (r.length || !n.length)) ||
              ((i = e), (e = t), (t = this), (r = Zn(e, ac(e))));
            var o = !(Ca(i) && 'chain' in i && !i.chain),
              s = Na(t);
            return (
              ei(r, function(i) {
                var n = e[i];
                (t[i] = n),
                  s &&
                    (t.prototype[i] = function() {
                      var e = this.__chain__;
                      if (o || e) {
                        var i = t(this.__wrapped__);
                        return (
                          (i.__actions__ = ro(this.__actions__)).push({
                            func: n,
                            args: arguments,
                            thisArg: t
                          }),
                          (i.__chain__ = e),
                          i
                        );
                      }
                      return n.apply(t, ci([this.value()], arguments));
                    });
              }),
              t
            );
          }
          function Bc() {}
          var Pc = wo(ai),
            Uc = wo(ni),
            Fc = wo(hi);
          function Hc(t) {
            return Ko(t)
              ? wi(ps(t))
              : ((e = t),
                function(t) {
                  return Jn(t, e);
                });
            var e;
          }
          var Vc = Eo(),
            Gc = Eo(!0);
          function Yc() {
            return [];
          }
          function Qc() {
            return !1;
          }
          var Wc = yo(function(t, e) {
              return t + e;
            }, 0),
            qc = Ao('ceil'),
            Xc = yo(function(t, e) {
              return t / e;
            }, 1),
            Kc = Ao('floor');
          var Zc,
            Jc = yo(function(t, e) {
              return t * e;
            }, 1),
            $c = Ao('round'),
            tl = yo(function(t, e) {
              return t - e;
            }, 0);
          return (
            (mn.after = function(t, e) {
              if ('function' != typeof e) throw new oe(c);
              return (
                (t = Ga(t)),
                function() {
                  if (--t < 1) return e.apply(this, arguments);
                }
              );
            }),
            (mn.ary = na),
            (mn.assign = Xa),
            (mn.assignIn = Ka),
            (mn.assignInWith = Za),
            (mn.assignWith = Ja),
            (mn.at = $a),
            (mn.before = ra),
            (mn.bind = oa),
            (mn.bindAll = Sc),
            (mn.bindKey = sa),
            (mn.castArray = function() {
              if (!arguments.length) return [];
              var t = arguments[0];
              return Ma(t) ? t : [t];
            }),
            (mn.chain = Hs),
            (mn.chunk = function(t, e, i) {
              e = (i ? Xo(t, e, i) : e === o) ? 1 : Qi(Ga(e), 0);
              var r = null == t ? 0 : t.length;
              if (!r || e < 1) return [];
              for (var s = 0, a = 0, c = n(di(r / e)); s < r; )
                c[a++] = Ir(t, s, (s += e));
              return c;
            }),
            (mn.compact = function(t) {
              for (
                var e = -1, i = null == t ? 0 : t.length, n = 0, r = [];
                ++e < i;

              ) {
                var o = t[e];
                o && (r[n++] = o);
              }
              return r;
            }),
            (mn.concat = function() {
              var t = arguments.length;
              if (!t) return [];
              for (var e = n(t - 1), i = arguments[0], r = t; r--; )
                e[r - 1] = arguments[r];
              return ci(Ma(i) ? ro(i) : [i], Qn(e, 1));
            }),
            (mn.cond = function(t) {
              var e = null == t ? 0 : t.length,
                i = Bo();
              return (
                (t = e
                  ? ai(t, function(t) {
                      if ('function' != typeof t[1]) throw new oe(c);
                      return [i(t[0]), t[1]];
                    })
                  : []),
                Tr(function(i) {
                  for (var n = -1; ++n < e; ) {
                    var r = t[n];
                    if ($e(r[0], this, i)) return $e(r[1], this, i);
                  }
                })
              );
            }),
            (mn.conforms = function(t) {
              return (
                (e = kn(t, d)),
                (i = ac(e)),
                function(t) {
                  return Bn(t, e, i);
                }
              );
              var e, i;
            }),
            (mn.constant = Cc),
            (mn.countBy = Ys),
            (mn.create = function(t, e) {
              var i = gn(t);
              return null == e ? i : jn(i, e);
            }),
            (mn.curry = function t(e, i, n) {
              var r = No(e, M, o, o, o, o, o, (i = n ? o : i));
              return (r.placeholder = t.placeholder), r;
            }),
            (mn.curryRight = function t(e, i, n) {
              var r = No(e, E, o, o, o, o, o, (i = n ? o : i));
              return (r.placeholder = t.placeholder), r;
            }),
            (mn.debounce = aa),
            (mn.defaults = tc),
            (mn.defaultsDeep = ec),
            (mn.defer = ca),
            (mn.delay = la),
            (mn.difference = gs),
            (mn.differenceBy = vs),
            (mn.differenceWith = ys),
            (mn.drop = function(t, e, i) {
              var n = null == t ? 0 : t.length;
              return n
                ? Ir(t, (e = i || e === o ? 1 : Ga(e)) < 0 ? 0 : e, n)
                : [];
            }),
            (mn.dropRight = function(t, e, i) {
              var n = null == t ? 0 : t.length;
              return n
                ? Ir(t, 0, (e = n - (e = i || e === o ? 1 : Ga(e))) < 0 ? 0 : e)
                : [];
            }),
            (mn.dropRightWhile = function(t, e) {
              return t && t.length ? Hr(t, Bo(e, 3), !0, !0) : [];
            }),
            (mn.dropWhile = function(t, e) {
              return t && t.length ? Hr(t, Bo(e, 3), !0) : [];
            }),
            (mn.fill = function(t, e, i, n) {
              var r = null == t ? 0 : t.length;
              return r
                ? (i &&
                    'number' != typeof i &&
                    Xo(t, e, i) &&
                    ((i = 0), (n = r)),
                  (function(t, e, i, n) {
                    var r = t.length;
                    for (
                      (i = Ga(i)) < 0 && (i = -i > r ? 0 : r + i),
                        (n = n === o || n > r ? r : Ga(n)) < 0 && (n += r),
                        n = i > n ? 0 : Ya(n);
                      i < n;

                    )
                      t[i++] = e;
                    return t;
                  })(t, e, i, n))
                : [];
            }),
            (mn.filter = function(t, e) {
              return (Ma(t) ? ri : Yn)(t, Bo(e, 3));
            }),
            (mn.flatMap = function(t, e) {
              return Qn($s(t, e), 1);
            }),
            (mn.flatMapDeep = function(t, e) {
              return Qn($s(t, e), j);
            }),
            (mn.flatMapDepth = function(t, e, i) {
              return (i = i === o ? 1 : Ga(i)), Qn($s(t, e), i);
            }),
            (mn.flatten = Es),
            (mn.flattenDeep = function(t) {
              return null != t && t.length ? Qn(t, j) : [];
            }),
            (mn.flattenDepth = function(t, e) {
              return null != t && t.length
                ? Qn(t, (e = e === o ? 1 : Ga(e)))
                : [];
            }),
            (mn.flip = function(t) {
              return No(t, L);
            }),
            (mn.flow = _c),
            (mn.flowRight = Ic),
            (mn.fromPairs = function(t) {
              for (
                var e = -1, i = null == t ? 0 : t.length, n = {};
                ++e < i;

              ) {
                var r = t[e];
                n[r[0]] = r[1];
              }
              return n;
            }),
            (mn.functions = function(t) {
              return null == t ? [] : Zn(t, ac(t));
            }),
            (mn.functionsIn = function(t) {
              return null == t ? [] : Zn(t, cc(t));
            }),
            (mn.groupBy = Ks),
            (mn.initial = function(t) {
              return null != t && t.length ? Ir(t, 0, -1) : [];
            }),
            (mn.intersection = xs),
            (mn.intersectionBy = As),
            (mn.intersectionWith = Ts),
            (mn.invert = rc),
            (mn.invertBy = oc),
            (mn.invokeMap = Zs),
            (mn.iteratee = Oc),
            (mn.keyBy = Js),
            (mn.keys = ac),
            (mn.keysIn = cc),
            (mn.map = $s),
            (mn.mapKeys = function(t, e) {
              var i = {};
              return (
                (e = Bo(e, 3)),
                Xn(t, function(t, n, r) {
                  On(i, e(t, n, r), t);
                }),
                i
              );
            }),
            (mn.mapValues = function(t, e) {
              var i = {};
              return (
                (e = Bo(e, 3)),
                Xn(t, function(t, n, r) {
                  On(i, n, e(t, n, r));
                }),
                i
              );
            }),
            (mn.matches = function(t) {
              return mr(kn(t, d));
            }),
            (mn.matchesProperty = function(t, e) {
              return gr(t, kn(e, d));
            }),
            (mn.memoize = ua),
            (mn.merge = lc),
            (mn.mergeWith = uc),
            (mn.method = Rc),
            (mn.methodOf = zc),
            (mn.mixin = kc),
            (mn.negate = ha),
            (mn.nthArg = function(t) {
              return (
                (t = Ga(t)),
                Tr(function(e) {
                  return yr(e, t);
                })
              );
            }),
            (mn.omit = hc),
            (mn.omitBy = function(t, e) {
              return pc(t, ha(Bo(e)));
            }),
            (mn.once = function(t) {
              return ra(2, t);
            }),
            (mn.orderBy = function(t, e, i, n) {
              return null == t
                ? []
                : (Ma(e) || (e = null == e ? [] : [e]),
                  Ma((i = n ? o : i)) || (i = null == i ? [] : [i]),
                  wr(t, e, i));
            }),
            (mn.over = Pc),
            (mn.overArgs = da),
            (mn.overEvery = Uc),
            (mn.overSome = Fc),
            (mn.partial = pa),
            (mn.partialRight = fa),
            (mn.partition = ta),
            (mn.pick = dc),
            (mn.pickBy = pc),
            (mn.property = Hc),
            (mn.propertyOf = function(t) {
              return function(e) {
                return null == t ? o : Jn(t, e);
              };
            }),
            (mn.pull = Ns),
            (mn.pullAll = Ds),
            (mn.pullAllBy = function(t, e, i) {
              return t && t.length && e && e.length ? Er(t, e, Bo(i, 2)) : t;
            }),
            (mn.pullAllWith = function(t, e, i) {
              return t && t.length && e && e.length ? Er(t, e, o, i) : t;
            }),
            (mn.pullAt = Ss),
            (mn.range = Vc),
            (mn.rangeRight = Gc),
            (mn.rearg = ma),
            (mn.reject = function(t, e) {
              return (Ma(t) ? ri : Yn)(t, ha(Bo(e, 3)));
            }),
            (mn.remove = function(t, e) {
              var i = [];
              if (!t || !t.length) return i;
              var n = -1,
                r = [],
                o = t.length;
              for (e = Bo(e, 3); ++n < o; ) {
                var s = t[n];
                e(s, n, t) && (i.push(s), r.push(n));
              }
              return br(t, r), i;
            }),
            (mn.rest = function(t, e) {
              if ('function' != typeof t) throw new oe(c);
              return Tr(t, (e = e === o ? e : Ga(e)));
            }),
            (mn.reverse = Cs),
            (mn.sampleSize = function(t, e, i) {
              return (
                (e = (i ? Xo(t, e, i) : e === o) ? 1 : Ga(e)),
                (Ma(t) ? Nn : Nr)(t, e)
              );
            }),
            (mn.set = function(t, e, i) {
              return null == t ? t : Dr(t, e, i);
            }),
            (mn.setWith = function(t, e, i, n) {
              return (
                (n = 'function' == typeof n ? n : o),
                null == t ? t : Dr(t, e, i, n)
              );
            }),
            (mn.shuffle = function(t) {
              return (Ma(t) ? Dn : _r)(t);
            }),
            (mn.slice = function(t, e, i) {
              var n = null == t ? 0 : t.length;
              return n
                ? (i && 'number' != typeof i && Xo(t, e, i)
                    ? ((e = 0), (i = n))
                    : ((e = null == e ? 0 : Ga(e)), (i = i === o ? n : Ga(i))),
                  Ir(t, e, i))
                : [];
            }),
            (mn.sortBy = ea),
            (mn.sortedUniq = function(t) {
              return t && t.length ? zr(t) : [];
            }),
            (mn.sortedUniqBy = function(t, e) {
              return t && t.length ? zr(t, Bo(e, 2)) : [];
            }),
            (mn.split = function(t, e, i) {
              return (
                i && 'number' != typeof i && Xo(t, e, i) && (e = i = o),
                (i = i === o ? k : i >>> 0)
                  ? (t = qa(t)) &&
                    ('string' == typeof e || (null != e && !Ra(e))) &&
                    !(e = Br(e)) &&
                    Ii(t)
                    ? Kr(Bi(t), 0, i)
                    : t.split(e, i)
                  : []
              );
            }),
            (mn.spread = function(t, e) {
              if ('function' != typeof t) throw new oe(c);
              return (
                (e = null == e ? 0 : Qi(Ga(e), 0)),
                Tr(function(i) {
                  var n = i[e],
                    r = Kr(i, 0, e);
                  return n && ci(r, n), $e(t, this, r);
                })
              );
            }),
            (mn.tail = function(t) {
              var e = null == t ? 0 : t.length;
              return e ? Ir(t, 1, e) : [];
            }),
            (mn.take = function(t, e, i) {
              return t && t.length
                ? Ir(t, 0, (e = i || e === o ? 1 : Ga(e)) < 0 ? 0 : e)
                : [];
            }),
            (mn.takeRight = function(t, e, i) {
              var n = null == t ? 0 : t.length;
              return n
                ? Ir(t, (e = n - (e = i || e === o ? 1 : Ga(e))) < 0 ? 0 : e, n)
                : [];
            }),
            (mn.takeRightWhile = function(t, e) {
              return t && t.length ? Hr(t, Bo(e, 3), !1, !0) : [];
            }),
            (mn.takeWhile = function(t, e) {
              return t && t.length ? Hr(t, Bo(e, 3)) : [];
            }),
            (mn.tap = function(t, e) {
              return e(t), t;
            }),
            (mn.throttle = function(t, e, i) {
              var n = !0,
                r = !0;
              if ('function' != typeof t) throw new oe(c);
              return (
                Ca(i) &&
                  ((n = 'leading' in i ? !!i.leading : n),
                  (r = 'trailing' in i ? !!i.trailing : r)),
                aa(t, e, { leading: n, maxWait: e, trailing: r })
              );
            }),
            (mn.thru = Vs),
            (mn.toArray = Ha),
            (mn.toPairs = fc),
            (mn.toPairsIn = mc),
            (mn.toPath = function(t) {
              return Ma(t) ? ai(t, ps) : Ba(t) ? [t] : ro(ds(qa(t)));
            }),
            (mn.toPlainObject = Wa),
            (mn.transform = function(t, e, i) {
              var n = Ma(t),
                r = n || Aa(t) || Pa(t);
              if (((e = Bo(e, 4)), null == i)) {
                var o = t && t.constructor;
                i = r ? (n ? new o() : []) : Ca(t) && Na(o) ? gn(be(t)) : {};
              }
              return (
                (r ? ei : Xn)(t, function(t, n, r) {
                  return e(i, t, n, r);
                }),
                i
              );
            }),
            (mn.unary = function(t) {
              return na(t, 1);
            }),
            (mn.union = _s),
            (mn.unionBy = Is),
            (mn.unionWith = js),
            (mn.uniq = function(t) {
              return t && t.length ? Pr(t) : [];
            }),
            (mn.uniqBy = function(t, e) {
              return t && t.length ? Pr(t, Bo(e, 2)) : [];
            }),
            (mn.uniqWith = function(t, e) {
              return (
                (e = 'function' == typeof e ? e : o),
                t && t.length ? Pr(t, o, e) : []
              );
            }),
            (mn.unset = function(t, e) {
              return null == t || Ur(t, e);
            }),
            (mn.unzip = Os),
            (mn.unzipWith = Rs),
            (mn.update = function(t, e, i) {
              return null == t ? t : Fr(t, e, Wr(i));
            }),
            (mn.updateWith = function(t, e, i, n) {
              return (
                (n = 'function' == typeof n ? n : o),
                null == t ? t : Fr(t, e, Wr(i), n)
              );
            }),
            (mn.values = gc),
            (mn.valuesIn = function(t) {
              return null == t ? [] : Ti(t, cc(t));
            }),
            (mn.without = zs),
            (mn.words = Nc),
            (mn.wrap = function(t, e) {
              return pa(Wr(e), t);
            }),
            (mn.xor = ks),
            (mn.xorBy = Bs),
            (mn.xorWith = Ps),
            (mn.zip = Us),
            (mn.zipObject = function(t, e) {
              return Yr(t || [], e || [], Cn);
            }),
            (mn.zipObjectDeep = function(t, e) {
              return Yr(t || [], e || [], Dr);
            }),
            (mn.zipWith = Fs),
            (mn.entries = fc),
            (mn.entriesIn = mc),
            (mn.extend = Ka),
            (mn.extendWith = Za),
            kc(mn, mn),
            (mn.add = Wc),
            (mn.attempt = Dc),
            (mn.camelCase = vc),
            (mn.capitalize = yc),
            (mn.ceil = qc),
            (mn.clamp = function(t, e, i) {
              return (
                i === o && ((i = e), (e = o)),
                i !== o && (i = (i = Qa(i)) == i ? i : 0),
                e !== o && (e = (e = Qa(e)) == e ? e : 0),
                zn(Qa(t), e, i)
              );
            }),
            (mn.clone = function(t) {
              return kn(t, f);
            }),
            (mn.cloneDeep = function(t) {
              return kn(t, d | f);
            }),
            (mn.cloneDeepWith = function(t, e) {
              return kn(t, d | f, (e = 'function' == typeof e ? e : o));
            }),
            (mn.cloneWith = function(t, e) {
              return kn(t, f, (e = 'function' == typeof e ? e : o));
            }),
            (mn.conformsTo = function(t, e) {
              return null == e || Bn(t, e, ac(e));
            }),
            (mn.deburr = wc),
            (mn.defaultTo = function(t, e) {
              return null == t || t != t ? e : t;
            }),
            (mn.divide = Xc),
            (mn.endsWith = function(t, e, i) {
              (t = qa(t)), (e = Br(e));
              var n = t.length,
                r = (i = i === o ? n : zn(Ga(i), 0, n));
              return (i -= e.length) >= 0 && t.slice(i, r) == e;
            }),
            (mn.eq = ga),
            (mn.escape = function(t) {
              return (t = qa(t)) && Tt.test(t) ? t.replace(xt, Ci) : t;
            }),
            (mn.escapeRegExp = function(t) {
              return (t = qa(t)) && Ot.test(t) ? t.replace(jt, '\\$&') : t;
            }),
            (mn.every = function(t, e, i) {
              var n = Ma(t) ? ni : Vn;
              return i && Xo(t, e, i) && (e = o), n(t, Bo(e, 3));
            }),
            (mn.find = Qs),
            (mn.findIndex = ws),
            (mn.findKey = function(t, e) {
              return pi(t, Bo(e, 3), Xn);
            }),
            (mn.findLast = Ws),
            (mn.findLastIndex = Ms),
            (mn.findLastKey = function(t, e) {
              return pi(t, Bo(e, 3), Kn);
            }),
            (mn.floor = Kc),
            (mn.forEach = qs),
            (mn.forEachRight = Xs),
            (mn.forIn = function(t, e) {
              return null == t ? t : Wn(t, Bo(e, 3), cc);
            }),
            (mn.forInRight = function(t, e) {
              return null == t ? t : qn(t, Bo(e, 3), cc);
            }),
            (mn.forOwn = function(t, e) {
              return t && Xn(t, Bo(e, 3));
            }),
            (mn.forOwnRight = function(t, e) {
              return t && Kn(t, Bo(e, 3));
            }),
            (mn.get = ic),
            (mn.gt = va),
            (mn.gte = ya),
            (mn.has = function(t, e) {
              return null != t && Yo(t, e, ir);
            }),
            (mn.hasIn = nc),
            (mn.head = bs),
            (mn.identity = jc),
            (mn.includes = function(t, e, i, n) {
              (t = ba(t) ? t : gc(t)), (i = i && !n ? Ga(i) : 0);
              var r = t.length;
              return (
                i < 0 && (i = Qi(r + i, 0)),
                ka(t) ? i <= r && t.indexOf(e, i) > -1 : !!r && mi(t, e, i) > -1
              );
            }),
            (mn.indexOf = function(t, e, i) {
              var n = null == t ? 0 : t.length;
              if (!n) return -1;
              var r = null == i ? 0 : Ga(i);
              return r < 0 && (r = Qi(n + r, 0)), mi(t, e, r);
            }),
            (mn.inRange = function(t, e, i) {
              return (
                (e = Va(e)),
                i === o ? ((i = e), (e = 0)) : (i = Va(i)),
                (t = Qa(t)),
                (n = t) >= Wi((r = e), (s = i)) && n < Qi(r, s)
              );
              var n, r, s;
            }),
            (mn.invoke = sc),
            (mn.isArguments = wa),
            (mn.isArray = Ma),
            (mn.isArrayBuffer = Ea),
            (mn.isArrayLike = ba),
            (mn.isArrayLikeObject = xa),
            (mn.isBoolean = function(t) {
              return !0 === t || !1 === t || (_a(t) && tr(t) == G);
            }),
            (mn.isBuffer = Aa),
            (mn.isDate = Ta),
            (mn.isElement = function(t) {
              return _a(t) && 1 === t.nodeType && !Oa(t);
            }),
            (mn.isEmpty = function(t) {
              if (null == t) return !0;
              if (
                ba(t) &&
                (Ma(t) ||
                  'string' == typeof t ||
                  'function' == typeof t.splice ||
                  Aa(t) ||
                  Pa(t) ||
                  wa(t))
              )
                return !t.length;
              var e = Go(t);
              if (e == K || e == it) return !t.size;
              if ($o(t)) return !hr(t).length;
              for (var i in t) if (he.call(t, i)) return !1;
              return !0;
            }),
            (mn.isEqual = function(t, e) {
              return ar(t, e);
            }),
            (mn.isEqualWith = function(t, e, i) {
              var n = (i = 'function' == typeof i ? i : o) ? i(t, e) : o;
              return n === o ? ar(t, e, o, i) : !!n;
            }),
            (mn.isError = La),
            (mn.isFinite = function(t) {
              return 'number' == typeof t && Vi(t);
            }),
            (mn.isFunction = Na),
            (mn.isInteger = Da),
            (mn.isLength = Sa),
            (mn.isMap = Ia),
            (mn.isMatch = function(t, e) {
              return t === e || cr(t, e, Uo(e));
            }),
            (mn.isMatchWith = function(t, e, i) {
              return (i = 'function' == typeof i ? i : o), cr(t, e, Uo(e), i);
            }),
            (mn.isNaN = function(t) {
              return ja(t) && t != +t;
            }),
            (mn.isNative = function(t) {
              if (Jo(t)) throw new $t(a);
              return lr(t);
            }),
            (mn.isNil = function(t) {
              return null == t;
            }),
            (mn.isNull = function(t) {
              return null === t;
            }),
            (mn.isNumber = ja),
            (mn.isObject = Ca),
            (mn.isObjectLike = _a),
            (mn.isPlainObject = Oa),
            (mn.isRegExp = Ra),
            (mn.isSafeInteger = function(t) {
              return Da(t) && t >= -O && t <= O;
            }),
            (mn.isSet = za),
            (mn.isString = ka),
            (mn.isSymbol = Ba),
            (mn.isTypedArray = Pa),
            (mn.isUndefined = function(t) {
              return t === o;
            }),
            (mn.isWeakMap = function(t) {
              return _a(t) && Go(t) == st;
            }),
            (mn.isWeakSet = function(t) {
              return _a(t) && tr(t) == at;
            }),
            (mn.join = function(t, e) {
              return null == t ? '' : Gi.call(t, e);
            }),
            (mn.kebabCase = Mc),
            (mn.last = Ls),
            (mn.lastIndexOf = function(t, e, i) {
              var n = null == t ? 0 : t.length;
              if (!n) return -1;
              var r = n;
              return (
                i !== o && (r = (r = Ga(i)) < 0 ? Qi(n + r, 0) : Wi(r, n - 1)),
                e == e
                  ? (function(t, e, i) {
                      for (var n = i + 1; n--; ) if (t[n] === e) return n;
                      return n;
                    })(t, e, r)
                  : fi(t, vi, r, !0)
              );
            }),
            (mn.lowerCase = Ec),
            (mn.lowerFirst = bc),
            (mn.lt = Ua),
            (mn.lte = Fa),
            (mn.max = function(t) {
              return t && t.length ? Gn(t, jc, er) : o;
            }),
            (mn.maxBy = function(t, e) {
              return t && t.length ? Gn(t, Bo(e, 2), er) : o;
            }),
            (mn.mean = function(t) {
              return yi(t, jc);
            }),
            (mn.meanBy = function(t, e) {
              return yi(t, Bo(e, 2));
            }),
            (mn.min = function(t) {
              return t && t.length ? Gn(t, jc, pr) : o;
            }),
            (mn.minBy = function(t, e) {
              return t && t.length ? Gn(t, Bo(e, 2), pr) : o;
            }),
            (mn.stubArray = Yc),
            (mn.stubFalse = Qc),
            (mn.stubObject = function() {
              return {};
            }),
            (mn.stubString = function() {
              return '';
            }),
            (mn.stubTrue = function() {
              return !0;
            }),
            (mn.multiply = Jc),
            (mn.nth = function(t, e) {
              return t && t.length ? yr(t, Ga(e)) : o;
            }),
            (mn.noConflict = function() {
              return Pe._ === this && (Pe._ = ge), this;
            }),
            (mn.noop = Bc),
            (mn.now = ia),
            (mn.pad = function(t, e, i) {
              t = qa(t);
              var n = (e = Ga(e)) ? ki(t) : 0;
              if (!e || n >= e) return t;
              var r = (e - n) / 2;
              return Mo(Mi(r), i) + t + Mo(di(r), i);
            }),
            (mn.padEnd = function(t, e, i) {
              t = qa(t);
              var n = (e = Ga(e)) ? ki(t) : 0;
              return e && n < e ? t + Mo(e - n, i) : t;
            }),
            (mn.padStart = function(t, e, i) {
              t = qa(t);
              var n = (e = Ga(e)) ? ki(t) : 0;
              return e && n < e ? Mo(e - n, i) + t : t;
            }),
            (mn.parseInt = function(t, e, i) {
              return (
                i || null == e ? (e = 0) : e && (e = +e),
                Xi(qa(t).replace(zt, ''), e || 0)
              );
            }),
            (mn.random = function(t, e, i) {
              if (
                (i && 'boolean' != typeof i && Xo(t, e, i) && (e = i = o),
                i === o &&
                  ('boolean' == typeof e
                    ? ((i = e), (e = o))
                    : 'boolean' == typeof t && ((i = t), (t = o))),
                t === o && e === o
                  ? ((t = 0), (e = 1))
                  : ((t = Va(t)), e === o ? ((e = t), (t = 0)) : (e = Va(e))),
                t > e)
              ) {
                var n = t;
                (t = e), (e = n);
              }
              if (i || t % 1 || e % 1) {
                var r = Ki();
                return Wi(
                  t + r * (e - t + Re('1e-' + ((r + '').length - 1))),
                  e
                );
              }
              return xr(t, e);
            }),
            (mn.reduce = function(t, e, i) {
              var n = Ma(t) ? li : Ei,
                r = arguments.length < 3;
              return n(t, Bo(e, 4), i, r, Fn);
            }),
            (mn.reduceRight = function(t, e, i) {
              var n = Ma(t) ? ui : Ei,
                r = arguments.length < 3;
              return n(t, Bo(e, 4), i, r, Hn);
            }),
            (mn.repeat = function(t, e, i) {
              return (
                (e = (i ? Xo(t, e, i) : e === o) ? 1 : Ga(e)), Ar(qa(t), e)
              );
            }),
            (mn.replace = function() {
              var t = arguments,
                e = qa(t[0]);
              return t.length < 3 ? e : e.replace(t[1], t[2]);
            }),
            (mn.result = function(t, e, i) {
              var n = -1,
                r = (e = qr(e, t)).length;
              for (r || ((r = 1), (t = o)); ++n < r; ) {
                var s = null == t ? o : t[ps(e[n])];
                s === o && ((n = r), (s = i)), (t = Na(s) ? s.call(t) : s);
              }
              return t;
            }),
            (mn.round = $c),
            (mn.runInContext = t),
            (mn.sample = function(t) {
              return (Ma(t) ? Ln : Lr)(t);
            }),
            (mn.size = function(t) {
              if (null == t) return 0;
              if (ba(t)) return ka(t) ? ki(t) : t.length;
              var e = Go(t);
              return e == K || e == it ? t.size : hr(t).length;
            }),
            (mn.snakeCase = xc),
            (mn.some = function(t, e, i) {
              var n = Ma(t) ? hi : jr;
              return i && Xo(t, e, i) && (e = o), n(t, Bo(e, 3));
            }),
            (mn.sortedIndex = function(t, e) {
              return Or(t, e);
            }),
            (mn.sortedIndexBy = function(t, e, i) {
              return Rr(t, e, Bo(i, 2));
            }),
            (mn.sortedIndexOf = function(t, e) {
              var i = null == t ? 0 : t.length;
              if (i) {
                var n = Or(t, e);
                if (n < i && ga(t[n], e)) return n;
              }
              return -1;
            }),
            (mn.sortedLastIndex = function(t, e) {
              return Or(t, e, !0);
            }),
            (mn.sortedLastIndexBy = function(t, e, i) {
              return Rr(t, e, Bo(i, 2), !0);
            }),
            (mn.sortedLastIndexOf = function(t, e) {
              if (null != t && t.length) {
                var i = Or(t, e, !0) - 1;
                if (ga(t[i], e)) return i;
              }
              return -1;
            }),
            (mn.startCase = Ac),
            (mn.startsWith = function(t, e, i) {
              return (
                (t = qa(t)),
                (i = null == i ? 0 : zn(Ga(i), 0, t.length)),
                (e = Br(e)),
                t.slice(i, i + e.length) == e
              );
            }),
            (mn.subtract = tl),
            (mn.sum = function(t) {
              return t && t.length ? bi(t, jc) : 0;
            }),
            (mn.sumBy = function(t, e) {
              return t && t.length ? bi(t, Bo(e, 2)) : 0;
            }),
            (mn.template = function(t, e, i) {
              var n = mn.templateSettings;
              i && Xo(t, e, i) && (e = o), (t = qa(t)), (e = Za({}, e, n, Do));
              var r,
                s,
                a = Za({}, e.imports, n.imports, Do),
                c = ac(a),
                l = Ti(a, c),
                u = 0,
                h = e.interpolate || Zt,
                d = "__p += '",
                p = ne(
                  (e.escape || Zt).source +
                    '|' +
                    h.source +
                    '|' +
                    (h === Dt ? Vt : Zt).source +
                    '|' +
                    (e.evaluate || Zt).source +
                    '|$',
                  'g'
                ),
                f =
                  '//# sourceURL=' +
                  ('sourceURL' in e
                    ? e.sourceURL
                    : 'lodash.templateSources[' + ++_e + ']') +
                  '\n';
              t.replace(p, function(e, i, n, o, a, c) {
                return (
                  n || (n = o),
                  (d += t.slice(u, c).replace(Jt, _i)),
                  i && ((r = !0), (d += "' +\n__e(" + i + ") +\n'")),
                  a && ((s = !0), (d += "';\n" + a + ";\n__p += '")),
                  n &&
                    (d += "' +\n((__t = (" + n + ")) == null ? '' : __t) +\n'"),
                  (u = c + e.length),
                  e
                );
              }),
                (d += "';\n");
              var m = e.variable;
              m || (d = 'with (obj) {\n' + d + '\n}\n'),
                (d = (s ? d.replace(wt, '') : d)
                  .replace(Mt, '$1')
                  .replace(Et, '$1;')),
                (d =
                  'function(' +
                  (m || 'obj') +
                  ') {\n' +
                  (m ? '' : 'obj || (obj = {});\n') +
                  "var __t, __p = ''" +
                  (r ? ', __e = _.escape' : '') +
                  (s
                    ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n"
                    : ';\n') +
                  d +
                  'return __p\n}');
              var g = Dc(function() {
                return te(c, f + 'return ' + d).apply(o, l);
              });
              if (((g.source = d), La(g))) throw g;
              return g;
            }),
            (mn.times = function(t, e) {
              if ((t = Ga(t)) < 1 || t > O) return [];
              var i = k,
                n = Wi(t, k);
              (e = Bo(e)), (t -= k);
              for (var r = xi(n, e); ++i < t; ) e(i);
              return r;
            }),
            (mn.toFinite = Va),
            (mn.toInteger = Ga),
            (mn.toLength = Ya),
            (mn.toLower = function(t) {
              return qa(t).toLowerCase();
            }),
            (mn.toNumber = Qa),
            (mn.toSafeInteger = function(t) {
              return t ? zn(Ga(t), -O, O) : 0 === t ? t : 0;
            }),
            (mn.toString = qa),
            (mn.toUpper = function(t) {
              return qa(t).toUpperCase();
            }),
            (mn.trim = function(t, e, i) {
              if ((t = qa(t)) && (i || e === o)) return t.replace(Rt, '');
              if (!t || !(e = Br(e))) return t;
              var n = Bi(t),
                r = Bi(e);
              return Kr(n, Ni(n, r), Di(n, r) + 1).join('');
            }),
            (mn.trimEnd = function(t, e, i) {
              if ((t = qa(t)) && (i || e === o)) return t.replace(kt, '');
              if (!t || !(e = Br(e))) return t;
              var n = Bi(t);
              return Kr(n, 0, Di(n, Bi(e)) + 1).join('');
            }),
            (mn.trimStart = function(t, e, i) {
              if ((t = qa(t)) && (i || e === o)) return t.replace(zt, '');
              if (!t || !(e = Br(e))) return t;
              var n = Bi(t);
              return Kr(n, Ni(n, Bi(e))).join('');
            }),
            (mn.truncate = function(t, e) {
              var i = N,
                n = D;
              if (Ca(e)) {
                var r = 'separator' in e ? e.separator : r;
                (i = 'length' in e ? Ga(e.length) : i),
                  (n = 'omission' in e ? Br(e.omission) : n);
              }
              var s = (t = qa(t)).length;
              if (Ii(t)) {
                var a = Bi(t);
                s = a.length;
              }
              if (i >= s) return t;
              var c = i - ki(n);
              if (c < 1) return n;
              var l = a ? Kr(a, 0, c).join('') : t.slice(0, c);
              if (r === o) return l + n;
              if ((a && (c += l.length - c), Ra(r))) {
                if (t.slice(c).search(r)) {
                  var u,
                    h = l;
                  for (
                    r.global || (r = ne(r.source, qa(Gt.exec(r)) + 'g')),
                      r.lastIndex = 0;
                    (u = r.exec(h));

                  )
                    var d = u.index;
                  l = l.slice(0, d === o ? c : d);
                }
              } else if (t.indexOf(Br(r), c) != c) {
                var p = l.lastIndexOf(r);
                p > -1 && (l = l.slice(0, p));
              }
              return l + n;
            }),
            (mn.unescape = function(t) {
              return (t = qa(t)) && At.test(t) ? t.replace(bt, Pi) : t;
            }),
            (mn.uniqueId = function(t) {
              var e = ++de;
              return qa(t) + e;
            }),
            (mn.upperCase = Tc),
            (mn.upperFirst = Lc),
            (mn.each = qs),
            (mn.eachRight = Xs),
            (mn.first = bs),
            kc(
              mn,
              ((Zc = {}),
              Xn(mn, function(t, e) {
                he.call(mn.prototype, e) || (Zc[e] = t);
              }),
              Zc),
              { chain: !1 }
            ),
            (mn.VERSION = '4.17.4'),
            ei(
              [
                'bind',
                'bindKey',
                'curry',
                'curryRight',
                'partial',
                'partialRight'
              ],
              function(t) {
                mn[t].placeholder = mn;
              }
            ),
            ei(['drop', 'take'], function(t, e) {
              (wn.prototype[t] = function(i) {
                i = i === o ? 1 : Qi(Ga(i), 0);
                var n = this.__filtered__ && !e ? new wn(this) : this.clone();
                return (
                  n.__filtered__
                    ? (n.__takeCount__ = Wi(i, n.__takeCount__))
                    : n.__views__.push({
                        size: Wi(i, k),
                        type: t + (n.__dir__ < 0 ? 'Right' : '')
                      }),
                  n
                );
              }),
                (wn.prototype[t + 'Right'] = function(e) {
                  return this.reverse()
                    [t](e)
                    .reverse();
                });
            }),
            ei(['filter', 'map', 'takeWhile'], function(t, e) {
              var i = e + 1,
                n = i == _ || 3 == i;
              wn.prototype[t] = function(t) {
                var e = this.clone();
                return (
                  e.__iteratees__.push({ iteratee: Bo(t, 3), type: i }),
                  (e.__filtered__ = e.__filtered__ || n),
                  e
                );
              };
            }),
            ei(['head', 'last'], function(t, e) {
              var i = 'take' + (e ? 'Right' : '');
              wn.prototype[t] = function() {
                return this[i](1).value()[0];
              };
            }),
            ei(['initial', 'tail'], function(t, e) {
              var i = 'drop' + (e ? '' : 'Right');
              wn.prototype[t] = function() {
                return this.__filtered__ ? new wn(this) : this[i](1);
              };
            }),
            (wn.prototype.compact = function() {
              return this.filter(jc);
            }),
            (wn.prototype.find = function(t) {
              return this.filter(t).head();
            }),
            (wn.prototype.findLast = function(t) {
              return this.reverse().find(t);
            }),
            (wn.prototype.invokeMap = Tr(function(t, e) {
              return 'function' == typeof t
                ? new wn(this)
                : this.map(function(i) {
                    return or(i, t, e);
                  });
            })),
            (wn.prototype.reject = function(t) {
              return this.filter(ha(Bo(t)));
            }),
            (wn.prototype.slice = function(t, e) {
              t = Ga(t);
              var i = this;
              return i.__filtered__ && (t > 0 || e < 0)
                ? new wn(i)
                : (t < 0 ? (i = i.takeRight(-t)) : t && (i = i.drop(t)),
                  e !== o &&
                    (i = (e = Ga(e)) < 0 ? i.dropRight(-e) : i.take(e - t)),
                  i);
            }),
            (wn.prototype.takeRightWhile = function(t) {
              return this.reverse()
                .takeWhile(t)
                .reverse();
            }),
            (wn.prototype.toArray = function() {
              return this.take(k);
            }),
            Xn(wn.prototype, function(t, e) {
              var i = /^(?:filter|find|map|reject)|While$/.test(e),
                n = /^(?:head|last)$/.test(e),
                r = mn[n ? 'take' + ('last' == e ? 'Right' : '') : e],
                s = n || /^find/.test(e);
              r &&
                (mn.prototype[e] = function() {
                  var e = this.__wrapped__,
                    a = n ? [1] : arguments,
                    c = e instanceof wn,
                    l = a[0],
                    u = c || Ma(e),
                    h = function(t) {
                      var e = r.apply(mn, ci([t], a));
                      return n && d ? e[0] : e;
                    };
                  u &&
                    i &&
                    'function' == typeof l &&
                    1 != l.length &&
                    (c = u = !1);
                  var d = this.__chain__,
                    p = !!this.__actions__.length,
                    f = s && !d,
                    m = c && !p;
                  if (!s && u) {
                    e = m ? e : new wn(this);
                    var g = t.apply(e, a);
                    return (
                      g.__actions__.push({ func: Vs, args: [h], thisArg: o }),
                      new yn(g, d)
                    );
                  }
                  return f && m
                    ? t.apply(this, a)
                    : ((g = this.thru(h)),
                      f ? (n ? g.value()[0] : g.value()) : g);
                });
            }),
            ei(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(
              t
            ) {
              var e = se[t],
                i = /^(?:push|sort|unshift)$/.test(t) ? 'tap' : 'thru',
                n = /^(?:pop|shift)$/.test(t);
              mn.prototype[t] = function() {
                var t = arguments;
                if (n && !this.__chain__) {
                  var r = this.value();
                  return e.apply(Ma(r) ? r : [], t);
                }
                return this[i](function(i) {
                  return e.apply(Ma(i) ? i : [], t);
                });
              };
            }),
            Xn(wn.prototype, function(t, e) {
              var i = mn[e];
              if (i) {
                var n = i.name + '';
                (sn[n] || (sn[n] = [])).push({ name: e, func: i });
              }
            }),
            (sn[go(o, y).name] = [{ name: 'wrapper', func: o }]),
            (wn.prototype.clone = function() {
              var t = new wn(this.__wrapped__);
              return (
                (t.__actions__ = ro(this.__actions__)),
                (t.__dir__ = this.__dir__),
                (t.__filtered__ = this.__filtered__),
                (t.__iteratees__ = ro(this.__iteratees__)),
                (t.__takeCount__ = this.__takeCount__),
                (t.__views__ = ro(this.__views__)),
                t
              );
            }),
            (wn.prototype.reverse = function() {
              if (this.__filtered__) {
                var t = new wn(this);
                (t.__dir__ = -1), (t.__filtered__ = !0);
              } else (t = this.clone()).__dir__ *= -1;
              return t;
            }),
            (wn.prototype.value = function() {
              var t = this.__wrapped__.value(),
                e = this.__dir__,
                i = Ma(t),
                n = e < 0,
                r = i ? t.length : 0,
                o = (function(t, e, i) {
                  for (var n = -1, r = i.length; ++n < r; ) {
                    var o = i[n],
                      s = o.size;
                    switch (o.type) {
                      case 'drop':
                        t += s;
                        break;
                      case 'dropRight':
                        e -= s;
                        break;
                      case 'take':
                        e = Wi(e, t + s);
                        break;
                      case 'takeRight':
                        t = Qi(t, e - s);
                    }
                  }
                  return { start: t, end: e };
                })(0, r, this.__views__),
                s = o.start,
                a = o.end,
                c = a - s,
                l = n ? a : s - 1,
                u = this.__iteratees__,
                h = u.length,
                d = 0,
                p = Wi(c, this.__takeCount__);
              if (!i || (!n && r == c && p == c))
                return Vr(t, this.__actions__);
              var f = [];
              t: for (; c-- && d < p; ) {
                for (var m = -1, g = t[(l += e)]; ++m < h; ) {
                  var v = u[m],
                    y = v.iteratee,
                    w = v.type,
                    M = y(g);
                  if (w == I) g = M;
                  else if (!M) {
                    if (w == _) continue t;
                    break t;
                  }
                }
                f[d++] = g;
              }
              return f;
            }),
            (mn.prototype.at = Gs),
            (mn.prototype.chain = function() {
              return Hs(this);
            }),
            (mn.prototype.commit = function() {
              return new yn(this.value(), this.__chain__);
            }),
            (mn.prototype.next = function() {
              this.__values__ === o && (this.__values__ = Ha(this.value()));
              var t = this.__index__ >= this.__values__.length;
              return {
                done: t,
                value: t ? o : this.__values__[this.__index__++]
              };
            }),
            (mn.prototype.plant = function(t) {
              for (var e, i = this; i instanceof vn; ) {
                var n = ms(i);
                (n.__index__ = 0),
                  (n.__values__ = o),
                  e ? (r.__wrapped__ = n) : (e = n);
                var r = n;
                i = i.__wrapped__;
              }
              return (r.__wrapped__ = t), e;
            }),
            (mn.prototype.reverse = function() {
              var t = this.__wrapped__;
              if (t instanceof wn) {
                var e = t;
                return (
                  this.__actions__.length && (e = new wn(this)),
                  (e = e.reverse()).__actions__.push({
                    func: Vs,
                    args: [Cs],
                    thisArg: o
                  }),
                  new yn(e, this.__chain__)
                );
              }
              return this.thru(Cs);
            }),
            (mn.prototype.toJSON = mn.prototype.valueOf = mn.prototype.value = function() {
              return Vr(this.__wrapped__, this.__actions__);
            }),
            (mn.prototype.first = mn.prototype.head),
            ke &&
              (mn.prototype[ke] = function() {
                return this;
              }),
            mn
          );
        })();
        (Pe._ = Ui),
          (r = function() {
            return Ui;
          }.call(e, i, e, n)) === o || (n.exports = r);
      }.call(this));
    }.call(e, i(16), i(40)(t)));
  }
]);
